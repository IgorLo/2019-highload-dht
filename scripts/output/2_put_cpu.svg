<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (4,429 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.02%)</title><rect x="10.0" y="1251.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="10.3" y="1251.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.3" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title><rect x="10.3" y="1235.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.3" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.3" y="1219.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.3" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.3" y="1203.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.3" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.07%)</title><rect x="10.5" y="1251.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.5" y="1262.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.07%)</title><rect x="10.5" y="1235.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.5" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.07%)</title><rect x="10.5" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.5" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.07%)</title><rect x="10.5" y="1203.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.5" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.07%)</title><rect x="10.5" y="1187.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.5" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="10.5" y="1171.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.5" y="1182.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.02%)</title><rect x="10.8" y="1155.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="1166.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.02%)</title><rect x="11.1" y="1171.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.1" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="11.3" y="1251.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.3" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="11.3" y="1235.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.3" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="11.3" y="1219.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.3" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="11.3" y="1203.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.3" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="11.3" y="1187.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.3" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="11.3" y="1171.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.3" y="1182.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.02%)</title><rect x="11.3" y="1155.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.3" y="1166.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.02%)</title><rect x="11.6" y="1235.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.6" y="1246.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (2 samples, 0.05%)</title><rect x="11.9" y="1251.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.9" y="1262.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame(JavaThread*, long*) (1 samples, 0.02%)</title><rect x="11.9" y="1235.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.9" y="1246.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="11.9" y="1219.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.9" y="1230.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize(JavaThread*, frame, RegisterMap*, Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="11.9" y="1203.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.9" y="1214.0"></text>
</g>
<g>
<title>Deoptimization::revoke_biases_of_monitors(JavaThread*, frame, RegisterMap*) (1 samples, 0.02%)</title><rect x="11.9" y="1187.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.9" y="1198.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.02%)</title><rect x="11.9" y="1171.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.9" y="1182.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="11.9" y="1155.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.9" y="1166.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="12.1" y="1235.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.1" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (48 samples, 1.08%)</title><rect x="12.4" y="1251.0" width="12.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.4" y="1262.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="12.4" y="1235.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="15.4" y="1246.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (46 samples, 1.04%)</title><rect x="12.7" y="1235.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.7" y="1246.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (19 samples, 0.43%)</title><rect x="13.7" y="1219.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.7" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (11 samples, 0.25%)</title><rect x="14.5" y="1203.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.5" y="1214.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.02%)</title><rect x="17.5" y="1203.0" width="0.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="20.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="17.5" y="1187.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="20.5" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="17.5" y="1171.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="20.5" y="1182.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (3 samples, 0.07%)</title><rect x="17.7" y="1203.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="20.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="18.3" y="1187.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="21.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="18.3" y="1171.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="21.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="18.3" y="1155.0" width="0.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="21.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="18.3" y="1139.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="21.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="18.3" y="1123.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="21.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="18.3" y="1107.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="21.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="18.3" y="1091.0" width="0.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="21.3" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.02%)</title><rect x="18.5" y="1203.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="21.5" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (21 samples, 0.47%)</title><rect x="18.8" y="1219.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="21.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="24.1" y="1203.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="27.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="24.1" y="1187.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="27.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="24.1" y="1171.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="27.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="24.1" y="1155.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="27.1" y="1166.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="24.4" y="1219.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="27.4" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="24.4" y="1203.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="27.4" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="24.4" y="1187.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="27.4" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="24.4" y="1171.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="27.4" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="24.7" y="1219.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="27.7" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="24.9" y="1235.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="27.9" y="1246.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.05%)</title><rect x="25.2" y="1251.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="28.2" y="1262.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.07%)</title><rect x="25.7" y="1251.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="28.7" y="1262.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.05%)</title><rect x="25.7" y="1235.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="28.7" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="26.3" y="1235.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="29.3" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.02%)</title><rect x="26.3" y="1219.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="29.3" y="1230.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="26.3" y="1203.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="29.3" y="1214.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="26.3" y="1187.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="29.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1251.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="29.5" y="1262.0"></text>
</g>
<g>
<title>__GI___open64 (1 samples, 0.02%)</title><rect x="26.5" y="1235.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="29.5" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1219.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="29.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1203.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1187.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="29.5" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1171.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="29.5" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1155.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="29.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1139.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="29.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1123.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="29.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1107.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="29.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1091.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="29.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="26.5" y="1075.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="29.5" y="1086.0"></text>
</g>
<g>
<title>[unknown_Java] (27 samples, 0.61%)</title><rect x="26.8" y="1251.0" width="7.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="29.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="29.7" y="1235.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="32.7" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="29.7" y="1219.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="32.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="30.0" y="1219.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="33.0" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="30.0" y="1203.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="33.0" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.11%)</title><rect x="30.2" y="1235.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="33.2" y="1246.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (9 samples, 0.20%)</title><rect x="31.6" y="1235.0" width="2.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="34.6" y="1246.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="31.6" y="1219.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="34.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="31.6" y="1203.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="34.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="31.6" y="1187.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="34.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="31.6" y="1171.0" width="2.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="34.6" y="1182.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.18%)</title><rect x="31.8" y="1155.0" width="2.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="34.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.16%)</title><rect x="32.1" y="1139.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="35.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.16%)</title><rect x="32.1" y="1123.0" width="1.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="35.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.16%)</title><rect x="32.1" y="1107.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="35.1" y="1118.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 0.36%)</title><rect x="34.0" y="1251.0" width="4.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="37.0" y="1262.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.32%)</title><rect x="34.5" y="1235.0" width="3.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="37.5" y="1246.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.32%)</title><rect x="34.5" y="1219.0" width="3.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="37.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.27%)</title><rect x="35.0" y="1203.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="38.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.25%)</title><rect x="35.3" y="1187.0" width="2.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="38.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.25%)</title><rect x="35.3" y="1171.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="38.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="35.6" y="1155.0" width="2.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="38.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.16%)</title><rect x="36.4" y="1139.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="39.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.16%)</title><rect x="36.4" y="1123.0" width="1.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="39.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="37.7" y="1107.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="40.7" y="1118.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="38.2" y="1251.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="41.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,418 samples, 54.59%)</title><rect x="38.5" y="1251.0" width="644.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.5" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,418 samples, 54.59%)</title><rect x="38.5" y="1235.0" width="644.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.5" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,418 samples, 54.59%)</title><rect x="38.5" y="1219.0" width="644.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.5" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (5 samples, 0.11%)</title><rect x="39.6" y="1203.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.11%)</title><rect x="39.6" y="1187.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (5 samples, 0.11%)</title><rect x="39.6" y="1171.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.11%)</title><rect x="39.6" y="1155.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.11%)</title><rect x="39.6" y="1139.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.11%)</title><rect x="39.6" y="1123.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.14%)</title><rect x="40.9" y="1203.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.14%)</title><rect x="40.9" y="1187.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (4 samples, 0.09%)</title><rect x="41.4" y="1171.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (4 samples, 0.09%)</title><rect x="41.4" y="1155.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (537 samples, 12.12%)</title><rect x="42.5" y="1203.0" width="143.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.5" y="1214.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (533 samples, 12.03%)</title><rect x="43.6" y="1187.0" width="142.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.6" y="1198.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (378 samples, 8.53%)</title><rect x="44.1" y="1171.0" width="100.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.1" y="1182.0">java/util/co..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (13 samples, 0.29%)</title><rect x="44.9" y="1155.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="47.8" y="1139.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="50.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="47.8" y="1123.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="50.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="47.8" y="1107.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="50.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="47.8" y="1091.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="50.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="47.8" y="1075.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="50.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="47.8" y="1059.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="50.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="47.8" y="1043.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="50.8" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="48.1" y="1139.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.02%)</title><rect x="48.4" y="1155.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.02%)</title><rect x="48.6" y="1155.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="48.6" y="1139.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (26 samples, 0.59%)</title><rect x="48.9" y="1155.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.07%)</title><rect x="50.5" y="1139.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.07%)</title><rect x="50.5" y="1123.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.5" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="50.8" y="1107.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.8" y="1118.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="50.8" y="1091.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="53.8" y="1102.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.02%)</title><rect x="50.8" y="1075.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="53.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="51.0" y="1091.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="54.0" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="51.0" y="1075.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="54.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.05%)</title><rect x="51.3" y="1139.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (15 samples, 0.34%)</title><rect x="51.8" y="1139.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (15 samples, 0.34%)</title><rect x="51.8" y="1123.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (3 samples, 0.07%)</title><rect x="53.7" y="1107.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.11%)</title><rect x="54.5" y="1107.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.11%)</title><rect x="54.5" y="1091.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.11%)</title><rect x="54.5" y="1075.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (23 samples, 0.52%)</title><rect x="55.8" y="1155.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.52%)</title><rect x="55.8" y="1139.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 0.45%)</title><rect x="56.1" y="1123.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 0.45%)</title><rect x="56.1" y="1107.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="59.1" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 0.45%)</title><rect x="56.1" y="1091.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.1" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.07%)</title><rect x="56.1" y="1075.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="59.1" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="56.4" y="1059.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="59.4" y="1070.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="56.6" y="1059.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="59.6" y="1070.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (17 samples, 0.38%)</title><rect x="56.9" y="1075.0" width="4.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="59.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.38%)</title><rect x="56.9" y="1059.0" width="4.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="59.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.38%)</title><rect x="56.9" y="1043.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="59.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.32%)</title><rect x="57.7" y="1027.0" width="3.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="60.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.32%)</title><rect x="57.7" y="1011.0" width="3.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="60.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.32%)</title><rect x="57.7" y="995.0" width="3.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="60.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.29%)</title><rect x="58.0" y="979.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="61.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.29%)</title><rect x="58.0" y="963.0" width="3.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="61.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.29%)</title><rect x="58.0" y="947.0" width="3.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="61.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.05%)</title><rect x="61.4" y="1123.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (311 samples, 7.02%)</title><rect x="62.0" y="1155.0" width="82.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.0" y="1166.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (311 samples, 7.02%)</title><rect x="62.0" y="1139.0" width="82.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.0" y="1150.0">jdk/inter..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="64.1" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="67.1" y="1134.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="64.6" y="1123.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="67.6" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.05%)</title><rect x="64.9" y="1123.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="67.9" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (6 samples, 0.14%)</title><rect x="65.4" y="1123.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="68.4" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Park (145 samples, 3.27%)</title><rect x="67.0" y="1123.0" width="38.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="70.0" y="1134.0">Uns..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="69.7" y="1107.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="72.7" y="1118.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="69.9" y="1107.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="72.9" y="1118.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.05%)</title><rect x="70.2" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="73.2" y="1118.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (38 samples, 0.86%)</title><rect x="70.7" y="1107.0" width="10.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="73.7" y="1118.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="76.3" y="1091.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="79.3" y="1102.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.09%)</title><rect x="76.6" y="1091.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="79.6" y="1102.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="77.4" y="1075.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="80.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.7" y="1091.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="80.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.7" y="1075.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="80.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.7" y="1059.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="80.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.7" y="1043.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="80.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.7" y="1027.0" width="0.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="80.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.7" y="1011.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="80.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="77.7" y="995.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="80.7" y="1006.0"></text>
</g>
<g>
<title>__tls_get_addr (10 samples, 0.23%)</title><rect x="77.9" y="1091.0" width="2.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="80.9" y="1102.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="80.6" y="1091.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="83.6" y="1102.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="80.9" y="1107.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="83.9" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (6 samples, 0.14%)</title><rect x="81.1" y="1107.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="84.1" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (5 samples, 0.11%)</title><rect x="82.7" y="1107.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="85.7" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (50 samples, 1.13%)</title><rect x="84.1" y="1107.0" width="13.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="87.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 0.99%)</title><rect x="85.7" y="1091.0" width="11.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="88.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 0.99%)</title><rect x="85.7" y="1075.0" width="11.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="88.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.36%)</title><rect x="93.1" y="1059.0" width="4.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="96.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.32%)</title><rect x="93.7" y="1043.0" width="3.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="96.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.29%)</title><rect x="93.9" y="1027.0" width="3.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="96.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.18%)</title><rect x="95.3" y="1011.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="98.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="96.1" y="995.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="99.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="97.1" y="979.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="100.1" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="97.1" y="963.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="100.1" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 0.11%)</title><rect x="97.4" y="1107.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="100.4" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.09%)</title><rect x="98.7" y="1107.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="101.7" y="1118.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.11%)</title><rect x="99.8" y="1107.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="102.8" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="101.1" y="1107.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="104.1" y="1118.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.07%)</title><rect x="101.4" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="104.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="101.9" y="1091.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="104.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="101.9" y="1075.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="104.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="101.9" y="1059.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="104.9" y="1070.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (13 samples, 0.29%)</title><rect x="102.2" y="1107.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="105.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (142 samples, 3.21%)</title><rect x="105.6" y="1123.0" width="37.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="108.6" y="1134.0">[un..</text>
</g>
<g>
<title>__pthread_cleanup_pop (3 samples, 0.07%)</title><rect x="105.6" y="1107.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="108.6" y="1118.0"></text>
</g>
<g>
<title>__pthread_cond_wait (111 samples, 2.51%)</title><rect x="106.4" y="1107.0" width="29.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="109.4" y="1118.0">__..</text>
</g>
<g>
<title>[unknown] (73 samples, 1.65%)</title><rect x="116.6" y="1091.0" width="19.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="119.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (73 samples, 1.65%)</title><rect x="116.6" y="1075.0" width="19.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="119.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (63 samples, 1.42%)</title><rect x="119.2" y="1059.0" width="16.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="122.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (63 samples, 1.42%)</title><rect x="119.2" y="1043.0" width="16.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="122.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (59 samples, 1.33%)</title><rect x="120.3" y="1027.0" width="15.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="123.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 1.20%)</title><rect x="121.9" y="1011.0" width="14.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="124.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.79%)</title><rect x="126.7" y="995.0" width="9.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="129.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.65%)</title><rect x="128.3" y="979.0" width="7.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="131.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.61%)</title><rect x="128.8" y="963.0" width="7.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="131.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="135.2" y="947.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="138.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="135.2" y="931.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="138.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="135.2" y="915.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="138.2" y="926.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="135.2" y="899.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="138.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="135.2" y="883.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="138.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="135.2" y="867.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="138.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="135.2" y="851.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="138.2" y="862.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.11%)</title><rect x="136.0" y="1107.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="139.0" y="1118.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="137.4" y="1107.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="140.4" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (15 samples, 0.34%)</title><rect x="137.9" y="1107.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="140.9" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.09%)</title><rect x="141.9" y="1107.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="144.9" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.05%)</title><rect x="142.9" y="1107.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="145.9" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="143.5" y="1123.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="146.5" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.09%)</title><rect x="143.7" y="1123.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="146.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (52 samples, 1.17%)</title><rect x="144.8" y="1171.0" width="13.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (50 samples, 1.13%)</title><rect x="145.3" y="1155.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="145.9" y="1139.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="148.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (31 samples, 0.70%)</title><rect x="146.1" y="1139.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (13 samples, 0.29%)</title><rect x="147.2" y="1123.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.29%)</title><rect x="147.2" y="1107.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="150.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (12 samples, 0.27%)</title><rect x="147.2" y="1091.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.1" y="1075.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="153.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.1" y="1059.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="153.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.1" y="1043.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="153.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.1" y="1027.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="153.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.1" y="1011.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="153.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.1" y="995.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="153.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.1" y="979.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="153.1" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="150.4" y="1091.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="1075.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="153.4" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="150.4" y="1059.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="153.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="1043.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="153.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="1027.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="153.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="1011.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="153.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="995.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="153.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="979.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="153.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="963.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="153.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="947.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="153.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="931.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="153.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="150.4" y="915.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="153.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (14 samples, 0.32%)</title><rect x="150.7" y="1123.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="153.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (16 samples, 0.36%)</title><rect x="154.4" y="1139.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (16 samples, 0.36%)</title><rect x="154.4" y="1123.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="157.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (7 samples, 0.16%)</title><rect x="156.3" y="1107.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.05%)</title><rect x="158.1" y="1107.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="161.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.05%)</title><rect x="158.1" y="1091.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="161.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.05%)</title><rect x="158.1" y="1075.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="158.4" y="1059.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="161.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="158.4" y="1043.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="161.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="158.4" y="1027.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="161.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (101 samples, 2.28%)</title><rect x="158.7" y="1171.0" width="26.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.7" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (101 samples, 2.28%)</title><rect x="158.7" y="1155.0" width="26.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.7" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (101 samples, 2.28%)</title><rect x="158.7" y="1139.0" width="26.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.7" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (101 samples, 2.28%)</title><rect x="158.7" y="1123.0" width="26.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.7" y="1134.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (101 samples, 2.28%)</title><rect x="158.7" y="1107.0" width="26.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.7" y="1118.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.02%)</title><rect x="160.8" y="1091.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="163.8" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Unpark (15 samples, 0.34%)</title><rect x="161.1" y="1091.0" width="4.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="164.1" y="1102.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="161.3" y="1075.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="164.3" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.02%)</title><rect x="161.6" y="1075.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="164.6" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.05%)</title><rect x="161.9" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="164.9" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="162.4" y="1075.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="165.4" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="162.7" y="1075.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="165.7" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.11%)</title><rect x="162.9" y="1075.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="165.9" y="1086.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="164.3" y="1075.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="167.3" y="1086.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="164.5" y="1075.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="167.5" y="1086.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (77 samples, 1.74%)</title><rect x="165.1" y="1091.0" width="20.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="168.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.56%)</title><rect x="167.2" y="1075.0" width="18.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="170.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.56%)</title><rect x="167.2" y="1059.0" width="18.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="170.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.47%)</title><rect x="168.3" y="1043.0" width="17.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="171.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.47%)</title><rect x="168.3" y="1027.0" width="17.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="171.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 1.45%)</title><rect x="168.5" y="1011.0" width="17.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="171.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 1.38%)</title><rect x="169.3" y="995.0" width="16.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="172.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.24%)</title><rect x="170.9" y="979.0" width="14.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="173.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.15%)</title><rect x="172.0" y="963.0" width="13.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="175.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="185.3" y="947.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="188.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="185.3" y="931.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="188.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="185.3" y="915.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="188.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="185.3" y="899.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="188.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$FlushingTask.run (118 samples, 2.66%)</title><rect x="185.6" y="1203.0" width="31.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.6" y="1214.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.flushAndLoad (118 samples, 2.66%)</title><rect x="185.6" y="1187.0" width="31.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.6" y="1198.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.flush (118 samples, 2.66%)</title><rect x="185.6" y="1171.0" width="31.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.6" y="1182.0">ru..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="189.3" y="1155.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.3" y="1166.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.02%)</title><rect x="189.6" y="1155.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.6" y="1166.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.02%)</title><rect x="189.8" y="1155.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.8" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="189.8" y="1139.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.8" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.02%)</title><rect x="189.8" y="1123.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="192.8" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="189.8" y="1107.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="192.8" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.02%)</title><rect x="189.8" y="1091.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="192.8" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="189.8" y="1075.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="192.8" y="1086.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="189.8" y="1059.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="192.8" y="1070.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.02%)</title><rect x="189.8" y="1043.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="192.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (5 samples, 0.11%)</title><rect x="190.1" y="1155.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.1" y="1166.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="191.2" y="1139.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="194.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.02%)</title><rect x="191.4" y="1155.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.4" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.byteOffset (1 samples, 0.02%)</title><rect x="191.4" y="1139.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.4" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.05%)</title><rect x="191.7" y="1155.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.7" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.05%)</title><rect x="192.2" y="1155.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.2" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.05%)</title><rect x="192.2" y="1139.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.2" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="192.5" y="1123.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.5" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="192.5" y="1107.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.05%)</title><rect x="192.8" y="1155.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.05%)</title><rect x="192.8" y="1139.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.05%)</title><rect x="192.8" y="1123.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="195.8" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (4 samples, 0.09%)</title><rect x="193.3" y="1155.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.3" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.07%)</title><rect x="193.6" y="1139.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.6" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="194.1" y="1123.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.1" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="194.1" y="1107.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="197.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="194.1" y="1091.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.1" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getSizeOfFlushedRow (1 samples, 0.02%)</title><rect x="194.4" y="1155.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.4" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getValue (1 samples, 0.02%)</title><rect x="194.6" y="1155.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="197.6" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (2 samples, 0.05%)</title><rect x="194.9" y="1155.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.9" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="194.9" y="1139.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="197.9" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="195.2" y="1123.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="195.2" y="1107.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.2" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="195.2" y="1091.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.2" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.isDead (1 samples, 0.02%)</title><rect x="195.4" y="1155.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="198.4" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (80 samples, 1.81%)</title><rect x="195.7" y="1155.0" width="21.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.7" y="1166.0">s..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.02%)</title><rect x="196.2" y="1139.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.02%)</title><rect x="196.5" y="1139.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.5" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (8 samples, 0.18%)</title><rect x="196.8" y="1139.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (8 samples, 0.18%)</title><rect x="196.8" y="1123.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (7 samples, 0.16%)</title><rect x="196.8" y="1107.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (6 samples, 0.14%)</title><rect x="197.0" y="1091.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="200.0" y="1102.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (6 samples, 0.14%)</title><rect x="197.0" y="1075.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="200.0" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="197.3" y="1059.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="200.3" y="1070.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="197.6" y="1059.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="200.6" y="1070.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.07%)</title><rect x="197.8" y="1059.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="200.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="198.6" y="1107.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.6" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (1 samples, 0.02%)</title><rect x="198.6" y="1091.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.6" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (3 samples, 0.07%)</title><rect x="198.9" y="1139.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.9" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.07%)</title><rect x="198.9" y="1123.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="201.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="199.2" y="1107.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="202.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="199.2" y="1091.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="199.2" y="1075.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.currentThread (1 samples, 0.02%)</title><rect x="199.4" y="1059.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.4" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (1 samples, 0.02%)</title><rect x="199.7" y="1139.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.7" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.02%)</title><rect x="199.7" y="1123.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.7" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (60 samples, 1.35%)</title><rect x="200.0" y="1139.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.0" y="1150.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.02%)</title><rect x="200.2" y="1123.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.02%)</title><rect x="200.2" y="1107.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.2" y="1118.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="200.2" y="1091.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="200.2" y="1075.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="200.2" y="1059.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.02%)</title><rect x="200.5" y="1123.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="203.5" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (55 samples, 1.24%)</title><rect x="200.8" y="1123.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.8" y="1134.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="201.3" y="1107.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.address (1 samples, 0.02%)</title><rect x="201.6" y="1107.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.6" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (51 samples, 1.15%)</title><rect x="201.8" y="1107.0" width="13.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.8" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (51 samples, 1.15%)</title><rect x="201.8" y="1091.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.8" y="1102.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.02%)</title><rect x="202.1" y="1075.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="205.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.08%)</title><rect x="202.4" y="1075.0" width="12.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="205.4" y="1086.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="202.4" y="1059.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="205.4" y="1070.0"></text>
</g>
<g>
<title>__write (47 samples, 1.06%)</title><rect x="202.6" y="1059.0" width="12.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="205.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.02%)</title><rect x="203.2" y="1043.0" width="11.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="206.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.02%)</title><rect x="203.2" y="1027.0" width="11.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="206.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.93%)</title><rect x="204.2" y="1011.0" width="10.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="207.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.93%)</title><rect x="204.2" y="995.0" width="10.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="207.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.93%)</title><rect x="204.2" y="979.0" width="10.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="207.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.88%)</title><rect x="204.8" y="963.0" width="10.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="207.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.86%)</title><rect x="205.0" y="947.0" width="10.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="208.0" y="958.0"></text>
</g>
<g>
<title>[unknown] (37 samples, 0.84%)</title><rect x="205.3" y="931.0" width="9.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="208.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.79%)</title><rect x="205.8" y="915.0" width="9.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="208.8" y="926.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.72%)</title><rect x="206.6" y="899.0" width="8.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="209.6" y="910.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.68%)</title><rect x="207.2" y="883.0" width="7.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="210.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.63%)</title><rect x="207.7" y="867.0" width="7.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="210.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.56%)</title><rect x="208.5" y="851.0" width="6.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="211.5" y="862.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.50%)</title><rect x="209.3" y="835.0" width="5.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="212.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.45%)</title><rect x="209.8" y="819.0" width="5.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="212.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.41%)</title><rect x="210.4" y="803.0" width="4.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="213.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.36%)</title><rect x="210.9" y="787.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="213.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.32%)</title><rect x="211.4" y="771.0" width="3.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="214.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.18%)</title><rect x="213.0" y="755.0" width="2.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="216.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.14%)</title><rect x="213.5" y="739.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="216.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="213.8" y="723.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="216.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="213.8" y="707.0" width="1.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="216.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="214.1" y="691.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="217.1" y="702.0"></text>
</g>
<g>
<title>__write (1 samples, 0.02%)</title><rect x="215.1" y="1075.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="218.1" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.02%)</title><rect x="215.4" y="1123.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.4" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.02%)</title><rect x="215.7" y="1123.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="218.7" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.02%)</title><rect x="215.7" y="1107.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.7" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.05%)</title><rect x="215.9" y="1139.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.9" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.05%)</title><rect x="216.5" y="1139.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.5" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.run (1,748 samples, 39.47%)</title><rect x="217.0" y="1203.0" width="465.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.0" y="1214.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256...</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (1,746 samples, 39.42%)</title><rect x="217.5" y="1187.0" width="465.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.5" y="1198.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,458 samples, 32.92%)</title><rect x="217.5" y="1171.0" width="388.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.5" y="1182.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (14 samples, 0.32%)</title><rect x="219.7" y="1155.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.09%)</title><rect x="222.3" y="1139.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.09%)</title><rect x="222.3" y="1123.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.09%)</title><rect x="222.3" y="1107.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.09%)</title><rect x="222.3" y="1091.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (4 samples, 0.09%)</title><rect x="222.3" y="1075.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (3 samples, 0.07%)</title><rect x="222.6" y="1059.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.6" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,362 samples, 30.75%)</title><rect x="223.4" y="1155.0" width="362.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.4" y="1166.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (41 samples, 0.93%)</title><rect x="223.4" y="1139.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.4" y="1150.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="224.5" y="1123.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="227.5" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.05%)</title><rect x="225.0" y="1123.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.0" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (33 samples, 0.75%)</title><rect x="225.5" y="1123.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.5" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.09%)</title><rect x="226.1" y="1107.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.1" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.05%)</title><rect x="226.6" y="1091.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.6" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.02%)</title><rect x="227.1" y="1107.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.1" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (14 samples, 0.32%)</title><rect x="227.4" y="1107.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.07%)</title><rect x="230.1" y="1091.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.07%)</title><rect x="230.1" y="1075.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="230.9" y="1091.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.9" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.27%)</title><rect x="231.1" y="1107.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.1" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.27%)</title><rect x="231.1" y="1091.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="232.5" y="1075.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="235.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="232.5" y="1059.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="235.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="232.5" y="1043.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="235.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.07%)</title><rect x="232.7" y="1075.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.07%)</title><rect x="232.7" y="1059.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.7" y="1070.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (3 samples, 0.07%)</title><rect x="233.5" y="1075.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.5" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,321 samples, 29.83%)</title><rect x="234.3" y="1139.0" width="352.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.3" y="1150.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,321 samples, 29.83%)</title><rect x="234.3" y="1123.0" width="352.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.3" y="1134.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,321 samples, 29.83%)</title><rect x="234.3" y="1107.0" width="352.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.3" y="1118.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,321 samples, 29.83%)</title><rect x="234.3" y="1091.0" width="352.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.3" y="1102.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.07%)</title><rect x="241.0" y="1075.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="244.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 1.26%)</title><rect x="241.8" y="1075.0" width="14.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="244.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 1.26%)</title><rect x="241.8" y="1059.0" width="14.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="244.8" y="1070.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (43 samples, 0.97%)</title><rect x="241.8" y="1043.0" width="11.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="244.8" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="243.1" y="1027.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="246.1" y="1038.0"></text>
</g>
<g>
<title>__memmove_ssse3 (10 samples, 0.23%)</title><rect x="243.4" y="1027.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="246.4" y="1038.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (24 samples, 0.54%)</title><rect x="246.1" y="1027.0" width="6.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="249.1" y="1038.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="247.1" y="1011.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="250.1" y="1022.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.09%)</title><rect x="247.7" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="250.7" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (3 samples, 0.07%)</title><rect x="248.7" y="1011.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="251.7" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (7 samples, 0.16%)</title><rect x="249.5" y="1011.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="252.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="251.1" y="995.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="254.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="251.1" y="979.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="254.1" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="251.1" y="963.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="254.1" y="974.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.09%)</title><rect x="251.4" y="1011.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="254.4" y="1022.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.07%)</title><rect x="252.4" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="255.4" y="1038.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="253.2" y="1043.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="256.2" y="1054.0"></text>
</g>
<g>
<title>__send (10 samples, 0.23%)</title><rect x="253.8" y="1043.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="256.8" y="1054.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.02%)</title><rect x="256.4" y="1043.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="259.4" y="1054.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="256.7" y="1075.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="259.7" y="1086.0"></text>
</g>
<g>
<title>__send (1,236 samples, 27.91%)</title><rect x="257.0" y="1075.0" width="329.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="260.0" y="1086.0">__send</text>
</g>
<g>
<title>[unknown] (1,220 samples, 27.55%)</title><rect x="261.2" y="1059.0" width="325.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="264.2" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,220 samples, 27.55%)</title><rect x="261.2" y="1043.0" width="325.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="264.2" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,197 samples, 27.03%)</title><rect x="267.4" y="1027.0" width="318.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="270.4" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,193 samples, 26.94%)</title><rect x="268.4" y="1011.0" width="317.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="271.4" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,183 samples, 26.71%)</title><rect x="271.1" y="995.0" width="315.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="274.1" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,172 samples, 26.46%)</title><rect x="274.0" y="979.0" width="312.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="277.0" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,166 samples, 26.33%)</title><rect x="275.6" y="963.0" width="310.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="278.6" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,159 samples, 26.17%)</title><rect x="277.5" y="947.0" width="308.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="280.5" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,093 samples, 24.68%)</title><rect x="295.1" y="931.0" width="291.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="298.1" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,037 samples, 23.41%)</title><rect x="310.0" y="915.0" width="276.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="313.0" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (993 samples, 22.42%)</title><rect x="321.7" y="899.0" width="264.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="324.7" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (934 samples, 21.09%)</title><rect x="337.4" y="883.0" width="248.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="340.4" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (846 samples, 19.10%)</title><rect x="360.9" y="867.0" width="225.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="363.9" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (827 samples, 18.67%)</title><rect x="365.9" y="851.0" width="220.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="368.9" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (795 samples, 17.95%)</title><rect x="374.5" y="835.0" width="211.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="377.5" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (783 samples, 17.68%)</title><rect x="377.7" y="819.0" width="208.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="380.7" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (765 samples, 17.27%)</title><rect x="382.5" y="803.0" width="203.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="385.5" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (731 samples, 16.50%)</title><rect x="391.5" y="787.0" width="194.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="394.5" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (701 samples, 15.83%)</title><rect x="399.5" y="771.0" width="186.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="402.5" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (647 samples, 14.61%)</title><rect x="413.9" y="755.0" width="172.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="416.9" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (570 samples, 12.87%)</title><rect x="434.4" y="739.0" width="151.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="437.4" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (526 samples, 11.88%)</title><rect x="446.1" y="723.0" width="140.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="449.1" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (502 samples, 11.33%)</title><rect x="452.5" y="707.0" width="133.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="455.5" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (487 samples, 11.00%)</title><rect x="456.5" y="691.0" width="129.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="459.5" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (474 samples, 10.70%)</title><rect x="460.0" y="675.0" width="126.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="463.0" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (463 samples, 10.45%)</title><rect x="462.9" y="659.0" width="123.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="465.9" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (459 samples, 10.36%)</title><rect x="464.0" y="643.0" width="122.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="467.0" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (444 samples, 10.02%)</title><rect x="468.0" y="627.0" width="118.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="471.0" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (422 samples, 9.53%)</title><rect x="473.8" y="611.0" width="112.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="476.8" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (415 samples, 9.37%)</title><rect x="475.7" y="595.0" width="110.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="478.7" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (411 samples, 9.28%)</title><rect x="476.8" y="579.0" width="109.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="479.8" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (402 samples, 9.08%)</title><rect x="479.2" y="563.0" width="107.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="482.2" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (373 samples, 8.42%)</title><rect x="486.9" y="547.0" width="99.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="489.9" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (343 samples, 7.74%)</title><rect x="494.9" y="531.0" width="91.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="497.9" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (323 samples, 7.29%)</title><rect x="500.2" y="515.0" width="86.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="503.2" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (268 samples, 6.05%)</title><rect x="514.9" y="499.0" width="71.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="517.9" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (207 samples, 4.67%)</title><rect x="531.1" y="483.0" width="55.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="534.1" y="494.0">[unkn..</text>
</g>
<g>
<title>[unknown] (185 samples, 4.18%)</title><rect x="537.0" y="467.0" width="49.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="540.0" y="478.0">[unkn..</text>
</g>
<g>
<title>[unknown] (179 samples, 4.04%)</title><rect x="538.6" y="451.0" width="47.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="541.6" y="462.0">[unk..</text>
</g>
<g>
<title>[unknown] (24 samples, 0.54%)</title><rect x="579.9" y="435.0" width="6.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="582.9" y="446.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.41%)</title><rect x="581.5" y="419.0" width="4.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="584.5" y="430.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.29%)</title><rect x="582.8" y="403.0" width="3.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="585.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (60 samples, 1.35%)</title><rect x="586.3" y="1155.0" width="16.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="589.3" y="1166.0"></text>
</g>
<g>
<title>gettimeofday (13 samples, 0.29%)</title><rect x="587.6" y="1139.0" width="3.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="590.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (29 samples, 0.65%)</title><rect x="591.1" y="1139.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.07%)</title><rect x="592.1" y="1123.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="595.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.09%)</title><rect x="592.9" y="1123.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="595.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (15 samples, 0.34%)</title><rect x="594.0" y="1123.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="597.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (9 samples, 0.20%)</title><rect x="594.3" y="1107.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (9 samples, 0.20%)</title><rect x="594.3" y="1091.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="597.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (9 samples, 0.20%)</title><rect x="594.3" y="1075.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="597.3" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.02%)</title><rect x="595.3" y="1059.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="598.3" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (4 samples, 0.09%)</title><rect x="595.6" y="1059.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="598.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.11%)</title><rect x="596.7" y="1107.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="599.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.09%)</title><rect x="596.9" y="1091.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="599.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.05%)</title><rect x="596.9" y="1075.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="599.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.05%)</title><rect x="597.5" y="1075.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="600.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.02%)</title><rect x="597.7" y="1059.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="600.7" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (3 samples, 0.07%)</title><rect x="598.0" y="1123.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="601.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.18%)</title><rect x="598.8" y="1139.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="601.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.18%)</title><rect x="598.8" y="1123.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="601.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="599.9" y="1107.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="602.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="600.4" y="1107.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="603.4" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.11%)</title><rect x="600.9" y="1139.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="603.9" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="601.5" y="1123.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="604.5" y="1134.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="601.7" y="1123.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="604.7" y="1134.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="601.7" y="1107.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="604.7" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (13 samples, 0.29%)</title><rect x="602.3" y="1155.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="605.3" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="605.5" y="1139.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="608.5" y="1150.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.02%)</title><rect x="605.5" y="1123.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="608.5" y="1134.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.02%)</title><rect x="605.7" y="1155.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.02%)</title><rect x="605.7" y="1139.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="608.7" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.action (1 samples, 0.02%)</title><rect x="606.0" y="1171.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.0" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0 (1 samples, 0.02%)</title><rect x="606.0" y="1155.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.0" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$76/721413497.action (287 samples, 6.48%)</title><rect x="606.3" y="1171.0" width="76.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.3" y="1182.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$1 (284 samples, 6.41%)</title><rect x="607.1" y="1155.0" width="75.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.1" y="1166.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (284 samples, 6.41%)</title><rect x="607.1" y="1139.0" width="75.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.1" y="1150.0">ru/mail/..</text>
</g>
<g>
<title>gettimeofday (5 samples, 0.11%)</title><rect x="608.1" y="1123.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="611.1" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.23%)</title><rect x="609.5" y="1123.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.5" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.23%)</title><rect x="609.5" y="1107.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="612.5" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.20%)</title><rect x="609.7" y="1091.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="612.7" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.18%)</title><rect x="610.0" y="1075.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="613.0" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="611.6" y="1059.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="614.6" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="611.6" y="1043.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="614.6" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="611.6" y="1027.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="614.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="611.6" y="1011.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="611.9" y="1043.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="614.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="611.9" y="1027.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="614.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.02%)</title><rect x="611.9" y="1011.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="614.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.09%)</title><rect x="612.1" y="1123.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.05%)</title><rect x="612.1" y="1107.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="615.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.02%)</title><rect x="612.4" y="1091.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="615.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (1 samples, 0.02%)</title><rect x="612.4" y="1075.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.05%)</title><rect x="612.7" y="1107.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="615.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="612.7" y="1091.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="612.9" y="1075.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.9" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.14%)</title><rect x="613.2" y="1123.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="616.2" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="613.2" y="1107.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="616.2" y="1118.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.11%)</title><rect x="613.5" y="1107.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="616.5" y="1118.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.11%)</title><rect x="613.5" y="1091.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="616.5" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.upsert (255 samples, 5.76%)</title><rect x="614.8" y="1123.0" width="67.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="617.8" y="1134.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.upsert (255 samples, 5.76%)</title><rect x="614.8" y="1107.0" width="67.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.8" y="1118.0">ru/mail..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (4 samples, 0.09%)</title><rect x="614.8" y="1091.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="617.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (4 samples, 0.09%)</title><rect x="614.8" y="1075.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (3 samples, 0.07%)</title><rect x="615.1" y="1059.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.07%)</title><rect x="615.1" y="1043.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="618.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.07%)</title><rect x="615.1" y="1027.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="618.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.07%)</title><rect x="615.1" y="1011.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="618.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.02%)</title><rect x="615.3" y="995.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="618.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="615.6" y="995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="618.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (5 samples, 0.11%)</title><rect x="615.9" y="1091.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (5 samples, 0.11%)</title><rect x="615.9" y="1075.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="618.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (5 samples, 0.11%)</title><rect x="615.9" y="1059.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="618.9" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="616.7" y="1043.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="619.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="616.9" y="1027.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="619.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="616.9" y="1011.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="619.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="616.9" y="995.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="619.9" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.upsert (216 samples, 4.88%)</title><rect x="617.2" y="1091.0" width="57.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="620.2" y="1102.0">ru/mai..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="617.7" y="1075.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="620.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (210 samples, 4.74%)</title><rect x="618.0" y="1075.0" width="55.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="621.0" y="1086.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (210 samples, 4.74%)</title><rect x="618.0" y="1059.0" width="55.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="621.0" y="1070.0">java/..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (46 samples, 1.04%)</title><rect x="624.1" y="1043.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="627.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (10 samples, 0.23%)</title><rect x="633.7" y="1027.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="636.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (2 samples, 0.05%)</title><rect x="635.6" y="1011.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.02%)</title><rect x="636.1" y="1011.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="639.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (14 samples, 0.32%)</title><rect x="636.4" y="1043.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.4" y="1054.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.11%)</title><rect x="638.8" y="1027.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (2 samples, 0.05%)</title><rect x="640.1" y="1043.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="643.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (20 samples, 0.45%)</title><rect x="640.6" y="1043.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="640.9" y="1027.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="640.9" y="1011.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (5 samples, 0.11%)</title><rect x="641.2" y="1027.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="644.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (13 samples, 0.29%)</title><rect x="642.5" y="1027.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.27%)</title><rect x="642.8" y="1011.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.20%)</title><rect x="643.6" y="995.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="646.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.05%)</title><rect x="643.6" y="979.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.6" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.16%)</title><rect x="644.1" y="979.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="647.1" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.02%)</title><rect x="645.7" y="963.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (103 samples, 2.33%)</title><rect x="646.0" y="1043.0" width="27.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="649.0" y="1054.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (102 samples, 2.30%)</title><rect x="646.2" y="1027.0" width="27.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.2" y="1038.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (101 samples, 2.28%)</title><rect x="646.5" y="1011.0" width="26.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="649.5" y="1022.0">j..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="656.6" y="995.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="659.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="656.6" y="979.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="659.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="656.6" y="963.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="659.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="656.9" y="947.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="659.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="656.9" y="931.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="659.9" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="656.9" y="915.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="659.9" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (6 samples, 0.14%)</title><rect x="657.1" y="995.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (47 samples, 1.06%)</title><rect x="658.7" y="995.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="661.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (14 samples, 0.32%)</title><rect x="664.3" y="979.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.3" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.14%)</title><rect x="665.9" y="963.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="668.9" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.05%)</title><rect x="667.5" y="963.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="670.5" y="974.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (12 samples, 0.27%)</title><rect x="668.1" y="979.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="671.1" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (8 samples, 0.18%)</title><rect x="671.3" y="995.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.11%)</title><rect x="672.1" y="979.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (1 samples, 0.02%)</title><rect x="673.4" y="1043.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="676.4" y="1054.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="673.7" y="1043.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="676.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.7" y="1027.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="676.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.7" y="1011.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="676.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.7" y="995.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="676.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.7" y="979.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="676.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.7" y="963.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="676.7" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (3 samples, 0.07%)</title><rect x="673.9" y="1075.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="676.9" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.&lt;init&gt; (3 samples, 0.07%)</title><rect x="673.9" y="1059.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (3 samples, 0.07%)</title><rect x="673.9" y="1043.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="676.9" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (30 samples, 0.68%)</title><rect x="674.7" y="1091.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="674.7" y="1075.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (1 samples, 0.02%)</title><rect x="674.7" y="1059.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.&lt;init&gt; (1 samples, 0.02%)</title><rect x="674.7" y="1043.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DefaultThreadFactory.newThread (1 samples, 0.02%)</title><rect x="674.7" y="1027.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="677.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (1 samples, 0.02%)</title><rect x="674.7" y="1011.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (1 samples, 0.02%)</title><rect x="674.7" y="995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="677.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadGroup.addUnstarted (1 samples, 0.02%)</title><rect x="674.7" y="979.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.7" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (26 samples, 0.59%)</title><rect x="675.0" y="1075.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (4 samples, 0.09%)</title><rect x="675.0" y="1059.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.&lt;init&gt; (1 samples, 0.02%)</title><rect x="675.5" y="1043.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.5" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.02%)</title><rect x="675.5" y="1027.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="675.5" y="1011.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="678.5" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="675.8" y="1043.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="678.8" y="1054.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="675.8" y="1027.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="678.8" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="675.8" y="1011.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="678.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (22 samples, 0.50%)</title><rect x="676.1" y="1059.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (22 samples, 0.50%)</title><rect x="676.1" y="1043.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (22 samples, 0.50%)</title><rect x="676.1" y="1027.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="679.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (20 samples, 0.45%)</title><rect x="676.6" y="1011.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="679.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (20 samples, 0.45%)</title><rect x="676.6" y="995.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="679.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (20 samples, 0.45%)</title><rect x="676.6" y="979.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="679.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="680.9" y="963.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="683.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="680.9" y="947.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="683.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="680.9" y="931.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="683.9" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="680.9" y="915.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="683.9" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="680.9" y="899.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="683.9" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="680.9" y="883.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="683.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="680.9" y="867.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="683.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.02%)</title><rect x="681.1" y="963.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="684.1" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="681.4" y="963.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="684.4" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.sizeInBytes (1 samples, 0.02%)</title><rect x="681.9" y="1075.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="684.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.get (1 samples, 0.02%)</title><rect x="681.9" y="1059.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.9" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getSizeOfFlushedRow (2 samples, 0.05%)</title><rect x="682.2" y="1075.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.02%)</title><rect x="682.5" y="1059.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="685.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="682.7" y="1251.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="685.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle$Species_LLLLLLLI.make (1 samples, 0.02%)</title><rect x="682.7" y="1235.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="685.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle$Species_LLLLLLLI.&lt;init&gt; (1 samples, 0.02%)</title><rect x="682.7" y="1219.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="685.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/BoundMethodHandle.&lt;init&gt; (1 samples, 0.02%)</title><rect x="682.7" y="1203.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="685.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.&lt;init&gt; (1 samples, 0.02%)</title><rect x="682.7" y="1187.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="685.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm.prepare (1 samples, 0.02%)</title><rect x="682.7" y="1171.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="685.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm.compileToBytecode (1 samples, 0.02%)</title><rect x="682.7" y="1155.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.02%)</title><rect x="682.7" y="1139.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.02%)</title><rect x="682.7" y="1123.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.addMethod (1 samples, 0.02%)</title><rect x="682.7" y="1107.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="685.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.methodEpilogue (1 samples, 0.02%)</title><rect x="682.7" y="1091.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="685.7" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/org/objectweb/asm/MethodWriter.visitMaxs (1 samples, 0.02%)</title><rect x="682.7" y="1075.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="685.7" y="1086.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,352 samples, 30.53%)</title><rect x="683.0" y="1251.0" width="360.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="686.0" y="1262.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.02%)</title><rect x="683.3" y="1235.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="686.3" y="1246.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.11%)</title><rect x="683.5" y="1235.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="686.5" y="1246.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.11%)</title><rect x="683.5" y="1219.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="686.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="684.6" y="1203.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="687.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="684.6" y="1187.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="687.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="684.6" y="1171.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="687.6" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (308 samples, 6.95%)</title><rect x="684.9" y="1235.0" width="82.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="687.9" y="1246.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (8 samples, 0.18%)</title><rect x="685.7" y="1219.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.7" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.07%)</title><rect x="687.0" y="1203.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="690.0" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (297 samples, 6.71%)</title><rect x="687.8" y="1219.0" width="79.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="690.8" y="1230.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.09%)</title><rect x="691.0" y="1203.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="694.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (264 samples, 5.96%)</title><rect x="692.1" y="1203.0" width="70.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="695.1" y="1214.0">[unknown]</text>
</g>
<g>
<title>JavaThread::~JavaThread() (2 samples, 0.05%)</title><rect x="692.1" y="1187.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="695.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="692.1" y="1171.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="695.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="692.1" y="1155.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="695.1" y="1166.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="692.1" y="1139.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="695.1" y="1150.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="692.3" y="1139.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="695.3" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="692.3" y="1123.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="695.3" y="1134.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (5 samples, 0.11%)</title><rect x="692.6" y="1187.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="695.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="692.6" y="1171.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="695.6" y="1182.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.11%)</title><rect x="692.6" y="1155.0" width="1.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="695.6" y="1166.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="692.6" y="1139.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="695.6" y="1150.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.07%)</title><rect x="693.1" y="1139.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="696.1" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="693.4" y="1123.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="696.4" y="1134.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (4 samples, 0.09%)</title><rect x="693.9" y="1187.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="696.9" y="1198.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.07%)</title><rect x="695.0" y="1187.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="698.0" y="1198.0"></text>
</g>
<g>
<title>epoll_wait (250 samples, 5.64%)</title><rect x="695.8" y="1187.0" width="66.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="698.8" y="1198.0">epoll_w..</text>
</g>
<g>
<title>[unknown] (237 samples, 5.35%)</title><rect x="699.2" y="1171.0" width="63.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="702.2" y="1182.0">[unknown]</text>
</g>
<g>
<title>[unknown] (237 samples, 5.35%)</title><rect x="699.2" y="1155.0" width="63.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="702.2" y="1166.0">[unknown]</text>
</g>
<g>
<title>[unknown] (220 samples, 4.97%)</title><rect x="703.8" y="1139.0" width="58.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="706.8" y="1150.0">[unkno..</text>
</g>
<g>
<title>[unknown] (219 samples, 4.94%)</title><rect x="704.0" y="1123.0" width="58.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="707.0" y="1134.0">[unkno..</text>
</g>
<g>
<title>[unknown] (213 samples, 4.81%)</title><rect x="705.6" y="1107.0" width="56.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="708.6" y="1118.0">[unkno..</text>
</g>
<g>
<title>[unknown] (182 samples, 4.11%)</title><rect x="713.9" y="1091.0" width="48.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="716.9" y="1102.0">[unk..</text>
</g>
<g>
<title>[unknown] (139 samples, 3.14%)</title><rect x="725.4" y="1075.0" width="37.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="728.4" y="1086.0">[un..</text>
</g>
<g>
<title>[unknown] (101 samples, 2.28%)</title><rect x="735.5" y="1059.0" width="26.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="738.5" y="1070.0">[..</text>
</g>
<g>
<title>[unknown] (74 samples, 1.67%)</title><rect x="742.7" y="1043.0" width="19.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="745.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.02%)</title><rect x="750.4" y="1027.0" width="12.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="753.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="761.9" y="1011.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="764.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="761.9" y="995.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="764.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="761.9" y="979.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="764.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="761.9" y="963.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="764.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="762.1" y="947.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="765.1" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="762.1" y="931.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="765.1" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="762.1" y="915.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="765.1" y="926.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="762.4" y="1203.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="765.4" y="1214.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.11%)</title><rect x="762.7" y="1203.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="765.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.7" y="1187.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="766.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.7" y="1171.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="766.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.7" y="1155.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="766.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="763.7" y="1139.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="766.7" y="1150.0"></text>
</g>
<g>
<title>epoll_wait (11 samples, 0.25%)</title><rect x="764.0" y="1203.0" width="2.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="767.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="766.6" y="1187.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="769.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="766.6" y="1171.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="769.6" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="766.6" y="1155.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="769.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="766.6" y="1139.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="769.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="766.6" y="1123.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="769.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="766.6" y="1107.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="769.6" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,037 samples, 23.41%)</title><rect x="766.9" y="1235.0" width="276.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="769.9" y="1246.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (7 samples, 0.16%)</title><rect x="770.9" y="1219.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="773.9" y="1230.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,007 samples, 22.74%)</title><rect x="772.8" y="1219.0" width="268.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="775.8" y="1230.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.02%)</title><rect x="775.4" y="1203.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="778.4" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="775.4" y="1187.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="778.4" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="775.4" y="1171.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="778.4" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="775.4" y="1155.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="778.4" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::extract_attached_method(vframeStream&amp;) (1 samples, 0.02%)</title><rect x="775.4" y="1139.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.4" y="1150.0"></text>
</g>
<g>
<title>RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*) (1 samples, 0.02%)</title><rect x="775.4" y="1123.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="778.4" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (703 samples, 15.87%)</title><rect x="775.7" y="1203.0" width="187.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="778.7" y="1214.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="783.7" y="1187.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="786.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="783.7" y="1171.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="786.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="783.7" y="1155.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="786.7" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (530 samples, 11.97%)</title><rect x="784.0" y="1187.0" width="141.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.0" y="1198.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (528 samples, 11.92%)</title><rect x="784.5" y="1171.0" width="140.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.5" y="1182.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (488 samples, 11.02%)</title><rect x="784.5" y="1155.0" width="130.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="787.5" y="1166.0">RequestHandler0_..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="785.3" y="1139.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="788.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="785.3" y="1123.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="788.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="785.3" y="1107.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="788.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="785.3" y="1091.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="788.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="785.3" y="1075.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="788.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="785.3" y="1059.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="788.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="785.3" y="1043.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="788.3" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (39 samples, 0.88%)</title><rect x="785.8" y="1139.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.16%)</title><rect x="787.2" y="1123.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="790.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.14%)</title><rect x="787.4" y="1107.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="790.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.07%)</title><rect x="789.0" y="1123.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="789.6" y="1107.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.6" y="1118.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="789.6" y="1091.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="792.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.11%)</title><rect x="789.8" y="1123.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="792.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="789.8" y="1107.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="792.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="789.8" y="1091.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="792.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.09%)</title><rect x="790.1" y="1107.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="793.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.07%)</title><rect x="790.1" y="1091.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="793.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="790.9" y="1091.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="793.9" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.09%)</title><rect x="791.2" y="1123.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="794.2" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (15 samples, 0.34%)</title><rect x="792.2" y="1123.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (12 samples, 0.27%)</title><rect x="793.0" y="1107.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (12 samples, 0.27%)</title><rect x="793.0" y="1091.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.18%)</title><rect x="794.1" y="1075.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.1" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (444 samples, 10.02%)</title><rect x="796.2" y="1139.0" width="118.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.2" y="1150.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.05%)</title><rect x="796.8" y="1123.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="799.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="796.8" y="1107.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="799.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.02%)</title><rect x="797.0" y="1107.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="800.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.02%)</title><rect x="797.0" y="1091.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="800.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="797.0" y="1075.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.09%)</title><rect x="797.3" y="1123.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="800.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.09%)</title><rect x="797.3" y="1107.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="800.3" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.get$Lambda (2 samples, 0.05%)</title><rect x="797.6" y="1091.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="800.6" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.&lt;init&gt; (1 samples, 0.02%)</title><rect x="797.8" y="1075.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="800.8" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$76/721413497.get$Lambda (1 samples, 0.02%)</title><rect x="798.1" y="1091.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.23%)</title><rect x="798.4" y="1123.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.4" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.23%)</title><rect x="798.4" y="1107.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="801.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="798.4" y="1091.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="801.4" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="798.4" y="1075.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.4" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.11%)</title><rect x="799.7" y="1059.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="802.7" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="799.7" y="1043.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="799.7" y="1027.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="802.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.09%)</title><rect x="800.0" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="803.0" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="800.5" y="1027.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="801.0" y="1123.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="804.0" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (425 samples, 9.60%)</title><rect x="801.3" y="1123.0" width="113.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="804.3" y="1134.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.07%)</title><rect x="803.1" y="1107.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="806.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.07%)</title><rect x="803.1" y="1091.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (415 samples, 9.37%)</title><rect x="803.9" y="1107.0" width="110.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="806.9" y="1118.0">java/util/con..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="807.1" y="1091.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="810.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="807.1" y="1075.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="810.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="807.1" y="1059.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="810.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="807.1" y="1043.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="810.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="807.1" y="1027.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="810.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="807.1" y="1011.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="810.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (401 samples, 9.05%)</title><rect x="807.4" y="1091.0" width="106.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="810.4" y="1102.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (5 samples, 0.11%)</title><rect x="809.0" y="1075.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (338 samples, 7.63%)</title><rect x="810.3" y="1075.0" width="90.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.3" y="1086.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (31 samples, 0.70%)</title><rect x="810.6" y="1059.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (23 samples, 0.52%)</title><rect x="811.9" y="1043.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="813.3" y="1027.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="816.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="813.3" y="1011.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="816.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="813.3" y="995.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="816.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="813.3" y="979.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="816.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="813.3" y="963.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="816.3" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="813.3" y="947.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="816.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="813.3" y="931.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="816.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 0.38%)</title><rect x="813.5" y="1027.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (3 samples, 0.07%)</title><rect x="814.9" y="1011.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.07%)</title><rect x="814.9" y="995.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.07%)</title><rect x="814.9" y="979.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (9 samples, 0.20%)</title><rect x="815.7" y="1011.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="818.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (9 samples, 0.20%)</title><rect x="815.7" y="995.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="818.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (9 samples, 0.20%)</title><rect x="815.7" y="979.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="818.7" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (9 samples, 0.20%)</title><rect x="815.7" y="963.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (3 samples, 0.07%)</title><rect x="818.1" y="1043.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="821.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.20%)</title><rect x="818.9" y="1059.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="821.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.20%)</title><rect x="818.9" y="1043.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="821.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="819.1" y="1027.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="819.1" y="1011.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="822.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="819.1" y="995.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.1" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="819.1" y="979.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="822.1" y="990.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="819.1" y="963.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="822.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="819.4" y="963.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="822.4" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="819.4" y="947.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="822.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="819.4" y="931.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="822.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="819.4" y="915.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="822.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="819.4" y="899.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="822.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="819.4" y="883.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="822.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="819.4" y="867.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="822.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="819.4" y="851.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="822.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.14%)</title><rect x="819.7" y="1027.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="822.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.14%)</title><rect x="819.7" y="1011.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="822.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.11%)</title><rect x="819.7" y="995.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="822.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.11%)</title><rect x="819.7" y="979.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="822.7" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.11%)</title><rect x="819.7" y="963.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="822.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.02%)</title><rect x="821.0" y="995.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="824.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (297 samples, 6.71%)</title><rect x="821.3" y="1059.0" width="79.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="824.3" y="1070.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (296 samples, 6.68%)</title><rect x="821.5" y="1043.0" width="78.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="824.5" y="1054.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (296 samples, 6.68%)</title><rect x="821.5" y="1027.0" width="78.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="824.5" y="1038.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (293 samples, 6.62%)</title><rect x="822.1" y="1011.0" width="78.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="825.1" y="1022.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (293 samples, 6.62%)</title><rect x="822.1" y="995.0" width="78.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="825.1" y="1006.0">jdk/inter..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="822.6" y="979.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="825.6" y="990.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.05%)</title><rect x="822.9" y="979.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="825.9" y="990.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="823.4" y="979.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="826.4" y="990.0"></text>
</g>
<g>
<title>Unsafe_Unpark (51 samples, 1.15%)</title><rect x="823.7" y="979.0" width="13.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="826.7" y="990.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.05%)</title><rect x="825.3" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="828.3" y="974.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="825.8" y="963.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="828.8" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (5 samples, 0.11%)</title><rect x="826.1" y="963.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="829.1" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.02%)</title><rect x="827.4" y="963.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="830.4" y="974.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.07%)</title><rect x="827.7" y="963.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="830.7" y="974.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.11%)</title><rect x="828.5" y="963.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.5" y="974.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.05%)</title><rect x="829.8" y="963.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.8" y="974.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (17 samples, 0.38%)</title><rect x="830.3" y="963.0" width="4.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="833.3" y="974.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="834.9" y="963.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="837.9" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="835.1" y="963.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="838.1" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.05%)</title><rect x="835.4" y="963.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="838.4" y="974.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.09%)</title><rect x="835.9" y="963.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="838.9" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="837.0" y="963.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="840.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="837.3" y="979.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="840.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="837.3" y="963.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="840.3" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="837.3" y="947.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="840.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="837.3" y="931.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="840.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="837.3" y="915.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="840.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="837.3" y="899.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="840.3" y="910.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.14%)</title><rect x="837.5" y="979.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="840.5" y="990.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (229 samples, 5.17%)</title><rect x="839.1" y="979.0" width="61.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="842.1" y="990.0">pthrea..</text>
</g>
<g>
<title>[unknown] (195 samples, 4.40%)</title><rect x="848.2" y="963.0" width="51.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="851.2" y="974.0">[unkn..</text>
</g>
<g>
<title>[unknown] (195 samples, 4.40%)</title><rect x="848.2" y="947.0" width="51.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="851.2" y="958.0">[unkn..</text>
</g>
<g>
<title>[unknown] (185 samples, 4.18%)</title><rect x="850.8" y="931.0" width="49.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="853.8" y="942.0">[unkn..</text>
</g>
<g>
<title>[unknown] (183 samples, 4.13%)</title><rect x="851.4" y="915.0" width="48.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="854.4" y="926.0">[unk..</text>
</g>
<g>
<title>[unknown] (175 samples, 3.95%)</title><rect x="853.5" y="899.0" width="46.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="856.5" y="910.0">[unk..</text>
</g>
<g>
<title>[unknown] (153 samples, 3.45%)</title><rect x="859.4" y="883.0" width="40.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="862.4" y="894.0">[un..</text>
</g>
<g>
<title>[unknown] (139 samples, 3.14%)</title><rect x="863.1" y="867.0" width="37.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="866.1" y="878.0">[un..</text>
</g>
<g>
<title>[unknown] (131 samples, 2.96%)</title><rect x="865.2" y="851.0" width="34.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="868.2" y="862.0">[u..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="899.3" y="835.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="902.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="899.3" y="819.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="902.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="899.3" y="803.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="902.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="899.3" y="787.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="902.3" y="798.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="899.3" y="771.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="902.3" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="899.6" y="755.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="902.6" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="899.6" y="739.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="902.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="900.1" y="1011.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (12 samples, 0.27%)</title><rect x="900.4" y="1075.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="903.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (11 samples, 0.25%)</title><rect x="900.7" y="1059.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="903.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.11%)</title><rect x="902.3" y="1043.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="905.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (37 samples, 0.84%)</title><rect x="903.6" y="1075.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="906.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (34 samples, 0.77%)</title><rect x="904.4" y="1059.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="907.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (12 samples, 0.27%)</title><rect x="905.5" y="1043.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="908.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="908.1" y="1027.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="911.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="908.1" y="1011.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="911.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="908.1" y="995.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="911.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="908.4" y="979.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="911.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="908.4" y="963.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="911.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="908.4" y="947.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="911.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="908.4" y="931.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="911.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (18 samples, 0.41%)</title><rect x="908.7" y="1043.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="911.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (13 samples, 0.29%)</title><rect x="910.0" y="1027.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="913.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.14%)</title><rect x="911.9" y="1011.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="914.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.14%)</title><rect x="911.9" y="995.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="914.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (6 samples, 0.14%)</title><rect x="911.9" y="979.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="914.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.07%)</title><rect x="913.4" y="1075.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="916.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="914.0" y="1059.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="917.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.02%)</title><rect x="914.0" y="1043.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="917.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.02%)</title><rect x="914.2" y="1091.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="917.2" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (17 samples, 0.38%)</title><rect x="914.5" y="1155.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="917.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (16 samples, 0.36%)</title><rect x="914.8" y="1139.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="917.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.16%)</title><rect x="914.8" y="1123.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="917.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.11%)</title><rect x="915.3" y="1107.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="918.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.20%)</title><rect x="916.6" y="1123.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="919.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (9 samples, 0.20%)</title><rect x="916.6" y="1107.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="919.6" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (23 samples, 0.52%)</title><rect x="919.0" y="1155.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="922.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.substring (20 samples, 0.45%)</title><rect x="919.3" y="1139.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (20 samples, 0.45%)</title><rect x="919.3" y="1123.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="922.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.23%)</title><rect x="919.3" y="1107.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.09%)</title><rect x="920.9" y="1091.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="923.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (10 samples, 0.23%)</title><rect x="922.0" y="1107.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="925.0" y="1118.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="922.8" y="1091.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="925.8" y="1102.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.14%)</title><rect x="923.0" y="1091.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="926.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="924.6" y="1139.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="927.6" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (46 samples, 1.04%)</title><rect x="925.2" y="1187.0" width="12.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="928.2" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (17 samples, 0.38%)</title><rect x="927.8" y="1171.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="930.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.18%)</title><rect x="929.7" y="1155.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="932.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.18%)</title><rect x="929.7" y="1139.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.11%)</title><rect x="930.5" y="1123.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="933.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.05%)</title><rect x="931.8" y="1155.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="934.8" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.43%)</title><rect x="932.4" y="1171.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="935.4" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.43%)</title><rect x="932.4" y="1155.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="935.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (17 samples, 0.38%)</title><rect x="932.9" y="1139.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="935.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (17 samples, 0.38%)</title><rect x="932.9" y="1123.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="935.9" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.18%)</title><rect x="937.4" y="1187.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="940.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.16%)</title><rect x="937.4" y="1171.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="940.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.16%)</title><rect x="937.4" y="1155.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="940.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.07%)</title><rect x="938.2" y="1139.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="941.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.07%)</title><rect x="938.2" y="1123.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="941.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (3 samples, 0.07%)</title><rect x="938.2" y="1107.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="941.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="939.0" y="1139.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="942.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="939.0" y="1123.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="942.0" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (1 samples, 0.02%)</title><rect x="939.3" y="1171.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="942.3" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.05%)</title><rect x="939.6" y="1187.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="942.6" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (53 samples, 1.20%)</title><rect x="940.1" y="1187.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.length (14 samples, 0.32%)</title><rect x="940.6" y="1171.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="943.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (32 samples, 0.72%)</title><rect x="944.4" y="1171.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="947.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="945.7" y="1155.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="948.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.length (18 samples, 0.41%)</title><rect x="946.0" y="1155.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="949.7" y="1139.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="952.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="949.7" y="1123.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="952.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="949.7" y="1107.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="952.7" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="949.7" y="1091.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="952.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="949.7" y="1075.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="952.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="949.7" y="1059.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="952.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="949.7" y="1043.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="952.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="950.2" y="1139.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="953.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.18%)</title><rect x="950.7" y="1155.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="953.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.05%)</title><rect x="951.3" y="1139.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="954.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.05%)</title><rect x="951.3" y="1123.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="954.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.02%)</title><rect x="951.3" y="1107.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="954.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="951.5" y="1107.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="954.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.09%)</title><rect x="951.8" y="1139.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="954.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.09%)</title><rect x="951.8" y="1123.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="954.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.02%)</title><rect x="951.8" y="1107.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="954.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.07%)</title><rect x="952.1" y="1107.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="955.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.11%)</title><rect x="952.9" y="1171.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="955.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="953.7" y="1155.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="953.7" y="1139.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="956.7" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (33 samples, 0.75%)</title><rect x="954.2" y="1187.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="957.2" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (33 samples, 0.75%)</title><rect x="954.2" y="1171.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="957.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (21 samples, 0.47%)</title><rect x="956.1" y="1155.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (18 samples, 0.41%)</title><rect x="956.3" y="1139.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="959.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (7 samples, 0.16%)</title><rect x="957.4" y="1123.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="960.4" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.07%)</title><rect x="958.5" y="1107.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="961.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.09%)</title><rect x="959.3" y="1123.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="962.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.07%)</title><rect x="960.3" y="1123.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="963.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (2 samples, 0.05%)</title><rect x="961.1" y="1139.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="964.1" y="1150.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (5 samples, 0.11%)</title><rect x="961.7" y="1155.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="964.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.11%)</title><rect x="961.7" y="1139.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="964.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="962.7" y="1123.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="965.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="962.7" y="1107.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="965.7" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="962.7" y="1091.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="965.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (293 samples, 6.62%)</title><rect x="963.0" y="1203.0" width="78.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="966.0" y="1214.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (291 samples, 6.57%)</title><rect x="963.3" y="1187.0" width="77.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="966.3" y="1198.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (4 samples, 0.09%)</title><rect x="967.0" y="1171.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="970.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 1.40%)</title><rect x="968.1" y="1171.0" width="16.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="971.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 1.40%)</title><rect x="968.1" y="1155.0" width="16.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="971.1" y="1166.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (51 samples, 1.15%)</title><rect x="968.1" y="1139.0" width="13.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="971.1" y="1150.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.14%)</title><rect x="970.2" y="1123.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="971.5" y="1107.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="974.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="971.5" y="1091.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="974.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="971.5" y="1075.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="974.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="971.5" y="1059.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="974.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="971.5" y="1043.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="974.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="971.5" y="1027.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="974.5" y="1038.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="971.8" y="1123.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.8" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="972.3" y="1123.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="975.3" y="1134.0"></text>
</g>
<g>
<title>__memmove_ssse3 (13 samples, 0.29%)</title><rect x="972.6" y="1123.0" width="3.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="975.6" y="1134.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="976.1" y="1123.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="979.1" y="1134.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (18 samples, 0.41%)</title><rect x="976.3" y="1123.0" width="4.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="979.3" y="1134.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.07%)</title><rect x="977.4" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.4" y="1118.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="978.2" y="1107.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.2" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (3 samples, 0.07%)</title><rect x="978.5" y="1107.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.5" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.11%)</title><rect x="979.3" y="1107.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="982.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="980.3" y="1091.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="983.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="980.3" y="1075.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="983.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="980.3" y="1059.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="983.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="980.3" y="1043.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="983.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="980.3" y="1027.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="983.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="980.3" y="1011.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="983.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="980.3" y="995.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="983.3" y="1006.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.05%)</title><rect x="980.6" y="1107.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="983.6" y="1118.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.05%)</title><rect x="981.1" y="1123.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="984.1" y="1134.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="981.7" y="1139.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="984.7" y="1150.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.05%)</title><rect x="982.2" y="1139.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="985.2" y="1150.0"></text>
</g>
<g>
<title>recv (7 samples, 0.16%)</title><rect x="982.7" y="1139.0" width="1.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="985.7" y="1150.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.05%)</title><rect x="984.6" y="1171.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="987.6" y="1182.0"></text>
</g>
<g>
<title>recv (209 samples, 4.72%)</title><rect x="985.1" y="1171.0" width="55.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="988.1" y="1182.0">recv</text>
</g>
<g>
<title>[unknown] (195 samples, 4.40%)</title><rect x="988.8" y="1155.0" width="52.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="991.8" y="1166.0">[unkn..</text>
</g>
<g>
<title>[unknown] (195 samples, 4.40%)</title><rect x="988.8" y="1139.0" width="52.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="991.8" y="1150.0">[unkn..</text>
</g>
<g>
<title>[unknown] (184 samples, 4.15%)</title><rect x="991.8" y="1123.0" width="49.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="994.8" y="1134.0">[unkn..</text>
</g>
<g>
<title>[unknown] (184 samples, 4.15%)</title><rect x="991.8" y="1107.0" width="49.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="994.8" y="1118.0">[unkn..</text>
</g>
<g>
<title>[unknown] (181 samples, 4.09%)</title><rect x="992.6" y="1091.0" width="48.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="995.6" y="1102.0">[unk..</text>
</g>
<g>
<title>[unknown] (173 samples, 3.91%)</title><rect x="994.7" y="1075.0" width="46.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="997.7" y="1086.0">[unk..</text>
</g>
<g>
<title>[unknown] (165 samples, 3.73%)</title><rect x="996.8" y="1059.0" width="44.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="999.8" y="1070.0">[unk..</text>
</g>
<g>
<title>[unknown] (145 samples, 3.27%)</title><rect x="1002.2" y="1043.0" width="38.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1005.2" y="1054.0">[un..</text>
</g>
<g>
<title>[unknown] (107 samples, 2.42%)</title><rect x="1012.3" y="1027.0" width="28.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1015.3" y="1038.0">[u..</text>
</g>
<g>
<title>[unknown] (75 samples, 1.69%)</title><rect x="1020.8" y="1011.0" width="20.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1023.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 1.26%)</title><rect x="1025.9" y="995.0" width="14.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1028.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.65%)</title><rect x="1033.1" y="979.0" width="7.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1036.1" y="990.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1040.0" y="963.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1043.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1040.0" y="947.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1043.0" y="958.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1040.0" y="931.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1043.0" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1040.5" y="915.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1043.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1040.5" y="899.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1043.5" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1040.5" y="883.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1043.5" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1040.5" y="867.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1043.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.02%)</title><rect x="1040.8" y="1187.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1043.8" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.18%)</title><rect x="1041.1" y="1219.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1044.1" y="1230.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.16%)</title><rect x="1041.3" y="1203.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1044.3" y="1214.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.14%)</title><rect x="1041.6" y="1187.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1044.6" y="1198.0"></text>
</g>
<g>
<title>start_thread (551 samples, 12.44%)</title><rect x="1043.2" y="1251.0" width="146.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1046.2" y="1262.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (551 samples, 12.44%)</title><rect x="1043.2" y="1235.0" width="146.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1046.2" y="1246.0">thread_native_entr..</text>
</g>
<g>
<title>Thread::call_run() (551 samples, 12.44%)</title><rect x="1043.2" y="1219.0" width="146.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.2" y="1230.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.09%)</title><rect x="1043.2" y="1203.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1046.2" y="1214.0"></text>
</g>
<g>
<title>G1Policy::adaptive_young_list_length() const (1 samples, 0.02%)</title><rect x="1043.2" y="1187.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.2" y="1198.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (3 samples, 0.07%)</title><rect x="1043.5" y="1187.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1046.5" y="1198.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (2 samples, 0.05%)</title><rect x="1043.5" y="1171.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.5" y="1182.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1043.7" y="1155.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1046.7" y="1166.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="1043.7" y="1139.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.7" y="1150.0"></text>
</g>
<g>
<title>G1ContiguousSpace::used() const (1 samples, 0.02%)</title><rect x="1043.7" y="1123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.7" y="1134.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.02%)</title><rect x="1044.0" y="1171.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1047.0" y="1182.0"></text>
</g>
<g>
<title>GangWorker::loop() (71 samples, 1.60%)</title><rect x="1044.3" y="1203.0" width="18.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1047.3" y="1214.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (71 samples, 1.60%)</title><rect x="1044.3" y="1187.0" width="18.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.3" y="1198.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (49 samples, 1.11%)</title><rect x="1044.3" y="1171.0" width="13.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.3" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (47 samples, 1.06%)</title><rect x="1044.3" y="1155.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.3" y="1166.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (27 samples, 0.61%)</title><rect x="1049.6" y="1139.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.6" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (24 samples, 0.54%)</title><rect x="1050.4" y="1123.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1055.2" y="1107.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1058.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1055.2" y="1091.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1058.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1055.2" y="1075.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1058.2" y="1086.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1055.7" y="1107.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1058.7" y="1118.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.05%)</title><rect x="1056.0" y="1107.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1059.0" y="1118.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.05%)</title><rect x="1056.0" y="1091.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1056.3" y="1075.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1059.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1056.3" y="1059.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1059.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1056.3" y="1043.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1059.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1056.3" y="1027.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1059.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1056.3" y="1011.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1059.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1056.3" y="995.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1059.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1056.3" y="979.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1059.3" y="990.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;ObjArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1056.5" y="1107.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1059.5" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.02%)</title><rect x="1056.8" y="1155.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1059.8" y="1166.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="1057.1" y="1155.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1060.1" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (21 samples, 0.47%)</title><rect x="1057.3" y="1171.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.3" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (21 samples, 0.47%)</title><rect x="1057.3" y="1155.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.3" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (21 samples, 0.47%)</title><rect x="1057.3" y="1139.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1060.3" y="1150.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (21 samples, 0.47%)</title><rect x="1057.3" y="1123.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.3" y="1134.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (21 samples, 0.47%)</title><rect x="1057.3" y="1107.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.3" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (21 samples, 0.47%)</title><rect x="1057.3" y="1091.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.3" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (14 samples, 0.32%)</title><rect x="1058.9" y="1075.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1061.8" y="1059.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1064.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1061.8" y="1043.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1064.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1061.8" y="1027.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1064.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1062.1" y="1011.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1065.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1062.1" y="995.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1065.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1062.1" y="979.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1065.1" y="990.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1062.4" y="1059.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.4" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::start_of_nonstatic_oop_maps() const (1 samples, 0.02%)</title><rect x="1062.4" y="1043.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.4" y="1054.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1062.6" y="1075.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.6" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1062.9" y="1171.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1065.9" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.02%)</title><rect x="1062.9" y="1155.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.9" y="1166.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.02%)</title><rect x="1062.9" y="1139.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.9" y="1150.0"></text>
</g>
<g>
<title>JavaThread::run() (469 samples, 10.59%)</title><rect x="1063.2" y="1203.0" width="124.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.2" y="1214.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (469 samples, 10.59%)</title><rect x="1063.2" y="1187.0" width="124.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.2" y="1198.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (466 samples, 10.52%)</title><rect x="1063.2" y="1171.0" width="124.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1066.2" y="1182.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (465 samples, 10.50%)</title><rect x="1063.2" y="1155.0" width="123.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.2" y="1166.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (446 samples, 10.07%)</title><rect x="1063.2" y="1139.0" width="118.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.2" y="1150.0">C2Compiler::co..</text>
</g>
<g>
<title>BarrierSetC2::create_barrier_state(Arena*) const (1 samples, 0.02%)</title><rect x="1063.2" y="1123.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.2" y="1134.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (445 samples, 10.05%)</title><rect x="1063.4" y="1123.0" width="118.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.4" y="1134.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (237 samples, 5.35%)</title><rect x="1063.4" y="1107.0" width="63.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.4" y="1118.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (8 samples, 0.18%)</title><rect x="1063.4" y="1091.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.4" y="1102.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (6 samples, 0.14%)</title><rect x="1063.4" y="1075.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.4" y="1086.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.02%)</title><rect x="1064.8" y="1059.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.8" y="1070.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.02%)</title><rect x="1065.0" y="1075.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.0" y="1086.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.02%)</title><rect x="1065.0" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1068.0" y="1070.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.02%)</title><rect x="1065.3" y="1075.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1068.3" y="1086.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (8 samples, 0.18%)</title><rect x="1065.6" y="1091.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.6" y="1102.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.02%)</title><rect x="1065.8" y="1075.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.8" y="1086.0"></text>
</g>
<g>
<title>CompiledStaticCall::emit_to_interp_stub(CodeBuffer&amp;, unsigned char*) (1 samples, 0.02%)</title><rect x="1065.8" y="1059.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.8" y="1070.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.02%)</title><rect x="1065.8" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.8" y="1054.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.02%)</title><rect x="1065.8" y="1027.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.8" y="1038.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.07%)</title><rect x="1066.1" y="1075.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.1" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.02%)</title><rect x="1066.4" y="1059.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.4" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1066.4" y="1043.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.4" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.02%)</title><rect x="1066.6" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.02%)</title><rect x="1066.6" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.6" y="1054.0"></text>
</g>
<g>
<title>ObjectValue::write_on(DebugInfoWriteStream*) (1 samples, 0.02%)</title><rect x="1066.6" y="1027.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.6" y="1038.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_signed_int(int) (1 samples, 0.02%)</title><rect x="1066.6" y="1011.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.6" y="1022.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.02%)</title><rect x="1066.9" y="1075.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.9" y="1086.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, RegisterImpl*) (1 samples, 0.02%)</title><rect x="1066.9" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.9" y="1070.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.02%)</title><rect x="1067.2" y="1075.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.2" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.02%)</title><rect x="1067.2" y="1059.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.2" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1067.2" y="1043.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.2" y="1054.0"></text>
</g>
<g>
<title>indIndexOffsetOper::base(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.02%)</title><rect x="1067.4" y="1075.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.4" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (14 samples, 0.32%)</title><rect x="1067.7" y="1091.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.7" y="1102.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.02%)</title><rect x="1067.7" y="1075.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1070.7" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (13 samples, 0.29%)</title><rect x="1068.0" y="1075.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.0" y="1086.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.07%)</title><rect x="1068.2" y="1059.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1071.2" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.05%)</title><rect x="1069.0" y="1059.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1072.0" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.05%)</title><rect x="1069.0" y="1043.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.0" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.02%)</title><rect x="1069.0" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.0" y="1038.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (1 samples, 0.02%)</title><rect x="1069.0" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.0" y="1022.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.02%)</title><rect x="1069.3" y="1027.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.3" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (6 samples, 0.14%)</title><rect x="1069.6" y="1059.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1072.6" y="1070.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.05%)</title><rect x="1070.1" y="1043.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.05%)</title><rect x="1070.1" y="1027.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.1" y="1038.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.02%)</title><rect x="1070.4" y="1011.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.4" y="1022.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.02%)</title><rect x="1070.4" y="995.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.4" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.05%)</title><rect x="1070.6" y="1043.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.05%)</title><rect x="1070.6" y="1027.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.6" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.02%)</title><rect x="1070.6" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.6" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.02%)</title><rect x="1070.6" y="995.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.02%)</title><rect x="1070.6" y="979.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.6" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.02%)</title><rect x="1070.9" y="1011.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.9" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.02%)</title><rect x="1070.9" y="995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.9" y="1006.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.02%)</title><rect x="1070.9" y="979.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.9" y="990.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.02%)</title><rect x="1071.2" y="1059.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1074.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (27 samples, 0.61%)</title><rect x="1071.4" y="1091.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.4" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (27 samples, 0.61%)</title><rect x="1071.4" y="1075.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.4" y="1086.0"></text>
</g>
<g>
<title>CProjNode::out_RegMask() const (1 samples, 0.02%)</title><rect x="1072.0" y="1059.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.0" y="1070.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1072.2" y="1059.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.2" y="1070.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.02%)</title><rect x="1072.5" y="1059.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.02%)</title><rect x="1072.8" y="1059.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.8" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1072.8" y="1043.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.8" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1072.8" y="1027.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1073.0" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.07%)</title><rect x="1073.3" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.02%)</title><rect x="1073.6" y="1043.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.02%)</title><rect x="1073.8" y="1043.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.8" y="1054.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1073.8" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.8" y="1038.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.02%)</title><rect x="1073.8" y="1011.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.8" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 0.09%)</title><rect x="1074.1" y="1059.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.1" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.02%)</title><rect x="1074.9" y="1043.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;, bool) (1 samples, 0.02%)</title><rect x="1075.2" y="1059.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1078.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.07%)</title><rect x="1075.4" y="1059.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.4" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1076.0" y="1043.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.0" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1076.0" y="1027.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.02%)</title><rect x="1076.2" y="1059.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.2" y="1070.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1076.2" y="1043.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.2" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.16%)</title><rect x="1076.5" y="1059.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.5" y="1070.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1076.5" y="1043.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.5" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="1076.8" y="1043.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.8" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (1 samples, 0.02%)</title><rect x="1077.0" y="1043.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.0" y="1054.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1077.0" y="1027.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.0" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.09%)</title><rect x="1077.3" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.3" y="1054.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.02%)</title><rect x="1077.6" y="1027.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1077.6" y="1011.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1080.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1077.6" y="995.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1080.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1077.6" y="979.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1080.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1077.6" y="963.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1080.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1077.6" y="947.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1080.6" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1077.6" y="931.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1080.6" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1077.8" y="1027.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.8" y="1038.0"></text>
</g>
<g>
<title>__munmap (1 samples, 0.02%)</title><rect x="1078.4" y="1059.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1081.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="1043.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1081.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="1027.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1081.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="1011.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1081.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="995.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1081.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="979.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1081.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="963.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1081.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="947.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1081.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="931.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1081.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="915.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1081.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="899.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1081.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="883.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1081.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="867.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1081.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="851.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1081.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1078.4" y="835.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1081.4" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.02%)</title><rect x="1078.6" y="1091.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;, bool) (1 samples, 0.02%)</title><rect x="1078.9" y="1091.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (178 samples, 4.02%)</title><rect x="1079.2" y="1091.0" width="47.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.2" y="1102.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (2 samples, 0.05%)</title><rect x="1079.4" y="1075.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.4" y="1086.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.02%)</title><rect x="1080.0" y="1075.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.0" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1080.2" y="1075.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.2" y="1086.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.02%)</title><rect x="1080.5" y="1075.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.5" y="1086.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.02%)</title><rect x="1080.8" y="1075.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1083.8" y="1086.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.05%)</title><rect x="1081.0" y="1075.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.0" y="1086.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (7 samples, 0.16%)</title><rect x="1081.6" y="1075.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (9 samples, 0.20%)</title><rect x="1083.4" y="1075.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1086.4" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1084.2" y="1059.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (3 samples, 0.07%)</title><rect x="1084.8" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.8" y="1070.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.02%)</title><rect x="1085.3" y="1043.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1088.3" y="1054.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.02%)</title><rect x="1085.6" y="1059.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.02%)</title><rect x="1085.8" y="1075.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.8" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="1085.8" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (18 samples, 0.41%)</title><rect x="1086.1" y="1075.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.1" y="1086.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="1090.1" y="1059.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (2 samples, 0.05%)</title><rect x="1090.4" y="1059.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.4" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.02%)</title><rect x="1090.4" y="1043.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.02%)</title><rect x="1090.6" y="1043.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.6" y="1054.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1090.6" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.6" y="1038.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1090.6" y="1011.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (49 samples, 1.11%)</title><rect x="1090.9" y="1075.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.9" y="1086.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (1 samples, 0.02%)</title><rect x="1092.8" y="1059.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.8" y="1070.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (6 samples, 0.14%)</title><rect x="1093.0" y="1059.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.0" y="1070.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.02%)</title><rect x="1094.6" y="1059.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (7 samples, 0.16%)</title><rect x="1094.9" y="1059.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.9" y="1070.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1096.0" y="1043.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1099.0" y="1054.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.02%)</title><rect x="1096.2" y="1043.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1096.5" y="1043.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.05%)</title><rect x="1096.8" y="1059.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.8" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1097.0" y="1043.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (15 samples, 0.34%)</title><rect x="1097.3" y="1059.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1100.3" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.09%)</title><rect x="1100.2" y="1043.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (8 samples, 0.18%)</title><rect x="1101.3" y="1059.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.3" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1101.3" y="1043.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.3" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1101.8" y="1043.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.8" y="1054.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (5 samples, 0.11%)</title><rect x="1102.1" y="1043.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.1" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.05%)</title><rect x="1103.4" y="1059.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.4" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.05%)</title><rect x="1103.9" y="1075.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.05%)</title><rect x="1103.9" y="1059.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (2 samples, 0.05%)</title><rect x="1104.5" y="1075.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.02%)</title><rect x="1105.0" y="1075.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (8 samples, 0.18%)</title><rect x="1105.3" y="1075.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.3" y="1086.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.02%)</title><rect x="1105.8" y="1059.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.8" y="1070.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.02%)</title><rect x="1105.8" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.8" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.07%)</title><rect x="1106.1" y="1059.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.1" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.02%)</title><rect x="1106.9" y="1059.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.9" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.02%)</title><rect x="1107.1" y="1059.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (12 samples, 0.27%)</title><rect x="1107.4" y="1075.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.4" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.09%)</title><rect x="1108.7" y="1059.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.7" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.02%)</title><rect x="1109.8" y="1059.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.8" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.02%)</title><rect x="1110.1" y="1059.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.1" y="1070.0"></text>
</g>
<g>
<title>loadNKlassNode::oper_input_base() const (1 samples, 0.02%)</title><rect x="1110.3" y="1059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.05%)</title><rect x="1110.6" y="1075.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (21 samples, 0.47%)</title><rect x="1111.1" y="1075.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.14%)</title><rect x="1114.6" y="1059.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1115.7" y="1043.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.7" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.05%)</title><rect x="1115.7" y="1027.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.7" y="1038.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 0.05%)</title><rect x="1116.2" y="1059.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1119.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.02%)</title><rect x="1116.7" y="1075.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.02%)</title><rect x="1117.0" y="1075.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.0" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.02%)</title><rect x="1117.0" y="1059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.02%)</title><rect x="1117.0" y="1043.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.0" y="1054.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.02%)</title><rect x="1117.0" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (7 samples, 0.16%)</title><rect x="1117.3" y="1075.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.3" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.11%)</title><rect x="1117.8" y="1059.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 0.11%)</title><rect x="1119.1" y="1075.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.1" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1119.9" y="1059.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.07%)</title><rect x="1120.5" y="1075.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.5" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1120.7" y="1059.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.7" y="1070.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="1121.0" y="1059.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1124.0" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (16 samples, 0.36%)</title><rect x="1121.3" y="1075.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.3" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1123.4" y="1059.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.4" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1123.7" y="1059.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.7" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 0.14%)</title><rect x="1123.9" y="1059.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.9" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1125.3" y="1043.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.3" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1125.5" y="1075.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.5" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.05%)</title><rect x="1125.8" y="1075.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1128.8" y="1086.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.02%)</title><rect x="1126.3" y="1075.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1129.3" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (178 samples, 4.02%)</title><rect x="1126.6" y="1107.0" width="47.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.6" y="1118.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.02%)</title><rect x="1126.6" y="1091.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.6" y="1102.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.02%)</title><rect x="1126.6" y="1075.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.6" y="1086.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.02%)</title><rect x="1126.9" y="1091.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="1126.9" y="1075.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1126.9" y="1059.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.9" y="1070.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.02%)</title><rect x="1126.9" y="1043.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.14%)</title><rect x="1127.1" y="1091.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.14%)</title><rect x="1127.1" y="1075.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (5 samples, 0.11%)</title><rect x="1127.4" y="1059.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.11%)</title><rect x="1127.4" y="1043.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.11%)</title><rect x="1127.4" y="1027.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1127.4" y="1011.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.4" y="1022.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1127.4" y="995.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.07%)</title><rect x="1127.7" y="1011.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="995.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="979.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="963.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="947.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="931.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="915.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="899.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="883.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="867.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="851.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="835.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="819.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="803.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="787.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="771.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="755.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="739.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="723.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="707.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="691.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="675.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="659.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="643.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="627.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="611.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="595.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="579.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="563.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="547.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="531.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="515.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="499.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="483.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="467.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="451.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="435.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="419.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1127.7" y="403.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.7" y="414.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1127.7" y="387.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.05%)</title><rect x="1127.9" y="995.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.05%)</title><rect x="1127.9" y="979.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.9" y="963.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1127.9" y="947.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.9" y="958.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1127.9" y="931.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1128.2" y="963.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1128.2" y="947.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.2" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1128.2" y="931.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.2" y="942.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.02%)</title><rect x="1128.5" y="1011.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.5" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (6 samples, 0.14%)</title><rect x="1128.7" y="1091.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.7" y="1102.0"></text>
</g>
<g>
<title>CheckCastPPNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1129.8" y="1075.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.8" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1130.1" y="1075.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.1" y="1086.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.02%)</title><rect x="1130.1" y="1059.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.1" y="1070.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.02%)</title><rect x="1130.1" y="1043.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (141 samples, 3.18%)</title><rect x="1130.3" y="1091.0" width="37.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.3" y="1102.0">Pha..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.3" y="1075.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.3" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.3" y="1059.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.3" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.3" y="1043.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.3" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.3" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.3" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.3" y="1011.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.3" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.3" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.3" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.3" y="979.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.3" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.3" y="963.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&amp;) (1 samples, 0.02%)</title><rect x="1130.3" y="947.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.3" y="958.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.02%)</title><rect x="1130.3" y="931.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.3" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1130.6" y="1075.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.6" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1130.6" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.6" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1130.6" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.6" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1130.6" y="1027.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.6" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1130.6" y="1011.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.6" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1130.6" y="995.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.6" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1130.6" y="979.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.6" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1130.6" y="963.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.6" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1130.6" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.6" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_unroll(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.6" y="931.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.6" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_unroll_slp_analysis(CountedLoopNode*, PhaseIdealLoop*, int) (1 samples, 0.02%)</title><rect x="1130.6" y="915.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.6" y="926.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1130.6" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.6" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1130.9" y="995.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.9" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_peel_only(PhaseIdealLoop*) const (1 samples, 0.02%)</title><rect x="1130.9" y="979.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.9" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1131.1" y="1075.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.02%)</title><rect x="1131.1" y="1059.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1131.1" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.02%)</title><rect x="1131.1" y="1027.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (11 samples, 0.25%)</title><rect x="1131.4" y="1075.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.4" y="1086.0"></text>
</g>
<g>
<title>HaltNode::is_CFG() const (1 samples, 0.02%)</title><rect x="1133.5" y="1059.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.5" y="1070.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.05%)</title><rect x="1133.8" y="1059.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 0.25%)</title><rect x="1134.3" y="1075.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (3 samples, 0.07%)</title><rect x="1136.2" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.07%)</title><rect x="1136.2" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.07%)</title><rect x="1136.2" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.2" y="1038.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.02%)</title><rect x="1137.0" y="1059.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (91 samples, 2.05%)</title><rect x="1137.2" y="1075.0" width="24.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.2" y="1086.0">P..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.02%)</title><rect x="1138.6" y="1059.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.6" y="1070.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1138.6" y="1043.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.6" y="1054.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.02%)</title><rect x="1138.6" y="1027.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1141.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (85 samples, 1.92%)</title><rect x="1138.8" y="1059.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.8" y="1070.0">P..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.02%)</title><rect x="1139.4" y="1043.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (81 samples, 1.83%)</title><rect x="1139.6" y="1043.0" width="21.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.6" y="1054.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.02%)</title><rect x="1139.6" y="1027.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1139.6" y="1011.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1139.9" y="1027.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (79 samples, 1.78%)</title><rect x="1140.2" y="1027.0" width="21.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.2" y="1038.0">P..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.0" y="1011.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1164.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.0" y="995.0" width="0.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1164.0" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.0" y="979.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1164.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1161.0" y="963.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1164.0" y="974.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.02%)</title><rect x="1161.2" y="1043.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1164.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (6 samples, 0.14%)</title><rect x="1161.5" y="1075.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.02%)</title><rect x="1162.8" y="1059.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (6 samples, 0.14%)</title><rect x="1163.1" y="1075.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.02%)</title><rect x="1163.9" y="1059.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1163.9" y="1043.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.05%)</title><rect x="1164.2" y="1059.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1164.2" y="1043.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.02%)</title><rect x="1164.4" y="1043.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1164.4" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.23%)</title><rect x="1164.7" y="1075.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.18%)</title><rect x="1165.0" y="1059.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.0" y="1070.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (3 samples, 0.07%)</title><rect x="1165.2" y="1043.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.2" y="1054.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (3 samples, 0.07%)</title><rect x="1165.2" y="1027.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.2" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1166.0" y="1043.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.0" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1166.3" y="1043.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.3" y="1054.0"></text>
</g>
<g>
<title>Type::empty() const (1 samples, 0.02%)</title><rect x="1166.3" y="1027.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.3" y="1038.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1166.6" y="1043.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.6" y="1054.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1166.8" y="1043.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1166.8" y="1027.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="1011.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.8" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="995.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="979.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.8" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="963.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="947.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.8" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="931.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="915.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.8" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="883.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="867.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.8" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="851.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="835.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.8" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="819.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="803.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.8" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1166.8" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1166.8" y="771.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1167.1" y="1059.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="1070.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.05%)</title><rect x="1167.4" y="1075.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1170.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1167.6" y="1059.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1170.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1167.6" y="1043.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1170.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1167.6" y="1027.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1170.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1167.6" y="1011.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1170.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1167.6" y="995.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1170.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1167.6" y="979.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1170.6" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1167.9" y="1091.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (17 samples, 0.38%)</title><rect x="1168.2" y="1091.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 0.36%)</title><rect x="1168.4" y="1075.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.4" y="1086.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.07%)</title><rect x="1168.7" y="1059.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.7" y="1070.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1168.7" y="1043.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.05%)</title><rect x="1169.0" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.05%)</title><rect x="1169.0" y="1027.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.0" y="1038.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.02%)</title><rect x="1169.2" y="1011.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.2" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.05%)</title><rect x="1169.5" y="1059.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="1070.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.05%)</title><rect x="1169.5" y="1043.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.5" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1169.5" y="1027.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1169.8" y="1027.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.8" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1169.8" y="1011.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="1022.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1169.8" y="995.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.8" y="1006.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.02%)</title><rect x="1170.0" y="1059.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.02%)</title><rect x="1170.3" y="1059.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.02%)</title><rect x="1170.3" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.05%)</title><rect x="1170.6" y="1059.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1170.8" y="1043.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.8" y="1054.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.02%)</title><rect x="1170.8" y="1027.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.8" y="1038.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.05%)</title><rect x="1171.1" y="1059.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.1" y="1070.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.05%)</title><rect x="1171.1" y="1043.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.1" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1171.6" y="1059.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.6" y="1070.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.02%)</title><rect x="1171.6" y="1043.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="1054.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1171.9" y="1059.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.9" y="1070.0"></text>
</g>
<g>
<title>SubNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1172.1" y="1059.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="1070.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1172.1" y="1043.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.1" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1172.4" y="1059.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.4" y="1070.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1172.4" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.02%)</title><rect x="1172.7" y="1091.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.02%)</title><rect x="1172.7" y="1075.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.02%)</title><rect x="1172.7" y="1059.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1172.7" y="1043.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.7" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.05%)</title><rect x="1172.9" y="1091.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.05%)</title><rect x="1172.9" y="1075.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1172.9" y="1059.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1172.9" y="1043.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="1054.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.02%)</title><rect x="1173.2" y="1059.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="1070.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1173.5" y="1091.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="1102.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1173.5" y="1075.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="1086.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1173.5" y="1059.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="1070.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.02%)</title><rect x="1173.7" y="1091.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1176.7" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (27 samples, 0.61%)</title><rect x="1174.0" y="1107.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.0" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (27 samples, 0.61%)</title><rect x="1174.0" y="1091.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (27 samples, 0.61%)</title><rect x="1174.0" y="1075.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.0" y="1086.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.02%)</title><rect x="1174.0" y="1059.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.0" y="1070.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.02%)</title><rect x="1174.0" y="1043.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.0" y="1054.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1174.0" y="1027.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (26 samples, 0.59%)</title><rect x="1174.3" y="1059.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (26 samples, 0.59%)</title><rect x="1174.3" y="1043.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (25 samples, 0.56%)</title><rect x="1174.3" y="1027.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (20 samples, 0.45%)</title><rect x="1174.3" y="1011.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.3" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (20 samples, 0.45%)</title><rect x="1174.3" y="995.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (20 samples, 0.45%)</title><rect x="1174.3" y="979.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (20 samples, 0.45%)</title><rect x="1174.3" y="963.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (20 samples, 0.45%)</title><rect x="1174.3" y="947.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (19 samples, 0.43%)</title><rect x="1174.3" y="931.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.3" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1174.3" y="915.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.3" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1174.3" y="899.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.3" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1174.3" y="883.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.3" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1174.3" y="867.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.3" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1174.3" y="851.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1174.3" y="835.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.3" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1174.3" y="819.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1174.3" y="803.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.02%)</title><rect x="1174.3" y="787.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1174.3" y="771.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="782.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1174.5" y="915.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1174.5" y="899.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1174.5" y="883.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1174.5" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="878.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1174.5" y="851.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1174.5" y="835.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="846.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1174.5" y="819.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="1174.5" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="814.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.02%)</title><rect x="1174.5" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 0.36%)</title><rect x="1174.8" y="915.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 0.36%)</title><rect x="1174.8" y="899.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.8" y="910.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.02%)</title><rect x="1174.8" y="883.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.34%)</title><rect x="1175.1" y="883.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 0.34%)</title><rect x="1175.1" y="867.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 0.34%)</title><rect x="1175.1" y="851.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.32%)</title><rect x="1175.1" y="835.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.1" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1175.1" y="819.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.1" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1175.1" y="803.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1175.1" y="787.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.1" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1175.1" y="771.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.1" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1175.1" y="755.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.1" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1175.1" y="739.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.1" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1175.1" y="723.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.1" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1175.1" y="707.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.1" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.02%)</title><rect x="1175.1" y="691.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.1" y="702.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.02%)</title><rect x="1175.1" y="675.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.1" y="686.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1175.3" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.02%)</title><rect x="1175.3" y="803.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.16%)</title><rect x="1175.6" y="819.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.16%)</title><rect x="1175.6" y="803.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.16%)</title><rect x="1175.6" y="787.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.16%)</title><rect x="1175.6" y="771.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.16%)</title><rect x="1175.6" y="755.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.14%)</title><rect x="1175.6" y="739.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1175.6" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.6" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1175.6" y="707.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.6" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1175.6" y="691.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.6" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1175.6" y="675.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1175.6" y="659.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.6" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1175.6" y="643.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.6" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1175.6" y="627.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.6" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1175.6" y="611.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.6" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1175.6" y="595.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1175.6" y="579.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1175.6" y="563.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1175.6" y="547.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="558.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1175.6" y="531.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.6" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1175.6" y="515.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.6" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1175.6" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="510.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.02%)</title><rect x="1175.6" y="483.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.6" y="494.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.02%)</title><rect x="1175.6" y="467.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1178.6" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1175.6" y="451.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1178.6" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1175.6" y="435.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1178.6" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1175.6" y="419.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1178.6" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1175.6" y="403.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1178.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.11%)</title><rect x="1175.9" y="723.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.11%)</title><rect x="1175.9" y="707.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.11%)</title><rect x="1175.9" y="691.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.11%)</title><rect x="1175.9" y="675.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.11%)</title><rect x="1175.9" y="659.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="670.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.02%)</title><rect x="1175.9" y="643.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="654.0"></text>
</g>
<g>
<title>Parse::array_store_check() (1 samples, 0.02%)</title><rect x="1175.9" y="627.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="638.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.02%)</title><rect x="1175.9" y="611.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.02%)</title><rect x="1175.9" y="595.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1175.9" y="579.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.9" y="590.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.02%)</title><rect x="1175.9" y="563.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.02%)</title><rect x="1175.9" y="547.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="558.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.02%)</title><rect x="1175.9" y="531.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="542.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.02%)</title><rect x="1175.9" y="515.0" width="0.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1178.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.09%)</title><rect x="1176.1" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1176.1" y="627.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1176.1" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1176.1" y="595.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1176.1" y="579.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1176.1" y="563.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1176.1" y="547.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="558.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1176.1" y="531.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="542.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.02%)</title><rect x="1176.1" y="515.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="526.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_getClass() (1 samples, 0.02%)</title><rect x="1176.1" y="499.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="510.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1176.1" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="494.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.02%)</title><rect x="1176.1" y="467.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.1" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1176.1" y="451.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="462.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1176.1" y="435.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1176.4" y="531.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1176.4" y="515.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1176.4" y="499.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1176.4" y="483.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1176.4" y="467.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1176.4" y="451.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1176.4" y="435.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1176.4" y="419.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1176.4" y="403.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1176.4" y="387.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1176.4" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1176.4" y="355.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1176.4" y="339.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1176.4" y="323.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1176.4" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1176.4" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1176.4" y="275.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1176.4" y="259.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="270.0"></text>
</g>
<g>
<title>CmpINode::sub(Type const*, Type const*) const (1 samples, 0.02%)</title><rect x="1176.4" y="243.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.02%)</title><rect x="1176.7" y="435.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1176.7" y="419.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1176.9" y="547.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1176.9" y="531.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1176.9" y="515.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1177.2" y="739.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1177.2" y="723.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.2" y="734.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1177.2" y="707.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="718.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1177.2" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1177.5" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1177.5" y="803.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1177.5" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1177.5" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1177.5" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1177.5" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.09%)</title><rect x="1177.5" y="723.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1177.5" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1177.5" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1177.5" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1177.5" y="659.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1177.5" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1177.5" y="627.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1177.5" y="611.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1177.5" y="595.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1177.5" y="579.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1177.5" y="563.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1177.5" y="547.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1177.5" y="531.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1177.5" y="515.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1177.5" y="499.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1177.5" y="483.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1177.5" y="467.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1177.5" y="451.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1177.5" y="435.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1177.5" y="419.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1177.5" y="403.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1177.5" y="387.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1177.5" y="371.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1177.5" y="355.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1177.5" y="339.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1177.5" y="323.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1177.5" y="307.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1177.5" y="291.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1177.5" y="275.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1177.5" y="259.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1177.5" y="243.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1177.5" y="227.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1177.5" y="211.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1177.5" y="195.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1177.5" y="179.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1177.5" y="163.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1177.5" y="147.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1177.5" y="131.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1177.5" y="115.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="126.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.02%)</title><rect x="1177.5" y="99.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="110.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.02%)</title><rect x="1177.5" y="83.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1177.5" y="67.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.02%)</title><rect x="1177.5" y="51.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.02%)</title><rect x="1177.5" y="35.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1177.7" y="339.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1177.7" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1177.7" y="307.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1177.7" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="302.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1177.7" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1178.0" y="515.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1178.0" y="499.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1178.0" y="483.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1178.0" y="467.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1178.0" y="451.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1178.0" y="435.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1178.0" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.0" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1178.0" y="403.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1178.0" y="387.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1178.0" y="371.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1178.0" y="355.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1178.0" y="339.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.02%)</title><rect x="1178.0" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="334.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.02%)</title><rect x="1178.0" y="307.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.0" y="318.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.02%)</title><rect x="1178.0" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="302.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.02%)</title><rect x="1178.0" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="286.0"></text>
</g>
<g>
<title>ciMethod::is_method_handle_intrinsic() const (1 samples, 0.02%)</title><rect x="1178.3" y="627.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1178.5" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1178.5" y="803.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1178.5" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1178.5" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1178.8" y="835.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1178.8" y="819.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="830.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1178.8" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1178.8" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1178.8" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1178.8" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1178.8" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1178.8" y="723.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="915.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="899.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="883.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="867.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="851.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="835.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="819.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="803.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="787.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="771.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="755.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="739.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="723.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="707.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="691.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="675.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="659.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="643.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="627.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="611.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="595.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="579.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="563.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="547.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="531.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="515.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="499.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="483.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="467.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="451.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="435.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="419.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="403.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="387.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="371.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="355.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="339.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="323.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="307.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="291.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="275.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="259.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="243.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="227.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="211.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="195.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.1" y="206.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.02%)</title><rect x="1179.1" y="179.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_monitor_enter() (1 samples, 0.02%)</title><rect x="1179.3" y="931.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="942.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.02%)</title><rect x="1179.3" y="915.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="926.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1179.3" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="910.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.02%)</title><rect x="1179.3" y="883.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.11%)</title><rect x="1179.6" y="1011.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.11%)</title><rect x="1179.6" y="995.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.11%)</title><rect x="1179.6" y="979.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.11%)</title><rect x="1179.6" y="963.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.11%)</title><rect x="1179.6" y="947.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.11%)</title><rect x="1179.6" y="931.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.11%)</title><rect x="1179.6" y="915.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.11%)</title><rect x="1179.6" y="899.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.11%)</title><rect x="1179.6" y="883.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.11%)</title><rect x="1179.6" y="867.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.11%)</title><rect x="1179.6" y="851.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.11%)</title><rect x="1179.6" y="835.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.11%)</title><rect x="1179.6" y="819.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1179.6" y="803.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1179.6" y="787.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1179.6" y="771.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1179.6" y="755.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.02%)</title><rect x="1179.6" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="750.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.02%)</title><rect x="1179.6" y="723.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="734.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.02%)</title><rect x="1179.6" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="718.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.02%)</title><rect x="1179.6" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="702.0"></text>
</g>
<g>
<title>Parse::ensure_memory_phi(int, bool) (1 samples, 0.02%)</title><rect x="1179.6" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1179.9" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1179.9" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1179.9" y="707.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1179.9" y="691.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1179.9" y="675.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1179.9" y="659.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1179.9" y="643.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1179.9" y="627.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1179.9" y="611.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1179.9" y="595.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1179.9" y="579.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.02%)</title><rect x="1179.9" y="563.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1180.1" y="611.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1180.1" y="595.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1180.1" y="579.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1180.1" y="563.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1180.1" y="547.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1180.1" y="531.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="542.0"></text>
</g>
<g>
<title>Parse::branch_prediction(float&amp;, BoolTest::mask, int, Node*) (1 samples, 0.02%)</title><rect x="1180.1" y="515.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="526.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.02%)</title><rect x="1180.1" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.1" y="510.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.02%)</title><rect x="1180.1" y="483.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.1" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.4" y="803.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.4" y="787.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.4" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.4" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.4" y="739.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.4" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1180.4" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.4" y="691.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.4" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.4" y="659.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.4" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.4" y="627.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1180.4" y="611.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.4" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.4" y="579.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.4" y="563.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.4" y="547.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.4" y="531.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1180.4" y="515.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.4" y="499.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.4" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1180.4" y="467.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1180.4" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1180.4" y="435.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1180.4" y="419.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1180.4" y="403.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1180.4" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1180.4" y="371.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1180.4" y="355.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1180.4" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1180.4" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1180.4" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1180.4" y="291.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1180.4" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1180.4" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1180.4" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1180.4" y="227.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1180.4" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1180.4" y="195.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1180.4" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1180.4" y="163.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1180.4" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1180.4" y="131.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="142.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.02%)</title><rect x="1180.7" y="467.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1180.9" y="1027.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1180.9" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1180.9" y="995.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="1006.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1180.9" y="979.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1180.9" y="963.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1180.9" y="947.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="958.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.07%)</title><rect x="1181.2" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (3 samples, 0.07%)</title><rect x="1181.2" y="1091.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="1102.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (2 samples, 0.05%)</title><rect x="1181.5" y="1075.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="1086.0"></text>
</g>
<g>
<title>CompileTask::print(outputStream*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1182.0" y="1139.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="1150.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.02%)</title><rect x="1182.0" y="1123.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="1134.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (17 samples, 0.38%)</title><rect x="1182.3" y="1139.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="1150.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (17 samples, 0.38%)</title><rect x="1182.3" y="1123.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_method() (17 samples, 0.38%)</title><rect x="1182.3" y="1107.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (17 samples, 0.38%)</title><rect x="1182.3" y="1091.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="1102.0"></text>
</g>
<g>
<title>Compilation::build_hir() (7 samples, 0.16%)</title><rect x="1182.3" y="1075.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="1086.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.02%)</title><rect x="1182.3" y="1059.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="1070.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.02%)</title><rect x="1182.3" y="1043.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="1054.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (5 samples, 0.11%)</title><rect x="1182.5" y="1059.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="1070.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (5 samples, 0.11%)</title><rect x="1182.5" y="1043.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (5 samples, 0.11%)</title><rect x="1182.5" y="1027.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 0.11%)</title><rect x="1182.5" y="1011.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 0.11%)</title><rect x="1182.5" y="995.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1182.5" y="979.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="990.0"></text>
</g>
<g>
<title>Canonicalizer::do_LoadField(LoadField*) (1 samples, 0.02%)</title><rect x="1182.5" y="963.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.09%)</title><rect x="1182.8" y="979.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.09%)</title><rect x="1182.8" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.09%)</title><rect x="1182.8" y="947.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.09%)</title><rect x="1182.8" y="931.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.09%)</title><rect x="1182.8" y="915.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="926.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.02%)</title><rect x="1182.8" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="910.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.02%)</title><rect x="1182.8" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="894.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1182.8" y="867.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.07%)</title><rect x="1183.1" y="899.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.02%)</title><rect x="1183.1" y="883.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.02%)</title><rect x="1183.1" y="867.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="878.0"></text>
</g>
<g>
<title>Instruction::as_Phi() (1 samples, 0.02%)</title><rect x="1183.1" y="851.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1183.3" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1183.3" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.02%)</title><rect x="1183.3" y="851.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="862.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.02%)</title><rect x="1183.3" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="846.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.02%)</title><rect x="1183.3" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.02%)</title><rect x="1183.3" y="803.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1183.6" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1183.6" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1183.6" y="851.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1183.6" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="846.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1183.6" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="830.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.02%)</title><rect x="1183.6" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1183.6" y="787.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.02%)</title><rect x="1183.6" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="782.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.02%)</title><rect x="1183.6" y="755.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="766.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.02%)</title><rect x="1183.9" y="1059.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.05%)</title><rect x="1184.1" y="1075.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.02%)</title><rect x="1184.1" y="1059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.02%)</title><rect x="1184.1" y="1043.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.02%)</title><rect x="1184.4" y="1059.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.4" y="1070.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.02%)</title><rect x="1184.4" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.4" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.02%)</title><rect x="1184.4" y="1027.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="1038.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.02%)</title><rect x="1184.4" y="1011.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.02%)</title><rect x="1184.4" y="995.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1184.4" y="979.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="990.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (8 samples, 0.18%)</title><rect x="1184.7" y="1075.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="1086.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (3 samples, 0.07%)</title><rect x="1184.7" y="1059.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.7" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (3 samples, 0.07%)</title><rect x="1184.7" y="1043.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.02%)</title><rect x="1184.7" y="1027.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="1038.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.02%)</title><rect x="1184.7" y="1011.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.7" y="1022.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(PhiResolver*, Instruction*, Instruction*) (1 samples, 0.02%)</title><rect x="1184.7" y="995.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.7" y="1006.0"></text>
</g>
<g>
<title>PhiResolver::create_node(LIR_OprDesc*, bool) (1 samples, 0.02%)</title><rect x="1184.7" y="979.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.7" y="990.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileCall(ProfileCall*) (1 samples, 0.02%)</title><rect x="1184.9" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.9" y="1038.0"></text>
</g>
<g>
<title>LIRGenerator::profile_arguments(ProfileCall*) (1 samples, 0.02%)</title><rect x="1184.9" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.9" y="1022.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.02%)</title><rect x="1184.9" y="995.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.9" y="1006.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.02%)</title><rect x="1184.9" y="979.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="990.0"></text>
</g>
<g>
<title>LIRGenerator::do_StoreField(StoreField*) (1 samples, 0.02%)</title><rect x="1185.2" y="1027.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1038.0"></text>
</g>
<g>
<title>LIRGenerator::access_store_at(unsigned long, BasicType, LIRItem&amp;, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, CodeEmitInfo*) (1 samples, 0.02%)</title><rect x="1185.2" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="1022.0"></text>
</g>
<g>
<title>ModRefBarrierSetC1::store_at_resolved(LIRAccess&amp;, LIR_OprDesc*) (1 samples, 0.02%)</title><rect x="1185.2" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="1006.0"></text>
</g>
<g>
<title>G1BarrierSetC1::pre_barrier(LIRAccess&amp;, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*) (1 samples, 0.02%)</title><rect x="1185.2" y="979.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="990.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (5 samples, 0.11%)</title><rect x="1185.5" y="1059.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.5" y="1070.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (3 samples, 0.07%)</title><rect x="1185.5" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="1054.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (3 samples, 0.07%)</title><rect x="1185.5" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.5" y="1038.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (3 samples, 0.07%)</title><rect x="1185.5" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.5" y="1022.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (3 samples, 0.07%)</title><rect x="1185.5" y="995.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="1006.0"></text>
</g>
<g>
<title>LinearScanWalker::find_free_reg(int, int, int, int, bool*) (1 samples, 0.02%)</title><rect x="1185.5" y="979.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.5" y="990.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (2 samples, 0.05%)</title><rect x="1185.7" y="979.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="990.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.02%)</title><rect x="1186.3" y="1043.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="1054.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.02%)</title><rect x="1186.3" y="1027.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.3" y="1038.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.02%)</title><rect x="1186.5" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.5" y="1054.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.02%)</title><rect x="1186.8" y="1139.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.8" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.02%)</title><rect x="1186.8" y="1123.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.8" y="1134.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (1 samples, 0.02%)</title><rect x="1187.1" y="1155.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="1166.0"></text>
</g>
<g>
<title>__GI_sysinfo (1 samples, 0.02%)</title><rect x="1187.1" y="1139.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1190.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1187.1" y="1123.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1190.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1187.1" y="1107.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1190.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1187.1" y="1091.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1190.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1187.1" y="1075.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1190.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1187.1" y="1059.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1190.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1187.1" y="1043.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1190.1" y="1054.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.07%)</title><rect x="1187.3" y="1171.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.3" y="1182.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.07%)</title><rect x="1187.3" y="1155.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="1166.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (3 samples, 0.07%)</title><rect x="1187.3" y="1139.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.3" y="1150.0"></text>
</g>
<g>
<title>JNIHandles::make_local(Thread*, oopDesc*) (1 samples, 0.02%)</title><rect x="1187.3" y="1123.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.3" y="1134.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.05%)</title><rect x="1187.6" y="1123.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1190.6" y="1134.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.02%)</title><rect x="1187.6" y="1107.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="1118.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.02%)</title><rect x="1187.9" y="1107.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="1118.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.02%)</title><rect x="1188.1" y="1203.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.1" y="1214.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.02%)</title><rect x="1188.1" y="1187.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.1" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.02%)</title><rect x="1188.1" y="1171.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="1182.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.02%)</title><rect x="1188.1" y="1155.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="1166.0"></text>
</g>
<g>
<title>ObjectSynchronizer::finish_deflate_idle_monitors(DeflateMonitorCounters*) (1 samples, 0.02%)</title><rect x="1188.1" y="1139.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.1" y="1150.0"></text>
</g>
<g>
<title>WatcherThread::run() (6 samples, 0.14%)</title><rect x="1188.4" y="1203.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="1214.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.05%)</title><rect x="1188.4" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.4" y="1198.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (2 samples, 0.05%)</title><rect x="1188.4" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="1182.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (2 samples, 0.05%)</title><rect x="1188.4" y="1155.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.4" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1188.7" y="1139.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1191.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1188.7" y="1123.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1191.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1188.7" y="1107.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1191.7" y="1118.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.09%)</title><rect x="1188.9" y="1187.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.9" y="1198.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="1188.9" y="1171.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="1182.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.07%)</title><rect x="1189.2" y="1171.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.2" y="1182.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.07%)</title><rect x="1189.2" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.2" y="1166.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.07%)</title><rect x="1189.2" y="1139.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1192.2" y="1150.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1189.2" y="1123.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1192.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1189.2" y="1107.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1192.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1189.2" y="1091.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1192.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1189.2" y="1075.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1192.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1189.2" y="1059.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1192.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1189.7" y="1043.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1192.7" y="1054.0"></text>
</g>
</g>
</svg>
