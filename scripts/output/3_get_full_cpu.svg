<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (4,841 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.04%)</title><rect x="10.0" y="931.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.12%)</title><rect x="10.7" y="931.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.7" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.10%)</title><rect x="11.0" y="915.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.10%)</title><rect x="11.0" y="899.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.08%)</title><rect x="11.0" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.06%)</title><rect x="11.0" y="867.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.0" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.06%)</title><rect x="11.0" y="851.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.04%)</title><rect x="11.0" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.04%)</title><rect x="11.0" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.0" y="830.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.04%)</title><rect x="11.0" y="803.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.12%)</title><rect x="12.2" y="931.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.2" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.10%)</title><rect x="12.4" y="915.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.10%)</title><rect x="12.4" y="899.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.4" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.10%)</title><rect x="12.4" y="883.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.4" y="894.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (5 samples, 0.10%)</title><rect x="12.4" y="867.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.4" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.06%)</title><rect x="12.7" y="851.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.7" y="862.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (2 samples, 0.04%)</title><rect x="12.9" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.9" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (23 samples, 0.48%)</title><rect x="13.7" y="931.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.7" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (23 samples, 0.48%)</title><rect x="13.7" y="915.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (23 samples, 0.48%)</title><rect x="13.7" y="899.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.7" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (21 samples, 0.43%)</title><rect x="13.7" y="883.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.7" y="894.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (17 samples, 0.35%)</title><rect x="14.4" y="867.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.4" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (15 samples, 0.31%)</title><rect x="14.6" y="851.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.6" y="862.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (2 samples, 0.04%)</title><rect x="14.9" y="835.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="17.9" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (9 samples, 0.19%)</title><rect x="15.4" y="835.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.4" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (8 samples, 0.17%)</title><rect x="15.6" y="819.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.6" y="830.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (4 samples, 0.08%)</title><rect x="15.6" y="803.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (4 samples, 0.08%)</title><rect x="15.6" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="18.6" y="798.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (2 samples, 0.04%)</title><rect x="16.1" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.1" y="782.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (4 samples, 0.08%)</title><rect x="16.6" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (4 samples, 0.08%)</title><rect x="16.6" y="787.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.6" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (4 samples, 0.08%)</title><rect x="16.6" y="771.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.6" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (2 samples, 0.04%)</title><rect x="17.1" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="20.1" y="766.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (2 samples, 0.04%)</title><rect x="19.3" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="22.3" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (32 samples, 0.66%)</title><rect x="19.8" y="931.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="22.8" y="942.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (29 samples, 0.60%)</title><rect x="20.2" y="915.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="23.2" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (11 samples, 0.23%)</title><rect x="20.7" y="899.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="23.7" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.14%)</title><rect x="21.0" y="883.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="24.0" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.06%)</title><rect x="22.7" y="883.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="25.7" y="894.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="22.7" y="867.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="25.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="22.7" y="851.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="25.7" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (15 samples, 0.31%)</title><rect x="23.4" y="899.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="26.4" y="910.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.04%)</title><rect x="27.6" y="931.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="30.6" y="942.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.06%)</title><rect x="28.3" y="931.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="31.3" y="942.0"></text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.12%)</title><rect x="29.0" y="931.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="32.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="29.3" y="915.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="32.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.04%)</title><rect x="29.3" y="899.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="32.3" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.04%)</title><rect x="29.3" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="32.3" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.04%)</title><rect x="30.0" y="915.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="33.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.12%)</title><rect x="30.5" y="931.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="33.5" y="942.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="30.5" y="915.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="33.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="30.5" y="899.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="33.5" y="910.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="30.5" y="883.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="33.5" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="30.5" y="867.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="33.5" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="30.5" y="851.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="33.5" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="30.5" y="835.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="33.5" y="846.0"></text>
</g>
<g>
<title>__GI___open64 (2 samples, 0.04%)</title><rect x="31.0" y="915.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="34.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="31.0" y="899.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="34.0" y="910.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="31.0" y="883.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="34.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="31.0" y="867.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="34.0" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="31.0" y="851.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="34.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="31.0" y="835.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="34.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="31.0" y="819.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="34.0" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="31.0" y="803.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="34.0" y="814.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="31.5" y="915.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="34.5" y="926.0"></text>
</g>
<g>
<title>[unknown_Java] (34 samples, 0.70%)</title><rect x="31.9" y="931.0" width="8.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="34.9" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.10%)</title><rect x="36.6" y="915.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="39.6" y="926.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (10 samples, 0.21%)</title><rect x="37.8" y="915.0" width="2.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="40.8" y="926.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="38.0" y="899.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="41.0" y="910.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="38.0" y="883.0" width="2.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="41.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="38.3" y="867.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="41.3" y="878.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.14%)</title><rect x="38.5" y="851.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="41.5" y="862.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.14%)</title><rect x="38.5" y="835.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="41.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.12%)</title><rect x="38.8" y="819.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="41.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.12%)</title><rect x="38.8" y="803.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="41.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.12%)</title><rect x="38.8" y="787.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="41.8" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 0.17%)</title><rect x="40.5" y="931.0" width="1.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="43.5" y="942.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="41.2" y="915.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="44.2" y="926.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="41.2" y="899.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="44.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="41.2" y="883.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="44.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="41.2" y="867.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="44.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="41.2" y="851.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="44.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="41.7" y="835.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="44.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="41.9" y="819.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="44.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="41.9" y="803.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="44.9" y="814.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="42.4" y="931.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="45.4" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,160 samples, 65.28%)</title><rect x="42.9" y="931.0" width="770.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.9" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,160 samples, 65.28%)</title><rect x="42.9" y="915.0" width="770.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="45.9" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,160 samples, 65.28%)</title><rect x="42.9" y="899.0" width="770.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.9" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.06%)</title><rect x="43.9" y="883.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="43.9" y="867.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.06%)</title><rect x="43.9" y="851.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.06%)</title><rect x="43.9" y="835.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.9" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.06%)</title><rect x="43.9" y="819.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="46.9" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.06%)</title><rect x="43.9" y="803.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.08%)</title><rect x="44.6" y="883.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.08%)</title><rect x="44.6" y="867.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 0.04%)</title><rect x="45.1" y="851.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.04%)</title><rect x="45.1" y="835.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (470 samples, 9.71%)</title><rect x="45.6" y="883.0" width="114.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.6" y="894.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (458 samples, 9.46%)</title><rect x="47.8" y="867.0" width="111.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.8" y="878.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (331 samples, 6.84%)</title><rect x="48.3" y="851.0" width="80.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="51.3" y="862.0">java/util..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (10 samples, 0.21%)</title><rect x="49.5" y="835.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4 samples, 0.08%)</title><rect x="51.9" y="835.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (31 samples, 0.64%)</title><rect x="53.1" y="835.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="53.6" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.04%)</title><rect x="53.6" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (27 samples, 0.56%)</title><rect x="54.1" y="819.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="57.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (27 samples, 0.56%)</title><rect x="54.1" y="803.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (6 samples, 0.12%)</title><rect x="57.8" y="787.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.12%)</title><rect x="59.2" y="787.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.2" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.12%)</title><rect x="59.2" y="771.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.2" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (6 samples, 0.12%)</title><rect x="59.2" y="755.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="62.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (19 samples, 0.39%)</title><rect x="60.7" y="835.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.39%)</title><rect x="60.7" y="819.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="63.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 0.33%)</title><rect x="60.7" y="803.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 0.33%)</title><rect x="60.7" y="787.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.7" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (16 samples, 0.33%)</title><rect x="60.7" y="771.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.7" y="782.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (14 samples, 0.29%)</title><rect x="61.2" y="755.0" width="3.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="64.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.27%)</title><rect x="61.4" y="739.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="64.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.27%)</title><rect x="61.4" y="723.0" width="3.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="64.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.27%)</title><rect x="61.4" y="707.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="64.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.27%)</title><rect x="61.4" y="691.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="64.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.27%)</title><rect x="61.4" y="675.0" width="3.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="64.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="62.4" y="659.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="65.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="62.4" y="643.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="65.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="62.4" y="627.0" width="2.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="65.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.06%)</title><rect x="64.6" y="803.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (261 samples, 5.39%)</title><rect x="65.3" y="835.0" width="63.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.3" y="846.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (261 samples, 5.39%)</title><rect x="65.3" y="819.0" width="63.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.3" y="830.0">jdk/int..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="66.3" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="69.3" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.04%)</title><rect x="66.8" y="803.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="69.8" y="814.0"></text>
</g>
<g>
<title>Unsafe_Park (120 samples, 2.48%)</title><rect x="67.5" y="803.0" width="29.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="70.5" y="814.0">Un..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.08%)</title><rect x="70.5" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="73.5" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (30 samples, 0.62%)</title><rect x="71.7" y="787.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="74.7" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (10 samples, 0.21%)</title><rect x="76.5" y="771.0" width="2.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="79.5" y="782.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.06%)</title><rect x="79.0" y="787.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="82.0" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (5 samples, 0.10%)</title><rect x="79.7" y="787.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="82.7" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (41 samples, 0.85%)</title><rect x="81.2" y="787.0" width="10.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="84.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.62%)</title><rect x="83.9" y="771.0" width="7.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="86.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.62%)</title><rect x="83.9" y="755.0" width="7.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="86.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.33%)</title><rect x="87.3" y="739.0" width="3.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="90.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.27%)</title><rect x="88.0" y="723.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="91.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.25%)</title><rect x="88.2" y="707.0" width="3.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="91.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.08%)</title><rect x="90.2" y="691.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="93.2" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.06%)</title><rect x="91.2" y="787.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="94.2" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="91.9" y="787.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="94.9" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.10%)</title><rect x="92.4" y="787.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="95.4" y="798.0"></text>
</g>
<g>
<title>_init (2 samples, 0.04%)</title><rect x="93.6" y="787.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="96.6" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="94.1" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="97.1" y="798.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.19%)</title><rect x="94.6" y="787.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="97.6" y="798.0"></text>
</g>
<g>
<title>[unknown] (127 samples, 2.62%)</title><rect x="96.8" y="803.0" width="30.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="99.8" y="814.0">[u..</text>
</g>
<g>
<title>__pthread_cleanup_pop (3 samples, 0.06%)</title><rect x="96.8" y="787.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="99.8" y="798.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (3 samples, 0.06%)</title><rect x="97.5" y="787.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="100.5" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_wait (106 samples, 2.19%)</title><rect x="98.2" y="787.0" width="25.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="101.2" y="798.0">_..</text>
</g>
<g>
<title>[unknown] (65 samples, 1.34%)</title><rect x="108.2" y="771.0" width="15.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="111.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.34%)</title><rect x="108.2" y="755.0" width="15.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="111.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 1.16%)</title><rect x="110.4" y="739.0" width="13.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="113.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.12%)</title><rect x="110.9" y="723.0" width="13.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="113.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.01%)</title><rect x="112.1" y="707.0" width="12.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="115.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 0.87%)</title><rect x="113.8" y="691.0" width="10.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="116.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.52%)</title><rect x="118.0" y="675.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="121.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.39%)</title><rect x="119.4" y="659.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="122.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.31%)</title><rect x="120.4" y="643.0" width="3.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="123.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="123.6" y="627.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="126.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="123.6" y="611.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="126.6" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="123.6" y="595.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="126.6" y="606.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.12%)</title><rect x="124.1" y="787.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="127.1" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (6 samples, 0.12%)</title><rect x="125.5" y="787.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="128.5" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="127.0" y="787.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="130.0" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.04%)</title><rect x="127.7" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="130.7" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.06%)</title><rect x="128.2" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="131.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (52 samples, 1.07%)</title><rect x="129.0" y="851.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (52 samples, 1.07%)</title><rect x="129.0" y="835.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.08%)</title><rect x="129.0" y="819.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (29 samples, 0.60%)</title><rect x="129.9" y="819.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.17%)</title><rect x="130.9" y="803.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.14%)</title><rect x="131.1" y="787.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (6 samples, 0.12%)</title><rect x="131.1" y="771.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (17 samples, 0.35%)</title><rect x="132.9" y="803.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="135.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (19 samples, 0.39%)</title><rect x="137.0" y="819.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (19 samples, 0.39%)</title><rect x="137.0" y="803.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (5 samples, 0.10%)</title><rect x="138.2" y="787.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (8 samples, 0.17%)</title><rect x="139.4" y="787.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 1.51%)</title><rect x="141.6" y="851.0" width="17.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 1.51%)</title><rect x="141.6" y="835.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (73 samples, 1.51%)</title><rect x="141.6" y="819.0" width="17.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (73 samples, 1.51%)</title><rect x="141.6" y="803.0" width="17.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.6" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (73 samples, 1.51%)</title><rect x="141.6" y="787.0" width="17.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="144.6" y="798.0"></text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 0.21%)</title><rect x="142.4" y="771.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="145.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.10%)</title><rect x="142.6" y="755.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="145.6" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.04%)</title><rect x="143.8" y="755.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="146.8" y="766.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (60 samples, 1.24%)</title><rect x="144.8" y="771.0" width="14.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="147.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.14%)</title><rect x="146.0" y="755.0" width="13.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="149.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.14%)</title><rect x="146.0" y="739.0" width="13.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="149.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.12%)</title><rect x="146.3" y="723.0" width="13.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="149.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.12%)</title><rect x="146.3" y="707.0" width="13.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="149.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.12%)</title><rect x="146.3" y="691.0" width="13.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="149.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.05%)</title><rect x="147.0" y="675.0" width="12.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="150.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 0.97%)</title><rect x="148.0" y="659.0" width="11.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="151.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 0.97%)</title><rect x="148.0" y="643.0" width="11.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="151.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.04%)</title><rect x="159.7" y="867.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="162.7" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.run (2,679 samples, 55.34%)</title><rect x="160.2" y="883.0" width="653.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="163.2" y="894.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (2,678 samples, 55.32%)</title><rect x="160.4" y="867.0" width="652.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.4" y="878.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,357 samples, 28.03%)</title><rect x="160.4" y="851.0" width="330.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="163.4" y="862.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (14 samples, 0.29%)</title><rect x="161.6" y="835.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="164.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.14%)</title><rect x="163.3" y="819.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.3" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.12%)</title><rect x="163.6" y="803.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.12%)</title><rect x="163.6" y="787.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="166.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.12%)</title><rect x="163.6" y="771.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.6" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (6 samples, 0.12%)</title><rect x="163.6" y="755.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.6" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (4 samples, 0.08%)</title><rect x="164.1" y="739.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,276 samples, 26.36%)</title><rect x="165.0" y="835.0" width="311.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.0" y="846.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (36 samples, 0.74%)</title><rect x="165.0" y="819.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="168.0" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="165.8" y="803.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="168.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (29 samples, 0.60%)</title><rect x="166.7" y="803.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (13 samples, 0.27%)</title><rect x="167.5" y="787.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.06%)</title><rect x="169.9" y="771.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="172.9" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (13 samples, 0.27%)</title><rect x="170.6" y="787.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (13 samples, 0.27%)</title><rect x="170.6" y="771.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="172.1" y="755.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="172.1" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.1" y="750.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (4 samples, 0.08%)</title><rect x="172.8" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.8" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,240 samples, 25.61%)</title><rect x="173.8" y="819.0" width="302.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.8" y="830.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,240 samples, 25.61%)</title><rect x="173.8" y="803.0" width="302.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.8" y="814.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,240 samples, 25.61%)</title><rect x="173.8" y="787.0" width="302.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.8" y="798.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,240 samples, 25.61%)</title><rect x="173.8" y="771.0" width="302.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.8" y="782.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (67 samples, 1.38%)</title><rect x="178.2" y="755.0" width="16.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="181.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (67 samples, 1.38%)</title><rect x="178.2" y="739.0" width="16.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="181.2" y="750.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (57 samples, 1.18%)</title><rect x="178.2" y="723.0" width="13.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="181.2" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.12%)</title><rect x="180.4" y="707.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="183.4" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="181.8" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="184.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (4 samples, 0.08%)</title><rect x="182.3" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="185.3" y="718.0"></text>
</g>
<g>
<title>__memmove_ssse3 (9 samples, 0.19%)</title><rect x="183.3" y="707.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="186.3" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (22 samples, 0.45%)</title><rect x="185.7" y="707.0" width="5.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="188.7" y="718.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (7 samples, 0.14%)</title><rect x="187.0" y="691.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="190.0" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (4 samples, 0.08%)</title><rect x="188.7" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="191.7" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.04%)</title><rect x="189.6" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="192.6" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.08%)</title><rect x="190.1" y="691.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="193.1" y="702.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.08%)</title><rect x="191.1" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="194.1" y="718.0"></text>
</g>
<g>
<title>__send (7 samples, 0.14%)</title><rect x="192.3" y="723.0" width="1.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="195.3" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="194.0" y="723.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="197.0" y="734.0"></text>
</g>
<g>
<title>__send (1,154 samples, 23.84%)</title><rect x="194.8" y="755.0" width="281.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="197.8" y="766.0">__send</text>
</g>
<g>
<title>[unknown] (1,135 samples, 23.45%)</title><rect x="199.4" y="739.0" width="276.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="202.4" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,135 samples, 23.45%)</title><rect x="199.4" y="723.0" width="276.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="202.4" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,113 samples, 22.99%)</title><rect x="204.8" y="707.0" width="271.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="207.8" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,112 samples, 22.97%)</title><rect x="205.0" y="691.0" width="271.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="208.0" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,104 samples, 22.81%)</title><rect x="207.0" y="675.0" width="269.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="210.0" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,094 samples, 22.60%)</title><rect x="209.4" y="659.0" width="266.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="212.4" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,087 samples, 22.45%)</title><rect x="211.1" y="643.0" width="265.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="214.1" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,077 samples, 22.25%)</title><rect x="213.5" y="627.0" width="262.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="216.5" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,014 samples, 20.95%)</title><rect x="228.9" y="611.0" width="247.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="231.9" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (985 samples, 20.35%)</title><rect x="236.0" y="595.0" width="240.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="239.0" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (940 samples, 19.42%)</title><rect x="246.9" y="579.0" width="229.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="249.9" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (882 samples, 18.22%)</title><rect x="261.1" y="563.0" width="215.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="264.1" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (809 samples, 16.71%)</title><rect x="278.9" y="547.0" width="197.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="281.9" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (787 samples, 16.26%)</title><rect x="284.2" y="531.0" width="191.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="287.2" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (771 samples, 15.93%)</title><rect x="288.1" y="515.0" width="188.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="291.1" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (764 samples, 15.78%)</title><rect x="289.8" y="499.0" width="186.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="292.8" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (752 samples, 15.53%)</title><rect x="292.8" y="483.0" width="183.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="295.8" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (719 samples, 14.85%)</title><rect x="300.8" y="467.0" width="175.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="303.8" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (686 samples, 14.17%)</title><rect x="308.8" y="451.0" width="167.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="311.8" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (655 samples, 13.53%)</title><rect x="316.4" y="435.0" width="159.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="319.4" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (585 samples, 12.08%)</title><rect x="333.5" y="419.0" width="142.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="336.5" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (547 samples, 11.30%)</title><rect x="342.7" y="403.0" width="133.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="345.7" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (520 samples, 10.74%)</title><rect x="349.3" y="387.0" width="126.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="352.3" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (504 samples, 10.41%)</title><rect x="353.2" y="371.0" width="122.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="356.2" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (491 samples, 10.14%)</title><rect x="356.4" y="355.0" width="119.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="359.4" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (477 samples, 9.85%)</title><rect x="359.8" y="339.0" width="116.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="362.8" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (472 samples, 9.75%)</title><rect x="361.0" y="323.0" width="115.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="364.0" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (463 samples, 9.56%)</title><rect x="363.2" y="307.0" width="112.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="366.2" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (435 samples, 8.99%)</title><rect x="370.0" y="291.0" width="106.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="373.0" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (427 samples, 8.82%)</title><rect x="372.0" y="275.0" width="104.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="375.0" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (416 samples, 8.59%)</title><rect x="374.7" y="259.0" width="101.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="377.7" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (403 samples, 8.32%)</title><rect x="377.8" y="243.0" width="98.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="380.8" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (372 samples, 7.68%)</title><rect x="385.4" y="227.0" width="90.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="388.4" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (348 samples, 7.19%)</title><rect x="391.2" y="211.0" width="84.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="394.2" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (332 samples, 6.86%)</title><rect x="395.1" y="195.0" width="81.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="398.1" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (273 samples, 5.64%)</title><rect x="409.5" y="179.0" width="66.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="412.5" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (221 samples, 4.57%)</title><rect x="422.2" y="163.0" width="53.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="425.2" y="174.0">[unkn..</text>
</g>
<g>
<title>[unknown] (209 samples, 4.32%)</title><rect x="425.1" y="147.0" width="51.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="428.1" y="158.0">[unkn..</text>
</g>
<g>
<title>[unknown] (195 samples, 4.03%)</title><rect x="428.5" y="131.0" width="47.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="431.5" y="142.0">[unk..</text>
</g>
<g>
<title>[unknown] (22 samples, 0.45%)</title><rect x="470.7" y="115.0" width="5.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="473.7" y="126.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.35%)</title><rect x="471.9" y="99.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="474.9" y="110.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.33%)</title><rect x="472.2" y="83.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="475.2" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (51 samples, 1.05%)</title><rect x="476.1" y="835.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.1" y="846.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.17%)</title><rect x="476.5" y="819.0" width="2.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="479.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (29 samples, 0.60%)</title><rect x="478.5" y="819.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="481.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (9 samples, 0.19%)</title><rect x="479.2" y="803.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.35%)</title><rect x="481.4" y="803.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.12%)</title><rect x="482.1" y="787.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.12%)</title><rect x="482.1" y="771.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.1" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (5 samples, 0.10%)</title><rect x="482.4" y="755.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="485.4" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.04%)</title><rect x="483.1" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (8 samples, 0.17%)</title><rect x="483.6" y="787.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (7 samples, 0.14%)</title><rect x="483.9" y="771.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="486.9" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (5 samples, 0.10%)</title><rect x="484.1" y="755.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="487.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.08%)</title><rect x="485.6" y="819.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="488.6" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.08%)</title><rect x="485.6" y="803.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.6" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="486.0" y="787.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="489.0" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.17%)</title><rect x="486.5" y="819.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="489.5" y="830.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.17%)</title><rect x="486.5" y="803.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="489.5" y="814.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.14%)</title><rect x="486.8" y="787.0" width="1.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="489.8" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (6 samples, 0.12%)</title><rect x="488.5" y="835.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.5" y="846.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.04%)</title><rect x="489.9" y="835.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.9" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (3 samples, 0.06%)</title><rect x="490.4" y="835.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="493.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.action (1,321 samples, 27.29%)</title><rect x="491.2" y="851.0" width="322.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.2" y="862.0">ru/mail/polis/service/igorlo/AsyncService$$..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0 (1,321 samples, 27.29%)</title><rect x="491.2" y="835.0" width="322.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.2" y="846.0">ru/mail/polis/service/igorlo/AsyncService.l..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (1,321 samples, 27.29%)</title><rect x="491.2" y="819.0" width="322.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.2" y="830.0">ru/mail/polis/service/igorlo/AsyncService.get</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (11 samples, 0.23%)</title><rect x="493.4" y="803.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.4" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.21%)</title><rect x="493.4" y="787.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (6 samples, 0.12%)</title><rect x="494.3" y="771.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (5 samples, 0.10%)</title><rect x="494.6" y="755.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="497.6" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (5 samples, 0.10%)</title><rect x="494.6" y="739.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="497.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (3 samples, 0.06%)</title><rect x="494.6" y="723.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="497.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.04%)</title><rect x="495.3" y="723.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="498.3" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.12%)</title><rect x="496.0" y="803.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.0" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.10%)</title><rect x="496.3" y="787.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.3" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="496.3" y="771.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="499.3" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="496.5" y="755.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="496.5" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.5" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="496.5" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="499.5" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="496.5" y="707.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.5" y="718.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.08%)</title><rect x="496.5" y="691.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="499.5" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="497.5" y="803.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.5" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,293 samples, 26.71%)</title><rect x="498.0" y="803.0" width="315.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.0" y="814.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (82 samples, 1.69%)</title><rect x="498.0" y="787.0" width="20.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.0" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (81 samples, 1.67%)</title><rect x="498.2" y="771.0" width="19.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="501.2" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (80 samples, 1.65%)</title><rect x="498.2" y="755.0" width="19.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.2" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (71 samples, 1.47%)</title><rect x="500.2" y="739.0" width="17.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.2" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.endOfData (5 samples, 0.10%)</title><rect x="500.4" y="723.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.4" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (63 samples, 1.30%)</title><rect x="501.6" y="723.0" width="15.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.6" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (40 samples, 0.83%)</title><rect x="502.9" y="707.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.9" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (7 samples, 0.14%)</title><rect x="503.4" y="691.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="506.4" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (7 samples, 0.14%)</title><rect x="503.4" y="675.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="506.4" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (6 samples, 0.12%)</title><rect x="503.6" y="659.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="506.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.08%)</title><rect x="504.1" y="643.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.1" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.08%)</title><rect x="504.1" y="627.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (3 samples, 0.06%)</title><rect x="504.3" y="611.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="507.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (3 samples, 0.06%)</title><rect x="504.3" y="595.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="507.3" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (3 samples, 0.06%)</title><rect x="504.3" y="579.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.3" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.06%)</title><rect x="504.3" y="563.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.3" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (3 samples, 0.06%)</title><rect x="504.3" y="547.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="507.3" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.06%)</title><rect x="504.3" y="531.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.3" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (3 samples, 0.06%)</title><rect x="504.3" y="515.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="507.3" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.06%)</title><rect x="504.3" y="499.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="507.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.04%)</title><rect x="504.3" y="483.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="507.3" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.04%)</title><rect x="504.3" y="467.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="507.3" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (30 samples, 0.62%)</title><rect x="505.1" y="691.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.1" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (30 samples, 0.62%)</title><rect x="505.1" y="675.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="508.1" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (30 samples, 0.62%)</title><rect x="505.1" y="659.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.1" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (30 samples, 0.62%)</title><rect x="505.1" y="643.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.1" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (29 samples, 0.60%)</title><rect x="505.3" y="627.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.3" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (29 samples, 0.60%)</title><rect x="505.3" y="611.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="508.3" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (19 samples, 0.39%)</title><rect x="505.3" y="595.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="508.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (18 samples, 0.37%)</title><rect x="505.5" y="579.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="508.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (18 samples, 0.37%)</title><rect x="505.5" y="563.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (18 samples, 0.37%)</title><rect x="505.5" y="547.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="508.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (6 samples, 0.12%)</title><rect x="505.8" y="531.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.8" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.04%)</title><rect x="506.3" y="515.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="509.3" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="506.3" y="499.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="509.3" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="506.3" y="483.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="509.3" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="506.3" y="467.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="509.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="506.3" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="509.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="506.3" y="435.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="509.3" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="506.3" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="509.3" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="506.8" y="515.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="509.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="506.8" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.8" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="506.8" y="483.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="509.8" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.04%)</title><rect x="506.8" y="467.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="509.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (4 samples, 0.08%)</title><rect x="507.3" y="531.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="510.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (3 samples, 0.06%)</title><rect x="508.2" y="531.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="511.2" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="508.5" y="515.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="511.5" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.04%)</title><rect x="508.5" y="499.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (4 samples, 0.08%)</title><rect x="509.0" y="531.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="512.0" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="509.2" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.2" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.04%)</title><rect x="509.2" y="499.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.2" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="509.2" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="509.2" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="512.2" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="509.2" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="509.2" y="435.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="509.2" y="419.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="512.2" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="509.2" y="403.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="512.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (10 samples, 0.21%)</title><rect x="509.9" y="595.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (10 samples, 0.21%)</title><rect x="509.9" y="579.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.9" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (10 samples, 0.21%)</title><rect x="509.9" y="563.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="512.9" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.21%)</title><rect x="509.9" y="547.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="512.9" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (10 samples, 0.21%)</title><rect x="509.9" y="531.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="512.9" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.21%)</title><rect x="509.9" y="515.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.9" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (10 samples, 0.21%)</title><rect x="509.9" y="499.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.9" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (10 samples, 0.21%)</title><rect x="509.9" y="483.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.08%)</title><rect x="509.9" y="467.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.08%)</title><rect x="509.9" y="451.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.9" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.08%)</title><rect x="509.9" y="435.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="512.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/1411168072.apply (6 samples, 0.12%)</title><rect x="510.9" y="467.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="513.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (5 samples, 0.10%)</title><rect x="511.2" y="451.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.2" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.08%)</title><rect x="511.4" y="435.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="514.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.08%)</title><rect x="511.4" y="419.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="514.4" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.08%)</title><rect x="511.4" y="403.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="514.4" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="511.4" y="387.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="514.4" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="511.4" y="371.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="511.4" y="355.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="514.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="511.4" y="339.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="514.4" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="511.6" y="323.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="514.6" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="511.9" y="307.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="514.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (7 samples, 0.14%)</title><rect x="512.6" y="707.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.6" y="718.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.12%)</title><rect x="512.9" y="691.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="515.9" y="702.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.04%)</title><rect x="513.8" y="675.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="516.8" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$65/910428674.apply (11 samples, 0.23%)</title><rect x="514.3" y="707.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (8 samples, 0.17%)</title><rect x="515.1" y="691.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="518.1" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.17%)</title><rect x="515.1" y="675.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="518.1" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.17%)</title><rect x="515.1" y="659.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="518.1" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.14%)</title><rect x="515.3" y="643.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="518.3" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.14%)</title><rect x="515.3" y="627.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="518.3" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="515.5" y="611.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="518.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="515.5" y="595.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="515.5" y="579.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.5" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="516.0" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="519.0" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.06%)</title><rect x="516.3" y="547.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$69/1866190157.apply (2 samples, 0.04%)</title><rect x="517.0" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="520.0" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (31 samples, 0.64%)</title><rect x="518.0" y="787.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="521.0" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (21 samples, 0.43%)</title><rect x="518.5" y="771.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="521.5" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (20 samples, 0.41%)</title><rect x="518.7" y="755.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="521.7" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (19 samples, 0.39%)</title><rect x="519.0" y="739.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="522.0" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (18 samples, 0.37%)</title><rect x="519.2" y="723.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (18 samples, 0.37%)</title><rect x="519.2" y="707.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.2" y="718.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="522.1" y="691.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="525.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (2 samples, 0.04%)</title><rect x="523.1" y="691.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="526.1" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (7 samples, 0.14%)</title><rect x="523.6" y="771.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$73/1800358294.apply (7 samples, 0.14%)</title><rect x="523.6" y="755.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="526.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (6 samples, 0.12%)</title><rect x="523.8" y="739.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (2 samples, 0.04%)</title><rect x="523.8" y="723.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.04%)</title><rect x="524.3" y="723.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="527.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (2 samples, 0.04%)</title><rect x="524.8" y="723.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="527.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.04%)</title><rect x="525.5" y="787.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="528.5" y="798.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.04%)</title><rect x="525.5" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="528.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (6 samples, 0.12%)</title><rect x="526.0" y="787.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="529.0" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.12%)</title><rect x="526.0" y="771.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="529.0" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.12%)</title><rect x="526.0" y="755.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="529.0" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.12%)</title><rect x="526.0" y="739.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="529.0" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="526.0" y="723.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="529.0" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="526.0" y="707.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="529.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="526.0" y="691.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.0" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="526.0" y="675.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="529.0" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="526.0" y="659.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="529.0" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="526.8" y="691.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="529.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (1,171 samples, 24.19%)</title><rect x="527.7" y="787.0" width="285.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="530.7" y="798.0">ru/mail/polis/dao/igorlo/PersistentDAO..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (4 samples, 0.08%)</title><rect x="528.0" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (1,166 samples, 24.09%)</title><rect x="528.9" y="771.0" width="284.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="531.9" y="782.0">ru/mail/polis/dao/igorlo/PersistentDAO..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (935 samples, 19.31%)</title><rect x="529.2" y="755.0" width="227.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="532.2" y="766.0">ru/mail/polis/dao/igorlo/Table..</text>
</g>
<g>
<title>itable stub (2 samples, 0.04%)</title><rect x="529.7" y="739.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="532.7" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.06%)</title><rect x="530.2" y="739.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.2" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (9 samples, 0.19%)</title><rect x="530.9" y="739.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.9" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.10%)</title><rect x="531.9" y="723.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="534.9" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.10%)</title><rect x="531.9" y="707.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="534.9" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.10%)</title><rect x="531.9" y="691.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="534.9" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (2 samples, 0.04%)</title><rect x="532.4" y="675.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="535.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (18 samples, 0.37%)</title><rect x="533.3" y="739.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="536.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (18 samples, 0.37%)</title><rect x="533.3" y="723.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="536.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (13 samples, 0.27%)</title><rect x="534.1" y="707.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (11 samples, 0.23%)</title><rect x="534.6" y="691.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="537.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 0.12%)</title><rect x="534.8" y="675.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (4 samples, 0.08%)</title><rect x="536.3" y="675.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (9 samples, 0.19%)</title><rect x="538.0" y="739.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (6 samples, 0.12%)</title><rect x="538.7" y="723.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="541.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (6 samples, 0.12%)</title><rect x="538.7" y="707.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="541.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (5 samples, 0.10%)</title><rect x="538.9" y="691.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="541.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (5 samples, 0.10%)</title><rect x="538.9" y="675.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="541.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.descendingMap (2 samples, 0.04%)</title><rect x="540.2" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="543.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.iterator (266 samples, 5.49%)</title><rect x="540.6" y="739.0" width="64.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.6" y="750.0">ru/mail..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (46 samples, 0.95%)</title><rect x="540.6" y="723.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (46 samples, 0.95%)</title><rect x="540.6" y="707.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="543.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (45 samples, 0.93%)</title><rect x="540.9" y="691.0" width="11.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="543.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (16 samples, 0.33%)</title><rect x="543.1" y="675.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="546.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (16 samples, 0.33%)</title><rect x="543.1" y="659.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="546.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (6 samples, 0.12%)</title><rect x="544.8" y="643.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (6 samples, 0.12%)</title><rect x="544.8" y="627.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="547.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (6 samples, 0.12%)</title><rect x="544.8" y="611.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (6 samples, 0.12%)</title><rect x="544.8" y="595.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="547.8" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.04%)</title><rect x="546.3" y="643.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="549.3" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="547.0" y="675.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="550.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (17 samples, 0.35%)</title><rect x="547.7" y="675.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="550.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (11 samples, 0.23%)</title><rect x="549.2" y="659.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (11 samples, 0.23%)</title><rect x="549.2" y="643.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.2" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (3 samples, 0.06%)</title><rect x="551.1" y="627.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="554.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (162 samples, 3.35%)</title><rect x="551.9" y="723.0" width="39.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="554.9" y="734.0">ru/..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.06%)</title><rect x="552.8" y="707.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (153 samples, 3.16%)</title><rect x="554.1" y="707.0" width="37.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="557.1" y="718.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (150 samples, 3.10%)</title><rect x="554.3" y="691.0" width="36.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="557.3" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (150 samples, 3.10%)</title><rect x="554.3" y="675.0" width="36.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.3" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (150 samples, 3.10%)</title><rect x="554.3" y="659.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="557.3" y="670.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="558.2" y="643.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="561.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (6 samples, 0.12%)</title><rect x="558.9" y="643.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="561.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (3 samples, 0.06%)</title><rect x="559.7" y="627.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="562.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.06%)</title><rect x="559.7" y="611.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="562.7" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="559.7" y="595.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.7" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="559.7" y="579.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="562.7" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.06%)</title><rect x="559.7" y="563.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="562.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (124 samples, 2.56%)</title><rect x="560.4" y="643.0" width="30.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="563.4" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (124 samples, 2.56%)</title><rect x="560.4" y="627.0" width="30.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="563.4" y="638.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (23 samples, 0.48%)</title><rect x="561.6" y="611.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="564.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 0.39%)</title><rect x="562.6" y="595.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="565.6" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 0.39%)</title><rect x="562.6" y="579.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="565.6" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (17 samples, 0.35%)</title><rect x="562.6" y="563.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="565.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (4 samples, 0.08%)</title><rect x="563.3" y="547.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="566.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.12%)</title><rect x="564.3" y="547.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="567.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.08%)</title><rect x="565.8" y="547.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="568.8" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="566.7" y="563.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (96 samples, 1.98%)</title><rect x="567.2" y="611.0" width="23.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="570.2" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (69 samples, 1.43%)</title><rect x="573.8" y="595.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="576.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (16 samples, 0.33%)</title><rect x="574.8" y="579.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (49 samples, 1.01%)</title><rect x="578.7" y="579.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="581.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (48 samples, 0.99%)</title><rect x="578.9" y="563.0" width="11.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="581.9" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="580.1" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="583.1" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (7 samples, 0.14%)</title><rect x="580.6" y="547.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.6" y="558.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (29 samples, 0.60%)</title><rect x="582.3" y="547.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="585.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.19%)</title><rect x="583.3" y="531.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="586.3" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.06%)</title><rect x="584.5" y="515.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="587.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (16 samples, 0.33%)</title><rect x="585.5" y="531.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (7 samples, 0.14%)</title><rect x="587.7" y="515.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="590.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.10%)</title><rect x="589.4" y="547.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="592.4" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.08%)</title><rect x="589.4" y="531.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.04%)</title><rect x="590.9" y="691.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="593.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.04%)</title><rect x="590.9" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.04%)</title><rect x="590.9" y="659.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="593.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (58 samples, 1.20%)</title><rect x="591.3" y="723.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="594.3" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (4 samples, 0.08%)</title><rect x="599.4" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="602.4" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (5 samples, 0.10%)</title><rect x="600.4" y="707.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="603.4" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (5 samples, 0.10%)</title><rect x="600.4" y="691.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.4" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 0.04%)</title><rect x="601.1" y="675.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="604.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (3 samples, 0.06%)</title><rect x="601.8" y="707.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (2 samples, 0.04%)</title><rect x="602.6" y="707.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.descendingMap (3 samples, 0.06%)</title><rect x="603.0" y="707.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="606.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (5 samples, 0.10%)</title><rect x="604.0" y="707.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="607.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (5 samples, 0.10%)</title><rect x="604.0" y="691.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="607.0" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.08%)</title><rect x="604.3" y="675.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="607.3" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.04%)</title><rect x="604.5" y="659.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.iterator (622 samples, 12.85%)</title><rect x="605.5" y="739.0" width="151.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="608.5" y="750.0">ru/mail/polis/dao/i..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt; (617 samples, 12.75%)</title><rect x="606.0" y="723.0" width="150.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="609.0" y="734.0">ru/mail/polis/dao/i..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.position (617 samples, 12.75%)</title><rect x="606.0" y="707.0" width="150.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.0" y="718.0">ru/mail/polis/dao/i..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (110 samples, 2.27%)</title><rect x="611.3" y="691.0" width="26.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="614.3" y="702.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="612.6" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.6" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.04%)</title><rect x="613.0" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.0" y="686.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (93 samples, 1.92%)</title><rect x="613.5" y="675.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.5" y="686.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (9 samples, 0.19%)</title><rect x="622.1" y="659.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="625.1" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.10%)</title><rect x="622.1" y="643.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="625.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (4 samples, 0.08%)</title><rect x="623.3" y="643.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="626.3" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (19 samples, 0.39%)</title><rect x="624.3" y="659.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="627.3" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.06%)</title><rect x="627.7" y="643.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="630.7" y="654.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (30 samples, 0.62%)</title><rect x="628.9" y="659.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="631.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (6 samples, 0.12%)</title><rect x="634.7" y="643.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="637.7" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.08%)</title><rect x="636.2" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="639.2" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.08%)</title><rect x="636.2" y="659.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.2" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.08%)</title><rect x="637.2" y="675.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.2" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.04%)</title><rect x="637.7" y="659.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (242 samples, 5.00%)</title><rect x="638.1" y="691.0" width="59.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="641.1" y="702.0">ru/mai..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (31 samples, 0.64%)</title><rect x="638.9" y="675.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="641.9" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (30 samples, 0.62%)</title><rect x="639.1" y="659.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="642.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (30 samples, 0.62%)</title><rect x="639.1" y="643.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="642.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (26 samples, 0.54%)</title><rect x="640.1" y="627.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.1" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (110 samples, 2.27%)</title><rect x="646.4" y="675.0" width="26.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.4" y="686.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (110 samples, 2.27%)</title><rect x="646.4" y="659.0" width="26.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="649.4" y="670.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (99 samples, 2.05%)</title><rect x="649.1" y="643.0" width="24.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="652.1" y="654.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (99 samples, 2.05%)</title><rect x="649.1" y="627.0" width="24.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.1" y="638.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (96 samples, 1.98%)</title><rect x="649.8" y="611.0" width="23.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.8" y="622.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (96 samples, 1.98%)</title><rect x="649.8" y="595.0" width="23.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="652.8" y="606.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (96 samples, 1.98%)</title><rect x="649.8" y="579.0" width="23.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="652.8" y="590.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (57 samples, 1.18%)</title><rect x="656.4" y="563.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.4" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.23%)</title><rect x="658.6" y="547.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.6" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.19%)</title><rect x="659.1" y="531.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.1" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.17%)</title><rect x="659.4" y="515.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="662.4" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.17%)</title><rect x="659.4" y="499.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="662.4" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (37 samples, 0.76%)</title><rect x="661.3" y="547.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="664.3" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.23%)</title><rect x="665.2" y="531.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.2" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (10 samples, 0.21%)</title><rect x="667.9" y="531.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="670.9" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.21%)</title><rect x="667.9" y="515.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.9" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.21%)</title><rect x="667.9" y="499.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="670.9" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.14%)</title><rect x="670.3" y="563.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="673.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (5 samples, 0.10%)</title><rect x="672.0" y="563.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="675.0" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (87 samples, 1.80%)</title><rect x="673.2" y="675.0" width="21.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="676.2" y="686.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (77 samples, 1.59%)</title><rect x="675.7" y="659.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="678.7" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (74 samples, 1.53%)</title><rect x="676.4" y="643.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="679.4" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (68 samples, 1.40%)</title><rect x="677.9" y="627.0" width="16.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.9" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (68 samples, 1.40%)</title><rect x="677.9" y="611.0" width="16.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="680.9" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (67 samples, 1.38%)</title><rect x="678.1" y="595.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="681.1" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (49 samples, 1.01%)</title><rect x="681.0" y="579.0" width="12.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="684.0" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.19%)</title><rect x="682.0" y="563.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.0" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.19%)</title><rect x="682.0" y="547.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="685.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.14%)</title><rect x="682.5" y="531.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="685.5" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.12%)</title><rect x="682.8" y="515.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="685.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (36 samples, 0.74%)</title><rect x="684.2" y="563.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="687.2" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (36 samples, 0.74%)</title><rect x="684.2" y="547.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="687.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.14%)</title><rect x="690.3" y="531.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="693.3" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.08%)</title><rect x="692.0" y="531.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="695.0" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.08%)</title><rect x="692.0" y="515.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="695.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.12%)</title><rect x="693.0" y="579.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="696.0" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.23%)</title><rect x="694.5" y="675.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.5" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.23%)</title><rect x="694.5" y="659.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="697.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.23%)</title><rect x="694.5" y="643.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="697.5" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (11 samples, 0.23%)</title><rect x="694.5" y="627.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="697.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (243 samples, 5.02%)</title><rect x="697.1" y="691.0" width="59.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="700.1" y="702.0">ru/mai..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (95 samples, 1.96%)</title><rect x="703.0" y="675.0" width="23.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="706.0" y="686.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (95 samples, 1.96%)</title><rect x="703.0" y="659.0" width="23.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="706.0" y="670.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (86 samples, 1.78%)</title><rect x="705.2" y="643.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="708.2" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (84 samples, 1.74%)</title><rect x="705.7" y="627.0" width="20.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="708.7" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (81 samples, 1.67%)</title><rect x="706.4" y="611.0" width="19.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (81 samples, 1.67%)</title><rect x="706.4" y="595.0" width="19.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (81 samples, 1.67%)</title><rect x="706.4" y="579.0" width="19.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="709.4" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (52 samples, 1.07%)</title><rect x="712.0" y="563.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="715.0" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.33%)</title><rect x="712.5" y="547.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="715.5" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (15 samples, 0.31%)</title><rect x="712.7" y="531.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="715.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (14 samples, 0.29%)</title><rect x="713.0" y="515.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="716.0" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.27%)</title><rect x="713.2" y="499.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="716.2" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (34 samples, 0.70%)</title><rect x="716.4" y="547.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="719.4" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (34 samples, 0.70%)</title><rect x="716.4" y="531.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="719.4" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.25%)</title><rect x="720.0" y="515.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.14%)</title><rect x="723.0" y="515.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="726.0" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.12%)</title><rect x="723.2" y="499.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="726.2" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.12%)</title><rect x="724.7" y="563.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="727.7" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (72 samples, 1.49%)</title><rect x="726.1" y="675.0" width="17.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="729.1" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.08%)</title><rect x="728.6" y="659.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="731.6" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (58 samples, 1.20%)</title><rect x="729.6" y="659.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="732.6" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (58 samples, 1.20%)</title><rect x="729.6" y="643.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="732.6" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (55 samples, 1.14%)</title><rect x="730.3" y="627.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="733.3" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (55 samples, 1.14%)</title><rect x="730.3" y="611.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="733.3" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (55 samples, 1.14%)</title><rect x="730.3" y="595.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="733.3" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (41 samples, 0.85%)</title><rect x="732.7" y="579.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="735.7" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.27%)</title><rect x="733.5" y="563.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="736.5" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.27%)</title><rect x="733.5" y="547.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="736.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.27%)</title><rect x="733.5" y="531.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="736.5" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.19%)</title><rect x="734.4" y="515.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="737.4" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="736.1" y="499.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="739.1" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="736.1" y="483.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="739.1" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="736.1" y="467.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="739.1" y="478.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="736.1" y="451.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="739.1" y="462.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="736.1" y="435.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="739.1" y="446.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="736.1" y="419.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="739.1" y="430.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="736.1" y="403.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="739.1" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.52%)</title><rect x="736.6" y="563.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.6" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.52%)</title><rect x="736.6" y="547.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="739.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (25 samples, 0.52%)</title><rect x="736.6" y="531.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="739.6" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.14%)</title><rect x="740.0" y="515.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="743.0" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.08%)</title><rect x="741.7" y="515.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="744.7" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.08%)</title><rect x="742.7" y="579.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="745.7" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (45 samples, 0.93%)</title><rect x="743.7" y="675.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="746.7" y="686.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (37 samples, 0.76%)</title><rect x="743.9" y="659.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="746.9" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.08%)</title><rect x="753.0" y="659.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="756.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLong (2 samples, 0.04%)</title><rect x="754.2" y="659.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="757.2" y="670.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.10%)</title><rect x="754.7" y="675.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="757.7" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.10%)</title><rect x="754.7" y="659.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="757.7" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.10%)</title><rect x="754.7" y="643.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="757.7" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.10%)</title><rect x="754.7" y="627.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="757.7" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="755.9" y="675.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.position (3 samples, 0.06%)</title><rect x="756.4" y="723.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="759.4" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (230 samples, 4.75%)</title><rect x="757.1" y="755.0" width="56.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="760.1" y="766.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (6 samples, 0.12%)</title><rect x="757.1" y="739.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.1" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.&lt;init&gt; (4 samples, 0.08%)</title><rect x="757.6" y="723.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="760.6" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.&lt;init&gt; (4 samples, 0.08%)</title><rect x="757.6" y="707.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="760.6" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (176 samples, 3.64%)</title><rect x="758.6" y="739.0" width="42.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="761.6" y="750.0">com/..</text>
</g>
<g>
<title>com/google/common/base/Preconditions.checkNotNull (3 samples, 0.06%)</title><rect x="758.6" y="723.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.6" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (173 samples, 3.57%)</title><rect x="759.3" y="723.0" width="42.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.3" y="734.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (32 samples, 0.66%)</title><rect x="760.5" y="707.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="763.5" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (26 samples, 0.54%)</title><rect x="762.0" y="691.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.0" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (20 samples, 0.41%)</title><rect x="763.4" y="675.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="766.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (20 samples, 0.41%)</title><rect x="763.4" y="659.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="766.4" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (6 samples, 0.12%)</title><rect x="764.4" y="643.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="767.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.08%)</title><rect x="764.4" y="627.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="767.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (3 samples, 0.06%)</title><rect x="764.7" y="611.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="767.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.06%)</title><rect x="764.7" y="595.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.7" y="606.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.04%)</title><rect x="765.4" y="627.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="768.4" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (6 samples, 0.12%)</title><rect x="765.9" y="643.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="768.9" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.12%)</title><rect x="765.9" y="627.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="768.9" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="766.4" y="611.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="769.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$65/910428674.apply (4 samples, 0.08%)</title><rect x="767.3" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="770.3" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (6 samples, 0.12%)</title><rect x="768.6" y="707.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="771.6" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.&lt;init&gt; (3 samples, 0.06%)</title><rect x="769.3" y="691.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="772.3" y="702.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.12%)</title><rect x="770.0" y="707.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="773.0" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (3 samples, 0.06%)</title><rect x="771.5" y="707.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="774.5" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.checkForComodification (2 samples, 0.04%)</title><rect x="771.7" y="691.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="774.7" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (10 samples, 0.21%)</title><rect x="772.2" y="707.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="775.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="773.9" y="691.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="776.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="773.9" y="675.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="776.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="773.9" y="659.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="776.9" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (107 samples, 2.21%)</title><rect x="774.6" y="707.0" width="26.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="777.6" y="718.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (107 samples, 2.21%)</title><rect x="774.6" y="691.0" width="26.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.6" y="702.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (2 samples, 0.04%)</title><rect x="774.6" y="675.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="777.6" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (103 samples, 2.13%)</title><rect x="775.1" y="675.0" width="25.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.1" y="686.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (103 samples, 2.13%)</title><rect x="775.1" y="659.0" width="25.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="778.1" y="670.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (102 samples, 2.11%)</title><rect x="775.4" y="643.0" width="24.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="778.4" y="654.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (102 samples, 2.11%)</title><rect x="775.4" y="627.0" width="24.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="778.4" y="638.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (51 samples, 1.05%)</title><rect x="776.1" y="611.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="779.1" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (4 samples, 0.08%)</title><rect x="776.8" y="595.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="779.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (44 samples, 0.91%)</title><rect x="777.8" y="595.0" width="10.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="780.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (44 samples, 0.91%)</title><rect x="777.8" y="579.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="780.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (44 samples, 0.91%)</title><rect x="777.8" y="563.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (24 samples, 0.50%)</title><rect x="778.1" y="547.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="781.1" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (14 samples, 0.29%)</title><rect x="778.1" y="531.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="781.1" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (14 samples, 0.29%)</title><rect x="778.1" y="515.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="781.1" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (13 samples, 0.27%)</title><rect x="778.3" y="499.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="781.3" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (13 samples, 0.27%)</title><rect x="778.3" y="483.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.3" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (10 samples, 0.21%)</title><rect x="779.0" y="467.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.17%)</title><rect x="779.5" y="451.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="782.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.17%)</title><rect x="779.5" y="435.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="782.5" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.17%)</title><rect x="779.5" y="419.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.5" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="780.7" y="403.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="783.7" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (6 samples, 0.12%)</title><rect x="781.5" y="531.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="784.5" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.12%)</title><rect x="781.5" y="515.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.5" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="781.5" y="499.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.5" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="781.5" y="483.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="784.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="782.0" y="467.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="782.2" y="451.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.2" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="782.2" y="435.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="785.2" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="782.2" y="419.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.2" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="782.2" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="785.2" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.08%)</title><rect x="782.9" y="531.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="785.9" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.08%)</title><rect x="782.9" y="515.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.9" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.08%)</title><rect x="782.9" y="499.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.9" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.08%)</title><rect x="782.9" y="483.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (10 samples, 0.21%)</title><rect x="783.9" y="547.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.9" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.06%)</title><rect x="784.4" y="531.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="787.4" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.06%)</title><rect x="784.4" y="515.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="787.4" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.06%)</title><rect x="784.4" y="499.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="787.4" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="784.4" y="483.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.4" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="784.4" y="467.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="787.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="784.4" y="451.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="784.4" y="435.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="787.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (3 samples, 0.06%)</title><rect x="785.4" y="531.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.4" y="542.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (2 samples, 0.04%)</title><rect x="785.4" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (5 samples, 0.10%)</title><rect x="786.3" y="547.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="789.3" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.08%)</title><rect x="786.6" y="531.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="789.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.08%)</title><rect x="786.6" y="515.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="789.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.06%)</title><rect x="786.8" y="499.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="789.8" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="786.8" y="483.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="789.8" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="786.8" y="467.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="789.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="786.8" y="451.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="789.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="786.8" y="435.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="789.8" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="786.8" y="419.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="789.8" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.06%)</title><rect x="786.8" y="403.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="789.8" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="787.1" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="790.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (4 samples, 0.08%)</title><rect x="787.6" y="547.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="790.6" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="787.6" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="790.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.04%)</title><rect x="787.6" y="515.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="790.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="787.6" y="499.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="790.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="787.6" y="483.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="790.6" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="787.6" y="467.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="790.6" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="787.6" y="451.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="790.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="787.6" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.6" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="787.6" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="790.6" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="787.6" y="403.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="790.6" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.04%)</title><rect x="788.1" y="531.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.1" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="788.1" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="791.1" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="788.1" y="499.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.1" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="788.1" y="483.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="788.1" y="467.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="788.1" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="788.1" y="435.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (48 samples, 0.99%)</title><rect x="788.5" y="611.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (48 samples, 0.99%)</title><rect x="788.5" y="595.0" width="11.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="791.5" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (48 samples, 0.99%)</title><rect x="788.5" y="579.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="791.5" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (48 samples, 0.99%)</title><rect x="788.5" y="563.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.5" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (48 samples, 0.99%)</title><rect x="788.5" y="547.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.5" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (48 samples, 0.99%)</title><rect x="788.5" y="531.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="791.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="788.8" y="515.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.8" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (44 samples, 0.91%)</title><rect x="789.5" y="515.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.5" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (44 samples, 0.91%)</title><rect x="789.5" y="499.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="792.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (30 samples, 0.62%)</title><rect x="790.0" y="483.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="793.0" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (26 samples, 0.54%)</title><rect x="791.0" y="467.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="794.0" y="478.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (22 samples, 0.45%)</title><rect x="791.5" y="451.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="794.5" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.10%)</title><rect x="792.9" y="435.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="795.9" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (4 samples, 0.08%)</title><rect x="794.1" y="435.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="797.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.06%)</title><rect x="795.4" y="435.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="798.4" y="446.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.06%)</title><rect x="796.1" y="435.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="799.1" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="796.8" y="451.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="799.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/1411168072.apply (12 samples, 0.25%)</title><rect x="797.3" y="483.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="800.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (10 samples, 0.21%)</title><rect x="797.8" y="467.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="800.8" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.14%)</title><rect x="798.3" y="451.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="801.3" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.14%)</title><rect x="798.3" y="435.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="801.3" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.12%)</title><rect x="798.5" y="419.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="801.5" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="798.5" y="403.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.5" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="799.0" y="387.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="799.0" y="371.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="799.0" y="355.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="802.0" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="799.3" y="339.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="802.3" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2 samples, 0.04%)</title><rect x="800.2" y="675.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="803.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.hasNext (3 samples, 0.06%)</title><rect x="800.7" y="707.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="803.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (48 samples, 0.99%)</title><rect x="801.5" y="739.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="804.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (48 samples, 0.99%)</title><rect x="801.5" y="723.0" width="11.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="804.5" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (46 samples, 0.95%)</title><rect x="801.9" y="707.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.9" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (15 samples, 0.31%)</title><rect x="802.9" y="691.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.9" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (15 samples, 0.31%)</title><rect x="802.9" y="675.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="805.9" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (13 samples, 0.27%)</title><rect x="803.4" y="659.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.4" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.23%)</title><rect x="803.9" y="643.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.9" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.19%)</title><rect x="804.4" y="627.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.4" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2 samples, 0.04%)</title><rect x="804.4" y="611.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.4" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 0.04%)</title><rect x="804.4" y="595.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="807.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 0.04%)</title><rect x="804.4" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="807.4" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2 samples, 0.04%)</title><rect x="804.4" y="563.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="807.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (7 samples, 0.14%)</title><rect x="804.9" y="611.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="807.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (7 samples, 0.14%)</title><rect x="804.9" y="595.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.9" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (7 samples, 0.14%)</title><rect x="804.9" y="579.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="807.9" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.14%)</title><rect x="804.9" y="563.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.9" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (7 samples, 0.14%)</title><rect x="804.9" y="547.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.9" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.14%)</title><rect x="804.9" y="531.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.9" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (7 samples, 0.14%)</title><rect x="804.9" y="515.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.9" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 0.14%)</title><rect x="804.9" y="499.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="807.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.10%)</title><rect x="804.9" y="483.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="807.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.10%)</title><rect x="804.9" y="467.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="807.9" y="478.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.08%)</title><rect x="805.1" y="451.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="808.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.06%)</title><rect x="805.4" y="435.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="808.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.04%)</title><rect x="805.6" y="419.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="808.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/1411168072.apply (2 samples, 0.04%)</title><rect x="806.1" y="483.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="809.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.04%)</title><rect x="806.1" y="467.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="809.1" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="806.1" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="809.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.04%)</title><rect x="806.1" y="435.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="809.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="806.1" y="419.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="809.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="806.1" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.1" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="806.1" y="387.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="806.1" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="809.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="806.1" y="355.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="809.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="806.1" y="339.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="809.1" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (27 samples, 0.56%)</title><rect x="806.6" y="691.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="809.6" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (27 samples, 0.56%)</title><rect x="806.6" y="675.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.6" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (27 samples, 0.56%)</title><rect x="806.6" y="659.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="809.6" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (27 samples, 0.56%)</title><rect x="806.6" y="643.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.6" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (27 samples, 0.56%)</title><rect x="806.6" y="627.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="809.6" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (27 samples, 0.56%)</title><rect x="806.6" y="611.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.6" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (17 samples, 0.35%)</title><rect x="806.6" y="595.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="809.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (17 samples, 0.35%)</title><rect x="806.6" y="579.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (17 samples, 0.35%)</title><rect x="806.6" y="563.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (17 samples, 0.35%)</title><rect x="806.6" y="547.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="809.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (9 samples, 0.19%)</title><rect x="806.6" y="531.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.12%)</title><rect x="806.6" y="515.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.12%)</title><rect x="806.6" y="499.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.10%)</title><rect x="806.8" y="483.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="809.8" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="807.1" y="467.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.1" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="807.3" y="451.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="810.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="807.3" y="435.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="807.3" y="419.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.3" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="807.3" y="403.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.3" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="807.6" y="387.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.6" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.06%)</title><rect x="808.0" y="515.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="811.0" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.06%)</title><rect x="808.0" y="499.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="811.0" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="808.0" y="483.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.0" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="808.0" y="467.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="811.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="808.0" y="451.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="811.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="808.0" y="435.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.0" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="808.0" y="419.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="811.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (3 samples, 0.06%)</title><rect x="808.8" y="531.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.8" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.04%)</title><rect x="809.0" y="515.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="812.0" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="809.0" y="499.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (3 samples, 0.06%)</title><rect x="809.5" y="531.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="812.5" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="809.7" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="812.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (2 samples, 0.04%)</title><rect x="810.2" y="531.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="813.2" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.04%)</title><rect x="810.2" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="813.2" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="810.2" y="499.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="813.2" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="810.2" y="483.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="813.2" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="810.2" y="467.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.2" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="810.2" y="451.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="813.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="810.2" y="435.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="813.2" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="810.2" y="419.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.2" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="810.2" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.2" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="810.2" y="387.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (10 samples, 0.21%)</title><rect x="810.7" y="595.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (10 samples, 0.21%)</title><rect x="810.7" y="579.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.7" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (10 samples, 0.21%)</title><rect x="810.7" y="563.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="813.7" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.21%)</title><rect x="810.7" y="547.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="813.7" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (10 samples, 0.21%)</title><rect x="810.7" y="531.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="813.7" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.21%)</title><rect x="810.7" y="515.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="813.7" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (10 samples, 0.21%)</title><rect x="810.7" y="499.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="813.7" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (10 samples, 0.21%)</title><rect x="810.7" y="483.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="813.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.14%)</title><rect x="810.7" y="467.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="813.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.14%)</title><rect x="810.7" y="451.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="813.7" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="810.7" y="435.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="813.7" y="446.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.10%)</title><rect x="811.2" y="435.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.04%)</title><rect x="811.9" y="419.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="814.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/1411168072.apply (3 samples, 0.06%)</title><rect x="812.4" y="467.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="815.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (3 samples, 0.06%)</title><rect x="812.4" y="451.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="815.4" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.06%)</title><rect x="812.4" y="435.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.06%)</title><rect x="812.4" y="419.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="815.4" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.06%)</title><rect x="812.4" y="403.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="815.4" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="812.4" y="387.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="815.4" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="812.4" y="371.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="815.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="812.4" y="355.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="815.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="812.4" y="339.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="815.4" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="812.7" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="815.7" y="334.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,181 samples, 24.40%)</title><rect x="813.4" y="931.0" width="287.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="816.4" y="942.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (2 samples, 0.04%)</title><rect x="813.9" y="915.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.9" y="926.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (9 samples, 0.19%)</title><rect x="814.4" y="915.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.4" y="926.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (9 samples, 0.19%)</title><rect x="814.4" y="899.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.4" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (318 samples, 6.57%)</title><rect x="816.6" y="915.0" width="77.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="819.6" y="926.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (5 samples, 0.10%)</title><rect x="818.0" y="899.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="821.0" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (307 samples, 6.34%)</title><rect x="819.3" y="899.0" width="74.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.3" y="910.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (10 samples, 0.21%)</title><rect x="822.2" y="883.0" width="2.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="825.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (270 samples, 5.58%)</title><rect x="824.6" y="883.0" width="65.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="827.6" y="894.0">[unknown]</text>
</g>
<g>
<title>Klass::is_klass() const volatile (8 samples, 0.17%)</title><rect x="824.6" y="867.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="827.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="824.6" y="851.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="827.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="824.6" y="835.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="827.6" y="846.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (4 samples, 0.08%)</title><rect x="824.9" y="819.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="827.9" y="830.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.06%)</title><rect x="825.8" y="819.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="828.8" y="830.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="826.1" y="803.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="829.1" y="814.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.06%)</title><rect x="826.8" y="867.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="829.8" y="878.0"></text>
</g>
<g>
<title>epoll_wait (258 samples, 5.33%)</title><rect x="827.5" y="867.0" width="62.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="830.5" y="878.0">epoll_..</text>
</g>
<g>
<title>[unknown] (242 samples, 5.00%)</title><rect x="831.4" y="851.0" width="59.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="834.4" y="862.0">[unkno..</text>
</g>
<g>
<title>[unknown] (242 samples, 5.00%)</title><rect x="831.4" y="835.0" width="59.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="834.4" y="846.0">[unkno..</text>
</g>
<g>
<title>[unknown] (222 samples, 4.59%)</title><rect x="836.3" y="819.0" width="54.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="839.3" y="830.0">[unkn..</text>
</g>
<g>
<title>[unknown] (221 samples, 4.57%)</title><rect x="836.6" y="803.0" width="53.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="839.6" y="814.0">[unkn..</text>
</g>
<g>
<title>[unknown] (215 samples, 4.44%)</title><rect x="838.0" y="787.0" width="52.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="841.0" y="798.0">[unkn..</text>
</g>
<g>
<title>[unknown] (182 samples, 3.76%)</title><rect x="846.1" y="771.0" width="44.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="849.1" y="782.0">[unk..</text>
</g>
<g>
<title>[unknown] (134 samples, 2.77%)</title><rect x="857.8" y="755.0" width="32.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="860.8" y="766.0">[u..</text>
</g>
<g>
<title>[unknown] (98 samples, 2.02%)</title><rect x="866.5" y="739.0" width="23.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="869.5" y="750.0">[..</text>
</g>
<g>
<title>[unknown] (81 samples, 1.67%)</title><rect x="870.7" y="723.0" width="19.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="873.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (59 samples, 1.22%)</title><rect x="876.0" y="707.0" width="14.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="879.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.12%)</title><rect x="889.0" y="691.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="892.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.08%)</title><rect x="889.5" y="675.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="892.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.08%)</title><rect x="889.5" y="659.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="892.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.08%)</title><rect x="889.5" y="643.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="892.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="889.7" y="627.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="892.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="889.7" y="611.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="892.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="889.7" y="595.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="892.7" y="606.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.08%)</title><rect x="890.4" y="883.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="893.4" y="894.0"></text>
</g>
<g>
<title>epoll_wait (11 samples, 0.23%)</title><rect x="891.4" y="883.0" width="2.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="894.4" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (850 samples, 17.56%)</title><rect x="894.1" y="915.0" width="207.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="897.1" y="926.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="896.3" y="899.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="899.3" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (827 samples, 17.08%)</title><rect x="897.0" y="899.0" width="201.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="900.0" y="910.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (509 samples, 10.51%)</title><rect x="898.2" y="883.0" width="124.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.2" y="894.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (390 samples, 8.06%)</title><rect x="901.9" y="867.0" width="95.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="904.9" y="878.0">one/nio/htt..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.06%)</title><rect x="902.9" y="851.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="905.9" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (383 samples, 7.91%)</title><rect x="903.6" y="851.0" width="93.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="906.6" y="862.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (350 samples, 7.23%)</title><rect x="903.8" y="835.0" width="85.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="906.8" y="846.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (30 samples, 0.62%)</title><rect x="903.8" y="819.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="906.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.23%)</title><rect x="904.3" y="803.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="907.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (10 samples, 0.21%)</title><rect x="904.6" y="787.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="907.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (6 samples, 0.12%)</title><rect x="907.0" y="803.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="910.0" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.08%)</title><rect x="907.5" y="787.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="910.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.10%)</title><rect x="908.5" y="803.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="911.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="909.0" y="787.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="912.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.06%)</title><rect x="909.0" y="771.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="912.0" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.12%)</title><rect x="909.7" y="803.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="912.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.10%)</title><rect x="909.9" y="787.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="912.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.10%)</title><rect x="909.9" y="771.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="912.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.10%)</title><rect x="909.9" y="755.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="912.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (320 samples, 6.61%)</title><rect x="911.1" y="819.0" width="78.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="914.1" y="830.0">ru/mail/p..</text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.06%)</title><rect x="911.4" y="803.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="914.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.04%)</title><rect x="911.4" y="787.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="914.4" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.10%)</title><rect x="912.1" y="803.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="915.1" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.10%)</title><rect x="912.1" y="787.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="915.1" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.get$Lambda (4 samples, 0.08%)</title><rect x="912.4" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="915.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.&lt;init&gt; (3 samples, 0.06%)</title><rect x="912.6" y="755.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="915.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="912.9" y="739.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="915.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.14%)</title><rect x="913.3" y="803.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.3" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.14%)</title><rect x="913.3" y="787.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="916.3" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.14%)</title><rect x="913.3" y="771.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="916.3" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.14%)</title><rect x="913.3" y="755.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="916.3" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="913.8" y="739.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="916.8" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.10%)</title><rect x="913.8" y="723.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="916.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="914.1" y="707.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="917.1" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="914.6" y="707.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="917.6" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="914.6" y="691.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="917.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (304 samples, 6.28%)</title><rect x="915.0" y="803.0" width="74.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="918.0" y="814.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.10%)</title><rect x="916.0" y="787.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="919.0" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.10%)</title><rect x="916.0" y="771.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="919.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.get$Lambda (2 samples, 0.04%)</title><rect x="916.8" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="919.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (295 samples, 6.09%)</title><rect x="917.2" y="787.0" width="71.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="798.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (288 samples, 5.95%)</title><rect x="918.7" y="771.0" width="70.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="921.7" y="782.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (3 samples, 0.06%)</title><rect x="919.2" y="755.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (238 samples, 4.92%)</title><rect x="919.9" y="755.0" width="58.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.9" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 0.39%)</title><rect x="919.9" y="739.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 0.39%)</title><rect x="919.9" y="723.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 0.33%)</title><rect x="920.7" y="707.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="923.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (5 samples, 0.10%)</title><rect x="921.4" y="691.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="924.4" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.10%)</title><rect x="921.4" y="675.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="924.4" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.10%)</title><rect x="921.4" y="659.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="924.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (8 samples, 0.17%)</title><rect x="922.6" y="691.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="925.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (8 samples, 0.17%)</title><rect x="922.6" y="675.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="925.6" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (8 samples, 0.17%)</title><rect x="922.6" y="659.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="925.6" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (8 samples, 0.17%)</title><rect x="922.6" y="643.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="925.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.10%)</title><rect x="924.6" y="739.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="927.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="925.0" y="723.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="928.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.04%)</title><rect x="925.0" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="928.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.04%)</title><rect x="925.0" y="691.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="928.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.04%)</title><rect x="925.0" y="675.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="928.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title><rect x="925.0" y="659.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="928.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (214 samples, 4.42%)</title><rect x="925.8" y="739.0" width="52.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.8" y="750.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (214 samples, 4.42%)</title><rect x="925.8" y="723.0" width="52.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="928.8" y="734.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (210 samples, 4.34%)</title><rect x="926.3" y="707.0" width="51.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="929.3" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (209 samples, 4.32%)</title><rect x="926.5" y="691.0" width="50.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="929.5" y="702.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (209 samples, 4.32%)</title><rect x="926.5" y="675.0" width="50.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="929.5" y="686.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Unpark (36 samples, 0.74%)</title><rect x="927.7" y="659.0" width="8.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="930.7" y="670.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.04%)</title><rect x="929.2" y="643.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="932.2" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.04%)</title><rect x="929.7" y="643.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="932.7" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.06%)</title><rect x="930.2" y="643.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.2" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.08%)</title><rect x="930.9" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.9" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.06%)</title><rect x="931.9" y="643.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="934.9" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (9 samples, 0.19%)</title><rect x="932.8" y="643.0" width="2.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="935.8" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.04%)</title><rect x="935.0" y="643.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="938.0" y="654.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.08%)</title><rect x="935.5" y="643.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.5" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.04%)</title><rect x="936.5" y="659.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="939.5" y="670.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (166 samples, 3.43%)</title><rect x="937.0" y="659.0" width="40.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="940.0" y="670.0">pth..</text>
</g>
<g>
<title>[unknown] (151 samples, 3.12%)</title><rect x="940.6" y="643.0" width="36.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="943.6" y="654.0">[un..</text>
</g>
<g>
<title>[unknown] (151 samples, 3.12%)</title><rect x="940.6" y="627.0" width="36.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="943.6" y="638.0">[un..</text>
</g>
<g>
<title>[unknown] (142 samples, 2.93%)</title><rect x="942.8" y="611.0" width="34.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="945.8" y="622.0">[u..</text>
</g>
<g>
<title>[unknown] (141 samples, 2.91%)</title><rect x="943.1" y="595.0" width="34.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="946.1" y="606.0">[u..</text>
</g>
<g>
<title>[unknown] (137 samples, 2.83%)</title><rect x="944.1" y="579.0" width="33.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="947.1" y="590.0">[u..</text>
</g>
<g>
<title>[unknown] (126 samples, 2.60%)</title><rect x="946.7" y="563.0" width="30.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="949.7" y="574.0">[u..</text>
</g>
<g>
<title>[unknown] (114 samples, 2.35%)</title><rect x="949.7" y="547.0" width="27.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="952.7" y="558.0">[..</text>
</g>
<g>
<title>[unknown] (101 samples, 2.09%)</title><rect x="952.8" y="531.0" width="24.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="955.8" y="542.0">[..</text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="976.2" y="515.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="979.2" y="526.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="976.2" y="499.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="979.2" y="510.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="976.2" y="483.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="979.2" y="494.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="976.2" y="467.0" width="1.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="979.2" y="478.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.08%)</title><rect x="976.5" y="451.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="979.5" y="462.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="977.0" y="435.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="980.0" y="446.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="977.0" y="419.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="980.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.04%)</title><rect x="977.4" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="980.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.14%)</title><rect x="977.9" y="755.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="980.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.14%)</title><rect x="977.9" y="739.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="980.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.06%)</title><rect x="978.9" y="723.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="981.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (36 samples, 0.74%)</title><rect x="979.6" y="755.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="982.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (35 samples, 0.72%)</title><rect x="979.9" y="739.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="982.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (13 samples, 0.27%)</title><rect x="980.9" y="723.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="983.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (18 samples, 0.37%)</title><rect x="984.0" y="723.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (18 samples, 0.37%)</title><rect x="984.0" y="707.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="987.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (11 samples, 0.23%)</title><rect x="985.2" y="691.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="988.2" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (11 samples, 0.23%)</title><rect x="985.2" y="675.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="988.2" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (11 samples, 0.23%)</title><rect x="985.2" y="659.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.04%)</title><rect x="987.9" y="691.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.04%)</title><rect x="988.4" y="755.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="991.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="988.4" y="739.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="991.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.04%)</title><rect x="988.4" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="991.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (26 samples, 0.54%)</title><rect x="989.4" y="835.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="992.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (25 samples, 0.52%)</title><rect x="989.6" y="819.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="992.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (13 samples, 0.27%)</title><rect x="989.6" y="803.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="992.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.equals (13 samples, 0.27%)</title><rect x="989.6" y="787.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="992.6" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.08%)</title><rect x="991.8" y="771.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="994.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12 samples, 0.25%)</title><rect x="992.8" y="803.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="995.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (12 samples, 0.25%)</title><rect x="992.8" y="787.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="995.8" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5 samples, 0.10%)</title><rect x="995.7" y="835.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="998.7" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.10%)</title><rect x="995.7" y="819.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="998.7" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.10%)</title><rect x="995.7" y="803.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="998.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.08%)</title><rect x="995.7" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="998.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="996.2" y="771.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (35 samples, 0.72%)</title><rect x="996.9" y="867.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="999.9" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (18 samples, 0.37%)</title><rect x="998.7" y="851.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1001.7" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.14%)</title><rect x="1000.8" y="835.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1003.8" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.14%)</title><rect x="1000.8" y="819.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1003.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.06%)</title><rect x="1001.3" y="803.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1004.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="1002.1" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1005.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="1002.6" y="835.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1005.6" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.21%)</title><rect x="1003.0" y="851.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1006.0" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.21%)</title><rect x="1003.0" y="835.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1006.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.21%)</title><rect x="1003.0" y="819.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1006.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.21%)</title><rect x="1003.0" y="803.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1006.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.06%)</title><rect x="1005.5" y="867.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1008.5" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (3 samples, 0.06%)</title><rect x="1005.5" y="851.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1008.5" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.04%)</title><rect x="1006.2" y="867.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1009.2" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (47 samples, 0.97%)</title><rect x="1006.7" y="867.0" width="11.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1009.7" y="878.0"></text>
</g>
<g>
<title>java/lang/String.length (19 samples, 0.39%)</title><rect x="1007.2" y="851.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1010.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (18 samples, 0.37%)</title><rect x="1011.8" y="851.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1014.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.04%)</title><rect x="1012.3" y="835.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1015.3" y="846.0"></text>
</g>
<g>
<title>java/lang/String.length (12 samples, 0.25%)</title><rect x="1012.8" y="835.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1015.8" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="1015.7" y="835.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1018.7" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.17%)</title><rect x="1016.2" y="851.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.2" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="1017.4" y="835.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1020.4" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="1017.7" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1020.7" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.35%)</title><rect x="1018.2" y="867.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1021.2" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.35%)</title><rect x="1018.2" y="851.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1021.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.23%)</title><rect x="1019.6" y="835.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1022.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.19%)</title><rect x="1019.9" y="819.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1022.9" y="830.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (6 samples, 0.12%)</title><rect x="1020.3" y="803.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.04%)</title><rect x="1020.8" y="787.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="1021.3" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1024.3" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (313 samples, 6.47%)</title><rect x="1022.3" y="883.0" width="76.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1025.3" y="894.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (308 samples, 6.36%)</title><rect x="1023.0" y="867.0" width="75.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.0" y="878.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (6 samples, 0.12%)</title><rect x="1028.1" y="851.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1031.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 1.26%)</title><rect x="1029.6" y="851.0" width="14.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1032.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 1.26%)</title><rect x="1029.6" y="835.0" width="14.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1032.6" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (46 samples, 0.95%)</title><rect x="1029.6" y="819.0" width="11.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1032.6" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.08%)</title><rect x="1030.6" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1033.6" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="1031.6" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.6" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.04%)</title><rect x="1032.0" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.0" y="814.0"></text>
</g>
<g>
<title>__memmove_ssse3 (7 samples, 0.14%)</title><rect x="1032.5" y="803.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1035.5" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.04%)</title><rect x="1034.2" y="803.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1037.2" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (25 samples, 0.52%)</title><rect x="1034.7" y="803.0" width="6.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1037.7" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="1035.9" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.9" y="798.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.04%)</title><rect x="1036.4" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.4" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (3 samples, 0.06%)</title><rect x="1036.9" y="787.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1039.9" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (7 samples, 0.14%)</title><rect x="1037.7" y="787.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.7" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.08%)</title><rect x="1039.6" y="787.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1042.6" y="798.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.04%)</title><rect x="1041.1" y="819.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1044.1" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.14%)</title><rect x="1041.6" y="819.0" width="1.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1044.6" y="830.0"></text>
</g>
<g>
<title>recv (5 samples, 0.10%)</title><rect x="1043.3" y="819.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1046.3" y="830.0"></text>
</g>
<g>
<title>recv (220 samples, 4.54%)</title><rect x="1044.5" y="851.0" width="53.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1047.5" y="862.0">recv</text>
</g>
<g>
<title>[unknown] (205 samples, 4.23%)</title><rect x="1048.1" y="835.0" width="50.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1051.1" y="846.0">[unkn..</text>
</g>
<g>
<title>[unknown] (205 samples, 4.23%)</title><rect x="1048.1" y="819.0" width="50.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1051.1" y="830.0">[unkn..</text>
</g>
<g>
<title>[unknown] (187 samples, 3.86%)</title><rect x="1052.5" y="803.0" width="45.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1055.5" y="814.0">[unk..</text>
</g>
<g>
<title>[unknown] (186 samples, 3.84%)</title><rect x="1052.8" y="787.0" width="45.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1055.8" y="798.0">[unk..</text>
</g>
<g>
<title>[unknown] (179 samples, 3.70%)</title><rect x="1054.5" y="771.0" width="43.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1057.5" y="782.0">[unk..</text>
</g>
<g>
<title>[unknown] (175 samples, 3.61%)</title><rect x="1055.4" y="755.0" width="42.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1058.4" y="766.0">[unk..</text>
</g>
<g>
<title>[unknown] (168 samples, 3.47%)</title><rect x="1057.2" y="739.0" width="40.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1060.2" y="750.0">[un..</text>
</g>
<g>
<title>[unknown] (140 samples, 2.89%)</title><rect x="1064.0" y="723.0" width="34.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1067.0" y="734.0">[u..</text>
</g>
<g>
<title>[unknown] (110 samples, 2.27%)</title><rect x="1071.3" y="707.0" width="26.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1074.3" y="718.0">[..</text>
</g>
<g>
<title>[unknown] (72 samples, 1.49%)</title><rect x="1080.6" y="691.0" width="17.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1083.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.01%)</title><rect x="1086.2" y="675.0" width="11.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1089.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.52%)</title><rect x="1092.0" y="659.0" width="6.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1095.0" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.04%)</title><rect x="1098.1" y="867.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1101.1" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.23%)</title><rect x="1098.6" y="899.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.6" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="1098.6" y="883.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1101.6" y="894.0"></text>
</g>
<g>
<title>gettimeofday (9 samples, 0.19%)</title><rect x="1099.1" y="883.0" width="2.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1102.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.12%)</title><rect x="1099.8" y="867.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1102.8" y="878.0"></text>
</g>
<g>
<title>start_thread (364 samples, 7.52%)</title><rect x="1101.3" y="931.0" width="88.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1104.3" y="942.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (364 samples, 7.52%)</title><rect x="1101.3" y="915.0" width="88.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1104.3" y="926.0">thread_nat..</text>
</g>
<g>
<title>Thread::call_run() (364 samples, 7.52%)</title><rect x="1101.3" y="899.0" width="88.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.3" y="910.0">Thread::ca..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.04%)</title><rect x="1101.3" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.3" y="894.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.04%)</title><rect x="1101.3" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.3" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (40 samples, 0.83%)</title><rect x="1101.8" y="883.0" width="9.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.8" y="894.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (38 samples, 0.78%)</title><rect x="1102.0" y="867.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.0" y="878.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (24 samples, 0.50%)</title><rect x="1102.0" y="851.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.0" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (18 samples, 0.37%)</title><rect x="1102.0" y="835.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.0" y="846.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (16 samples, 0.33%)</title><rect x="1102.5" y="819.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.5" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (13 samples, 0.27%)</title><rect x="1103.2" y="803.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.2" y="814.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.04%)</title><rect x="1105.4" y="787.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.4" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.04%)</title><rect x="1105.9" y="787.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.9" y="798.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.04%)</title><rect x="1106.4" y="835.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.4" y="846.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.08%)</title><rect x="1106.9" y="835.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1109.9" y="846.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 0.08%)</title><rect x="1108.3" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.3" y="862.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.08%)</title><rect x="1108.3" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.3" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 0.08%)</title><rect x="1108.3" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.3" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (4 samples, 0.08%)</title><rect x="1108.3" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.3" y="814.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.08%)</title><rect x="1108.3" y="787.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.3" y="798.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (4 samples, 0.08%)</title><rect x="1108.3" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.3" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (8 samples, 0.17%)</title><rect x="1109.3" y="851.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.3" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.10%)</title><rect x="1109.3" y="835.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.3" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.06%)</title><rect x="1109.8" y="819.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.8" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 0.06%)</title><rect x="1109.8" y="803.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.8" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.04%)</title><rect x="1110.0" y="787.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.0" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.04%)</title><rect x="1110.8" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.8" y="846.0"></text>
</g>
<g>
<title>JavaThread::run() (313 samples, 6.47%)</title><rect x="1111.5" y="883.0" width="76.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.5" y="894.0">JavaThre..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (313 samples, 6.47%)</title><rect x="1111.5" y="867.0" width="76.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.5" y="878.0">JavaThre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (309 samples, 6.38%)</title><rect x="1111.5" y="851.0" width="75.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.5" y="862.0">CompileB..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (307 samples, 6.34%)</title><rect x="1111.5" y="835.0" width="74.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.5" y="846.0">CompileB..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (302 samples, 6.24%)</title><rect x="1111.5" y="819.0" width="73.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.5" y="830.0">C2Compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (302 samples, 6.24%)</title><rect x="1111.5" y="803.0" width="73.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.5" y="814.0">Compile:..</text>
</g>
<g>
<title>Compile::Code_Gen() (191 samples, 3.95%)</title><rect x="1111.5" y="787.0" width="46.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.5" y="798.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (9 samples, 0.19%)</title><rect x="1111.5" y="771.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.5" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (7 samples, 0.14%)</title><rect x="1111.5" y="755.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.5" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.04%)</title><rect x="1113.2" y="755.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.2" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.10%)</title><rect x="1113.7" y="771.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.7" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (20 samples, 0.41%)</title><rect x="1114.9" y="771.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.9" y="782.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (2 samples, 0.04%)</title><rect x="1115.2" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.2" y="766.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (2 samples, 0.04%)</title><rect x="1115.2" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.2" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (16 samples, 0.33%)</title><rect x="1115.9" y="755.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.9" y="766.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.04%)</title><rect x="1116.1" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.1" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (10 samples, 0.21%)</title><rect x="1116.9" y="739.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.9" y="750.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.04%)</title><rect x="1117.4" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.4" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (2 samples, 0.04%)</title><rect x="1117.4" y="707.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1120.4" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.08%)</title><rect x="1117.8" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.8" y="734.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.04%)</title><rect x="1118.1" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.1" y="718.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (2 samples, 0.04%)</title><rect x="1118.1" y="691.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.1" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.04%)</title><rect x="1118.8" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.8" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.04%)</title><rect x="1118.8" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.8" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (16 samples, 0.33%)</title><rect x="1119.8" y="771.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (16 samples, 0.33%)</title><rect x="1119.8" y="755.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (2 samples, 0.04%)</title><rect x="1120.0" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.0" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.06%)</title><rect x="1120.5" y="739.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.5" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.04%)</title><rect x="1120.8" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.8" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.04%)</title><rect x="1121.3" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.3" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.04%)</title><rect x="1122.0" y="739.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.0" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.08%)</title><rect x="1122.5" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.5" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.04%)</title><rect x="1122.7" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1122.7" y="707.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1125.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1122.7" y="691.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1125.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1122.7" y="675.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1125.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (140 samples, 2.89%)</title><rect x="1123.9" y="771.0" width="34.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.9" y="782.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.08%)</title><rect x="1124.2" y="755.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (10 samples, 0.21%)</title><rect x="1125.2" y="755.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.2" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (6 samples, 0.12%)</title><rect x="1125.9" y="739.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.9" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.08%)</title><rect x="1126.4" y="723.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.14%)</title><rect x="1127.6" y="755.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.6" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.08%)</title><rect x="1128.3" y="739.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="1128.8" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (17 samples, 0.35%)</title><rect x="1129.3" y="755.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (29 samples, 0.60%)</title><rect x="1133.4" y="755.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (5 samples, 0.10%)</title><rect x="1134.7" y="739.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.23%)</title><rect x="1135.9" y="739.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.9" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.06%)</title><rect x="1137.8" y="723.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.06%)</title><rect x="1138.8" y="739.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.8" y="750.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.06%)</title><rect x="1138.8" y="723.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.8" y="734.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (3 samples, 0.06%)</title><rect x="1139.8" y="739.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.04%)</title><rect x="1140.5" y="755.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.04%)</title><rect x="1140.5" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (4 samples, 0.08%)</title><rect x="1141.2" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.2" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.06%)</title><rect x="1141.5" y="739.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (14 samples, 0.29%)</title><rect x="1142.2" y="755.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (4 samples, 0.08%)</title><rect x="1145.6" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (18 samples, 0.37%)</title><rect x="1146.6" y="755.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (9 samples, 0.19%)</title><rect x="1148.8" y="739.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.8" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.04%)</title><rect x="1151.2" y="755.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.2" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.04%)</title><rect x="1151.2" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.2" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.04%)</title><rect x="1151.2" y="723.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.08%)</title><rect x="1151.7" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.7" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 0.10%)</title><rect x="1152.7" y="755.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.7" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.04%)</title><rect x="1153.9" y="755.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.9" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.23%)</title><rect x="1154.4" y="755.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.4" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.08%)</title><rect x="1156.1" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.1" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (86 samples, 1.78%)</title><rect x="1158.1" y="787.0" width="20.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.1" y="798.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.04%)</title><rect x="1158.3" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.3" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (12 samples, 0.25%)</title><rect x="1158.8" y="771.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (12 samples, 0.25%)</title><rect x="1158.8" y="755.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (11 samples, 0.23%)</title><rect x="1159.0" y="739.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (7 samples, 0.14%)</title><rect x="1159.5" y="723.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (5 samples, 0.10%)</title><rect x="1160.0" y="707.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.0" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.04%)</title><rect x="1161.7" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (47 samples, 0.97%)</title><rect x="1162.5" y="771.0" width="11.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.08%)</title><rect x="1162.9" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="766.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.04%)</title><rect x="1163.2" y="739.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.12%)</title><rect x="1163.9" y="755.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (3 samples, 0.06%)</title><rect x="1164.6" y="739.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.06%)</title><rect x="1164.6" y="723.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1164.9" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 0.43%)</title><rect x="1165.4" y="755.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 0.33%)</title><rect x="1166.6" y="739.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1167.1" y="723.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 0.23%)</title><rect x="1167.6" y="723.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (8 samples, 0.17%)</title><rect x="1168.3" y="707.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (6 samples, 0.12%)</title><rect x="1171.0" y="755.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.06%)</title><rect x="1171.5" y="739.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.10%)</title><rect x="1172.4" y="755.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.4" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.08%)</title><rect x="1172.7" y="739.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 0.27%)</title><rect x="1173.9" y="771.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 0.27%)</title><rect x="1173.9" y="755.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1174.4" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="750.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1174.4" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="734.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (2 samples, 0.04%)</title><rect x="1174.4" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (2 samples, 0.04%)</title><rect x="1174.4" y="691.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (2 samples, 0.04%)</title><rect x="1174.4" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="686.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (2 samples, 0.04%)</title><rect x="1174.4" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.04%)</title><rect x="1174.9" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="750.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1176.1" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.06%)</title><rect x="1177.1" y="771.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="1177.1" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="766.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (3 samples, 0.06%)</title><rect x="1178.3" y="771.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1181.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (25 samples, 0.52%)</title><rect x="1179.0" y="787.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (25 samples, 0.52%)</title><rect x="1179.0" y="771.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (25 samples, 0.52%)</title><rect x="1179.0" y="755.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (25 samples, 0.52%)</title><rect x="1179.0" y="739.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (24 samples, 0.50%)</title><rect x="1179.3" y="723.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (24 samples, 0.50%)</title><rect x="1179.3" y="707.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.17%)</title><rect x="1179.5" y="691.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.17%)</title><rect x="1179.5" y="675.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.17%)</title><rect x="1179.5" y="659.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.17%)</title><rect x="1179.5" y="643.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.17%)</title><rect x="1179.5" y="627.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.17%)</title><rect x="1179.5" y="611.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1179.5" y="595.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="1179.5" y="579.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.10%)</title><rect x="1179.5" y="563.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.10%)</title><rect x="1179.5" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.10%)</title><rect x="1179.5" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="1179.5" y="515.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1179.5" y="499.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1179.5" y="483.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1179.5" y="467.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1179.5" y="451.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1179.5" y="435.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.04%)</title><rect x="1179.5" y="419.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.04%)</title><rect x="1179.5" y="403.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1180.0" y="499.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1180.0" y="483.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1180.0" y="467.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1180.0" y="451.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.0" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1180.7" y="595.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1181.0" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1181.0" y="563.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1181.0" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1181.0" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1181.0" y="515.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1181.0" y="499.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1181.0" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1181.0" y="467.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1181.0" y="451.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1181.0" y="435.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1181.0" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1181.0" y="403.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1181.0" y="387.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (15 samples, 0.31%)</title><rect x="1181.5" y="691.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.23%)</title><rect x="1181.5" y="675.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.23%)</title><rect x="1181.5" y="659.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.23%)</title><rect x="1181.5" y="643.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.23%)</title><rect x="1181.5" y="627.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.23%)</title><rect x="1181.5" y="611.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.23%)</title><rect x="1181.5" y="595.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.23%)</title><rect x="1181.5" y="579.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.23%)</title><rect x="1181.5" y="563.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.23%)</title><rect x="1181.5" y="547.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.23%)</title><rect x="1181.5" y="531.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.23%)</title><rect x="1181.5" y="515.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.23%)</title><rect x="1181.5" y="499.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.19%)</title><rect x="1181.7" y="483.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.19%)</title><rect x="1181.7" y="467.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.17%)</title><rect x="1182.0" y="451.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.14%)</title><rect x="1182.2" y="435.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.12%)</title><rect x="1182.4" y="419.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.12%)</title><rect x="1182.4" y="403.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1182.4" y="387.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.10%)</title><rect x="1182.4" y="371.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.10%)</title><rect x="1182.4" y="355.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.10%)</title><rect x="1182.4" y="339.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.10%)</title><rect x="1182.4" y="323.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.10%)</title><rect x="1182.4" y="307.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1182.4" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.4" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1182.4" y="275.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1182.4" y="259.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1182.4" y="243.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.08%)</title><rect x="1182.4" y="227.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="1182.4" y="211.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1182.4" y="195.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.4" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1182.4" y="179.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1182.4" y="163.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1182.4" y="147.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1182.4" y="131.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1182.4" y="115.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.4" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1182.4" y="99.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.4" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1182.4" y="83.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1182.4" y="67.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1182.4" y="51.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.4" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1182.4" y="35.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1184.1" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1184.1" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1184.1" y="643.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1184.1" y="627.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1184.1" y="611.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.08%)</title><rect x="1184.1" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="1184.1" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1184.1" y="563.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1184.1" y="547.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1184.1" y="531.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1184.1" y="515.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1184.1" y="499.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1184.1" y="483.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1184.1" y="467.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1184.1" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1184.1" y="435.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1184.1" y="419.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1184.1" y="403.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1184.1" y="387.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.06%)</title><rect x="1185.4" y="819.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.4" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.06%)</title><rect x="1185.4" y="803.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.4" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.06%)</title><rect x="1185.4" y="787.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.4" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.06%)</title><rect x="1185.4" y="771.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.4" y="782.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.06%)</title><rect x="1187.1" y="851.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="862.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.06%)</title><rect x="1187.1" y="835.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="846.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (3 samples, 0.06%)</title><rect x="1187.1" y="819.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.1" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (5 samples, 0.10%)</title><rect x="1188.0" y="883.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="894.0"></text>
</g>
<g>
<title>VMThread::loop() (5 samples, 0.10%)</title><rect x="1188.0" y="867.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="878.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.04%)</title><rect x="1188.3" y="851.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="862.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.04%)</title><rect x="1188.3" y="835.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="846.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.04%)</title><rect x="1188.3" y="819.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.04%)</title><rect x="1188.3" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="814.0"></text>
</g>
<g>
<title>__GI___sched_yield (2 samples, 0.04%)</title><rect x="1188.8" y="851.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1191.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1188.8" y="835.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1191.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1188.8" y="819.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1191.8" y="830.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.06%)</title><rect x="1189.3" y="883.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.3" y="894.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 0.06%)</title><rect x="1189.3" y="867.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.3" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title><rect x="1189.5" y="851.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.5" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title><rect x="1189.5" y="835.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.5" y="846.0"></text>
</g>
</g>
</svg>
