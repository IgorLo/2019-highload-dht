<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1557"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1557"> </text>
<g id="frames">
<g>
<title>all (4,300 samples, 100.00%)</title><rect x="10.0" y="1523.0" width="1180.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="13.0" y="1534.0">all</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="10.0" y="1507.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="10.3" y="1507.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.3" y="1518.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="10.8" y="1507.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="1518.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1491.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="1475.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="10.8" y="1459.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="1470.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.02%)</title><rect x="10.8" y="1443.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="1454.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="11.1" y="1507.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.1" y="1518.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="11.1" y="1491.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.1" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="11.1" y="1475.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.1" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="11.1" y="1459.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.1" y="1470.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="11.1" y="1443.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.1" y="1454.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="11.1" y="1427.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.1" y="1438.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="11.1" y="1411.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.1" y="1422.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.07%)</title><rect x="11.4" y="1507.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.4" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.07%)</title><rect x="11.4" y="1491.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.4" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.07%)</title><rect x="11.4" y="1475.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.4" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="11.4" y="1459.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.4" y="1470.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="11.4" y="1443.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.4" y="1454.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="11.4" y="1427.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.4" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.05%)</title><rect x="11.4" y="1411.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.4" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.05%)</title><rect x="11.4" y="1395.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.4" y="1406.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.05%)</title><rect x="11.4" y="1379.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.4" y="1390.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.05%)</title><rect x="11.4" y="1363.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.4" y="1374.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (2 samples, 0.05%)</title><rect x="11.4" y="1347.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.4" y="1358.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.05%)</title><rect x="11.4" y="1331.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.4" y="1342.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.02%)</title><rect x="11.6" y="1315.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.6" y="1326.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="11.9" y="1459.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.9" y="1470.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (2 samples, 0.05%)</title><rect x="12.2" y="1507.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.2" y="1518.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame(JavaThread*, long*) (1 samples, 0.02%)</title><rect x="12.2" y="1491.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.2" y="1502.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="12.2" y="1475.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.2" y="1486.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize(JavaThread*, frame, RegisterMap*, Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="12.2" y="1459.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.2" y="1470.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="12.5" y="1491.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.5" y="1502.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="12.5" y="1475.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.5" y="1486.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (36 samples, 0.84%)</title><rect x="12.7" y="1507.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.7" y="1518.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="12.7" y="1491.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.7" y="1502.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.02%)</title><rect x="13.0" y="1491.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="16.0" y="1502.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (33 samples, 0.77%)</title><rect x="13.3" y="1491.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.3" y="1502.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="14.1" y="1475.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.1" y="1486.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="14.1" y="1459.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.1" y="1470.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (15 samples, 0.35%)</title><rect x="14.4" y="1475.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.4" y="1486.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.14%)</title><rect x="14.9" y="1459.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="17.9" y="1470.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.07%)</title><rect x="16.6" y="1459.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="19.6" y="1470.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="16.6" y="1443.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="19.6" y="1454.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="16.6" y="1427.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.6" y="1438.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.05%)</title><rect x="17.4" y="1459.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="20.4" y="1470.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.02%)</title><rect x="18.0" y="1459.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="21.0" y="1470.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="18.2" y="1459.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.2" y="1470.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (13 samples, 0.30%)</title><rect x="18.5" y="1475.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="21.5" y="1486.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="22.1" y="1475.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="25.1" y="1486.0"></text>
</g>
<g>
<title>jfr_is_event_enabled(JfrEventId) (1 samples, 0.02%)</title><rect x="22.3" y="1491.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="25.3" y="1502.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.02%)</title><rect x="22.6" y="1507.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="25.6" y="1518.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.09%)</title><rect x="22.9" y="1507.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="25.9" y="1518.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="22.9" y="1491.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="25.9" y="1502.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.05%)</title><rect x="22.9" y="1475.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="25.9" y="1486.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="22.9" y="1459.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="25.9" y="1470.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.02%)</title><rect x="22.9" y="1443.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="25.9" y="1454.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="23.2" y="1459.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="26.2" y="1470.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="23.2" y="1443.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.2" y="1454.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="23.2" y="1427.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="26.2" y="1438.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.02%)</title><rect x="23.4" y="1491.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="26.4" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="23.7" y="1491.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="26.7" y="1502.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="23.7" y="1475.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="26.7" y="1486.0"></text>
</g>
<g>
<title>[unknown_Java] (31 samples, 0.72%)</title><rect x="24.0" y="1507.0" width="8.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="27.0" y="1518.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.16%)</title><rect x="27.0" y="1491.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="30.0" y="1502.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="27.0" y="1475.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="30.0" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.0" y="1459.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="30.0" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.0" y="1443.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="30.0" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.0" y="1427.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="30.0" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.0" y="1411.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="30.0" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.0" y="1395.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="30.0" y="1406.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.09%)</title><rect x="27.3" y="1459.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="30.3" y="1470.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="28.4" y="1475.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="31.4" y="1486.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="28.9" y="1491.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="31.9" y="1502.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (12 samples, 0.28%)</title><rect x="29.2" y="1491.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="32.2" y="1502.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="29.8" y="1475.0" width="2.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="32.8" y="1486.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="29.8" y="1459.0" width="2.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="32.8" y="1470.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="29.8" y="1443.0" width="2.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="32.8" y="1454.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="29.8" y="1427.0" width="2.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="32.8" y="1438.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.19%)</title><rect x="30.3" y="1411.0" width="2.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="33.3" y="1422.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.14%)</title><rect x="30.9" y="1395.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="33.9" y="1406.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.14%)</title><rect x="30.9" y="1379.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="33.9" y="1390.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.14%)</title><rect x="30.9" y="1363.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="33.9" y="1374.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 0.37%)</title><rect x="32.5" y="1507.0" width="4.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="35.5" y="1518.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="34.1" y="1491.0" width="2.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="37.1" y="1502.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="34.1" y="1475.0" width="2.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="37.1" y="1486.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="34.1" y="1459.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="37.1" y="1470.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="34.1" y="1443.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="37.1" y="1454.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.21%)</title><rect x="34.4" y="1427.0" width="2.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="37.4" y="1438.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.16%)</title><rect x="35.0" y="1411.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="38.0" y="1422.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="35.8" y="1395.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="38.8" y="1406.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="36.3" y="1379.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="39.3" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="36.6" y="1363.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="39.6" y="1374.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="36.9" y="1507.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="39.9" y="1518.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,406 samples, 55.95%)</title><rect x="37.2" y="1507.0" width="660.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.2" y="1518.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,406 samples, 55.95%)</title><rect x="37.2" y="1491.0" width="660.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.2" y="1502.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,406 samples, 55.95%)</title><rect x="37.2" y="1475.0" width="660.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.2" y="1486.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="38.3" y="1459.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.3" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (4 samples, 0.09%)</title><rect x="38.5" y="1459.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.5" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.09%)</title><rect x="38.5" y="1443.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.5" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (4 samples, 0.09%)</title><rect x="38.5" y="1427.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.5" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.09%)</title><rect x="38.5" y="1411.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.5" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.09%)</title><rect x="38.5" y="1395.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.09%)</title><rect x="38.5" y="1379.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.05%)</title><rect x="39.6" y="1459.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.6" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="39.6" y="1443.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.6" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.02%)</title><rect x="39.9" y="1427.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.02%)</title><rect x="39.9" y="1411.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (546 samples, 12.70%)</title><rect x="40.2" y="1459.0" width="149.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.2" y="1470.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (540 samples, 12.56%)</title><rect x="41.6" y="1443.0" width="148.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.6" y="1454.0">java/util/concurren..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="42.1" y="1427.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="45.1" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="42.1" y="1411.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="45.1" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="42.1" y="1395.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="45.1" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (399 samples, 9.28%)</title><rect x="42.4" y="1427.0" width="109.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.4" y="1438.0">java/util/con..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (12 samples, 0.28%)</title><rect x="43.2" y="1411.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.2" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="46.2" y="1395.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.07%)</title><rect x="46.5" y="1411.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="49.5" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.02%)</title><rect x="47.3" y="1411.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.3" y="1422.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="47.3" y="1395.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.3" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (24 samples, 0.56%)</title><rect x="47.6" y="1411.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.6" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="48.7" y="1395.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.7" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="48.7" y="1379.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.7" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="48.7" y="1363.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.7" y="1374.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="48.7" y="1347.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="51.7" y="1358.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.02%)</title><rect x="48.7" y="1331.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="51.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="48.7" y="1315.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="51.7" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="48.7" y="1299.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="51.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="49.0" y="1347.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="52.0" y="1358.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.02%)</title><rect x="49.0" y="1331.0" width="0.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="52.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.02%)</title><rect x="49.2" y="1395.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (17 samples, 0.40%)</title><rect x="49.5" y="1395.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.5" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (17 samples, 0.40%)</title><rect x="49.5" y="1379.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (3 samples, 0.07%)</title><rect x="53.1" y="1363.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="53.9" y="1363.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="53.9" y="1347.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="53.9" y="1331.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (28 samples, 0.65%)</title><rect x="54.2" y="1411.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 0.65%)</title><rect x="54.2" y="1395.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 0.51%)</title><rect x="54.5" y="1379.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 0.51%)</title><rect x="54.5" y="1363.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.5" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (22 samples, 0.51%)</title><rect x="54.5" y="1347.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.5" y="1358.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="54.7" y="1331.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="57.7" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.05%)</title><rect x="55.0" y="1331.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="58.0" y="1342.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (18 samples, 0.42%)</title><rect x="55.6" y="1331.0" width="4.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="58.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.37%)</title><rect x="56.1" y="1315.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="59.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.37%)</title><rect x="56.1" y="1299.0" width="4.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="59.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.35%)</title><rect x="56.4" y="1283.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="59.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.35%)</title><rect x="56.4" y="1267.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="59.4" y="1278.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.35%)</title><rect x="56.4" y="1251.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="59.4" y="1262.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.30%)</title><rect x="56.9" y="1235.0" width="3.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="59.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.26%)</title><rect x="57.5" y="1219.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="60.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.26%)</title><rect x="57.5" y="1203.0" width="3.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="60.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 0.12%)</title><rect x="60.5" y="1379.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="63.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (328 samples, 7.63%)</title><rect x="61.9" y="1411.0" width="90.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.9" y="1422.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (328 samples, 7.63%)</title><rect x="61.9" y="1395.0" width="90.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.9" y="1406.0">jdk/intern..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.09%)</title><rect x="63.5" y="1379.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="66.5" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.05%)</title><rect x="64.6" y="1379.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="67.6" y="1390.0"></text>
</g>
<g>
<title>Unsafe_Park (154 samples, 3.58%)</title><rect x="65.2" y="1379.0" width="42.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="68.2" y="1390.0">Unsa..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.07%)</title><rect x="67.6" y="1363.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="70.6" y="1374.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="68.5" y="1363.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="71.5" y="1374.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="68.7" y="1363.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="71.7" y="1374.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.07%)</title><rect x="69.0" y="1363.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="72.0" y="1374.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (47 samples, 1.09%)</title><rect x="69.8" y="1363.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="72.8" y="1374.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="77.5" y="1347.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="80.5" y="1358.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.09%)</title><rect x="77.8" y="1347.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="80.8" y="1358.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.05%)</title><rect x="78.3" y="1331.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="81.3" y="1342.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.05%)</title><rect x="78.9" y="1347.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="81.9" y="1358.0"></text>
</g>
<g>
<title>__tls_get_addr (11 samples, 0.26%)</title><rect x="79.4" y="1347.0" width="3.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="82.4" y="1358.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="82.4" y="1347.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="85.4" y="1358.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.05%)</title><rect x="82.7" y="1363.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="85.7" y="1374.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (4 samples, 0.09%)</title><rect x="83.3" y="1363.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="86.3" y="1374.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.07%)</title><rect x="84.4" y="1363.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="87.4" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="85.2" y="1363.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="88.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="85.2" y="1347.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="88.2" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="85.2" y="1331.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="88.2" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="85.2" y="1315.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="88.2" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="85.2" y="1299.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="88.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="85.2" y="1283.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="88.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="85.2" y="1267.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="88.2" y="1278.0"></text>
</g>
<g>
<title>__lll_unlock_wake (55 samples, 1.28%)</title><rect x="85.5" y="1363.0" width="15.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="88.5" y="1374.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 1.00%)</title><rect x="88.8" y="1347.0" width="11.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="91.8" y="1358.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 1.00%)</title><rect x="88.8" y="1331.0" width="11.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="91.8" y="1342.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.47%)</title><rect x="95.1" y="1315.0" width="5.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="98.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.40%)</title><rect x="95.9" y="1299.0" width="4.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="98.9" y="1310.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.37%)</title><rect x="96.2" y="1283.0" width="4.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="99.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.21%)</title><rect x="98.1" y="1267.0" width="2.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="101.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="99.5" y="1251.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="102.5" y="1262.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.05%)</title><rect x="100.6" y="1363.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="103.6" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="101.1" y="1363.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="104.1" y="1374.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.09%)</title><rect x="101.4" y="1363.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="104.4" y="1374.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="102.5" y="1363.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="105.5" y="1374.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (17 samples, 0.40%)</title><rect x="102.8" y="1363.0" width="4.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="105.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (154 samples, 3.58%)</title><rect x="107.4" y="1379.0" width="42.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="110.4" y="1390.0">[unk..</text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.02%)</title><rect x="107.4" y="1363.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="110.4" y="1374.0"></text>
</g>
<g>
<title>__pthread_cond_wait (110 samples, 2.56%)</title><rect x="107.7" y="1363.0" width="30.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="110.7" y="1374.0">__..</text>
</g>
<g>
<title>[unknown] (71 samples, 1.65%)</title><rect x="118.4" y="1347.0" width="19.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="121.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 1.65%)</title><rect x="118.4" y="1331.0" width="19.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="121.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.26%)</title><rect x="123.1" y="1315.0" width="14.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="126.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 1.21%)</title><rect x="123.6" y="1299.0" width="14.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="126.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.14%)</title><rect x="124.4" y="1283.0" width="13.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="127.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.95%)</title><rect x="126.6" y="1267.0" width="11.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="129.6" y="1278.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.65%)</title><rect x="130.2" y="1251.0" width="7.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="133.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.49%)</title><rect x="132.1" y="1235.0" width="5.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="135.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.40%)</title><rect x="133.2" y="1219.0" width="4.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="136.2" y="1230.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="136.8" y="1203.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="139.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="136.8" y="1187.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="139.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="136.8" y="1171.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="139.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="136.8" y="1155.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="139.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="136.8" y="1139.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="139.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="136.8" y="1123.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="139.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="136.8" y="1107.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="139.8" y="1118.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.21%)</title><rect x="137.9" y="1363.0" width="2.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="140.9" y="1374.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="140.3" y="1363.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="143.3" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (25 samples, 0.58%)</title><rect x="140.6" y="1363.0" width="6.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="143.6" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.14%)</title><rect x="147.5" y="1363.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="150.5" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.05%)</title><rect x="149.1" y="1363.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="152.1" y="1374.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (4 samples, 0.09%)</title><rect x="149.7" y="1379.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="152.7" y="1390.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.09%)</title><rect x="150.8" y="1379.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="153.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="151.9" y="1427.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="151.9" y="1411.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="151.9" y="1395.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="154.9" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="151.9" y="1379.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (48 samples, 1.12%)</title><rect x="152.1" y="1427.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (46 samples, 1.07%)</title><rect x="152.7" y="1411.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.7" y="1422.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="152.7" y="1395.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.7" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (31 samples, 0.72%)</title><rect x="153.0" y="1395.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.0" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.02%)</title><rect x="155.2" y="1379.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="158.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.19%)</title><rect x="155.4" y="1379.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="155.7" y="1363.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="158.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.14%)</title><rect x="156.0" y="1363.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="159.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (5 samples, 0.12%)</title><rect x="156.0" y="1347.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.0" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="157.4" y="1347.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="160.4" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="157.4" y="1331.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="160.4" y="1342.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="157.4" y="1315.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="160.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (14 samples, 0.33%)</title><rect x="157.6" y="1379.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.6" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="160.7" y="1363.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="163.7" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="160.7" y="1347.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="163.7" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="160.7" y="1331.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="163.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.05%)</title><rect x="160.9" y="1363.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.9" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (14 samples, 0.33%)</title><rect x="161.5" y="1395.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="164.5" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (14 samples, 0.33%)</title><rect x="161.5" y="1379.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (2 samples, 0.05%)</title><rect x="162.3" y="1363.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (9 samples, 0.21%)</title><rect x="162.9" y="1363.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="165.9" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (89 samples, 2.07%)</title><rect x="165.3" y="1427.0" width="24.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.3" y="1438.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (89 samples, 2.07%)</title><rect x="165.3" y="1411.0" width="24.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="168.3" y="1422.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (89 samples, 2.07%)</title><rect x="165.3" y="1395.0" width="24.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.3" y="1406.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (89 samples, 2.07%)</title><rect x="165.3" y="1379.0" width="24.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.3" y="1390.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (89 samples, 2.07%)</title><rect x="165.3" y="1363.0" width="24.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.3" y="1374.0">j..</text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="165.6" y="1347.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="168.6" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 0.23%)</title><rect x="165.9" y="1347.0" width="2.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="168.9" y="1358.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="165.9" y="1331.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="168.9" y="1342.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="166.1" y="1331.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="169.1" y="1342.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.02%)</title><rect x="166.4" y="1331.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="169.4" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="166.7" y="1331.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="169.7" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.05%)</title><rect x="167.0" y="1331.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="170.0" y="1342.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.02%)</title><rect x="167.5" y="1331.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="170.5" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="167.5" y="1315.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="170.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="167.5" y="1299.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="170.5" y="1310.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (2 samples, 0.05%)</title><rect x="167.8" y="1331.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="170.8" y="1342.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="168.3" y="1331.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="171.3" y="1342.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="168.6" y="1347.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="171.6" y="1358.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.05%)</title><rect x="168.9" y="1347.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="171.9" y="1358.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (74 samples, 1.72%)</title><rect x="169.4" y="1347.0" width="20.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="172.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 1.65%)</title><rect x="170.3" y="1331.0" width="19.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="173.3" y="1342.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 1.65%)</title><rect x="170.3" y="1315.0" width="19.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="173.3" y="1326.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.51%)</title><rect x="171.9" y="1299.0" width="17.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="174.9" y="1310.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 1.49%)</title><rect x="172.2" y="1283.0" width="17.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="175.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 1.44%)</title><rect x="172.7" y="1267.0" width="17.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="175.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 1.40%)</title><rect x="173.3" y="1251.0" width="16.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="176.3" y="1262.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 1.21%)</title><rect x="175.5" y="1235.0" width="14.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="178.5" y="1246.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.19%)</title><rect x="175.7" y="1219.0" width="14.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="178.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="189.5" y="1203.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="192.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="189.5" y="1187.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="192.5" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="189.5" y="1171.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="192.5" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="189.5" y="1155.0" width="0.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="192.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="189.5" y="1139.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="192.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="189.5" y="1123.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="192.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="189.5" y="1107.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="192.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.02%)</title><rect x="189.7" y="1443.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.7" y="1454.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$FlushingTask.run (95 samples, 2.21%)</title><rect x="190.0" y="1459.0" width="26.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.0" y="1470.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.flushAndLoad (95 samples, 2.21%)</title><rect x="190.0" y="1443.0" width="26.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.0" y="1454.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.flush (95 samples, 2.21%)</title><rect x="190.0" y="1427.0" width="26.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.0" y="1438.0">r..</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.07%)</title><rect x="190.6" y="1411.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="193.6" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="191.4" y="1411.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="194.4" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="191.4" y="1395.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="194.4" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="191.4" y="1379.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="194.4" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="191.4" y="1363.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="194.4" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="191.4" y="1347.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="194.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="191.4" y="1331.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="194.4" y="1342.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.02%)</title><rect x="191.7" y="1411.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.7" y="1422.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="191.7" y="1395.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="194.7" y="1406.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="191.7" y="1379.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.7" y="1390.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="191.7" y="1363.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.7" y="1374.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="191.7" y="1347.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="194.7" y="1358.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title><rect x="191.9" y="1411.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.9" y="1422.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="191.9" y="1395.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="194.9" y="1406.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.02%)</title><rect x="192.2" y="1411.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.2" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putIntUnaligned (1 samples, 0.02%)</title><rect x="192.2" y="1395.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.2" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (1 samples, 0.02%)</title><rect x="192.2" y="1379.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.2" y="1390.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="192.5" y="1411.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.5" y="1422.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="192.5" y="1395.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.5" y="1406.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="192.5" y="1379.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.5" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="192.5" y="1363.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.5" y="1374.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="192.5" y="1347.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.5" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="192.5" y="1331.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.5" y="1342.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="192.5" y="1315.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.5" y="1326.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="192.5" y="1299.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.5" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.09%)</title><rect x="192.8" y="1411.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.8" y="1422.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.07%)</title><rect x="193.0" y="1395.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.0" y="1406.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.05%)</title><rect x="193.3" y="1379.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.3" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.05%)</title><rect x="193.3" y="1363.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.3" y="1374.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="193.6" y="1347.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="196.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (3 samples, 0.07%)</title><rect x="193.9" y="1411.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.07%)</title><rect x="193.9" y="1395.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.9" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.05%)</title><rect x="194.1" y="1379.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.1" y="1390.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.05%)</title><rect x="194.7" y="1411.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="197.7" y="1422.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="194.7" y="1395.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.7" y="1406.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="194.7" y="1379.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.7" y="1390.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="194.7" y="1363.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.7" y="1374.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="195.0" y="1395.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.0" y="1406.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="195.0" y="1379.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.0" y="1390.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getSizeOfFlushedRow (1 samples, 0.02%)</title><rect x="195.2" y="1411.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.2" y="1422.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getValue (1 samples, 0.02%)</title><rect x="195.5" y="1411.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.5" y="1422.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (1 samples, 0.02%)</title><rect x="195.8" y="1411.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.8" y="1422.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="195.8" y="1395.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="198.8" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.isDead (1 samples, 0.02%)</title><rect x="196.1" y="1411.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.1" y="1422.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (72 samples, 1.67%)</title><rect x="196.3" y="1411.0" width="19.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.3" y="1422.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.05%)</title><rect x="196.3" y="1395.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.3" y="1406.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.05%)</title><rect x="196.3" y="1379.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.3" y="1390.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="196.3" y="1363.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="199.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="196.3" y="1347.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="196.3" y="1331.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.02%)</title><rect x="196.3" y="1315.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.3" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title><rect x="196.6" y="1315.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="199.6" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (67 samples, 1.56%)</title><rect x="196.9" y="1395.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.9" y="1406.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (65 samples, 1.51%)</title><rect x="196.9" y="1379.0" width="17.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.9" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (65 samples, 1.51%)</title><rect x="196.9" y="1363.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.9" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (65 samples, 1.51%)</title><rect x="196.9" y="1347.0" width="17.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="199.9" y="1358.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.02%)</title><rect x="197.7" y="1331.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="200.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 1.42%)</title><rect x="198.0" y="1331.0" width="16.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="201.0" y="1342.0"></text>
</g>
<g>
<title>__write (61 samples, 1.42%)</title><rect x="198.0" y="1315.0" width="16.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="201.0" y="1326.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.26%)</title><rect x="199.9" y="1299.0" width="14.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="202.9" y="1310.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.26%)</title><rect x="199.9" y="1283.0" width="14.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="202.9" y="1294.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.14%)</title><rect x="201.3" y="1267.0" width="13.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="204.3" y="1278.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.14%)</title><rect x="201.3" y="1251.0" width="13.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="204.3" y="1262.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 1.09%)</title><rect x="201.8" y="1235.0" width="12.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="204.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.05%)</title><rect x="202.4" y="1219.0" width="12.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="205.4" y="1230.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 0.98%)</title><rect x="203.2" y="1203.0" width="11.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="206.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.91%)</title><rect x="204.0" y="1187.0" width="10.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="207.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.88%)</title><rect x="204.3" y="1171.0" width="10.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="207.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.79%)</title><rect x="205.4" y="1155.0" width="9.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="208.4" y="1166.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.74%)</title><rect x="205.9" y="1139.0" width="8.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="208.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.70%)</title><rect x="206.5" y="1123.0" width="8.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="209.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.63%)</title><rect x="207.3" y="1107.0" width="7.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="210.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.63%)</title><rect x="207.3" y="1091.0" width="7.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="210.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.51%)</title><rect x="208.7" y="1075.0" width="6.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="211.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.44%)</title><rect x="209.5" y="1059.0" width="5.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="212.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.42%)</title><rect x="209.8" y="1043.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="212.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.42%)</title><rect x="209.8" y="1027.0" width="4.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="212.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.26%)</title><rect x="211.7" y="1011.0" width="3.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="214.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.26%)</title><rect x="211.7" y="995.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="214.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.19%)</title><rect x="212.5" y="979.0" width="2.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="215.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.19%)</title><rect x="212.5" y="963.0" width="2.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="215.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.16%)</title><rect x="212.8" y="947.0" width="1.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="215.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="214.7" y="1379.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.7" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.05%)</title><rect x="214.7" y="1363.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.02%)</title><rect x="214.7" y="1347.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.7" y="1358.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="215.0" y="1347.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="218.0" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.07%)</title><rect x="215.3" y="1395.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.3" y="1406.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title><rect x="215.8" y="1379.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.8" y="1390.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.02%)</title><rect x="215.8" y="1363.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="218.8" y="1374.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.run (1,754 samples, 40.79%)</title><rect x="216.1" y="1459.0" width="481.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="219.1" y="1470.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (1,751 samples, 40.72%)</title><rect x="216.9" y="1443.0" width="480.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.9" y="1454.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,280 samples, 29.77%)</title><rect x="217.5" y="1427.0" width="351.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.5" y="1438.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,278 samples, 29.72%)</title><rect x="217.5" y="1411.0" width="350.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.5" y="1422.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (43 samples, 1.00%)</title><rect x="217.5" y="1395.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.5" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="218.8" y="1379.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="221.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="218.8" y="1363.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="221.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="218.8" y="1347.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="221.8" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="218.8" y="1331.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="221.8" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="218.8" y="1315.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="221.8" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="218.8" y="1299.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="221.8" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="218.8" y="1283.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="221.8" y="1294.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="219.1" y="1379.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="222.1" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (34 samples, 0.79%)</title><rect x="219.9" y="1379.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.9" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.05%)</title><rect x="219.9" y="1363.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.9" y="1374.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (15 samples, 0.35%)</title><rect x="220.5" y="1363.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.5" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.09%)</title><rect x="222.9" y="1347.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.05%)</title><rect x="222.9" y="1331.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.9" y="1342.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.05%)</title><rect x="223.5" y="1331.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.5" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="224.0" y="1347.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="224.0" y="1331.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.0" y="1342.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (17 samples, 0.40%)</title><rect x="224.6" y="1363.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.6" y="1374.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (17 samples, 0.40%)</title><rect x="224.6" y="1347.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.07%)</title><rect x="228.4" y="1331.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.05%)</title><rect x="228.4" y="1315.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.02%)</title><rect x="229.0" y="1315.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.0" y="1326.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,235 samples, 28.72%)</title><rect x="229.3" y="1395.0" width="338.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.3" y="1406.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,235 samples, 28.72%)</title><rect x="229.3" y="1379.0" width="338.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.3" y="1390.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,233 samples, 28.67%)</title><rect x="229.8" y="1363.0" width="338.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.8" y="1374.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="229.8" y="1347.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="232.8" y="1358.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="229.8" y="1331.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="232.8" y="1342.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,232 samples, 28.65%)</title><rect x="230.1" y="1347.0" width="338.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.1" y="1358.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.02%)</title><rect x="233.9" y="1331.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="236.9" y="1342.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.91%)</title><rect x="234.2" y="1331.0" width="10.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="237.2" y="1342.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.91%)</title><rect x="234.2" y="1315.0" width="10.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="237.2" y="1326.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (33 samples, 0.77%)</title><rect x="234.2" y="1299.0" width="9.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="237.2" y="1310.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="235.0" y="1283.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="238.0" y="1294.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.02%)</title><rect x="235.6" y="1283.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="238.6" y="1294.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.05%)</title><rect x="235.8" y="1283.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="238.8" y="1294.0"></text>
</g>
<g>
<title>__memmove_ssse3 (7 samples, 0.16%)</title><rect x="236.4" y="1283.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="239.4" y="1294.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (15 samples, 0.35%)</title><rect x="238.3" y="1283.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="241.3" y="1294.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="238.9" y="1267.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="241.9" y="1278.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.05%)</title><rect x="239.1" y="1267.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="242.1" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.05%)</title><rect x="239.7" y="1267.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="242.7" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (4 samples, 0.09%)</title><rect x="240.2" y="1267.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="243.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="241.1" y="1251.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="244.1" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="241.1" y="1235.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="244.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="241.1" y="1219.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="244.1" y="1230.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.09%)</title><rect x="241.3" y="1267.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="244.3" y="1278.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.07%)</title><rect x="242.4" y="1283.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="245.4" y="1294.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="243.3" y="1299.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="246.3" y="1310.0"></text>
</g>
<g>
<title>__send (4 samples, 0.09%)</title><rect x="243.5" y="1299.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="246.5" y="1310.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.02%)</title><rect x="244.6" y="1299.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="247.6" y="1310.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.05%)</title><rect x="244.9" y="1331.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="247.9" y="1342.0"></text>
</g>
<g>
<title>__send (1,176 samples, 27.35%)</title><rect x="245.5" y="1331.0" width="322.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="248.5" y="1342.0">__send</text>
</g>
<g>
<title>[unknown] (1,162 samples, 27.02%)</title><rect x="249.3" y="1315.0" width="318.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="252.3" y="1326.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,162 samples, 27.02%)</title><rect x="249.3" y="1299.0" width="318.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="252.3" y="1310.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,139 samples, 26.49%)</title><rect x="255.6" y="1283.0" width="312.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="258.6" y="1294.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,136 samples, 26.42%)</title><rect x="256.4" y="1267.0" width="311.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="259.4" y="1278.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,131 samples, 26.30%)</title><rect x="257.8" y="1251.0" width="310.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="260.8" y="1262.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,124 samples, 26.14%)</title><rect x="259.7" y="1235.0" width="308.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="262.7" y="1246.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,115 samples, 25.93%)</title><rect x="262.2" y="1219.0" width="306.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="265.2" y="1230.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,105 samples, 25.70%)</title><rect x="264.9" y="1203.0" width="303.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="267.9" y="1214.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,048 samples, 24.37%)</title><rect x="280.6" y="1187.0" width="287.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="283.6" y="1198.0">[unknown]</text>
</g>
<g>
<title>[unknown] (990 samples, 23.02%)</title><rect x="296.5" y="1171.0" width="271.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="299.5" y="1182.0">[unknown]</text>
</g>
<g>
<title>[unknown] (941 samples, 21.88%)</title><rect x="309.9" y="1155.0" width="258.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="312.9" y="1166.0">[unknown]</text>
</g>
<g>
<title>[unknown] (876 samples, 20.37%)</title><rect x="327.8" y="1139.0" width="240.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="330.8" y="1150.0">[unknown]</text>
</g>
<g>
<title>[unknown] (799 samples, 18.58%)</title><rect x="348.9" y="1123.0" width="219.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="351.9" y="1134.0">[unknown]</text>
</g>
<g>
<title>[unknown] (773 samples, 17.98%)</title><rect x="356.0" y="1107.0" width="212.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="359.0" y="1118.0">[unknown]</text>
</g>
<g>
<title>[unknown] (743 samples, 17.28%)</title><rect x="364.3" y="1091.0" width="203.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="367.3" y="1102.0">[unknown]</text>
</g>
<g>
<title>[unknown] (723 samples, 16.81%)</title><rect x="369.8" y="1075.0" width="198.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="372.8" y="1086.0">[unknown]</text>
</g>
<g>
<title>[unknown] (708 samples, 16.47%)</title><rect x="373.9" y="1059.0" width="194.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="376.9" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (685 samples, 15.93%)</title><rect x="380.2" y="1043.0" width="188.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="383.2" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (644 samples, 14.98%)</title><rect x="391.4" y="1027.0" width="176.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="394.4" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (600 samples, 13.95%)</title><rect x="403.5" y="1011.0" width="164.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="406.5" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (527 samples, 12.26%)</title><rect x="423.5" y="995.0" width="144.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="426.5" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (503 samples, 11.70%)</title><rect x="430.1" y="979.0" width="138.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="433.1" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (483 samples, 11.23%)</title><rect x="435.6" y="963.0" width="132.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="438.6" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (475 samples, 11.05%)</title><rect x="437.8" y="947.0" width="130.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="440.8" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (461 samples, 10.72%)</title><rect x="441.7" y="931.0" width="126.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="444.7" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (452 samples, 10.51%)</title><rect x="444.1" y="915.0" width="124.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="447.1" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (443 samples, 10.30%)</title><rect x="446.6" y="899.0" width="121.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="449.6" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (426 samples, 9.91%)</title><rect x="451.3" y="883.0" width="116.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="454.3" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (410 samples, 9.53%)</title><rect x="455.7" y="867.0" width="112.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="458.7" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (403 samples, 9.37%)</title><rect x="457.6" y="851.0" width="110.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="460.6" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (390 samples, 9.07%)</title><rect x="461.1" y="835.0" width="107.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="464.1" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (377 samples, 8.77%)</title><rect x="464.7" y="819.0" width="103.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="467.7" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (346 samples, 8.05%)</title><rect x="473.2" y="803.0" width="95.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="476.2" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (321 samples, 7.47%)</title><rect x="480.1" y="787.0" width="88.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="483.1" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (307 samples, 7.14%)</title><rect x="483.9" y="771.0" width="84.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="486.9" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (267 samples, 6.21%)</title><rect x="494.9" y="755.0" width="73.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="497.9" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (221 samples, 5.14%)</title><rect x="507.5" y="739.0" width="60.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="510.5" y="750.0">[unkno..</text>
</g>
<g>
<title>[unknown] (204 samples, 4.74%)</title><rect x="512.2" y="723.0" width="56.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="515.2" y="734.0">[unkn..</text>
</g>
<g>
<title>[unknown] (194 samples, 4.51%)</title><rect x="514.9" y="707.0" width="53.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="517.9" y="718.0">[unkn..</text>
</g>
<g>
<title>[unknown] (14 samples, 0.33%)</title><rect x="564.3" y="691.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="567.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.23%)</title><rect x="565.4" y="675.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="568.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.21%)</title><rect x="565.7" y="659.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="568.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="568.2" y="1411.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="571.2" y="1422.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.action (93 samples, 2.16%)</title><rect x="568.7" y="1427.0" width="25.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.7" y="1438.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0 (93 samples, 2.16%)</title><rect x="568.7" y="1411.0" width="25.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="571.7" y="1422.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (93 samples, 2.16%)</title><rect x="568.7" y="1395.0" width="25.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="571.7" y="1406.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (93 samples, 2.16%)</title><rect x="568.7" y="1379.0" width="25.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="571.7" y="1390.0">r..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (11 samples, 0.26%)</title><rect x="568.7" y="1363.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="571.7" y="1374.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (11 samples, 0.26%)</title><rect x="568.7" y="1347.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.7" y="1358.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.14%)</title><rect x="569.0" y="1331.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.0" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$84/2072101037.action (4 samples, 0.09%)</title><rect x="570.6" y="1331.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="573.6" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (82 samples, 1.91%)</title><rect x="571.7" y="1363.0" width="22.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="574.7" y="1374.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (82 samples, 1.91%)</title><rect x="571.7" y="1347.0" width="22.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.7" y="1358.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (82 samples, 1.91%)</title><rect x="571.7" y="1331.0" width="22.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="574.7" y="1342.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (4 samples, 0.09%)</title><rect x="575.9" y="1315.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.&lt;init&gt; (4 samples, 0.09%)</title><rect x="575.9" y="1299.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="578.9" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.iterator (63 samples, 1.47%)</title><rect x="576.9" y="1315.0" width="17.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="579.9" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (2 samples, 0.05%)</title><rect x="578.0" y="1299.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="581.0" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (57 samples, 1.33%)</title><rect x="578.6" y="1299.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="590.7" y="1283.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="593.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="590.7" y="1267.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="593.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="590.7" y="1251.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="593.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="590.7" y="1235.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="593.7" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="590.7" y="1219.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="593.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="590.7" y="1203.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="593.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="590.7" y="1187.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="593.7" y="1198.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="590.9" y="1283.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="593.9" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (3 samples, 0.07%)</title><rect x="591.5" y="1283.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="594.5" y="1294.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.16%)</title><rect x="592.3" y="1283.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="595.3" y="1294.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.16%)</title><rect x="592.3" y="1267.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="595.3" y="1278.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.12%)</title><rect x="592.9" y="1251.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="595.9" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$84/2072101037.action (376 samples, 8.74%)</title><rect x="594.2" y="1427.0" width="103.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.2" y="1438.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$2 (376 samples, 8.74%)</title><rect x="594.2" y="1411.0" width="103.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="597.2" y="1422.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.delete (376 samples, 8.74%)</title><rect x="594.2" y="1395.0" width="103.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="597.2" y="1406.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (23 samples, 0.53%)</title><rect x="595.1" y="1379.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="598.1" y="1390.0"></text>
</g>
<g>
<title>InlineCacheBuffer (1 samples, 0.02%)</title><rect x="597.5" y="1363.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="600.5" y="1374.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9 samples, 0.21%)</title><rect x="597.8" y="1363.0" width="2.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="600.8" y="1374.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.remove (4 samples, 0.09%)</title><rect x="600.3" y="1363.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="603.3" y="1374.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.remove (350 samples, 8.14%)</title><rect x="601.4" y="1379.0" width="96.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="604.4" y="1390.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.remove (349 samples, 8.12%)</title><rect x="601.6" y="1363.0" width="95.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="604.6" y="1374.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (14 samples, 0.33%)</title><rect x="603.6" y="1347.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (12 samples, 0.28%)</title><rect x="604.1" y="1331.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (8 samples, 0.19%)</title><rect x="605.2" y="1315.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="608.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.05%)</title><rect x="605.8" y="1299.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="608.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.02%)</title><rect x="606.0" y="1283.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.09%)</title><rect x="606.3" y="1299.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.09%)</title><rect x="606.3" y="1283.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.05%)</title><rect x="607.4" y="1347.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.4" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.remove (316 samples, 7.35%)</title><rect x="608.0" y="1347.0" width="86.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="611.0" y="1358.0">ru/mail/po..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="608.2" y="1331.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="611.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (295 samples, 6.86%)</title><rect x="608.8" y="1331.0" width="80.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.8" y="1342.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (293 samples, 6.81%)</title><rect x="609.3" y="1315.0" width="80.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.3" y="1326.0">java/util..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="614.5" y="1299.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="617.5" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="614.5" y="1283.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="617.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="614.5" y="1267.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="617.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="614.5" y="1251.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="617.5" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="614.5" y="1235.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="617.5" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="614.5" y="1219.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="617.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="614.5" y="1203.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="617.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (72 samples, 1.67%)</title><rect x="614.8" y="1299.0" width="19.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.8" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="631.8" y="1283.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="634.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="631.8" y="1267.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="634.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="631.8" y="1251.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="634.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="631.8" y="1235.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="634.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="631.8" y="1219.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="634.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="631.8" y="1203.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="634.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="631.8" y="1187.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="634.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.02%)</title><rect x="632.1" y="1283.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="635.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (8 samples, 0.19%)</title><rect x="632.4" y="1283.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.4" y="1294.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (2 samples, 0.05%)</title><rect x="634.0" y="1267.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="637.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (16 samples, 0.37%)</title><rect x="634.6" y="1299.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.6" y="1310.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.19%)</title><rect x="636.8" y="1283.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (2 samples, 0.05%)</title><rect x="639.0" y="1299.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (2 samples, 0.05%)</title><rect x="639.0" y="1283.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/Striped64.casBase (2 samples, 0.05%)</title><rect x="639.0" y="1267.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (2 samples, 0.05%)</title><rect x="639.0" y="1251.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (2 samples, 0.05%)</title><rect x="639.0" y="1235.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="642.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (12 samples, 0.28%)</title><rect x="639.5" y="1299.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="642.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (3 samples, 0.07%)</title><rect x="639.8" y="1283.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.02%)</title><rect x="640.3" y="1267.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="643.3" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="640.3" y="1251.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.3" y="1262.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="640.3" y="1235.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="643.3" y="1246.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="640.3" y="1219.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.3" y="1230.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.02%)</title><rect x="640.3" y="1203.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="643.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.19%)</title><rect x="640.6" y="1283.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="643.6" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.19%)</title><rect x="640.6" y="1267.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="643.6" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.19%)</title><rect x="640.6" y="1251.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="643.6" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="640.6" y="1235.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.6" y="1246.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.14%)</title><rect x="641.2" y="1235.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.2" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.02%)</title><rect x="642.3" y="1219.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="645.3" y="1230.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="642.5" y="1219.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="645.5" y="1230.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="642.5" y="1203.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (171 samples, 3.98%)</title><rect x="642.8" y="1299.0" width="46.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.8" y="1310.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (167 samples, 3.88%)</title><rect x="643.9" y="1283.0" width="45.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.9" y="1294.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (164 samples, 3.81%)</title><rect x="644.7" y="1267.0" width="45.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.7" y="1278.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="646.9" y="1251.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="649.9" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (4 samples, 0.09%)</title><rect x="647.2" y="1251.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="650.2" y="1262.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (145 samples, 3.37%)</title><rect x="648.3" y="1251.0" width="39.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="651.3" y="1262.0">jav..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="665.9" y="1235.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="668.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="665.9" y="1219.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="668.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="665.9" y="1203.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="668.9" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="665.9" y="1187.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="668.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="666.1" y="1171.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="669.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="666.1" y="1155.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="669.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="666.1" y="1139.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="669.1" y="1150.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (10 samples, 0.23%)</title><rect x="666.4" y="1235.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="669.4" y="1246.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (48 samples, 1.12%)</title><rect x="669.2" y="1235.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="672.2" y="1246.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.14%)</title><rect x="680.7" y="1219.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="683.7" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (15 samples, 0.35%)</title><rect x="682.3" y="1235.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="685.3" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (5 samples, 0.12%)</title><rect x="685.1" y="1219.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="688.1" y="1230.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.14%)</title><rect x="686.4" y="1235.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="689.4" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (1 samples, 0.02%)</title><rect x="688.1" y="1251.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="691.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Byte.compare (1 samples, 0.02%)</title><rect x="688.1" y="1235.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="691.1" y="1246.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.12%)</title><rect x="688.4" y="1251.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="691.4" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.05%)</title><rect x="689.2" y="1235.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="692.2" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getSizeOfFlushedRow (2 samples, 0.05%)</title><rect x="689.7" y="1331.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="692.7" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (8 samples, 0.19%)</title><rect x="690.3" y="1331.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="693.3" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.&lt;init&gt; (8 samples, 0.19%)</title><rect x="690.3" y="1315.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (6 samples, 0.14%)</title><rect x="690.3" y="1299.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="693.3" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.6" y="1283.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="693.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.6" y="1267.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="693.6" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.6" y="1251.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="693.6" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.6" y="1235.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="693.6" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.6" y="1219.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="693.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.6" y="1203.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="693.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.6" y="1187.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="693.6" y="1198.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="690.8" y="1283.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="693.8" y="1294.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="691.4" y="1283.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="694.4" y="1294.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="691.7" y="1267.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="694.7" y="1278.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="691.7" y="1251.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="694.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (2 samples, 0.05%)</title><rect x="691.9" y="1299.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.9" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (7 samples, 0.16%)</title><rect x="692.5" y="1331.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="695.5" y="1342.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.09%)</title><rect x="692.5" y="1315.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="695.5" y="1326.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.09%)</title><rect x="692.5" y="1299.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="695.5" y="1310.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="693.0" y="1283.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.0" y="1294.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="693.0" y="1267.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="696.0" y="1278.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="693.3" y="1251.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.3" y="1262.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.07%)</title><rect x="693.6" y="1315.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="696.6" y="1326.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.07%)</title><rect x="693.6" y="1299.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="696.6" y="1310.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="693.6" y="1283.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.6" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="693.6" y="1267.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="696.6" y="1278.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="693.6" y="1251.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="696.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.05%)</title><rect x="693.6" y="1235.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.6" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="694.1" y="1235.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.1" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="694.1" y="1219.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="697.1" y="1230.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="694.1" y="1203.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.1" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (1 samples, 0.02%)</title><rect x="694.4" y="1331.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="697.4" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.&lt;init&gt; (1 samples, 0.02%)</title><rect x="694.4" y="1315.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="697.4" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (1 samples, 0.02%)</title><rect x="694.4" y="1299.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="697.4" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (10 samples, 0.23%)</title><rect x="694.7" y="1347.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="697.7" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (7 samples, 0.16%)</title><rect x="694.7" y="1331.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="697.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (7 samples, 0.16%)</title><rect x="694.7" y="1315.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="697.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (7 samples, 0.16%)</title><rect x="694.7" y="1299.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="697.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (5 samples, 0.12%)</title><rect x="695.2" y="1283.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="698.2" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getSizeOfFlushedRow (3 samples, 0.07%)</title><rect x="696.6" y="1331.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.6" y="1342.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (3 samples, 0.07%)</title><rect x="696.6" y="1315.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="699.6" y="1326.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,263 samples, 29.37%)</title><rect x="697.4" y="1507.0" width="346.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="700.4" y="1518.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (28 samples, 0.65%)</title><rect x="698.0" y="1491.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="701.0" y="1502.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (28 samples, 0.65%)</title><rect x="698.0" y="1475.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="701.0" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="705.1" y="1459.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="708.1" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="705.1" y="1443.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="708.1" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="705.1" y="1427.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="708.1" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="705.1" y="1411.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="708.1" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="705.1" y="1395.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="708.1" y="1406.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.02%)</title><rect x="705.4" y="1459.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="708.4" y="1470.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (302 samples, 7.02%)</title><rect x="705.7" y="1491.0" width="82.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="708.7" y="1502.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (4 samples, 0.09%)</title><rect x="706.7" y="1475.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.7" y="1486.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.02%)</title><rect x="707.6" y="1459.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="710.6" y="1470.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (294 samples, 6.84%)</title><rect x="707.8" y="1475.0" width="80.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.8" y="1486.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 0.14%)</title><rect x="711.4" y="1459.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="714.4" y="1470.0"></text>
</g>
<g>
<title>[unknown] (258 samples, 6.00%)</title><rect x="713.1" y="1459.0" width="70.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="716.1" y="1470.0">[unknown]</text>
</g>
<g>
<title>JavaThread::~JavaThread() (1 samples, 0.02%)</title><rect x="713.1" y="1443.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="716.1" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="713.1" y="1427.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="716.1" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="713.1" y="1411.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="716.1" y="1422.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="713.1" y="1395.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="716.1" y="1406.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="713.1" y="1379.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="716.1" y="1390.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (3 samples, 0.07%)</title><rect x="713.3" y="1443.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="716.3" y="1454.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="713.3" y="1427.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="716.3" y="1438.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="713.3" y="1411.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="716.3" y="1422.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="713.3" y="1395.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="716.3" y="1406.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="713.6" y="1395.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="716.6" y="1406.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (5 samples, 0.12%)</title><rect x="714.2" y="1443.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="717.2" y="1454.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (5 samples, 0.12%)</title><rect x="715.5" y="1443.0" width="1.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="718.5" y="1454.0"></text>
</g>
<g>
<title>epoll_wait (244 samples, 5.67%)</title><rect x="716.9" y="1443.0" width="67.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="719.9" y="1454.0">epoll_w..</text>
</g>
<g>
<title>[unknown] (221 samples, 5.14%)</title><rect x="723.2" y="1427.0" width="60.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="726.2" y="1438.0">[unkno..</text>
</g>
<g>
<title>[unknown] (221 samples, 5.14%)</title><rect x="723.2" y="1411.0" width="60.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="726.2" y="1422.0">[unkno..</text>
</g>
<g>
<title>[unknown] (203 samples, 4.72%)</title><rect x="728.2" y="1395.0" width="55.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="731.2" y="1406.0">[unkn..</text>
</g>
<g>
<title>[unknown] (201 samples, 4.67%)</title><rect x="728.7" y="1379.0" width="55.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="731.7" y="1390.0">[unkn..</text>
</g>
<g>
<title>[unknown] (196 samples, 4.56%)</title><rect x="730.1" y="1363.0" width="53.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="733.1" y="1374.0">[unkn..</text>
</g>
<g>
<title>[unknown] (167 samples, 3.88%)</title><rect x="738.0" y="1347.0" width="45.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="741.0" y="1358.0">[unk..</text>
</g>
<g>
<title>[unknown] (124 samples, 2.88%)</title><rect x="749.8" y="1331.0" width="34.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="752.8" y="1342.0">[u..</text>
</g>
<g>
<title>[unknown] (90 samples, 2.09%)</title><rect x="759.2" y="1315.0" width="24.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="762.2" y="1326.0">[..</text>
</g>
<g>
<title>[unknown] (70 samples, 1.63%)</title><rect x="764.7" y="1299.0" width="19.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="767.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 1.23%)</title><rect x="769.3" y="1283.0" width="14.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="772.3" y="1294.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="782.5" y="1267.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="785.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="782.8" y="1251.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="785.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="782.8" y="1235.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="785.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="782.8" y="1219.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="785.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="782.8" y="1203.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="785.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="783.3" y="1187.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="786.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="783.3" y="1171.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="786.3" y="1182.0"></text>
</g>
<g>
<title>_init (2 samples, 0.05%)</title><rect x="783.9" y="1459.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="786.9" y="1470.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.07%)</title><rect x="784.4" y="1459.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="787.4" y="1470.0"></text>
</g>
<g>
<title>epoll_wait (12 samples, 0.28%)</title><rect x="785.2" y="1459.0" width="3.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="788.2" y="1470.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (931 samples, 21.65%)</title><rect x="788.5" y="1491.0" width="255.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.5" y="1502.0">one/nio/net/Session.process</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="790.4" y="1475.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="793.4" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="790.4" y="1459.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="793.4" y="1470.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="790.4" y="1443.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="793.4" y="1454.0"></text>
</g>
<g>
<title>gettimeofday (10 samples, 0.23%)</title><rect x="790.7" y="1475.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="793.7" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="793.2" y="1459.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="796.2" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="793.2" y="1443.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="796.2" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="793.2" y="1427.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="796.2" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="793.2" y="1411.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="796.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="793.2" y="1395.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="796.2" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="793.2" y="1379.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="796.2" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="793.2" y="1363.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="796.2" y="1374.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (907 samples, 21.09%)</title><rect x="793.5" y="1475.0" width="248.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.5" y="1486.0">one/nio/http/HttpSession.processR..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (614 samples, 14.28%)</title><rect x="795.4" y="1459.0" width="168.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="798.4" y="1470.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (531 samples, 12.35%)</title><rect x="797.3" y="1443.0" width="145.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="800.3" y="1454.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (518 samples, 12.05%)</title><rect x="800.9" y="1427.0" width="142.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.9" y="1438.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (454 samples, 10.56%)</title><rect x="805.0" y="1411.0" width="124.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="808.0" y="1422.0">RequestHandler0..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (28 samples, 0.65%)</title><rect x="805.5" y="1395.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="808.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.14%)</title><rect x="805.8" y="1379.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="808.8" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.05%)</title><rect x="805.8" y="1363.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="808.8" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.09%)</title><rect x="806.4" y="1363.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="809.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="807.5" y="1379.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.5" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.05%)</title><rect x="807.7" y="1379.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.7" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="807.7" y="1363.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="810.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.23%)</title><rect x="808.3" y="1379.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="811.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10 samples, 0.23%)</title><rect x="808.3" y="1363.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.23%)</title><rect x="808.3" y="1347.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="811.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.05%)</title><rect x="809.7" y="1331.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.07%)</title><rect x="810.2" y="1331.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="813.2" y="1342.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.19%)</title><rect x="811.0" y="1379.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.0" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.14%)</title><rect x="811.6" y="1363.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="814.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.14%)</title><rect x="811.6" y="1347.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="814.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.12%)</title><rect x="811.9" y="1331.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.9" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (424 samples, 9.86%)</title><rect x="813.2" y="1395.0" width="116.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.2" y="1406.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.07%)</title><rect x="813.5" y="1379.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.5" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.07%)</title><rect x="813.5" y="1363.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="816.5" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.07%)</title><rect x="813.5" y="1347.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="816.5" y="1358.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="814.0" y="1331.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.0" y="1342.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="814.0" y="1315.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="817.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (1 samples, 0.02%)</title><rect x="814.3" y="1379.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (20 samples, 0.47%)</title><rect x="814.6" y="1379.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="817.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (20 samples, 0.47%)</title><rect x="814.6" y="1363.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.internalMemberName (3 samples, 0.07%)</title><rect x="814.6" y="1347.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.6" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.07%)</title><rect x="814.6" y="1331.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.6" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$84/2072101037.get$Lambda (17 samples, 0.40%)</title><rect x="815.4" y="1347.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="818.4" y="1358.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="819.3" y="1331.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="822.3" y="1342.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.21%)</title><rect x="820.1" y="1379.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="823.1" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.21%)</title><rect x="820.1" y="1363.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="823.1" y="1374.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.21%)</title><rect x="820.1" y="1347.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="823.1" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.21%)</title><rect x="820.1" y="1331.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.1" y="1342.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.21%)</title><rect x="820.1" y="1315.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.1" y="1326.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="820.1" y="1299.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.1" y="1310.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.16%)</title><rect x="820.6" y="1299.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="823.6" y="1310.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.14%)</title><rect x="820.6" y="1283.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="823.6" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="822.3" y="1283.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="825.3" y="1294.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="822.3" y="1267.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="825.3" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (390 samples, 9.07%)</title><rect x="822.6" y="1379.0" width="107.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="825.6" y="1390.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (13 samples, 0.30%)</title><rect x="823.1" y="1363.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (13 samples, 0.30%)</title><rect x="823.1" y="1347.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.1" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.get$Lambda (13 samples, 0.30%)</title><rect x="823.1" y="1331.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.1" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.&lt;init&gt; (11 samples, 0.26%)</title><rect x="823.7" y="1315.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="826.7" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="825.6" y="1299.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="828.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="825.6" y="1283.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="828.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="825.6" y="1267.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="828.6" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="825.6" y="1251.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="828.6" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="825.6" y="1235.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="828.6" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="825.6" y="1219.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="828.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="825.6" y="1203.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="828.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.07%)</title><rect x="825.8" y="1299.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="828.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (375 samples, 8.72%)</title><rect x="826.7" y="1363.0" width="102.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="829.7" y="1374.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (359 samples, 8.35%)</title><rect x="830.5" y="1347.0" width="98.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="833.5" y="1358.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (1 samples, 0.02%)</title><rect x="831.9" y="1331.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (4 samples, 0.09%)</title><rect x="832.2" y="1331.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="835.2" y="1342.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="832.4" y="1315.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="835.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (322 samples, 7.49%)</title><rect x="833.3" y="1331.0" width="88.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="836.3" y="1342.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 0.51%)</title><rect x="835.5" y="1315.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="838.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 0.49%)</title><rect x="835.7" y="1299.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="838.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 0.40%)</title><rect x="836.8" y="1283.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="839.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (4 samples, 0.09%)</title><rect x="837.6" y="1267.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="840.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.09%)</title><rect x="837.6" y="1251.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="840.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.09%)</title><rect x="837.6" y="1235.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="840.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (10 samples, 0.23%)</title><rect x="838.7" y="1267.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (8 samples, 0.19%)</title><rect x="839.0" y="1251.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="842.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (8 samples, 0.19%)</title><rect x="839.0" y="1235.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="842.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (8 samples, 0.19%)</title><rect x="839.0" y="1219.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="842.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.02%)</title><rect x="841.2" y="1251.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="844.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="841.2" y="1235.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="844.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="841.2" y="1219.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="844.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (20 samples, 0.47%)</title><rect x="841.5" y="1315.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (17 samples, 0.40%)</title><rect x="842.3" y="1299.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (15 samples, 0.35%)</title><rect x="842.9" y="1283.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="845.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (15 samples, 0.35%)</title><rect x="842.9" y="1267.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="845.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (13 samples, 0.30%)</title><rect x="843.4" y="1251.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="846.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (13 samples, 0.30%)</title><rect x="843.4" y="1235.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="846.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (13 samples, 0.30%)</title><rect x="843.4" y="1219.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="846.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (272 samples, 6.33%)</title><rect x="847.0" y="1315.0" width="74.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="850.0" y="1326.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (272 samples, 6.33%)</title><rect x="847.0" y="1299.0" width="74.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="850.0" y="1310.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (268 samples, 6.23%)</title><rect x="847.0" y="1283.0" width="73.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="850.0" y="1294.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (266 samples, 6.19%)</title><rect x="847.5" y="1267.0" width="73.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="850.5" y="1278.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (265 samples, 6.16%)</title><rect x="847.8" y="1251.0" width="72.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="850.8" y="1262.0">jdk/inte..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="848.6" y="1235.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="851.6" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.05%)</title><rect x="848.9" y="1235.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="851.9" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.05%)</title><rect x="849.4" y="1235.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="852.4" y="1246.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="850.0" y="1235.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="853.0" y="1246.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="850.3" y="1235.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="853.3" y="1246.0"></text>
</g>
<g>
<title>Unsafe_Unpark (39 samples, 0.91%)</title><rect x="850.5" y="1235.0" width="10.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="853.5" y="1246.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="851.6" y="1219.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="854.6" y="1230.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="851.9" y="1219.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.9" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.07%)</title><rect x="852.2" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="855.2" y="1230.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (5 samples, 0.12%)</title><rect x="853.0" y="1219.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="856.0" y="1230.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.07%)</title><rect x="854.4" y="1219.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="857.4" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (9 samples, 0.21%)</title><rect x="855.2" y="1219.0" width="2.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="858.2" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.07%)</title><rect x="857.7" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="860.7" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.05%)</title><rect x="858.5" y="1219.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="861.5" y="1230.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.09%)</title><rect x="859.1" y="1219.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="862.1" y="1230.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.09%)</title><rect x="860.1" y="1219.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="863.1" y="1230.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.14%)</title><rect x="861.2" y="1235.0" width="1.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="864.2" y="1246.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (210 samples, 4.88%)</title><rect x="862.9" y="1235.0" width="57.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="865.9" y="1246.0">pthrea..</text>
</g>
<g>
<title>[unknown] (188 samples, 4.37%)</title><rect x="868.9" y="1219.0" width="51.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="871.9" y="1230.0">[unkn..</text>
</g>
<g>
<title>[unknown] (188 samples, 4.37%)</title><rect x="868.9" y="1203.0" width="51.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="871.9" y="1214.0">[unkn..</text>
</g>
<g>
<title>[unknown] (171 samples, 3.98%)</title><rect x="873.6" y="1187.0" width="46.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="876.6" y="1198.0">[unk..</text>
</g>
<g>
<title>[unknown] (167 samples, 3.88%)</title><rect x="874.7" y="1171.0" width="45.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="877.7" y="1182.0">[unk..</text>
</g>
<g>
<title>[unknown] (162 samples, 3.77%)</title><rect x="876.1" y="1155.0" width="44.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="879.1" y="1166.0">[unk..</text>
</g>
<g>
<title>[unknown] (146 samples, 3.40%)</title><rect x="880.5" y="1139.0" width="40.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="883.5" y="1150.0">[un..</text>
</g>
<g>
<title>[unknown] (128 samples, 2.98%)</title><rect x="885.4" y="1123.0" width="35.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="888.4" y="1134.0">[un..</text>
</g>
<g>
<title>[unknown] (121 samples, 2.81%)</title><rect x="887.3" y="1107.0" width="33.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="890.3" y="1118.0">[u..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="919.7" y="1091.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="922.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="919.7" y="1075.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="922.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="919.7" y="1059.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="922.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="919.7" y="1043.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="922.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="920.0" y="1027.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="923.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="920.2" y="1011.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="923.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="920.2" y="995.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="923.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.09%)</title><rect x="920.5" y="1283.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="923.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.02%)</title><rect x="921.3" y="1267.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="924.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.14%)</title><rect x="921.6" y="1331.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="924.6" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.05%)</title><rect x="922.4" y="1315.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="925.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (1 samples, 0.02%)</title><rect x="923.0" y="1315.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="926.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="923.3" y="1331.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="926.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 0.40%)</title><rect x="923.5" y="1331.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="926.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (17 samples, 0.40%)</title><rect x="923.5" y="1315.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="926.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (7 samples, 0.16%)</title><rect x="923.5" y="1299.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="926.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.23%)</title><rect x="925.5" y="1299.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="928.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.23%)</title><rect x="925.5" y="1283.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.19%)</title><rect x="925.5" y="1267.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="928.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (8 samples, 0.19%)</title><rect x="925.5" y="1251.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="928.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (8 samples, 0.19%)</title><rect x="925.5" y="1235.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="928.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.05%)</title><rect x="927.7" y="1267.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="930.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.07%)</title><rect x="928.2" y="1331.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="931.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.07%)</title><rect x="928.2" y="1315.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="931.2" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.05%)</title><rect x="928.5" y="1299.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="931.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.isRunning (2 samples, 0.05%)</title><rect x="929.0" y="1347.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.0" y="1358.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (3 samples, 0.07%)</title><rect x="929.6" y="1411.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.6" y="1422.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.05%)</title><rect x="930.4" y="1411.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="933.4" y="1422.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (28 samples, 0.65%)</title><rect x="930.9" y="1411.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="933.9" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.get (26 samples, 0.60%)</title><rect x="931.2" y="1395.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="934.2" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (13 samples, 0.30%)</title><rect x="931.5" y="1379.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="934.5" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.14%)</title><rect x="933.4" y="1363.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="936.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (5 samples, 0.12%)</title><rect x="933.7" y="1347.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="936.7" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12 samples, 0.28%)</title><rect x="935.1" y="1379.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="938.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (11 samples, 0.26%)</title><rect x="935.3" y="1363.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="938.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (9 samples, 0.21%)</title><rect x="935.9" y="1347.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="938.9" y="1358.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.02%)</title><rect x="938.4" y="1395.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="941.4" y="1406.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (16 samples, 0.37%)</title><rect x="938.6" y="1411.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.6" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.substring (13 samples, 0.30%)</title><rect x="939.5" y="1395.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="942.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="939.7" y="1379.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="942.7" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="940.0" y="1363.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="943.0" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.16%)</title><rect x="940.3" y="1379.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="943.3" y="1390.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.09%)</title><rect x="941.1" y="1363.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="944.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.05%)</title><rect x="941.1" y="1347.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="944.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.05%)</title><rect x="941.7" y="1347.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="944.7" y="1358.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.07%)</title><rect x="942.2" y="1379.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="945.2" y="1390.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (48 samples, 1.12%)</title><rect x="943.0" y="1443.0" width="13.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="946.0" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="945.2" y="1427.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="948.2" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="945.2" y="1411.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="948.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="945.2" y="1395.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="948.2" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="945.2" y="1379.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="948.2" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="945.2" y="1363.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="948.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="945.2" y="1347.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="948.2" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="945.2" y="1331.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="948.2" y="1342.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.07%)</title><rect x="945.5" y="1427.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="948.5" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.07%)</title><rect x="945.5" y="1411.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="948.5" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.07%)</title><rect x="945.5" y="1395.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="948.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="945.8" y="1379.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="948.8" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 0.56%)</title><rect x="946.3" y="1427.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="949.3" y="1438.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 0.56%)</title><rect x="946.3" y="1411.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="949.3" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.6" y="1395.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="955.6" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.6" y="1379.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="955.6" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.6" y="1363.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="955.6" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.6" y="1347.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="955.6" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.6" y="1331.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="955.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.6" y="1315.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="955.6" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.6" y="1299.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="955.6" y="1310.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (12 samples, 0.28%)</title><rect x="952.9" y="1427.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="955.9" y="1438.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.19%)</title><rect x="956.2" y="1443.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="959.2" y="1454.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.02%)</title><rect x="957.0" y="1427.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="960.0" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="957.3" y="1427.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="960.3" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.07%)</title><rect x="957.6" y="1427.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.6" y="1438.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.02%)</title><rect x="958.4" y="1443.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="961.4" y="1454.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.14%)</title><rect x="958.7" y="1443.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="961.7" y="1454.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="958.7" y="1427.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="961.7" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.12%)</title><rect x="958.9" y="1427.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="961.9" y="1438.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.12%)</title><rect x="958.9" y="1411.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.9" y="1422.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.02%)</title><rect x="959.5" y="1395.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title><rect x="959.8" y="1395.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="962.8" y="1406.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title><rect x="959.8" y="1379.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="962.8" y="1390.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.05%)</title><rect x="959.8" y="1363.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="962.8" y="1374.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.30%)</title><rect x="960.3" y="1443.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="963.3" y="1454.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.28%)</title><rect x="960.6" y="1427.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="963.6" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.28%)</title><rect x="960.6" y="1411.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="963.6" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.26%)</title><rect x="960.9" y="1395.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="963.9" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.6" y="1379.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="966.6" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.6" y="1363.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="966.6" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.6" y="1347.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="966.6" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.6" y="1331.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="966.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.6" y="1315.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="966.6" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.6" y="1299.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="966.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="963.6" y="1283.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="966.6" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (286 samples, 6.65%)</title><rect x="963.9" y="1459.0" width="78.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="966.9" y="1470.0">one/nio/n..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="964.2" y="1443.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="967.2" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="964.2" y="1427.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="967.2" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="964.2" y="1411.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="967.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="964.2" y="1395.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="967.2" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="964.2" y="1379.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="967.2" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="964.2" y="1363.0" width="0.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="967.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="964.2" y="1347.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="967.2" y="1358.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (282 samples, 6.56%)</title><rect x="964.4" y="1443.0" width="77.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="967.4" y="1454.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.05%)</title><rect x="968.5" y="1427.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="971.5" y="1438.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 1.65%)</title><rect x="969.1" y="1427.0" width="19.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="972.1" y="1438.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 1.65%)</title><rect x="969.1" y="1411.0" width="19.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="972.1" y="1422.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (62 samples, 1.44%)</title><rect x="969.1" y="1395.0" width="17.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="972.1" y="1406.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.05%)</title><rect x="971.3" y="1379.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.3" y="1390.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="971.8" y="1379.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.8" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.02%)</title><rect x="972.1" y="1379.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="975.1" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.05%)</title><rect x="972.4" y="1379.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.4" y="1390.0"></text>
</g>
<g>
<title>__memmove_ssse3 (12 samples, 0.28%)</title><rect x="972.9" y="1379.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="975.9" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="976.0" y="1363.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="979.0" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="976.0" y="1347.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="979.0" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="976.0" y="1331.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="979.0" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="976.0" y="1315.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="979.0" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="976.0" y="1299.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="979.0" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="976.0" y="1283.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="979.0" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="976.0" y="1267.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="979.0" y="1278.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="976.2" y="1379.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="979.2" y="1390.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (33 samples, 0.77%)</title><rect x="976.5" y="1379.0" width="9.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="979.5" y="1390.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.07%)</title><rect x="979.2" y="1363.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="982.2" y="1374.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.12%)</title><rect x="980.1" y="1363.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.1" y="1374.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.05%)</title><rect x="981.4" y="1363.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.4" y="1374.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (7 samples, 0.16%)</title><rect x="982.0" y="1363.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.0" y="1374.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.14%)</title><rect x="983.9" y="1363.0" width="1.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="986.9" y="1374.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.05%)</title><rect x="985.6" y="1379.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.6" y="1390.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="986.1" y="1395.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="989.1" y="1406.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.14%)</title><rect x="986.4" y="1395.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="989.4" y="1406.0"></text>
</g>
<g>
<title>recv (2 samples, 0.05%)</title><rect x="988.0" y="1395.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="991.0" y="1406.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.09%)</title><rect x="988.6" y="1427.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="991.6" y="1438.0"></text>
</g>
<g>
<title>recv (190 samples, 4.42%)</title><rect x="989.7" y="1427.0" width="52.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="992.7" y="1438.0">recv</text>
</g>
<g>
<title>[unknown] (169 samples, 3.93%)</title><rect x="995.4" y="1411.0" width="46.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="998.4" y="1422.0">[unk..</text>
</g>
<g>
<title>[unknown] (169 samples, 3.93%)</title><rect x="995.4" y="1395.0" width="46.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="998.4" y="1406.0">[unk..</text>
</g>
<g>
<title>[unknown] (153 samples, 3.56%)</title><rect x="999.8" y="1379.0" width="42.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1002.8" y="1390.0">[un..</text>
</g>
<g>
<title>[unknown] (153 samples, 3.56%)</title><rect x="999.8" y="1363.0" width="42.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1002.8" y="1374.0">[un..</text>
</g>
<g>
<title>[unknown] (150 samples, 3.49%)</title><rect x="1000.7" y="1347.0" width="41.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1003.7" y="1358.0">[un..</text>
</g>
<g>
<title>[unknown] (144 samples, 3.35%)</title><rect x="1002.3" y="1331.0" width="39.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1005.3" y="1342.0">[un..</text>
</g>
<g>
<title>[unknown] (134 samples, 3.12%)</title><rect x="1005.0" y="1315.0" width="36.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1008.0" y="1326.0">[un..</text>
</g>
<g>
<title>[unknown] (113 samples, 2.63%)</title><rect x="1010.8" y="1299.0" width="31.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1013.8" y="1310.0">[u..</text>
</g>
<g>
<title>[unknown] (86 samples, 2.00%)</title><rect x="1018.2" y="1283.0" width="23.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1021.2" y="1294.0">[..</text>
</g>
<g>
<title>[unknown] (58 samples, 1.35%)</title><rect x="1025.9" y="1267.0" width="15.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1028.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.84%)</title><rect x="1031.9" y="1251.0" width="9.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1034.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.33%)</title><rect x="1038.0" y="1235.0" width="3.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1041.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1041.5" y="1219.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1044.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1041.5" y="1203.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1044.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1041.5" y="1187.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1044.5" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.05%)</title><rect x="1041.8" y="1443.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1044.8" y="1454.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.14%)</title><rect x="1042.4" y="1475.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1045.4" y="1486.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="1042.4" y="1459.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1045.4" y="1470.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.12%)</title><rect x="1042.6" y="1459.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1045.6" y="1470.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.09%)</title><rect x="1042.9" y="1443.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1045.9" y="1454.0"></text>
</g>
<g>
<title>start_thread (532 samples, 12.37%)</title><rect x="1044.0" y="1507.0" width="146.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1047.0" y="1518.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (532 samples, 12.37%)</title><rect x="1044.0" y="1491.0" width="146.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1047.0" y="1502.0">thread_native_entr..</text>
</g>
<g>
<title>Thread::call_run() (532 samples, 12.37%)</title><rect x="1044.0" y="1475.0" width="146.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.0" y="1486.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.05%)</title><rect x="1044.0" y="1459.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.0" y="1470.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (1 samples, 0.02%)</title><rect x="1044.0" y="1443.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.0" y="1454.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (1 samples, 0.02%)</title><rect x="1044.0" y="1427.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.0" y="1438.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (1 samples, 0.02%)</title><rect x="1044.0" y="1411.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.0" y="1422.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.02%)</title><rect x="1044.0" y="1395.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.0" y="1406.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.02%)</title><rect x="1044.3" y="1443.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.3" y="1454.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.02%)</title><rect x="1044.3" y="1427.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1047.3" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1044.3" y="1411.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1047.3" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1044.3" y="1395.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1047.3" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1044.3" y="1379.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1047.3" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1044.3" y="1363.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1047.3" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1044.3" y="1347.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1047.3" y="1358.0"></text>
</g>
<g>
<title>GangWorker::loop() (77 samples, 1.79%)</title><rect x="1044.6" y="1459.0" width="21.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.6" y="1470.0">G..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (8 samples, 0.19%)</title><rect x="1044.6" y="1443.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.6" y="1454.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (8 samples, 0.19%)</title><rect x="1044.6" y="1427.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1047.6" y="1438.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (6 samples, 0.14%)</title><rect x="1044.6" y="1411.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.6" y="1422.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.241] (4 samples, 0.09%)</title><rect x="1044.8" y="1395.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.8" y="1406.0"></text>
</g>
<g>
<title>GenericTaskQueue&lt;G1TaskQueueEntry, (MemoryType)5, 131072u&gt;::push(G1TaskQueueEntry) (1 samples, 0.02%)</title><rect x="1045.4" y="1379.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.4" y="1390.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1045.7" y="1379.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.7" y="1390.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1045.9" y="1395.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.9" y="1406.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.241] (2 samples, 0.05%)</title><rect x="1046.2" y="1411.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.2" y="1422.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.05%)</title><rect x="1046.2" y="1395.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1049.2" y="1406.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (63 samples, 1.47%)</title><rect x="1046.8" y="1443.0" width="17.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1049.8" y="1454.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (19 samples, 0.44%)</title><rect x="1046.8" y="1427.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.8" y="1438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 0.28%)</title><rect x="1046.8" y="1411.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1049.8" y="1422.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (6 samples, 0.14%)</title><rect x="1048.4" y="1395.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.4" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 0.12%)</title><rect x="1048.7" y="1379.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.7" y="1390.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1049.8" y="1363.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.8" y="1374.0"></text>
</g>
<g>
<title>GenericTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::pop_global(StarTask volatile&amp;) (1 samples, 0.02%)</title><rect x="1050.0" y="1411.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.0" y="1422.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.14%)</title><rect x="1050.3" y="1411.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1053.3" y="1422.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (42 samples, 0.98%)</title><rect x="1052.0" y="1427.0" width="11.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.0" y="1438.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (42 samples, 0.98%)</title><rect x="1052.0" y="1411.0" width="11.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.0" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (42 samples, 0.98%)</title><rect x="1052.0" y="1395.0" width="11.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.0" y="1406.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (42 samples, 0.98%)</title><rect x="1052.0" y="1379.0" width="11.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.0" y="1390.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (42 samples, 0.98%)</title><rect x="1052.0" y="1363.0" width="11.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.0" y="1374.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (36 samples, 0.84%)</title><rect x="1052.0" y="1347.0" width="9.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.0" y="1358.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (17 samples, 0.40%)</title><rect x="1056.6" y="1331.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.6" y="1342.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.09%)</title><rect x="1060.2" y="1315.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1063.2" y="1326.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.09%)</title><rect x="1060.2" y="1299.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1061.3" y="1331.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1064.3" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1061.3" y="1315.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1064.3" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1061.3" y="1299.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1064.3" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1061.3" y="1283.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1064.3" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1061.3" y="1267.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1064.3" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1061.3" y="1251.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1064.3" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1061.3" y="1235.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1064.3" y="1246.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1061.6" y="1331.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1064.6" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (6 samples, 0.14%)</title><rect x="1061.8" y="1347.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.8" y="1358.0"></text>
</g>
<g>
<title>G1ContiguousSpace::block_start(void const*) (2 samples, 0.05%)</title><rect x="1062.4" y="1331.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.4" y="1342.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.02%)</title><rect x="1062.7" y="1315.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.7" y="1326.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.02%)</title><rect x="1062.7" y="1299.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.7" y="1310.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (2 samples, 0.05%)</title><rect x="1062.9" y="1331.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.9" y="1342.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1063.2" y="1315.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.2" y="1326.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1063.5" y="1427.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1066.5" y="1438.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.02%)</title><rect x="1063.5" y="1411.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.5" y="1422.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1063.5" y="1395.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.5" y="1406.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.02%)</title><rect x="1063.5" y="1379.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.5" y="1390.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (1 samples, 0.02%)</title><rect x="1063.5" y="1363.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.5" y="1374.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringScanRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1063.5" y="1347.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.5" y="1358.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1063.8" y="1427.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.8" y="1438.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.02%)</title><rect x="1063.8" y="1411.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.8" y="1422.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1063.8" y="1395.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.8" y="1406.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.02%)</title><rect x="1063.8" y="1379.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.8" y="1390.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1063.8" y="1363.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.8" y="1374.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="1063.8" y="1347.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1066.8" y="1358.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.02%)</title><rect x="1063.8" y="1331.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1066.8" y="1342.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.05%)</title><rect x="1064.0" y="1443.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.0" y="1454.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (1 samples, 0.02%)</title><rect x="1064.0" y="1427.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.0" y="1438.0"></text>
</g>
<g>
<title>G1StringAndSymbolCleaningTask::work(unsigned int) (1 samples, 0.02%)</title><rect x="1064.3" y="1427.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.3" y="1438.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (1 samples, 0.02%)</title><rect x="1064.3" y="1411.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.3" y="1422.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (4 samples, 0.09%)</title><rect x="1064.6" y="1443.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.6" y="1454.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (4 samples, 0.09%)</title><rect x="1064.6" y="1427.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1067.6" y="1438.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.05%)</title><rect x="1064.6" y="1411.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.6" y="1422.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (2 samples, 0.05%)</title><rect x="1064.6" y="1395.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1067.6" y="1406.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.327] (1 samples, 0.02%)</title><rect x="1064.9" y="1379.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.9" y="1390.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.02%)</title><rect x="1065.1" y="1411.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.1" y="1422.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1065.4" y="1411.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.4" y="1422.0"></text>
</g>
<g>
<title>JavaThread::run() (445 samples, 10.35%)</title><rect x="1065.7" y="1459.0" width="122.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.7" y="1470.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (445 samples, 10.35%)</title><rect x="1065.7" y="1443.0" width="122.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.7" y="1454.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (442 samples, 10.28%)</title><rect x="1065.7" y="1427.0" width="121.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.7" y="1438.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (442 samples, 10.28%)</title><rect x="1065.7" y="1411.0" width="121.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.7" y="1422.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (439 samples, 10.21%)</title><rect x="1065.7" y="1395.0" width="120.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.7" y="1406.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (438 samples, 10.19%)</title><rect x="1065.7" y="1379.0" width="120.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1068.7" y="1390.0">Compile::Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.02%)</title><rect x="1065.7" y="1363.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.7" y="1374.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.02%)</title><rect x="1065.7" y="1347.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.7" y="1358.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1065.7" y="1331.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1068.7" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1065.7" y="1315.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.7" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1065.7" y="1299.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.7" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1065.7" y="1283.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.7" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1065.7" y="1267.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.7" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1065.7" y="1251.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1068.7" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1065.7" y="1235.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.7" y="1246.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1065.7" y="1219.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.7" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1065.7" y="1203.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.7" y="1214.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1065.7" y="1187.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.7" y="1198.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1065.7" y="1171.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.7" y="1182.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (275 samples, 6.40%)</title><rect x="1066.0" y="1363.0" width="75.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.0" y="1374.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (9 samples, 0.21%)</title><rect x="1066.0" y="1347.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.0" y="1358.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (6 samples, 0.14%)</title><rect x="1066.0" y="1331.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.0" y="1342.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.02%)</title><rect x="1067.3" y="1315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1070.3" y="1326.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.02%)</title><rect x="1067.3" y="1299.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.3" y="1310.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.07%)</title><rect x="1067.6" y="1331.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.6" y="1342.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.02%)</title><rect x="1067.6" y="1315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.6" y="1326.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.05%)</title><rect x="1067.9" y="1315.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.9" y="1326.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.02%)</title><rect x="1067.9" y="1299.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.9" y="1310.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.02%)</title><rect x="1067.9" y="1283.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.9" y="1294.0"></text>
</g>
<g>
<title>loadINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.02%)</title><rect x="1068.2" y="1299.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1071.2" y="1310.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.16%)</title><rect x="1068.4" y="1347.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.4" y="1358.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.02%)</title><rect x="1068.7" y="1331.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.7" y="1342.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.02%)</title><rect x="1068.7" y="1315.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.7" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1068.7" y="1299.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1071.7" y="1310.0"></text>
</g>
<g>
<title>Label::patch_instructions(MacroAssembler*) (1 samples, 0.02%)</title><rect x="1069.0" y="1331.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.0" y="1342.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (3 samples, 0.07%)</title><rect x="1069.3" y="1331.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.3" y="1342.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.05%)</title><rect x="1069.5" y="1315.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.5" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1069.5" y="1299.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.5" y="1310.0"></text>
</g>
<g>
<title>OopRecorder::find_index(Metadata*) (1 samples, 0.02%)</title><rect x="1069.8" y="1299.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1072.8" y="1310.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_initialize() (1 samples, 0.02%)</title><rect x="1069.8" y="1283.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.8" y="1294.0"></text>
</g>
<g>
<title>immL32Oper::constantL() const (1 samples, 0.02%)</title><rect x="1070.1" y="1331.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.1" y="1342.0"></text>
</g>
<g>
<title>Matcher::match() (15 samples, 0.35%)</title><rect x="1070.4" y="1347.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.4" y="1358.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (3 samples, 0.07%)</title><rect x="1070.4" y="1331.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.4" y="1342.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (12 samples, 0.28%)</title><rect x="1071.2" y="1331.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1074.2" y="1342.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (5 samples, 0.12%)</title><rect x="1071.5" y="1315.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.5" y="1326.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.05%)</title><rect x="1072.8" y="1315.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.8" y="1326.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.05%)</title><rect x="1072.8" y="1299.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.8" y="1310.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.05%)</title><rect x="1072.8" y="1283.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.8" y="1294.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.02%)</title><rect x="1072.8" y="1267.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.8" y="1278.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.02%)</title><rect x="1073.1" y="1267.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.1" y="1278.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.05%)</title><rect x="1073.4" y="1315.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.4" y="1326.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.02%)</title><rect x="1073.6" y="1299.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.6" y="1310.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.02%)</title><rect x="1073.6" y="1283.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.6" y="1294.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="1073.6" y="1267.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1076.6" y="1278.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.02%)</title><rect x="1073.9" y="1315.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.9" y="1326.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.02%)</title><rect x="1074.2" y="1315.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.2" y="1326.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.02%)</title><rect x="1074.5" y="1347.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.5" y="1358.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.02%)</title><rect x="1074.5" y="1331.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1077.5" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.02%)</title><rect x="1074.7" y="1347.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.7" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.02%)</title><rect x="1074.7" y="1331.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.7" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (28 samples, 0.65%)</title><rect x="1075.0" y="1347.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.0" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.02%)</title><rect x="1075.0" y="1331.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1078.0" y="1342.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.02%)</title><rect x="1075.0" y="1315.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.0" y="1326.0"></text>
</g>
<g>
<title>Block::is_block() (1 samples, 0.02%)</title><rect x="1075.0" y="1299.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.0" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (27 samples, 0.63%)</title><rect x="1075.3" y="1331.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1078.3" y="1342.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.02%)</title><rect x="1075.8" y="1315.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.8" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (6 samples, 0.14%)</title><rect x="1076.1" y="1315.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.1" y="1326.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (5 samples, 0.12%)</title><rect x="1076.4" y="1299.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.4" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.02%)</title><rect x="1077.8" y="1315.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.8" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.19%)</title><rect x="1078.0" y="1315.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.0" y="1326.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.07%)</title><rect x="1079.1" y="1299.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.1" y="1310.0"></text>
</g>
<g>
<title>cmpOpUOper::num_edges() const (1 samples, 0.02%)</title><rect x="1080.0" y="1299.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.0" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.02%)</title><rect x="1080.2" y="1315.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.2" y="1326.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1080.2" y="1299.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.2" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.19%)</title><rect x="1080.5" y="1315.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.5" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (2 samples, 0.05%)</title><rect x="1081.1" y="1299.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.1" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1081.3" y="1283.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.3" y="1294.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.09%)</title><rect x="1081.6" y="1299.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.6" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1082.4" y="1283.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1085.4" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.02%)</title><rect x="1082.7" y="1347.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.7" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (213 samples, 4.95%)</title><rect x="1083.0" y="1347.0" width="58.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.0" y="1358.0">PhaseC..</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.02%)</title><rect x="1083.0" y="1331.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.0" y="1342.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1083.3" y="1331.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.3" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (3 samples, 0.07%)</title><rect x="1083.5" y="1331.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1086.5" y="1342.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.02%)</title><rect x="1084.3" y="1331.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.3" y="1342.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.02%)</title><rect x="1084.6" y="1331.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1087.6" y="1342.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.02%)</title><rect x="1084.9" y="1331.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.9" y="1342.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.02%)</title><rect x="1085.2" y="1331.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.2" y="1342.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (9 samples, 0.21%)</title><rect x="1085.4" y="1331.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.4" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (10 samples, 0.23%)</title><rect x="1087.9" y="1331.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.9" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1088.2" y="1315.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 0.05%)</title><rect x="1088.5" y="1315.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.5" y="1326.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.02%)</title><rect x="1088.7" y="1299.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.7" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.12%)</title><rect x="1089.0" y="1315.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.0" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.07%)</title><rect x="1089.6" y="1299.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.6" y="1310.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.02%)</title><rect x="1090.4" y="1315.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.4" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.16%)</title><rect x="1090.7" y="1331.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.7" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="1090.7" y="1315.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (6 samples, 0.14%)</title><rect x="1090.9" y="1315.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.9" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.07%)</title><rect x="1091.8" y="1299.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (33 samples, 0.77%)</title><rect x="1092.6" y="1331.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.6" y="1342.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.02%)</title><rect x="1100.3" y="1315.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.3" y="1326.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.02%)</title><rect x="1100.5" y="1315.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.02%)</title><rect x="1100.8" y="1315.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.8" y="1326.0"></text>
</g>
<g>
<title>Block_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1100.8" y="1299.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.8" y="1310.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.02%)</title><rect x="1100.8" y="1283.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1103.8" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (2 samples, 0.05%)</title><rect x="1101.1" y="1315.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.1" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.02%)</title><rect x="1101.1" y="1299.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.1" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.02%)</title><rect x="1101.4" y="1299.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.4" y="1310.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.02%)</title><rect x="1101.4" y="1283.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.4" y="1294.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1101.4" y="1267.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.4" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1101.6" y="1331.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.6" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (53 samples, 1.23%)</title><rect x="1101.9" y="1331.0" width="14.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.9" y="1342.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.02%)</title><rect x="1103.0" y="1315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.0" y="1326.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.02%)</title><rect x="1103.3" y="1315.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.3" y="1326.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.02%)</title><rect x="1103.3" y="1299.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (6 samples, 0.14%)</title><rect x="1103.6" y="1315.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.6" y="1326.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.02%)</title><rect x="1104.1" y="1299.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.1" y="1310.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (3 samples, 0.07%)</title><rect x="1104.4" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.4" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::check_for_high_pressure_transition_at_fatproj(unsigned int&amp;, unsigned int, LRG&amp;, PhaseChaitin::Pressure&amp;, int) (1 samples, 0.02%)</title><rect x="1105.2" y="1315.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (6 samples, 0.14%)</title><rect x="1105.5" y="1315.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.5" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1106.9" y="1299.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.9" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (16 samples, 0.37%)</title><rect x="1107.1" y="1315.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.1" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.09%)</title><rect x="1110.1" y="1299.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.1" y="1310.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="1111.2" y="1299.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1114.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (14 samples, 0.33%)</title><rect x="1111.5" y="1315.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.5" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1114.0" y="1299.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.0" y="1310.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1114.3" y="1299.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.3" y="1310.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.05%)</title><rect x="1114.5" y="1299.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.5" y="1310.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.02%)</title><rect x="1115.1" y="1299.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1118.1" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (2 samples, 0.05%)</title><rect x="1115.4" y="1315.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.4" y="1326.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.05%)</title><rect x="1115.9" y="1315.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.9" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (4 samples, 0.09%)</title><rect x="1116.5" y="1331.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.5" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.07%)</title><rect x="1116.7" y="1315.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.7" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.02%)</title><rect x="1117.6" y="1331.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.6" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (7 samples, 0.16%)</title><rect x="1117.8" y="1331.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.8" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1118.9" y="1315.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.9" y="1326.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.02%)</title><rect x="1119.2" y="1315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.2" y="1326.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.02%)</title><rect x="1119.5" y="1315.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (18 samples, 0.42%)</title><rect x="1119.7" y="1331.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.7" y="1342.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.02%)</title><rect x="1123.0" y="1315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.0" y="1326.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1123.3" y="1315.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.3" y="1326.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1123.6" y="1315.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.6" y="1326.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 0.05%)</title><rect x="1123.9" y="1315.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.9" y="1326.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.02%)</title><rect x="1124.4" y="1315.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.4" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (4 samples, 0.09%)</title><rect x="1124.7" y="1331.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1125.5" y="1315.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1128.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1125.5" y="1299.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1128.5" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1125.5" y="1283.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1128.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1125.5" y="1267.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1128.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1125.5" y="1251.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1128.5" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1125.5" y="1235.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1128.5" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1125.5" y="1219.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1128.5" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (17 samples, 0.40%)</title><rect x="1125.8" y="1331.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.8" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.12%)</title><rect x="1129.1" y="1315.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.1" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.02%)</title><rect x="1130.5" y="1331.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.5" y="1342.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1130.5" y="1315.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.5" y="1326.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1130.5" y="1299.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.5" y="1310.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.07%)</title><rect x="1130.7" y="1331.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.7" y="1342.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.07%)</title><rect x="1130.7" y="1315.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.7" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.05%)</title><rect x="1130.7" y="1299.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.7" y="1310.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.02%)</title><rect x="1131.0" y="1283.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.0" y="1294.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.02%)</title><rect x="1131.3" y="1299.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.3" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.02%)</title><rect x="1131.3" y="1283.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (8 samples, 0.19%)</title><rect x="1131.5" y="1331.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.5" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="1132.6" y="1315.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.6" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.07%)</title><rect x="1132.9" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.07%)</title><rect x="1133.7" y="1331.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.7" y="1342.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.05%)</title><rect x="1134.0" y="1315.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.0" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (20 samples, 0.47%)</title><rect x="1134.6" y="1331.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.6" y="1342.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1137.0" y="1315.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.0" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (10 samples, 0.23%)</title><rect x="1137.3" y="1315.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.3" y="1326.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1138.4" y="1299.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.4" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.09%)</title><rect x="1138.7" y="1299.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.7" y="1310.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1139.8" y="1299.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1142.8" y="1310.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="1140.1" y="1331.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.1" y="1342.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.05%)</title><rect x="1140.3" y="1331.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1143.3" y="1342.0"></text>
</g>
<g>
<title>prefetchAllocNTANode::out_RegMask() const (1 samples, 0.02%)</title><rect x="1140.9" y="1331.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.9" y="1342.0"></text>
</g>
<g>
<title>storeNNode::ideal_Opcode() const (1 samples, 0.02%)</title><rect x="1141.2" y="1331.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.2" y="1342.0"></text>
</g>
<g>
<title>Compile::Optimize() (124 samples, 2.88%)</title><rect x="1141.4" y="1363.0" width="34.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.4" y="1374.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.07%)</title><rect x="1141.4" y="1347.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.4" y="1358.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.05%)</title><rect x="1141.7" y="1331.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.7" y="1342.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.02%)</title><rect x="1142.0" y="1315.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.0" y="1326.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (4 samples, 0.09%)</title><rect x="1142.3" y="1347.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.3" y="1358.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (2 samples, 0.05%)</title><rect x="1142.3" y="1331.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.3" y="1342.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.05%)</title><rect x="1142.3" y="1315.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.3" y="1326.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.05%)</title><rect x="1142.3" y="1299.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.3" y="1310.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.02%)</title><rect x="1142.8" y="1331.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.8" y="1342.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1142.8" y="1315.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.8" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="1143.1" y="1331.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1143.1" y="1315.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.1" y="1326.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1143.1" y="1299.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.1" y="1310.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.02%)</title><rect x="1143.1" y="1283.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.1" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1143.1" y="1267.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="1278.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1143.1" y="1251.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.1" y="1262.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1143.1" y="1235.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.1" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.02%)</title><rect x="1143.1" y="1219.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.1" y="1230.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.07%)</title><rect x="1143.3" y="1347.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.3" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="1143.9" y="1331.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1143.9" y="1315.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.9" y="1326.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1143.9" y="1299.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.9" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1143.9" y="1283.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.9" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1143.9" y="1267.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.9" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1143.9" y="1251.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.9" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1143.9" y="1235.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.9" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1143.9" y="1219.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.9" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1143.9" y="1203.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.9" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1143.9" y="1187.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.9" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1143.9" y="1171.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.9" y="1182.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1143.9" y="1155.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.9" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1143.9" y="1139.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.09%)</title><rect x="1144.2" y="1347.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.09%)</title><rect x="1144.2" y="1331.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.05%)</title><rect x="1144.2" y="1315.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.02%)</title><rect x="1144.4" y="1299.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.4" y="1310.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.02%)</title><rect x="1144.4" y="1283.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1144.7" y="1315.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.02%)</title><rect x="1144.7" y="1299.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.02%)</title><rect x="1144.7" y="1283.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1315.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1299.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1283.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1267.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1251.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1235.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1219.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1203.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1187.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1171.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1155.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1139.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1107.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1091.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1075.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1059.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1027.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="1011.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="995.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="979.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="963.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="947.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="915.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="899.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="883.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1145.0" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.0" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.05%)</title><rect x="1145.3" y="1347.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="1358.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1145.5" y="1331.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.5" y="1342.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.02%)</title><rect x="1145.5" y="1315.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.5" y="1326.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1145.5" y="1299.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.5" y="1310.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1145.5" y="1283.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.5" y="1294.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1145.5" y="1267.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.5" y="1278.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1145.5" y="1251.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (91 samples, 2.12%)</title><rect x="1145.8" y="1347.0" width="25.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.8" y="1358.0">P..</text>
</g>
<g>
<title>HaltNode::pinned() const (1 samples, 0.02%)</title><rect x="1145.8" y="1331.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.8" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1146.1" y="1331.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.02%)</title><rect x="1146.1" y="1315.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1146.1" y="1299.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.1" y="1310.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.02%)</title><rect x="1146.1" y="1283.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.1" y="1294.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.02%)</title><rect x="1146.1" y="1267.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.1" y="1278.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.02%)</title><rect x="1146.4" y="1331.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.4" y="1342.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.02%)</title><rect x="1146.6" y="1331.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="1342.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.02%)</title><rect x="1146.9" y="1331.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (9 samples, 0.21%)</title><rect x="1147.2" y="1331.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.2" y="1342.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (4 samples, 0.09%)</title><rect x="1148.6" y="1315.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 0.26%)</title><rect x="1149.7" y="1331.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.7" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1152.4" y="1315.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1152.4" y="1299.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.02%)</title><rect x="1152.4" y="1283.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.4" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (41 samples, 0.95%)</title><rect x="1152.7" y="1331.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.7" y="1342.0"></text>
</g>
<g>
<title>CheckCastPPNode::Opcode() const (1 samples, 0.02%)</title><rect x="1155.1" y="1315.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.1" y="1326.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.02%)</title><rect x="1155.4" y="1315.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (29 samples, 0.67%)</title><rect x="1155.7" y="1315.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (28 samples, 0.65%)</title><rect x="1156.0" y="1299.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (4 samples, 0.09%)</title><rect x="1156.5" y="1283.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.05%)</title><rect x="1157.1" y="1267.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.02%)</title><rect x="1157.1" y="1251.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.02%)</title><rect x="1157.3" y="1251.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.3" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.05%)</title><rect x="1157.6" y="1283.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.02%)</title><rect x="1157.9" y="1267.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.9" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1158.2" y="1283.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.2" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (19 samples, 0.44%)</title><rect x="1158.4" y="1283.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.4" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1163.7" y="1315.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (8 samples, 0.19%)</title><rect x="1163.9" y="1331.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.9" y="1342.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.02%)</title><rect x="1165.0" y="1315.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.05%)</title><rect x="1165.3" y="1315.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.3" y="1326.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.02%)</title><rect x="1165.9" y="1315.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (7 samples, 0.16%)</title><rect x="1166.1" y="1331.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="1342.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.02%)</title><rect x="1166.7" y="1315.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.02%)</title><rect x="1166.9" y="1315.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.07%)</title><rect x="1167.2" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 0.07%)</title><rect x="1167.2" y="1299.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.2" y="1310.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1167.2" y="1283.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.2" y="1294.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.02%)</title><rect x="1167.2" y="1267.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="1278.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1167.2" y="1251.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.2" y="1262.0"></text>
</g>
<g>
<title>MulNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1167.5" y="1283.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="1294.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1167.5" y="1267.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.5" y="1278.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1167.5" y="1251.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="1262.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.02%)</title><rect x="1167.8" y="1283.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.8" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.14%)</title><rect x="1168.0" y="1331.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.14%)</title><rect x="1168.0" y="1315.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.0" y="1326.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1168.0" y="1299.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.0" y="1310.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1168.0" y="1283.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.0" y="1294.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1168.3" y="1299.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="1310.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.02%)</title><rect x="1168.3" y="1283.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::allocation() (1 samples, 0.02%)</title><rect x="1168.3" y="1267.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="1278.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1168.6" y="1299.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.6" y="1310.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.02%)</title><rect x="1168.6" y="1283.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.6" y="1294.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.02%)</title><rect x="1168.6" y="1267.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.6" y="1278.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.02%)</title><rect x="1168.6" y="1251.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.6" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1168.9" y="1299.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1168.9" y="1283.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="1294.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.02%)</title><rect x="1168.9" y="1267.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="1278.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.05%)</title><rect x="1169.1" y="1299.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.1" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.05%)</title><rect x="1169.1" y="1283.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.1" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1267.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.1" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1251.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.1" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1235.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.1" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1219.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.1" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1203.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.1" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1187.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.1" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1171.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1155.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.1" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1139.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.1" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1169.1" y="1123.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.1" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1169.1" y="1107.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1169.1" y="1091.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.1" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1169.1" y="1075.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.1" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1169.1" y="1059.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.1" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1169.1" y="1043.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1169.1" y="1027.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.1" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1169.1" y="1011.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.1" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1169.1" y="995.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1169.1" y="979.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.1" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1169.4" y="1107.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.4" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1169.4" y="1091.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.4" y="1102.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (2 samples, 0.05%)</title><rect x="1169.7" y="1331.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.7" y="1342.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.02%)</title><rect x="1170.2" y="1331.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.2" y="1342.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.02%)</title><rect x="1170.5" y="1331.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1173.5" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 0.30%)</title><rect x="1170.8" y="1347.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 0.26%)</title><rect x="1171.1" y="1331.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.1" y="1342.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.07%)</title><rect x="1171.1" y="1315.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.1" y="1326.0"></text>
</g>
<g>
<title>IfNode::search_identical(int) (1 samples, 0.02%)</title><rect x="1171.1" y="1299.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.05%)</title><rect x="1171.3" y="1299.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.05%)</title><rect x="1171.3" y="1283.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.3" y="1294.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.05%)</title><rect x="1171.3" y="1267.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.3" y="1278.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1171.9" y="1315.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.9" y="1326.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1172.2" y="1315.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.2" y="1326.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1172.2" y="1299.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.2" y="1310.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.02%)</title><rect x="1172.2" y="1283.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1172.2" y="1267.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.2" y="1278.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1172.2" y="1251.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.2" y="1262.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1172.4" y="1315.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.4" y="1326.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.02%)</title><rect x="1172.4" y="1299.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="1310.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.05%)</title><rect x="1172.7" y="1315.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1172.7" y="1299.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.7" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1172.7" y="1283.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.7" y="1294.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.02%)</title><rect x="1172.7" y="1267.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.7" y="1278.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1173.0" y="1299.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="1310.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.07%)</title><rect x="1173.3" y="1315.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.07%)</title><rect x="1173.3" y="1299.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.07%)</title><rect x="1173.3" y="1283.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.07%)</title><rect x="1173.3" y="1267.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.07%)</title><rect x="1173.3" y="1251.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.3" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.07%)</title><rect x="1173.3" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.07%)</title><rect x="1173.3" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.07%)</title><rect x="1173.3" y="1203.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.07%)</title><rect x="1173.3" y="1187.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.07%)</title><rect x="1173.3" y="1171.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1173.3" y="1155.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1173.3" y="1139.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1173.3" y="1123.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1173.3" y="1107.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1173.3" y="1091.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1173.3" y="1075.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1173.3" y="1059.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1173.3" y="1043.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1173.3" y="1027.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1173.3" y="1011.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1173.3" y="995.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.3" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1173.5" y="1091.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1173.5" y="1075.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1173.8" y="1155.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1173.8" y="1139.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="1150.0"></text>
</g>
<g>
<title>URShiftLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1174.1" y="1331.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.1" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.05%)</title><rect x="1174.4" y="1347.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title><rect x="1174.4" y="1331.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title><rect x="1174.4" y="1315.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1326.0"></text>
</g>
<g>
<title>ciMetadata::is_obj_array_klass() const (1 samples, 0.02%)</title><rect x="1174.4" y="1299.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.02%)</title><rect x="1174.6" y="1331.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.6" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1174.6" y="1315.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.6" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_load(Node*, Node*, Node*, int, Type const*, BasicType) (1 samples, 0.02%)</title><rect x="1174.6" y="1299.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.02%)</title><rect x="1174.6" y="1283.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.6" y="1294.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1174.6" y="1267.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.6" y="1278.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1174.6" y="1251.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.6" y="1262.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.05%)</title><rect x="1174.9" y="1347.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="1358.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1175.2" y="1331.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="1342.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1175.2" y="1315.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1326.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.02%)</title><rect x="1175.2" y="1299.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::has_candidates(Compile*) (1 samples, 0.02%)</title><rect x="1175.5" y="1363.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (35 samples, 0.81%)</title><rect x="1175.7" y="1363.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (35 samples, 0.81%)</title><rect x="1175.7" y="1347.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (35 samples, 0.81%)</title><rect x="1175.7" y="1331.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (35 samples, 0.81%)</title><rect x="1175.7" y="1315.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (35 samples, 0.81%)</title><rect x="1175.7" y="1299.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (34 samples, 0.79%)</title><rect x="1175.7" y="1283.0" width="9.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.7" y="1294.0"></text>
</g>
<g>
<title>LateInlineMHCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1175.7" y="1267.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="1278.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1175.7" y="1251.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.7" y="1262.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.02%)</title><rect x="1175.7" y="1235.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="1246.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1175.7" y="1219.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.7" y="1230.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1175.7" y="1203.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (29 samples, 0.67%)</title><rect x="1176.0" y="1267.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.0" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (29 samples, 0.67%)</title><rect x="1176.0" y="1251.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (29 samples, 0.67%)</title><rect x="1176.0" y="1235.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (29 samples, 0.67%)</title><rect x="1176.0" y="1219.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (29 samples, 0.67%)</title><rect x="1176.0" y="1203.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (28 samples, 0.65%)</title><rect x="1176.0" y="1187.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="1198.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1176.0" y="1171.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="1182.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1176.0" y="1155.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="1166.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1176.0" y="1139.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="1150.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.02%)</title><rect x="1176.0" y="1123.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="1134.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1176.0" y="1107.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1179.0" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.44%)</title><rect x="1176.3" y="1171.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.44%)</title><rect x="1176.3" y="1155.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 0.44%)</title><rect x="1176.3" y="1139.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 0.44%)</title><rect x="1176.3" y="1123.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (19 samples, 0.44%)</title><rect x="1176.3" y="1107.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 0.42%)</title><rect x="1176.3" y="1091.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="1102.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1176.3" y="1075.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="1086.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1176.3" y="1059.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1070.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1176.3" y="1043.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1176.3" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1176.3" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1176.3" y="995.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1176.3" y="979.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1176.3" y="963.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.02%)</title><rect x="1176.3" y="947.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1176.3" y="931.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1176.3" y="915.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1176.3" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="910.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.02%)</title><rect x="1176.3" y="883.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="894.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.02%)</title><rect x="1176.3" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.16%)</title><rect x="1176.6" y="1075.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.16%)</title><rect x="1176.6" y="1059.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="1070.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.02%)</title><rect x="1176.6" y="1043.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="1054.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1176.6" y="1027.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.14%)</title><rect x="1176.8" y="1043.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.14%)</title><rect x="1176.8" y="1027.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.14%)</title><rect x="1176.8" y="1011.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_anewarray() (1 samples, 0.02%)</title><rect x="1176.8" y="995.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="1006.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.02%)</title><rect x="1176.8" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.12%)</title><rect x="1177.1" y="995.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.12%)</title><rect x="1177.1" y="979.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.12%)</title><rect x="1177.1" y="963.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1177.1" y="947.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1177.1" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1177.1" y="915.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.09%)</title><rect x="1177.1" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="910.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.02%)</title><rect x="1177.1" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="894.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.02%)</title><rect x="1177.1" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="878.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.02%)</title><rect x="1177.1" y="851.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1177.4" y="883.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1177.4" y="867.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1177.4" y="851.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1177.4" y="835.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1177.4" y="819.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1177.4" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1177.4" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1177.4" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1177.4" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1177.4" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1177.4" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1177.4" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1177.4" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1177.4" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1177.4" y="659.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::map_blocks() (1 samples, 0.02%)</title><rect x="1177.4" y="643.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1177.7" y="707.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1177.7" y="691.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.02%)</title><rect x="1177.7" y="675.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="686.0"></text>
</g>
<g>
<title>Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool) (1 samples, 0.02%)</title><rect x="1177.7" y="659.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="670.0"></text>
</g>
<g>
<title>ciKlass::is_subclass_of(ciKlass*) (1 samples, 0.02%)</title><rect x="1177.7" y="643.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1177.9" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1177.9" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.9" y="798.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1177.9" y="771.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1177.9" y="755.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1177.9" y="739.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.02%)</title><rect x="1177.9" y="723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="734.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.02%)</title><rect x="1177.9" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="718.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1177.9" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1177.9" y="675.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1180.9" y="686.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.164] (1 samples, 0.02%)</title><rect x="1178.2" y="947.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.2" y="958.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.02%)</title><rect x="1178.2" y="931.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1181.2" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (10 samples, 0.23%)</title><rect x="1178.5" y="1075.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.23%)</title><rect x="1178.5" y="1059.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.23%)</title><rect x="1178.5" y="1043.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.23%)</title><rect x="1178.5" y="1027.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.23%)</title><rect x="1178.5" y="1011.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.23%)</title><rect x="1178.5" y="995.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.23%)</title><rect x="1178.5" y="979.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.19%)</title><rect x="1178.5" y="963.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.19%)</title><rect x="1178.5" y="947.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.19%)</title><rect x="1178.5" y="931.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.19%)</title><rect x="1178.5" y="915.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.19%)</title><rect x="1178.5" y="899.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.19%)</title><rect x="1178.5" y="883.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.5" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1178.5" y="867.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1178.5" y="851.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1178.5" y="835.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1178.5" y="819.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1178.5" y="803.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1178.5" y="787.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1178.5" y="771.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.16%)</title><rect x="1178.7" y="867.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.16%)</title><rect x="1178.7" y="851.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.16%)</title><rect x="1178.7" y="835.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.16%)</title><rect x="1178.7" y="819.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.16%)</title><rect x="1178.7" y="803.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.16%)</title><rect x="1178.7" y="787.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1178.7" y="771.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1178.7" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="766.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1178.7" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.0" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.0" y="755.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.0" y="739.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.0" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.0" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.0" y="691.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.0" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.0" y="659.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.0" y="643.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.0" y="627.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.0" y="611.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.0" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.0" y="579.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.0" y="563.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.0" y="547.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.0" y="531.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.0" y="515.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.0" y="499.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.0" y="483.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.0" y="467.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.0" y="451.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.0" y="435.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.0" y="419.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="430.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.02%)</title><rect x="1179.0" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.02%)</title><rect x="1179.0" y="387.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.02%)</title><rect x="1179.0" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1179.0" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="366.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1179.0" y="339.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="350.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.02%)</title><rect x="1179.0" y="323.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1179.0" y="307.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="318.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1179.0" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.0" y="302.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1179.0" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.12%)</title><rect x="1179.3" y="771.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.12%)</title><rect x="1179.3" y="755.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.12%)</title><rect x="1179.3" y="739.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.12%)</title><rect x="1179.3" y="723.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.12%)</title><rect x="1179.3" y="707.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.12%)</title><rect x="1179.3" y="691.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.12%)</title><rect x="1179.3" y="675.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.12%)</title><rect x="1179.3" y="659.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.12%)</title><rect x="1179.3" y="643.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.12%)</title><rect x="1179.3" y="627.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.12%)</title><rect x="1179.3" y="611.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.12%)</title><rect x="1179.3" y="595.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.12%)</title><rect x="1179.3" y="579.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.12%)</title><rect x="1179.3" y="563.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.12%)</title><rect x="1179.3" y="547.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.12%)</title><rect x="1179.3" y="531.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.12%)</title><rect x="1179.3" y="515.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.12%)</title><rect x="1179.3" y="499.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.12%)</title><rect x="1179.3" y="483.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.3" y="494.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1179.3" y="467.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="478.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1179.3" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="462.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1179.3" y="435.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="446.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.02%)</title><rect x="1179.3" y="419.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1179.6" y="467.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1179.6" y="451.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1179.6" y="435.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1179.6" y="419.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1179.6" y="403.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1179.6" y="387.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1179.6" y="371.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1179.6" y="355.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1179.6" y="339.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1179.6" y="323.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1179.6" y="307.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1179.6" y="291.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1179.6" y="275.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="286.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1179.6" y="259.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1179.6" y="243.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1179.6" y="227.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1179.6" y="211.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="222.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.02%)</title><rect x="1179.6" y="195.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1179.8" y="451.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1179.8" y="435.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1179.8" y="419.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1179.8" y="403.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1179.8" y="387.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1179.8" y="371.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1179.8" y="355.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1179.8" y="339.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.02%)</title><rect x="1180.1" y="323.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="334.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.02%)</title><rect x="1180.1" y="307.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="318.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1180.1" y="291.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="302.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.02%)</title><rect x="1180.1" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="286.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.02%)</title><rect x="1180.1" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1180.4" y="467.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1180.4" y="451.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="462.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1180.4" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="446.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1180.4" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="430.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1180.4" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="414.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1180.4" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="398.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1180.4" y="371.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1180.4" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1180.4" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="350.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1180.4" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="275.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="243.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="195.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="179.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="131.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="115.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="99.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="83.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="67.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1180.4" y="51.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1180.4" y="35.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.7" y="963.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.7" y="947.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.7" y="931.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.7" y="915.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.7" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.7" y="883.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1180.7" y="867.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.7" y="851.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.7" y="835.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.7" y="819.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.7" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.7" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1180.7" y="771.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.7" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.7" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.7" y="723.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.7" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.7" y="691.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1180.7" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.7" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.7" y="643.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.7" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.7" y="611.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.7" y="595.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1180.7" y="579.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.7" y="563.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.7" y="547.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.7" y="531.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.7" y="515.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.7" y="499.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1180.7" y="483.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1180.7" y="467.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1180.7" y="451.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1180.7" y="435.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1180.7" y="419.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1180.7" y="403.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1180.7" y="387.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1180.7" y="371.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1180.7" y="355.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="366.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.02%)</title><rect x="1180.7" y="339.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="350.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="1180.7" y="323.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1183.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1180.9" y="483.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1180.9" y="467.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1180.9" y="451.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1180.9" y="435.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.02%)</title><rect x="1180.9" y="419.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.02%)</title><rect x="1180.9" y="403.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1180.9" y="387.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1180.9" y="371.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1181.2" y="1091.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1181.2" y="1075.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1181.2" y="1059.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1181.2" y="1043.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1181.2" y="1027.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="1038.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1181.2" y="1011.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (8 samples, 0.19%)</title><rect x="1181.5" y="1171.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.5" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.16%)</title><rect x="1181.5" y="1155.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.16%)</title><rect x="1181.5" y="1139.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.16%)</title><rect x="1181.5" y="1123.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.16%)</title><rect x="1181.5" y="1107.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.16%)</title><rect x="1181.5" y="1091.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.16%)</title><rect x="1181.5" y="1075.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.12%)</title><rect x="1181.5" y="1059.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.12%)</title><rect x="1181.5" y="1043.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="1054.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.02%)</title><rect x="1181.5" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="1038.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1181.5" y="1011.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1181.5" y="995.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1181.5" y="979.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1181.8" y="1027.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1181.8" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1181.8" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.09%)</title><rect x="1181.8" y="979.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1181.8" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1181.8" y="947.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1181.8" y="931.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1181.8" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1181.8" y="899.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.09%)</title><rect x="1181.8" y="883.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1181.8" y="867.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1181.8" y="851.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1181.8" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1181.8" y="819.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1181.8" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="814.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.02%)</title><rect x="1181.8" y="787.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="798.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.02%)</title><rect x="1181.8" y="771.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="782.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.02%)</title><rect x="1181.8" y="755.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="766.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1181.8" y="739.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.0" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.0" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.0" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.0" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.0" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.0" y="707.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.0" y="691.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.0" y="675.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.0" y="659.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.0" y="643.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.0" y="627.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.0" y="611.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.0" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.0" y="579.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.0" y="563.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.0" y="547.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1182.3" y="867.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1182.3" y="851.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1182.3" y="835.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1182.3" y="819.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1182.3" y="803.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1182.3" y="787.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1182.3" y="771.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1182.3" y="755.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1182.3" y="739.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1182.3" y="723.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1182.3" y="707.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1182.3" y="691.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1182.3" y="675.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1182.3" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1182.3" y="643.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1182.3" y="627.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1182.3" y="611.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1182.3" y="595.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1182.3" y="579.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.3" y="563.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.3" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.3" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.3" y="515.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.3" y="499.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.3" y="483.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.3" y="467.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.3" y="451.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.3" y="435.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.3" y="419.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.3" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.3" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.3" y="371.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.3" y="355.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.3" y="339.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.3" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.3" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.3" y="291.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="302.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1182.3" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="286.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1182.3" y="259.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1182.3" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1182.3" y="227.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1182.3" y="211.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1182.3" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1182.3" y="179.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1182.3" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1182.3" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1182.3" y="131.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1182.3" y="115.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.02%)</title><rect x="1182.3" y="99.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="110.0"></text>
</g>
<g>
<title>ciConstantPoolCache::get(int) (1 samples, 0.02%)</title><rect x="1182.3" y="83.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.6" y="563.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.6" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.6" y="531.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.6" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.6" y="499.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.6" y="483.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.6" y="467.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.6" y="451.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.6" y="435.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.6" y="419.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.6" y="403.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.6" y="387.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1182.6" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="382.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1182.6" y="355.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="366.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1182.6" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="350.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.02%)</title><rect x="1182.6" y="323.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1182.6" y="307.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1182.9" y="1059.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1182.9" y="1043.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1182.9" y="1027.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1182.9" y="1011.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1182.9" y="995.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1182.9" y="979.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1182.9" y="963.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1182.9" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1182.9" y="931.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1182.9" y="915.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1182.9" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1182.9" y="883.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1182.9" y="867.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.9" y="851.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.9" y="835.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.9" y="819.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.9" y="803.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.9" y="787.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.9" y="771.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.9" y="755.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.9" y="739.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.9" y="723.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.9" y="707.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.9" y="691.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.9" y="675.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.9" y="659.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.9" y="643.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.9" y="627.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.9" y="611.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.9" y="595.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.9" y="579.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.9" y="563.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.9" y="547.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.9" y="531.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.9" y="515.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.9" y="499.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.9" y="483.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.9" y="467.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1182.9" y="451.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1182.9" y="435.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1182.9" y="419.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1182.9" y="403.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1182.9" y="387.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1182.9" y="371.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.02%)</title><rect x="1182.9" y="355.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::AccessKind) (1 samples, 0.02%)</title><rect x="1182.9" y="339.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="350.0"></text>
</g>
<g>
<title>GraphKit::access_atomic_cmpxchg_bool_at(Node*, Node*, Node*, TypePtr const*, int, Node*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1182.9" y="323.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>BarrierSetC2::atomic_cmpxchg_bool_at(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.02%)</title><rect x="1182.9" y="307.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="318.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.02%)</title><rect x="1182.9" y="291.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="302.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.02%)</title><rect x="1182.9" y="275.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="286.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.02%)</title><rect x="1182.9" y="259.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1182.9" y="243.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1182.9" y="227.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.02%)</title><rect x="1182.9" y="211.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.1" y="851.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.1" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.1" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.1" y="819.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.1" y="803.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.1" y="787.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.1" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.1" y="755.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.1" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.1" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.1" y="707.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.1" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.1" y="675.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.1" y="659.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.1" y="643.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.1" y="627.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.1" y="611.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="622.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.02%)</title><rect x="1183.1" y="595.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.02%)</title><rect x="1183.1" y="579.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.02%)</title><rect x="1183.1" y="563.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.02%)</title><rect x="1183.1" y="547.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.02%)</title><rect x="1183.1" y="531.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="542.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.02%)</title><rect x="1183.1" y="515.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="1155.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="1139.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.4" y="1123.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.4" y="1107.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.4" y="1091.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.4" y="1075.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.4" y="1059.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="1043.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.4" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.4" y="1011.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.4" y="995.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.4" y="979.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.4" y="963.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.4" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.4" y="931.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.4" y="915.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.4" y="899.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.4" y="883.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.4" y="867.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="851.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.4" y="835.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.4" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.4" y="803.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.4" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.4" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.4" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.4" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.4" y="707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.4" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.4" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.4" y="643.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.4" y="627.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.4" y="611.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.4" y="595.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.4" y="579.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="563.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.4" y="547.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.4" y="531.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.4" y="515.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.4" y="499.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.4" y="483.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="467.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.4" y="451.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1183.4" y="435.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1183.4" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1183.4" y="403.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1183.4" y="387.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1183.4" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1183.4" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="366.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.02%)</title><rect x="1183.4" y="339.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="350.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.02%)</title><rect x="1183.4" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1183.7" y="1187.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="1198.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1183.7" y="1171.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="1182.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.02%)</title><rect x="1183.7" y="1155.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.7" y="1166.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1183.7" y="1139.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="1150.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.02%)</title><rect x="1183.7" y="1123.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="1134.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.02%)</title><rect x="1183.7" y="1107.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="1118.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.02%)</title><rect x="1183.7" y="1091.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="1102.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.02%)</title><rect x="1183.7" y="1075.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1184.0" y="1267.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1184.0" y="1251.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1184.0" y="1235.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1184.0" y="1219.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1184.0" y="1203.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1184.0" y="1187.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.09%)</title><rect x="1184.0" y="1171.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.09%)</title><rect x="1184.0" y="1155.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.09%)</title><rect x="1184.0" y="1139.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.09%)</title><rect x="1184.0" y="1123.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.09%)</title><rect x="1184.0" y="1107.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.09%)</title><rect x="1184.0" y="1091.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1184.0" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1184.0" y="1059.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1184.0" y="1043.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1184.0" y="1027.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="1038.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.02%)</title><rect x="1184.0" y="1011.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="1022.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1184.0" y="995.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.0" y="1006.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1184.0" y="979.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="990.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.02%)</title><rect x="1184.0" y="963.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="974.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.02%)</title><rect x="1184.0" y="947.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="958.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.02%)</title><rect x="1184.0" y="931.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1187.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.2" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.2" y="995.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.2" y="979.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.2" y="963.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.2" y="947.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.2" y="931.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.2" y="915.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.2" y="899.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.2" y="883.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.2" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.2" y="851.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.2" y="835.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.2" y="819.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.2" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.2" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.2" y="771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.2" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.2" y="739.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.2" y="723.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.2" y="707.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.2" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.2" y="675.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.2" y="659.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.2" y="643.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.2" y="627.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.2" y="611.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.2" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.2" y="579.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.2" y="563.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.2" y="547.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.2" y="531.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.2" y="515.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1184.2" y="499.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1184.2" y="483.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1184.2" y="467.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1184.2" y="451.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1184.2" y="435.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="446.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1184.2" y="419.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.5" y="1059.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.5" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.5" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.5" y="1011.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.5" y="995.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.5" y="979.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.5" y="963.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.5" y="947.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.5" y="931.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.5" y="915.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.5" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.5" y="883.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.5" y="867.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.5" y="851.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.5" y="835.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.5" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.5" y="803.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.5" y="787.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.5" y="771.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.5" y="755.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.5" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.5" y="723.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.5" y="707.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.5" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.5" y="675.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.5" y="659.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.5" y="643.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.5" y="627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.5" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.5" y="595.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1184.5" y="579.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1184.5" y="563.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1184.5" y="547.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1184.5" y="531.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1184.5" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1184.5" y="499.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="510.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.02%)</title><rect x="1184.5" y="483.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.5" y="494.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1184.5" y="467.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1184.5" y="451.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="462.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1184.5" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1184.5" y="419.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="430.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1184.5" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="414.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.02%)</title><rect x="1184.5" y="387.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1184.5" y="371.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="382.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1184.5" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="366.0"></text>
</g>
<g>
<title>Type::make_constant_from_array_element(ciArray*, int, int, BasicType, bool) (1 samples, 0.02%)</title><rect x="1184.5" y="339.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.5" y="350.0"></text>
</g>
<g>
<title>ciArray::element_value_by_offset(long) (1 samples, 0.02%)</title><rect x="1184.5" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="334.0"></text>
</g>
<g>
<title>ciArray::element_value(int) (1 samples, 0.02%)</title><rect x="1184.5" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1184.8" y="1075.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1184.8" y="1059.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="1070.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1184.8" y="1043.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="1054.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1184.8" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.8" y="1038.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1184.8" y="1011.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="1022.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.02%)</title><rect x="1184.8" y="995.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1184.8" y="979.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.8" y="990.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1184.8" y="963.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1185.1" y="1283.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1185.1" y="1267.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="1278.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1185.1" y="1251.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.1" y="1262.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1185.1" y="1235.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.1" y="1246.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1185.1" y="1219.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="1230.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.02%)</title><rect x="1185.1" y="1203.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.1" y="1214.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1185.1" y="1187.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.1" y="1198.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.02%)</title><rect x="1185.1" y="1171.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="1182.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.05%)</title><rect x="1185.3" y="1363.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="1374.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.05%)</title><rect x="1185.3" y="1347.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.3" y="1358.0"></text>
</g>
<g>
<title>TypeFunc::make(TypeTuple const*, TypeTuple const*) (1 samples, 0.02%)</title><rect x="1185.9" y="1379.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.9" y="1390.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.07%)</title><rect x="1186.2" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="1406.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.07%)</title><rect x="1186.2" y="1379.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.2" y="1390.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.07%)</title><rect x="1186.2" y="1363.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.07%)</title><rect x="1186.2" y="1347.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="1358.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.02%)</title><rect x="1186.2" y="1331.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.2" y="1342.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.02%)</title><rect x="1186.2" y="1315.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="1326.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.02%)</title><rect x="1186.2" y="1299.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="1310.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.02%)</title><rect x="1186.2" y="1283.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="1294.0"></text>
</g>
<g>
<title>PhiSimplifier::PhiSimplifier(BlockBegin*) (1 samples, 0.02%)</title><rect x="1186.2" y="1267.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="1278.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.02%)</title><rect x="1186.2" y="1251.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="1262.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1186.2" y="1235.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="1246.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1186.2" y="1219.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="1230.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1186.2" y="1203.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="1214.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1186.2" y="1187.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="1198.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.02%)</title><rect x="1186.2" y="1171.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="1182.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.02%)</title><rect x="1186.2" y="1155.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="1166.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.02%)</title><rect x="1186.2" y="1139.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="1150.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.02%)</title><rect x="1186.4" y="1331.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.4" y="1342.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.02%)</title><rect x="1186.4" y="1315.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.4" y="1326.0"></text>
</g>
<g>
<title>LIR_OpAllocObj::emit_code(LIR_Assembler*) (1 samples, 0.02%)</title><rect x="1186.4" y="1299.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.4" y="1310.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_alloc_obj(LIR_OpAllocObj*) (1 samples, 0.02%)</title><rect x="1186.4" y="1283.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.4" y="1294.0"></text>
</g>
<g>
<title>C1_MacroAssembler::allocate_object(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, int, RegisterImpl*, Label&amp;) (1 samples, 0.02%)</title><rect x="1186.4" y="1267.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.4" y="1278.0"></text>
</g>
<g>
<title>MacroAssembler::tlab_allocate(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, Label&amp;) (1 samples, 0.02%)</title><rect x="1186.4" y="1251.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.4" y="1262.0"></text>
</g>
<g>
<title>BarrierSetAssembler::tlab_allocate(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, Label&amp;) (1 samples, 0.02%)</title><rect x="1186.4" y="1235.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.4" y="1246.0"></text>
</g>
<g>
<title>Assembler::lea(RegisterImpl*, Address) (1 samples, 0.02%)</title><rect x="1186.4" y="1219.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.4" y="1230.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.02%)</title><rect x="1186.7" y="1331.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.7" y="1342.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.02%)</title><rect x="1186.7" y="1315.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="1326.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.02%)</title><rect x="1186.7" y="1299.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="1310.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.02%)</title><rect x="1186.7" y="1283.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="1294.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.07%)</title><rect x="1187.0" y="1427.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.0" y="1438.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.07%)</title><rect x="1187.0" y="1411.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="1422.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (3 samples, 0.07%)</title><rect x="1187.0" y="1395.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.0" y="1406.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (3 samples, 0.07%)</title><rect x="1187.0" y="1379.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1190.0" y="1390.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.05%)</title><rect x="1187.3" y="1363.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.3" y="1374.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.05%)</title><rect x="1187.3" y="1347.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="1358.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1187.3" y="1331.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1190.3" y="1342.0"></text>
</g>
<g>
<title>nmethod::metadata_addr_at(int) const (1 samples, 0.02%)</title><rect x="1187.5" y="1331.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.5" y="1342.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.02%)</title><rect x="1187.8" y="1459.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="1470.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.02%)</title><rect x="1187.8" y="1443.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="1454.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1187.8" y="1427.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="1438.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1187.8" y="1411.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="1422.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="1187.8" y="1395.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="1406.0"></text>
</g>
<g>
<title>WatcherThread::run() (7 samples, 0.16%)</title><rect x="1188.1" y="1459.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.1" y="1470.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (3 samples, 0.07%)</title><rect x="1188.1" y="1443.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.1" y="1454.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.02%)</title><rect x="1188.1" y="1427.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.1" y="1438.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (2 samples, 0.05%)</title><rect x="1188.4" y="1427.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.4" y="1438.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.02%)</title><rect x="1188.9" y="1443.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="1454.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 0.07%)</title><rect x="1189.2" y="1443.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.2" y="1454.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1189.2" y="1427.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.2" y="1438.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="1189.2" y="1411.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.2" y="1422.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.05%)</title><rect x="1189.5" y="1427.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.5" y="1438.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1189.5" y="1411.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.5" y="1422.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.02%)</title><rect x="1189.7" y="1411.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.7" y="1422.0"></text>
</g>
</g>
</svg>
