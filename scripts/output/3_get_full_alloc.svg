<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="613"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="613"> </text>
<g id="frames">
<g>
<title>all (116,525 samples, 100.00%)</title><rect x="10.0" y="579.0" width="1180.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="590.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (60,581 samples, 51.99%)</title><rect x="10.0" y="563.0" width="613.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="574.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (60,581 samples, 51.99%)</title><rect x="10.0" y="547.0" width="613.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="558.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (60,581 samples, 51.99%)</title><rect x="10.0" y="531.0" width="613.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (213 samples, 0.18%)</title><rect x="10.0" y="515.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (213 samples, 0.18%)</title><rect x="10.0" y="499.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (208 samples, 0.18%)</title><rect x="10.0" y="483.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (208 samples, 0.18%)</title><rect x="10.0" y="467.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (208 samples, 0.18%)</title><rect x="10.0" y="451.0" width="2.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.run (60,368 samples, 51.81%)</title><rect x="12.2" y="515.0" width="611.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.2" y="526.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (60,368 samples, 51.81%)</title><rect x="12.2" y="499.0" width="611.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="510.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (289 samples, 0.25%)</title><rect x="12.2" y="483.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (289 samples, 0.25%)</title><rect x="12.2" y="467.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (219 samples, 0.19%)</title><rect x="12.2" y="451.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (219 samples, 0.19%)</title><rect x="12.2" y="435.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="446.0"></text>
</g>
<g>
<title>byte[] (219 samples, 0.19%)</title><rect x="12.2" y="419.0" width="2.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="15.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (70 samples, 0.06%)</title><rect x="14.4" y="451.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.4" y="462.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (70 samples, 0.06%)</title><rect x="14.4" y="435.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="17.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.action (60,079 samples, 51.56%)</title><rect x="15.1" y="483.0" width="608.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.1" y="494.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.action</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0 (60,079 samples, 51.56%)</title><rect x="15.1" y="467.0" width="608.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.1" y="478.0">ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (60,079 samples, 51.56%)</title><rect x="15.1" y="451.0" width="608.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.1" y="462.0">ru/mail/polis/service/igorlo/AsyncService.get</text>
</g>
<g>
<title>byte[] (59 samples, 0.05%)</title><rect x="15.1" y="435.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="18.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (104 samples, 0.09%)</title><rect x="15.7" y="435.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.7" y="446.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (102 samples, 0.09%)</title><rect x="15.7" y="419.0" width="1.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="18.7" y="430.0"></text>
</g>
<g>
<title>one.nio.http.Response (60 samples, 0.05%)</title><rect x="17.0" y="435.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="20.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (203 samples, 0.17%)</title><rect x="17.6" y="435.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.6" y="446.0"></text>
</g>
<g>
<title>byte[] (85 samples, 0.07%)</title><rect x="17.6" y="419.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="20.6" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (60 samples, 0.05%)</title><rect x="18.4" y="419.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="21.4" y="430.0"></text>
</g>
<g>
<title>java.lang.String (58 samples, 0.05%)</title><rect x="19.1" y="419.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="22.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (59,629 samples, 51.17%)</title><rect x="19.6" y="435.0" width="603.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.6" y="446.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (6,499 samples, 5.58%)</title><rect x="19.6" y="419.0" width="65.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.6" y="430.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (6,499 samples, 5.58%)</title><rect x="19.6" y="403.0" width="65.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.6" y="414.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (6,499 samples, 5.58%)</title><rect x="19.6" y="387.0" width="65.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.6" y="398.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (6,499 samples, 5.58%)</title><rect x="19.6" y="371.0" width="65.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.6" y="382.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (6,499 samples, 5.58%)</title><rect x="19.6" y="355.0" width="65.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.6" y="366.0">ru/mail..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5,724 samples, 4.91%)</title><rect x="19.6" y="339.0" width="58.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.6" y="350.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (59 samples, 0.05%)</title><rect x="19.6" y="323.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.6" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (59 samples, 0.05%)</title><rect x="19.6" y="307.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.6" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (59 samples, 0.05%)</title><rect x="19.6" y="291.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.6" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (59 samples, 0.05%)</title><rect x="19.6" y="275.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (59 samples, 0.05%)</title><rect x="19.6" y="259.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$65/910428674.apply (59 samples, 0.05%)</title><rect x="19.6" y="243.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (59 samples, 0.05%)</title><rect x="19.6" y="227.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (59 samples, 0.05%)</title><rect x="19.6" y="211.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.6" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (59 samples, 0.05%)</title><rect x="19.6" y="195.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="22.6" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2,228 samples, 1.91%)</title><rect x="20.2" y="323.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.2" y="334.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2,228 samples, 1.91%)</title><rect x="20.2" y="307.0" width="22.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.2" y="318.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (2,228 samples, 1.91%)</title><rect x="20.2" y="291.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.2" y="302.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,228 samples, 1.91%)</title><rect x="20.2" y="275.0" width="22.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.2" y="286.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,228 samples, 1.91%)</title><rect x="20.2" y="259.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.2" y="270.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (2,228 samples, 1.91%)</title><rect x="20.2" y="243.0" width="22.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.2" y="254.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (2,228 samples, 1.91%)</title><rect x="20.2" y="227.0" width="22.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.2" y="238.0">r..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (2,228 samples, 1.91%)</title><rect x="20.2" y="211.0" width="22.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.2" y="222.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,228 samples, 1.91%)</title><rect x="20.2" y="195.0" width="22.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.2" y="206.0">j..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (2,228 samples, 1.91%)</title><rect x="20.2" y="179.0" width="22.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.2" y="190.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,228 samples, 1.91%)</title><rect x="20.2" y="163.0" width="22.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.2" y="174.0">j..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (2,228 samples, 1.91%)</title><rect x="20.2" y="147.0" width="22.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.2" y="158.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,228 samples, 1.91%)</title><rect x="20.2" y="131.0" width="22.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.2" y="142.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/1411168072.apply (2,228 samples, 1.91%)</title><rect x="20.2" y="115.0" width="22.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.2" y="126.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2,228 samples, 1.91%)</title><rect x="20.2" y="99.0" width="22.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.2" y="110.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2,128 samples, 1.83%)</title><rect x="20.2" y="83.0" width="21.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.2" y="94.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,128 samples, 1.83%)</title><rect x="20.2" y="67.0" width="21.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.2" y="78.0">j..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,128 samples, 1.83%)</title><rect x="20.2" y="51.0" width="21.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="23.2" y="62.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (100 samples, 0.09%)</title><rect x="41.8" y="83.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (100 samples, 0.09%)</title><rect x="41.8" y="67.0" width="1.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="44.8" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,437 samples, 2.95%)</title><rect x="42.8" y="323.0" width="34.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.8" y="334.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,437 samples, 2.95%)</title><rect x="42.8" y="307.0" width="34.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.8" y="318.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,437 samples, 2.95%)</title><rect x="42.8" y="291.0" width="34.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.8" y="302.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,437 samples, 2.95%)</title><rect x="42.8" y="275.0" width="34.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.8" y="286.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,437 samples, 2.95%)</title><rect x="42.8" y="259.0" width="34.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.8" y="270.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,437 samples, 2.95%)</title><rect x="42.8" y="243.0" width="34.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.8" y="254.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,618 samples, 2.25%)</title><rect x="42.8" y="227.0" width="26.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.8" y="238.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (2,618 samples, 2.25%)</title><rect x="42.8" y="211.0" width="26.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.8" y="222.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (2,618 samples, 2.25%)</title><rect x="42.8" y="195.0" width="26.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.8" y="206.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (2,618 samples, 2.25%)</title><rect x="42.8" y="179.0" width="26.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="45.8" y="190.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (735 samples, 0.63%)</title><rect x="42.8" y="163.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.8" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (371 samples, 0.32%)</title><rect x="42.8" y="147.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="45.8" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (371 samples, 0.32%)</title><rect x="42.8" y="131.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.8" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (371 samples, 0.32%)</title><rect x="42.8" y="115.0" width="3.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="45.8" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (364 samples, 0.31%)</title><rect x="46.6" y="147.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.6" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (364 samples, 0.31%)</title><rect x="46.6" y="131.0" width="3.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="49.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (741 samples, 0.64%)</title><rect x="50.2" y="163.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.2" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (373 samples, 0.32%)</title><rect x="50.2" y="147.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.2" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (373 samples, 0.32%)</title><rect x="50.2" y="131.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.2" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (373 samples, 0.32%)</title><rect x="50.2" y="115.0" width="3.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="53.2" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (368 samples, 0.32%)</title><rect x="54.0" y="147.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.0" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (368 samples, 0.32%)</title><rect x="54.0" y="131.0" width="3.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="57.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (365 samples, 0.31%)</title><rect x="57.7" y="163.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.7" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (365 samples, 0.31%)</title><rect x="57.7" y="147.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.7" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (365 samples, 0.31%)</title><rect x="57.7" y="131.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.7" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (363 samples, 0.31%)</title><rect x="57.7" y="115.0" width="3.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="60.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (463 samples, 0.40%)</title><rect x="61.4" y="163.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.4" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (235 samples, 0.20%)</title><rect x="61.4" y="147.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="64.4" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (235 samples, 0.20%)</title><rect x="61.4" y="131.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="64.4" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (235 samples, 0.20%)</title><rect x="61.4" y="115.0" width="2.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="64.4" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (228 samples, 0.20%)</title><rect x="63.8" y="147.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.8" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (226 samples, 0.19%)</title><rect x="63.8" y="131.0" width="2.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="66.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (174 samples, 0.15%)</title><rect x="66.1" y="163.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.1" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (174 samples, 0.15%)</title><rect x="66.1" y="147.0" width="1.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="69.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (95 samples, 0.08%)</title><rect x="67.9" y="163.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.9" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (95 samples, 0.08%)</title><rect x="67.9" y="147.0" width="1.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="70.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (45 samples, 0.04%)</title><rect x="68.9" y="163.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.9" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (45 samples, 0.04%)</title><rect x="68.9" y="147.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="71.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (819 samples, 0.70%)</title><rect x="69.3" y="227.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (819 samples, 0.70%)</title><rect x="69.3" y="211.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.3" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (819 samples, 0.70%)</title><rect x="69.3" y="195.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.3" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (819 samples, 0.70%)</title><rect x="69.3" y="179.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.3" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (819 samples, 0.70%)</title><rect x="69.3" y="163.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.3" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (819 samples, 0.70%)</title><rect x="69.3" y="147.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.3" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (819 samples, 0.70%)</title><rect x="69.3" y="131.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.3" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (819 samples, 0.70%)</title><rect x="69.3" y="115.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/1411168072.apply (819 samples, 0.70%)</title><rect x="69.3" y="99.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (819 samples, 0.70%)</title><rect x="69.3" y="83.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.3" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (762 samples, 0.65%)</title><rect x="69.3" y="67.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.3" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (762 samples, 0.65%)</title><rect x="69.3" y="51.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="72.3" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (761 samples, 0.65%)</title><rect x="69.3" y="35.0" width="7.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="72.3" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (57 samples, 0.05%)</title><rect x="77.0" y="67.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.0" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (57 samples, 0.05%)</title><rect x="77.0" y="51.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="80.0" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$65/910428674.apply (775 samples, 0.67%)</title><rect x="77.6" y="339.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (775 samples, 0.67%)</title><rect x="77.6" y="323.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (658 samples, 0.56%)</title><rect x="77.6" y="307.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.6" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (658 samples, 0.56%)</title><rect x="77.6" y="291.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.6" y="302.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (657 samples, 0.56%)</title><rect x="77.6" y="275.0" width="6.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="80.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (117 samples, 0.10%)</title><rect x="84.3" y="307.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.3" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (117 samples, 0.10%)</title><rect x="84.3" y="291.0" width="1.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="87.3" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (313 samples, 0.27%)</title><rect x="85.5" y="419.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (313 samples, 0.27%)</title><rect x="85.5" y="403.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$73/1800358294.apply (313 samples, 0.27%)</title><rect x="85.5" y="387.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (313 samples, 0.27%)</title><rect x="85.5" y="371.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (68 samples, 0.06%)</title><rect x="85.5" y="355.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.5" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (68 samples, 0.06%)</title><rect x="85.5" y="339.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="88.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (130 samples, 0.11%)</title><rect x="86.1" y="355.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (109 samples, 0.09%)</title><rect x="86.1" y="339.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (109 samples, 0.09%)</title><rect x="86.1" y="323.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="89.1" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (109 samples, 0.09%)</title><rect x="86.1" y="307.0" width="1.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="89.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (115 samples, 0.10%)</title><rect x="87.5" y="355.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (94 samples, 0.08%)</title><rect x="87.5" y="339.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.5" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (94 samples, 0.08%)</title><rect x="87.5" y="323.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.5" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (94 samples, 0.08%)</title><rect x="87.5" y="307.0" width="0.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="90.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (144 samples, 0.12%)</title><rect x="88.6" y="419.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.6" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (122 samples, 0.10%)</title><rect x="88.6" y="403.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="91.6" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (122 samples, 0.10%)</title><rect x="88.6" y="387.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="91.6" y="398.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (122 samples, 0.10%)</title><rect x="88.6" y="371.0" width="1.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="91.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (135 samples, 0.12%)</title><rect x="90.1" y="419.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (97 samples, 0.08%)</title><rect x="90.1" y="403.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.1" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (97 samples, 0.08%)</title><rect x="90.1" y="387.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.1" y="398.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (97 samples, 0.08%)</title><rect x="90.1" y="371.0" width="1.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="93.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (38 samples, 0.03%)</title><rect x="91.1" y="403.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.1" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (38 samples, 0.03%)</title><rect x="91.1" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.1" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (38 samples, 0.03%)</title><rect x="91.1" y="371.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="94.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (52,538 samples, 45.09%)</title><rect x="91.4" y="419.0" width="532.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.4" y="430.0">ru/mail/polis/dao/igorlo/PersistentDAO.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (52,536 samples, 45.09%)</title><rect x="91.5" y="403.0" width="532.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.5" y="414.0">ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (43,718 samples, 37.52%)</title><rect x="91.5" y="387.0" width="442.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.5" y="398.0">ru/mail/polis/dao/igorlo/Table.combineTables</text>
</g>
<g>
<title>java.util.ArrayList (60 samples, 0.05%)</title><rect x="91.5" y="371.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="94.5" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (118 samples, 0.10%)</title><rect x="92.1" y="371.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="95.1" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (118 samples, 0.10%)</title><rect x="92.1" y="355.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.1" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (118 samples, 0.10%)</title><rect x="92.1" y="339.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.1" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (118 samples, 0.10%)</title><rect x="92.1" y="323.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.1" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (118 samples, 0.10%)</title><rect x="92.1" y="307.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.1" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (118 samples, 0.10%)</title><rect x="92.1" y="291.0" width="1.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="95.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (81 samples, 0.07%)</title><rect x="93.3" y="371.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.3" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (81 samples, 0.07%)</title><rect x="93.3" y="355.0" width="0.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="96.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.iterator (1,331 samples, 1.14%)</title><rect x="94.1" y="371.0" width="13.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (178 samples, 0.15%)</title><rect x="94.1" y="355.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (178 samples, 0.15%)</title><rect x="94.1" y="339.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (178 samples, 0.15%)</title><rect x="94.1" y="323.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.1" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (134 samples, 0.11%)</title><rect x="94.1" y="307.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.1" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (134 samples, 0.11%)</title><rect x="94.1" y="291.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (133 samples, 0.11%)</title><rect x="94.1" y="275.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (133 samples, 0.11%)</title><rect x="94.1" y="259.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.1" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (133 samples, 0.11%)</title><rect x="94.1" y="243.0" width="1.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="97.1" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (42 samples, 0.04%)</title><rect x="95.4" y="307.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.4" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (42 samples, 0.04%)</title><rect x="95.4" y="291.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.4" y="302.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (42 samples, 0.04%)</title><rect x="95.4" y="275.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="98.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (804 samples, 0.69%)</title><rect x="95.9" y="355.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.9" y="366.0"></text>
</g>
<g>
<title>java.util.ArrayList (64 samples, 0.05%)</title><rect x="95.9" y="339.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="98.9" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (121 samples, 0.10%)</title><rect x="96.5" y="339.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.5" y="350.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (58 samples, 0.05%)</title><rect x="96.5" y="323.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="99.5" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (63 samples, 0.05%)</title><rect x="97.1" y="323.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.1" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (63 samples, 0.05%)</title><rect x="97.1" y="307.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.1" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (63 samples, 0.05%)</title><rect x="97.1" y="291.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="100.1" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (101 samples, 0.09%)</title><rect x="97.8" y="339.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.8" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (101 samples, 0.09%)</title><rect x="97.8" y="323.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.8" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (101 samples, 0.09%)</title><rect x="97.8" y="307.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.8" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (101 samples, 0.09%)</title><rect x="97.8" y="291.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.8" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (101 samples, 0.09%)</title><rect x="97.8" y="275.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.8" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (101 samples, 0.09%)</title><rect x="97.8" y="259.0" width="1.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="100.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (518 samples, 0.44%)</title><rect x="98.8" y="339.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (64 samples, 0.05%)</title><rect x="99.0" y="323.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.0" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (64 samples, 0.05%)</title><rect x="99.0" y="307.0" width="0.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="102.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (430 samples, 0.37%)</title><rect x="99.7" y="323.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (430 samples, 0.37%)</title><rect x="99.7" y="307.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="102.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (430 samples, 0.37%)</title><rect x="99.7" y="291.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.7" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (430 samples, 0.37%)</title><rect x="99.7" y="275.0" width="4.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="102.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (349 samples, 0.30%)</title><rect x="104.0" y="355.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="107.0" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (57 samples, 0.05%)</title><rect x="104.0" y="339.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.0" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (57 samples, 0.05%)</title><rect x="104.0" y="323.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="107.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (233 samples, 0.20%)</title><rect x="104.6" y="339.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.6" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (35 samples, 0.03%)</title><rect x="104.6" y="323.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="107.6" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (198 samples, 0.17%)</title><rect x="105.0" y="323.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.0" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (52 samples, 0.04%)</title><rect x="105.0" y="307.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="108.0" y="318.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (65 samples, 0.06%)</title><rect x="105.7" y="307.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="108.7" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (61 samples, 0.05%)</title><rect x="106.4" y="307.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.4" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (61 samples, 0.05%)</title><rect x="106.4" y="291.0" width="0.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="109.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (59 samples, 0.05%)</title><rect x="107.0" y="339.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.0" y="350.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (59 samples, 0.05%)</title><rect x="107.0" y="323.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="110.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.iterator (42,128 samples, 36.15%)</title><rect x="107.6" y="371.0" width="426.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.6" y="382.0">ru/mail/polis/dao/igorlo/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.SSTable$SSTableIterator (327 samples, 0.28%)</title><rect x="107.6" y="355.0" width="3.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="110.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt; (41,801 samples, 35.87%)</title><rect x="110.9" y="355.0" width="423.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.9" y="366.0">ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.position (41,801 samples, 35.87%)</title><rect x="110.9" y="339.0" width="423.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.9" y="350.0">ru/mail/polis/dao/igorlo/SSTable.position</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (20,837 samples, 17.88%)</title><rect x="110.9" y="323.0" width="211.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="113.9" y="334.0">ru/mail/polis/dao/igorlo/SST..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10,429 samples, 8.95%)</title><rect x="110.9" y="307.0" width="105.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.9" y="318.0">java/nio/Dire..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10,429 samples, 8.95%)</title><rect x="110.9" y="291.0" width="105.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="113.9" y="302.0">java/nio/Dire..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (10,428 samples, 8.95%)</title><rect x="110.9" y="275.0" width="105.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="113.9" y="286.0">java.nio.Dire..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (10,408 samples, 8.93%)</title><rect x="216.5" y="307.0" width="105.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.5" y="318.0">java/nio/Dire..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (10,405 samples, 8.93%)</title><rect x="216.5" y="291.0" width="105.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="219.5" y="302.0">java.nio.Dire..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (20,964 samples, 17.99%)</title><rect x="321.9" y="323.0" width="212.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.9" y="334.0">ru/mail/polis/dao/igorlo/SST..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10,355 samples, 8.89%)</title><rect x="321.9" y="307.0" width="104.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.9" y="318.0">java/nio/Dir..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10,355 samples, 8.89%)</title><rect x="321.9" y="291.0" width="104.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.9" y="302.0">java/nio/Dir..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (10,350 samples, 8.88%)</title><rect x="321.9" y="275.0" width="104.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="324.9" y="286.0">java.nio.Dir..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (10,609 samples, 9.10%)</title><rect x="426.7" y="307.0" width="107.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="429.7" y="318.0">java/nio/Dire..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (10,607 samples, 9.10%)</title><rect x="426.7" y="291.0" width="107.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="429.7" y="302.0">java.nio.Dire..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (8,818 samples, 7.57%)</title><rect x="534.2" y="387.0" width="89.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="537.2" y="398.0">ru/mail/po..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (57 samples, 0.05%)</title><rect x="534.2" y="371.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="537.2" y="382.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (57 samples, 0.05%)</title><rect x="534.2" y="355.0" width="0.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="537.2" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (7,018 samples, 6.02%)</title><rect x="534.8" y="371.0" width="71.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="537.8" y="382.0">com/goog..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (45 samples, 0.04%)</title><rect x="534.8" y="355.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="537.8" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (6,973 samples, 5.98%)</title><rect x="535.2" y="355.0" width="70.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="538.2" y="366.0">com/goog..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (41 samples, 0.04%)</title><rect x="535.2" y="339.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="538.2" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (61 samples, 0.05%)</title><rect x="535.6" y="339.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="538.6" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (61 samples, 0.05%)</title><rect x="535.6" y="323.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="538.6" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (61 samples, 0.05%)</title><rect x="535.6" y="307.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="538.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (61 samples, 0.05%)</title><rect x="535.6" y="291.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="538.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$65/910428674.apply (61 samples, 0.05%)</title><rect x="535.6" y="275.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="538.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (61 samples, 0.05%)</title><rect x="535.6" y="259.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="538.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (61 samples, 0.05%)</title><rect x="535.6" y="243.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="538.6" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (61 samples, 0.05%)</title><rect x="535.6" y="227.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="538.6" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (275 samples, 0.24%)</title><rect x="536.2" y="339.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="539.2" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (275 samples, 0.24%)</title><rect x="536.2" y="323.0" width="2.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="539.2" y="334.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (82 samples, 0.07%)</title><rect x="539.0" y="339.0" width="0.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="542.0" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (45 samples, 0.04%)</title><rect x="539.9" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.9" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (45 samples, 0.04%)</title><rect x="539.9" y="323.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="542.9" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (6,469 samples, 5.55%)</title><rect x="540.3" y="339.0" width="65.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.3" y="350.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (6,469 samples, 5.55%)</title><rect x="540.3" y="323.0" width="65.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.3" y="334.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (78 samples, 0.07%)</title><rect x="540.3" y="307.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.3" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (78 samples, 0.07%)</title><rect x="540.3" y="291.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.3" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (78 samples, 0.07%)</title><rect x="540.3" y="275.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="543.3" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (6,391 samples, 5.48%)</title><rect x="541.1" y="307.0" width="64.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="544.1" y="318.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (6,391 samples, 5.48%)</title><rect x="541.1" y="291.0" width="64.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="544.1" y="302.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6,391 samples, 5.48%)</title><rect x="541.1" y="275.0" width="64.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.1" y="286.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6,391 samples, 5.48%)</title><rect x="541.1" y="259.0" width="64.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.1" y="270.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4,970 samples, 4.27%)</title><rect x="541.1" y="243.0" width="50.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="544.1" y="254.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (4,970 samples, 4.27%)</title><rect x="541.1" y="227.0" width="50.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="544.1" y="238.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (4,970 samples, 4.27%)</title><rect x="541.1" y="211.0" width="50.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="544.1" y="222.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (4,970 samples, 4.27%)</title><rect x="541.1" y="195.0" width="50.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="544.1" y="206.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (1,359 samples, 1.17%)</title><rect x="541.1" y="179.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.1" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (631 samples, 0.54%)</title><rect x="541.1" y="163.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.1" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (631 samples, 0.54%)</title><rect x="541.1" y="147.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="544.1" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (629 samples, 0.54%)</title><rect x="541.1" y="131.0" width="6.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="544.1" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (728 samples, 0.62%)</title><rect x="547.5" y="163.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="550.5" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (726 samples, 0.62%)</title><rect x="547.5" y="147.0" width="7.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="550.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (1,363 samples, 1.17%)</title><rect x="554.9" y="179.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="557.9" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (714 samples, 0.61%)</title><rect x="554.9" y="163.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="557.9" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (714 samples, 0.61%)</title><rect x="554.9" y="147.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.9" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (712 samples, 0.61%)</title><rect x="554.9" y="131.0" width="7.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="557.9" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (649 samples, 0.56%)</title><rect x="562.1" y="163.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="565.1" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (648 samples, 0.56%)</title><rect x="562.1" y="147.0" width="6.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="565.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (686 samples, 0.59%)</title><rect x="568.7" y="179.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="571.7" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (686 samples, 0.59%)</title><rect x="568.7" y="163.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="571.7" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (686 samples, 0.59%)</title><rect x="568.7" y="147.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.7" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (685 samples, 0.59%)</title><rect x="568.7" y="131.0" width="6.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="571.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (1,004 samples, 0.86%)</title><rect x="575.6" y="179.0" width="10.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="578.6" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (510 samples, 0.44%)</title><rect x="575.6" y="163.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (510 samples, 0.44%)</title><rect x="575.6" y="147.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="578.6" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (509 samples, 0.44%)</title><rect x="575.6" y="131.0" width="5.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="578.6" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (494 samples, 0.42%)</title><rect x="580.8" y="163.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="583.8" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (494 samples, 0.42%)</title><rect x="580.8" y="147.0" width="5.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="583.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (340 samples, 0.29%)</title><rect x="585.8" y="179.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.8" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (340 samples, 0.29%)</title><rect x="585.8" y="163.0" width="3.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="588.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (162 samples, 0.14%)</title><rect x="589.2" y="179.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="592.2" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (162 samples, 0.14%)</title><rect x="589.2" y="163.0" width="1.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="592.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (56 samples, 0.05%)</title><rect x="590.9" y="179.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.9" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (56 samples, 0.05%)</title><rect x="590.9" y="163.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="593.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (1,421 samples, 1.22%)</title><rect x="591.4" y="243.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,421 samples, 1.22%)</title><rect x="591.4" y="227.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="594.4" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (1,421 samples, 1.22%)</title><rect x="591.4" y="211.0" width="14.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="594.4" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,421 samples, 1.22%)</title><rect x="591.4" y="195.0" width="14.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="594.4" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (1,421 samples, 1.22%)</title><rect x="591.4" y="179.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="594.4" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,421 samples, 1.22%)</title><rect x="591.4" y="163.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="594.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (1,421 samples, 1.22%)</title><rect x="591.4" y="147.0" width="14.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="594.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,421 samples, 1.22%)</title><rect x="591.4" y="131.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="594.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/1411168072.apply (1,421 samples, 1.22%)</title><rect x="591.4" y="115.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="594.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (1,421 samples, 1.22%)</title><rect x="591.4" y="99.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.4" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,320 samples, 1.13%)</title><rect x="591.4" y="83.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.4" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,320 samples, 1.13%)</title><rect x="591.4" y="67.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="594.4" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,314 samples, 1.13%)</title><rect x="591.4" y="51.0" width="13.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="594.4" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (101 samples, 0.09%)</title><rect x="604.8" y="83.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="607.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (101 samples, 0.09%)</title><rect x="604.8" y="67.0" width="1.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="607.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,743 samples, 1.50%)</title><rect x="605.8" y="371.0" width="17.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="608.8" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (49 samples, 0.04%)</title><rect x="605.8" y="355.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="608.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1,694 samples, 1.45%)</title><rect x="606.3" y="355.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="609.3" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,694 samples, 1.45%)</title><rect x="606.3" y="339.0" width="17.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.3" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (51 samples, 0.04%)</title><rect x="606.3" y="323.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="609.3" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (51 samples, 0.04%)</title><rect x="606.3" y="307.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.3" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (51 samples, 0.04%)</title><rect x="606.3" y="291.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="609.3" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (51 samples, 0.04%)</title><rect x="606.3" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="609.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (51 samples, 0.04%)</title><rect x="606.3" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$65/910428674.apply (51 samples, 0.04%)</title><rect x="606.3" y="243.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (51 samples, 0.04%)</title><rect x="606.3" y="227.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="609.3" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (51 samples, 0.04%)</title><rect x="606.3" y="211.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.3" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (51 samples, 0.04%)</title><rect x="606.3" y="195.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="609.3" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (605 samples, 0.52%)</title><rect x="606.8" y="323.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.8" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (605 samples, 0.52%)</title><rect x="606.8" y="307.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.8" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (605 samples, 0.52%)</title><rect x="606.8" y="291.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.8" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (605 samples, 0.52%)</title><rect x="606.8" y="275.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="609.8" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (605 samples, 0.52%)</title><rect x="606.8" y="259.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (605 samples, 0.52%)</title><rect x="606.8" y="243.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (605 samples, 0.52%)</title><rect x="606.8" y="227.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="609.8" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (605 samples, 0.52%)</title><rect x="606.8" y="211.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.8" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (605 samples, 0.52%)</title><rect x="606.8" y="195.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.8" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (605 samples, 0.52%)</title><rect x="606.8" y="179.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="609.8" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (605 samples, 0.52%)</title><rect x="606.8" y="163.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.8" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (605 samples, 0.52%)</title><rect x="606.8" y="147.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.8" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (605 samples, 0.52%)</title><rect x="606.8" y="131.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/1411168072.apply (605 samples, 0.52%)</title><rect x="606.8" y="115.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (605 samples, 0.52%)</title><rect x="606.8" y="99.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.8" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (596 samples, 0.51%)</title><rect x="606.8" y="83.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.8" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (596 samples, 0.51%)</title><rect x="606.8" y="67.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.8" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (594 samples, 0.51%)</title><rect x="606.8" y="51.0" width="6.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="609.8" y="62.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,038 samples, 0.89%)</title><rect x="613.0" y="323.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="616.0" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,038 samples, 0.89%)</title><rect x="613.0" y="307.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.0" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,038 samples, 0.89%)</title><rect x="613.0" y="291.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="616.0" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,038 samples, 0.89%)</title><rect x="613.0" y="275.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.0" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,038 samples, 0.89%)</title><rect x="613.0" y="259.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="616.0" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,038 samples, 0.89%)</title><rect x="613.0" y="243.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="616.0" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (719 samples, 0.62%)</title><rect x="613.0" y="227.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (719 samples, 0.62%)</title><rect x="613.0" y="211.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (719 samples, 0.62%)</title><rect x="613.0" y="195.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="616.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (719 samples, 0.62%)</title><rect x="613.0" y="179.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (175 samples, 0.15%)</title><rect x="613.0" y="163.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="616.0" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (95 samples, 0.08%)</title><rect x="613.0" y="147.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="616.0" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (95 samples, 0.08%)</title><rect x="613.0" y="131.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.0" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (95 samples, 0.08%)</title><rect x="613.0" y="115.0" width="0.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="616.0" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (80 samples, 0.07%)</title><rect x="613.9" y="147.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="616.9" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (80 samples, 0.07%)</title><rect x="613.9" y="131.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="616.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (194 samples, 0.17%)</title><rect x="614.7" y="163.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="617.7" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (94 samples, 0.08%)</title><rect x="614.7" y="147.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="617.7" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (94 samples, 0.08%)</title><rect x="614.7" y="131.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.7" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (94 samples, 0.08%)</title><rect x="614.7" y="115.0" width="1.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="617.7" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (100 samples, 0.09%)</title><rect x="615.7" y="147.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="618.7" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (99 samples, 0.08%)</title><rect x="615.7" y="131.0" width="1.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="618.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (91 samples, 0.08%)</title><rect x="616.7" y="163.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="619.7" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (91 samples, 0.08%)</title><rect x="616.7" y="147.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="619.7" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (91 samples, 0.08%)</title><rect x="616.7" y="131.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="619.7" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (91 samples, 0.08%)</title><rect x="616.7" y="115.0" width="0.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="619.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (190 samples, 0.16%)</title><rect x="617.6" y="163.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (96 samples, 0.08%)</title><rect x="617.6" y="147.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="620.6" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (96 samples, 0.08%)</title><rect x="617.6" y="131.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="620.6" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (96 samples, 0.08%)</title><rect x="617.6" y="115.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="620.6" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (94 samples, 0.08%)</title><rect x="618.6" y="147.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.6" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (94 samples, 0.08%)</title><rect x="618.6" y="131.0" width="0.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="621.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (37 samples, 0.03%)</title><rect x="619.5" y="163.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.5" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (37 samples, 0.03%)</title><rect x="619.5" y="147.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="622.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (32 samples, 0.03%)</title><rect x="619.9" y="163.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="622.9" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (32 samples, 0.03%)</title><rect x="619.9" y="147.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="622.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$64/512468880.compare (319 samples, 0.27%)</title><rect x="620.2" y="227.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (319 samples, 0.27%)</title><rect x="620.2" y="211.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.2" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (319 samples, 0.27%)</title><rect x="620.2" y="195.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="623.2" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (319 samples, 0.27%)</title><rect x="620.2" y="179.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$82/1677646318.compare (319 samples, 0.27%)</title><rect x="620.2" y="163.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (319 samples, 0.27%)</title><rect x="620.2" y="147.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="623.2" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1598427566.compare (319 samples, 0.27%)</title><rect x="620.2" y="131.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="623.2" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (319 samples, 0.27%)</title><rect x="620.2" y="115.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/1411168072.apply (319 samples, 0.27%)</title><rect x="620.2" y="99.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="623.2" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (319 samples, 0.27%)</title><rect x="620.2" y="83.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.2" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (276 samples, 0.24%)</title><rect x="620.2" y="67.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.2" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (276 samples, 0.24%)</title><rect x="620.2" y="51.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.2" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (276 samples, 0.24%)</title><rect x="620.2" y="35.0" width="2.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="623.2" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (43 samples, 0.04%)</title><rect x="623.0" y="67.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="626.0" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (43 samples, 0.04%)</title><rect x="623.0" y="51.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="626.0" y="62.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (55,938 samples, 48.01%)</title><rect x="623.5" y="563.0" width="566.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.5" y="574.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (3,102 samples, 2.66%)</title><rect x="623.5" y="547.0" width="31.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="626.5" y="558.0">on..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (3,102 samples, 2.66%)</title><rect x="623.5" y="531.0" width="31.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="626.5" y="542.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.process (52,836 samples, 45.34%)</title><rect x="655.0" y="547.0" width="535.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.0" y="558.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (52,836 samples, 45.34%)</title><rect x="655.0" y="531.0" width="535.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.0" y="542.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (52,836 samples, 45.34%)</title><rect x="655.0" y="515.0" width="535.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="658.0" y="526.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (21,356 samples, 18.33%)</title><rect x="655.0" y="499.0" width="216.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="658.0" y="510.0">one/nio/http/HttpSession.han..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (21,356 samples, 18.33%)</title><rect x="655.0" y="483.0" width="216.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="658.0" y="494.0">one/nio/http/HttpServer.hand..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (16,014 samples, 13.74%)</title><rect x="655.0" y="467.0" width="162.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.0" y="478.0">RequestHandler0_entit..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3,848 samples, 3.30%)</title><rect x="655.0" y="451.0" width="38.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="658.0" y="462.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (3,848 samples, 3.30%)</title><rect x="655.0" y="435.0" width="38.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="658.0" y="446.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,848 samples, 3.30%)</title><rect x="655.0" y="419.0" width="38.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="658.0" y="430.0">jav..</text>
</g>
<g>
<title>java.lang.String (1,265 samples, 1.09%)</title><rect x="655.0" y="403.0" width="12.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="658.0" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,583 samples, 2.22%)</title><rect x="667.8" y="403.0" width="26.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="670.8" y="414.0">j..</text>
</g>
<g>
<title>byte[] (2,583 samples, 2.22%)</title><rect x="667.8" y="387.0" width="26.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="670.8" y="398.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (12,166 samples, 10.44%)</title><rect x="693.9" y="451.0" width="123.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="696.9" y="462.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/lang/String.getBytes (2,602 samples, 2.23%)</title><rect x="693.9" y="435.0" width="26.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="696.9" y="446.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (2,602 samples, 2.23%)</title><rect x="693.9" y="419.0" width="26.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="696.9" y="430.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2,602 samples, 2.23%)</title><rect x="693.9" y="403.0" width="26.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="696.9" y="414.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (2,602 samples, 2.23%)</title><rect x="693.9" y="387.0" width="26.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="696.9" y="398.0">j..</text>
</g>
<g>
<title>byte[] (2,602 samples, 2.23%)</title><rect x="693.9" y="371.0" width="26.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="696.9" y="382.0">b..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,138 samples, 1.83%)</title><rect x="720.3" y="435.0" width="21.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="723.3" y="446.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,138 samples, 1.83%)</title><rect x="720.3" y="419.0" width="21.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.3" y="430.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/489482817.get$Lambda (2,138 samples, 1.83%)</title><rect x="720.3" y="403.0" width="21.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.3" y="414.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.igorlo.AsyncService$$Lambda$61 (2,138 samples, 1.83%)</title><rect x="720.3" y="387.0" width="21.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="723.3" y="398.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,600 samples, 3.09%)</title><rect x="741.9" y="435.0" width="36.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="744.9" y="446.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,600 samples, 3.09%)</title><rect x="741.9" y="419.0" width="36.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="744.9" y="430.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,600 samples, 3.09%)</title><rect x="741.9" y="403.0" width="36.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="744.9" y="414.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (3,826 samples, 3.28%)</title><rect x="778.4" y="435.0" width="38.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="781.4" y="446.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,879 samples, 1.61%)</title><rect x="778.4" y="419.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.4" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,879 samples, 1.61%)</title><rect x="778.4" y="403.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="781.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.get$Lambda (1,879 samples, 1.61%)</title><rect x="778.4" y="387.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="781.4" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.service.igorlo.AsyncService$$Lambda$62 (1,879 samples, 1.61%)</title><rect x="778.4" y="371.0" width="19.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="781.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1,947 samples, 1.67%)</title><rect x="797.4" y="419.0" width="19.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1,947 samples, 1.67%)</title><rect x="797.4" y="403.0" width="19.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="800.4" y="414.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (1,917 samples, 1.65%)</title><rect x="797.4" y="387.0" width="19.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="800.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5,342 samples, 4.58%)</title><rect x="817.1" y="467.0" width="54.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="820.1" y="478.0">one/n..</text>
</g>
<g>
<title>java/lang/String.substring (5,342 samples, 4.58%)</title><rect x="817.1" y="451.0" width="54.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="820.1" y="462.0">java/..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5,342 samples, 4.58%)</title><rect x="817.1" y="435.0" width="54.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="820.1" y="446.0">java/..</text>
</g>
<g>
<title>java.lang.String (2,109 samples, 1.81%)</title><rect x="817.1" y="419.0" width="21.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="820.1" y="430.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,233 samples, 2.77%)</title><rect x="838.5" y="419.0" width="32.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="841.5" y="430.0">ja..</text>
</g>
<g>
<title>byte[] (3,233 samples, 2.77%)</title><rect x="838.5" y="403.0" width="32.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="841.5" y="414.0">by..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21,394 samples, 18.36%)</title><rect x="871.2" y="499.0" width="216.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="874.2" y="510.0">one/nio/http/HttpSession.par..</text>
</g>
<g>
<title>one.nio.http.Request (3,605 samples, 3.09%)</title><rect x="871.2" y="483.0" width="36.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="874.2" y="494.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6,805 samples, 5.84%)</title><rect x="907.7" y="483.0" width="68.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="910.7" y="494.0">one/nio..</text>
</g>
<g>
<title>java.lang.String[] (6,802 samples, 5.84%)</title><rect x="907.7" y="467.0" width="68.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="910.7" y="478.0">java.la..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,984 samples, 9.43%)</title><rect x="976.6" y="483.0" width="111.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="979.6" y="494.0">one/nio/util/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,984 samples, 9.43%)</title><rect x="976.6" y="467.0" width="111.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="979.6" y="478.0">one/nio/util/..</text>
</g>
<g>
<title>char[] (5,293 samples, 4.54%)</title><rect x="976.6" y="451.0" width="53.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="979.6" y="462.0">char[]</text>
</g>
<g>
<title>java.lang.String (2,058 samples, 1.77%)</title><rect x="1030.2" y="451.0" width="20.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1033.2" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,633 samples, 3.12%)</title><rect x="1051.1" y="451.0" width="36.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1054.1" y="462.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,633 samples, 3.12%)</title><rect x="1051.1" y="435.0" width="36.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1054.1" y="446.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3,633 samples, 3.12%)</title><rect x="1051.1" y="419.0" width="36.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.1" y="430.0">jav..</text>
</g>
<g>
<title>byte[] (3,633 samples, 3.12%)</title><rect x="1051.1" y="403.0" width="36.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1054.1" y="414.0">byt..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,086 samples, 8.66%)</title><rect x="1087.9" y="499.0" width="102.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1090.9" y="510.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,086 samples, 8.66%)</title><rect x="1087.9" y="483.0" width="102.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1090.9" y="494.0">one/nio/util..</text>
</g>
<g>
<title>char[] (4,558 samples, 3.91%)</title><rect x="1087.9" y="467.0" width="46.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1090.9" y="478.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,873 samples, 1.61%)</title><rect x="1134.0" y="467.0" width="19.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1137.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,655 samples, 3.14%)</title><rect x="1153.0" y="467.0" width="37.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1156.0" y="478.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,655 samples, 3.14%)</title><rect x="1153.0" y="451.0" width="37.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1156.0" y="462.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3,655 samples, 3.14%)</title><rect x="1153.0" y="435.0" width="37.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1156.0" y="446.0">jav..</text>
</g>
<g>
<title>byte[] (3,655 samples, 3.14%)</title><rect x="1153.0" y="419.0" width="37.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1156.0" y="430.0">byt..</text>
</g>
</g>
</svg>
