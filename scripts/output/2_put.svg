<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1557"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1557"> </text>
<g id="frames">
<g>
<title>all (1,505 samples, 100.00%)</title><rect x="10.0" y="1523.0" width="1180.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="1534.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.13%)</title><rect x="10.8" y="1507.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.13%)</title><rect x="10.8" y="1491.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.13%)</title><rect x="10.8" y="1475.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="1486.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.13%)</title><rect x="10.8" y="1459.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1470.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.13%)</title><rect x="10.8" y="1443.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="1454.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.13%)</title><rect x="10.8" y="1427.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.8" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.07%)</title><rect x="10.8" y="1411.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.07%)</title><rect x="10.8" y="1395.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="1406.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="10.8" y="1379.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1390.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="10.8" y="1363.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="1374.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="11.6" y="1411.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.6" y="1422.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.07%)</title><rect x="11.6" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.6" y="1406.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.07%)</title><rect x="11.6" y="1379.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.6" y="1390.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.07%)</title><rect x="12.4" y="1507.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.4" y="1518.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.07%)</title><rect x="12.4" y="1491.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.4" y="1502.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.07%)</title><rect x="12.4" y="1475.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.4" y="1486.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle const&amp;, int, CompLevel, JavaThread*) [clone .part.147] (1 samples, 0.07%)</title><rect x="12.4" y="1459.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.4" y="1470.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.07%)</title><rect x="12.4" y="1443.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.4" y="1454.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.07%)</title><rect x="12.4" y="1427.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.4" y="1438.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.07%)</title><rect x="12.4" y="1411.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.4" y="1422.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.07%)</title><rect x="12.4" y="1395.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.4" y="1406.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (15 samples, 1.00%)</title><rect x="13.1" y="1507.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.1" y="1518.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.07%)</title><rect x="13.1" y="1491.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.1" y="1502.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="13.9" y="1491.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="16.9" y="1502.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (13 samples, 0.86%)</title><rect x="14.7" y="1491.0" width="10.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.7" y="1502.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="15.5" y="1475.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="18.5" y="1486.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="15.5" y="1459.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.5" y="1470.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (5 samples, 0.33%)</title><rect x="16.3" y="1475.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.3" y="1486.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.13%)</title><rect x="17.1" y="1459.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="20.1" y="1470.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.07%)</title><rect x="18.6" y="1459.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="21.6" y="1470.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.07%)</title><rect x="19.4" y="1459.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="22.4" y="1470.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.27%)</title><rect x="20.2" y="1475.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="23.2" y="1486.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="23.3" y="1475.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="26.3" y="1486.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="24.1" y="1475.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="27.1" y="1486.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.07%)</title><rect x="24.9" y="1507.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="27.9" y="1518.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.07%)</title><rect x="25.7" y="1507.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="28.7" y="1518.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.07%)</title><rect x="25.7" y="1491.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="28.7" y="1502.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="26.5" y="1507.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="29.5" y="1518.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1491.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="29.5" y="1502.0"></text>
</g>
<g>
<title>__fxstat64 (1 samples, 0.07%)</title><rect x="26.5" y="1475.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="29.5" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1459.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="29.5" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1443.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="29.5" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1427.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="29.5" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1411.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="29.5" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1395.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="29.5" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1379.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="29.5" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1363.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="29.5" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1347.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="29.5" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1331.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="29.5" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1315.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="29.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1299.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="29.5" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1283.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="29.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1267.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="29.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="26.5" y="1251.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="29.5" y="1262.0"></text>
</g>
<g>
<title>__GI___open64 (1 samples, 0.07%)</title><rect x="27.2" y="1491.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="30.2" y="1502.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1475.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="30.2" y="1486.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1459.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="30.2" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1443.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="30.2" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1427.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="30.2" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1411.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="30.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1395.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="30.2" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1379.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="30.2" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1363.0" width="0.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="30.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1347.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="30.2" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="27.2" y="1331.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="30.2" y="1342.0"></text>
</g>
<g>
<title>[unknown_Java] (16 samples, 1.06%)</title><rect x="28.0" y="1507.0" width="12.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="31.0" y="1518.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="35.9" y="1491.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="38.9" y="1502.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="35.9" y="1475.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="38.9" y="1486.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (5 samples, 0.33%)</title><rect x="36.7" y="1491.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="39.7" y="1502.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="38.2" y="1475.0" width="2.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="41.2" y="1486.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="38.2" y="1459.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="41.2" y="1470.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="39.0" y="1443.0" width="1.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="42.0" y="1454.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="39.0" y="1427.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="42.0" y="1438.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="39.0" y="1411.0" width="1.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="42.0" y="1422.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="39.0" y="1395.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="42.0" y="1406.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="39.0" y="1379.0" width="1.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="42.0" y="1390.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="39.0" y="1363.0" width="1.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="42.0" y="1374.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (3 samples, 0.20%)</title><rect x="40.6" y="1507.0" width="2.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="43.6" y="1518.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="40.6" y="1491.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="43.6" y="1502.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="40.6" y="1475.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="43.6" y="1486.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="41.4" y="1459.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="44.4" y="1470.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="42.1" y="1443.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="45.1" y="1454.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="42.1" y="1427.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="45.1" y="1438.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="42.1" y="1411.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="45.1" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="42.1" y="1395.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="45.1" y="1406.0"></text>
</g>
<g>
<title>java/lang/Thread.run (779 samples, 51.76%)</title><rect x="42.9" y="1507.0" width="610.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.9" y="1518.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (779 samples, 51.76%)</title><rect x="42.9" y="1491.0" width="610.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.9" y="1502.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (779 samples, 51.76%)</title><rect x="42.9" y="1475.0" width="610.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="45.9" y="1486.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.13%)</title><rect x="46.1" y="1459.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.1" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.13%)</title><rect x="46.1" y="1443.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="49.1" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.13%)</title><rect x="46.1" y="1427.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.13%)</title><rect x="46.1" y="1411.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.13%)</title><rect x="46.1" y="1395.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.1" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.13%)</title><rect x="46.1" y="1379.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.07%)</title><rect x="47.6" y="1459.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.6" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="47.6" y="1443.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.6" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.07%)</title><rect x="47.6" y="1427.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.6" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="47.6" y="1411.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.6" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (186 samples, 12.36%)</title><rect x="48.4" y="1459.0" width="145.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.4" y="1470.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (185 samples, 12.29%)</title><rect x="49.2" y="1443.0" width="145.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.2" y="1454.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (1 samples, 0.07%)</title><rect x="49.2" y="1427.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (144 samples, 9.57%)</title><rect x="50.0" y="1427.0" width="112.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.0" y="1438.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (11 samples, 0.73%)</title><rect x="53.1" y="1411.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.1" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (4 samples, 0.27%)</title><rect x="58.6" y="1395.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="58.6" y="1379.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (3 samples, 0.20%)</title><rect x="59.4" y="1379.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.4" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.53%)</title><rect x="61.7" y="1411.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.7" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.47%)</title><rect x="62.5" y="1395.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.5" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.47%)</title><rect x="62.5" y="1379.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.13%)</title><rect x="66.5" y="1363.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.5" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.13%)</title><rect x="66.5" y="1347.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.5" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.13%)</title><rect x="66.5" y="1331.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.80%)</title><rect x="68.0" y="1411.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.0" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.66%)</title><rect x="69.6" y="1395.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.66%)</title><rect x="69.6" y="1379.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.13%)</title><rect x="71.2" y="1363.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.13%)</title><rect x="71.2" y="1347.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.2" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.13%)</title><rect x="71.2" y="1331.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.40%)</title><rect x="72.7" y="1363.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.7" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.40%)</title><rect x="72.7" y="1347.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.7" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.13%)</title><rect x="72.7" y="1331.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="75.7" y="1342.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.13%)</title><rect x="72.7" y="1315.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="75.7" y="1326.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (4 samples, 0.27%)</title><rect x="74.3" y="1331.0" width="3.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="77.3" y="1342.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.27%)</title><rect x="74.3" y="1315.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="77.3" y="1326.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.27%)</title><rect x="74.3" y="1299.0" width="3.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="77.3" y="1310.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="75.9" y="1283.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="78.9" y="1294.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="75.9" y="1267.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="78.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="75.9" y="1251.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="78.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="75.9" y="1235.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="78.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="75.9" y="1219.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="78.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="75.9" y="1203.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="78.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (108 samples, 7.18%)</title><rect x="77.4" y="1411.0" width="84.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.4" y="1422.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (108 samples, 7.18%)</title><rect x="77.4" y="1395.0" width="84.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.4" y="1406.0">jdk/intern..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.07%)</title><rect x="79.0" y="1379.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="82.0" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.13%)</title><rect x="79.8" y="1379.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="82.8" y="1390.0"></text>
</g>
<g>
<title>Unsafe_Park (46 samples, 3.06%)</title><rect x="81.3" y="1379.0" width="36.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="84.3" y="1390.0">Uns..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.07%)</title><rect x="85.3" y="1363.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="88.3" y="1374.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="86.1" y="1363.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="89.1" y="1374.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.66%)</title><rect x="86.8" y="1363.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="89.8" y="1374.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="90.8" y="1347.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="93.8" y="1358.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="91.5" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="94.5" y="1358.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.20%)</title><rect x="92.3" y="1347.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="95.3" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.07%)</title><rect x="94.7" y="1363.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="97.7" y="1374.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.13%)</title><rect x="95.5" y="1363.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="98.5" y="1374.0"></text>
</g>
<g>
<title>__lll_unlock_wake (16 samples, 1.06%)</title><rect x="97.0" y="1363.0" width="12.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="100.0" y="1374.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.73%)</title><rect x="101.0" y="1347.0" width="8.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="104.0" y="1358.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.73%)</title><rect x="101.0" y="1331.0" width="8.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="104.0" y="1342.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.40%)</title><rect x="104.9" y="1315.0" width="4.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="107.9" y="1326.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.40%)</title><rect x="104.9" y="1299.0" width="4.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="107.9" y="1310.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.33%)</title><rect x="105.7" y="1283.0" width="3.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="108.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.27%)</title><rect x="106.4" y="1267.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="109.4" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="108.0" y="1251.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="111.0" y="1262.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.07%)</title><rect x="109.6" y="1363.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="112.6" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="110.4" y="1363.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="113.4" y="1374.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="111.1" y="1363.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="114.1" y="1374.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="111.9" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="114.9" y="1374.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="112.7" y="1363.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="115.7" y="1374.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.33%)</title><rect x="113.5" y="1363.0" width="3.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="116.5" y="1374.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 3.52%)</title><rect x="117.4" y="1379.0" width="41.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="120.4" y="1390.0">[un..</text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.07%)</title><rect x="117.4" y="1363.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="120.4" y="1374.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.07%)</title><rect x="118.2" y="1363.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="121.2" y="1374.0"></text>
</g>
<g>
<title>__pthread_cond_wait (45 samples, 2.99%)</title><rect x="119.0" y="1363.0" width="35.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="122.0" y="1374.0">__p..</text>
</g>
<g>
<title>[unknown] (24 samples, 1.59%)</title><rect x="135.4" y="1347.0" width="18.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="138.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 1.59%)</title><rect x="135.4" y="1331.0" width="18.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="138.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.26%)</title><rect x="139.4" y="1315.0" width="14.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="142.4" y="1326.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.26%)</title><rect x="139.4" y="1299.0" width="14.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="142.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.26%)</title><rect x="139.4" y="1283.0" width="14.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="142.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 1.13%)</title><rect x="140.9" y="1267.0" width="13.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="143.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.86%)</title><rect x="144.1" y="1251.0" width="10.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="147.1" y="1262.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.66%)</title><rect x="146.4" y="1235.0" width="7.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="149.4" y="1246.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.66%)</title><rect x="146.4" y="1219.0" width="7.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="149.4" y="1230.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="151.9" y="1203.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="154.9" y="1214.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="151.9" y="1187.0" width="2.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="154.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="151.9" y="1171.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="154.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="151.9" y="1155.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="154.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="152.7" y="1139.0" width="1.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="155.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="152.7" y="1123.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="155.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="153.5" y="1107.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="156.5" y="1118.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="154.3" y="1363.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="157.3" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.20%)</title><rect x="155.0" y="1363.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="158.0" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="157.4" y="1363.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="160.4" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="158.2" y="1363.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="161.2" y="1374.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.20%)</title><rect x="159.0" y="1379.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="162.0" y="1390.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="161.3" y="1379.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="164.3" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="162.1" y="1411.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="165.1" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (10 samples, 0.66%)</title><rect x="162.9" y="1427.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (10 samples, 0.66%)</title><rect x="162.9" y="1411.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.13%)</title><rect x="164.5" y="1395.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.5" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.13%)</title><rect x="164.5" y="1379.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="167.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.13%)</title><rect x="164.5" y="1363.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.5" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.13%)</title><rect x="164.5" y="1347.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.5" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.07%)</title><rect x="164.5" y="1331.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="167.5" y="1342.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.07%)</title><rect x="164.5" y="1315.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="167.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="165.2" y="1331.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="168.2" y="1342.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="165.2" y="1315.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="168.2" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.40%)</title><rect x="166.0" y="1395.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="169.0" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.40%)</title><rect x="166.0" y="1379.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="169.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.20%)</title><rect x="167.6" y="1363.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.6" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.13%)</title><rect x="167.6" y="1347.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="169.2" y="1347.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="169.9" y="1363.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.07%)</title><rect x="169.9" y="1347.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.07%)</title><rect x="169.9" y="1331.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="172.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 1.99%)</title><rect x="170.7" y="1427.0" width="23.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.7" y="1438.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 1.99%)</title><rect x="170.7" y="1411.0" width="23.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.7" y="1422.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 1.99%)</title><rect x="170.7" y="1395.0" width="23.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.7" y="1406.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 1.99%)</title><rect x="170.7" y="1379.0" width="23.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.7" y="1390.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (30 samples, 1.99%)</title><rect x="170.7" y="1363.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.7" y="1374.0">j..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="171.5" y="1347.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="174.5" y="1358.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.07%)</title><rect x="172.3" y="1347.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="175.3" y="1358.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.07%)</title><rect x="172.3" y="1331.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="175.3" y="1342.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (27 samples, 1.79%)</title><rect x="173.1" y="1347.0" width="21.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="176.1" y="1358.0">p..</text>
</g>
<g>
<title>[unknown] (24 samples, 1.59%)</title><rect x="175.4" y="1331.0" width="18.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="178.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 1.59%)</title><rect x="175.4" y="1315.0" width="18.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="178.4" y="1326.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 1.53%)</title><rect x="176.2" y="1299.0" width="18.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="179.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 1.46%)</title><rect x="177.0" y="1283.0" width="17.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="180.0" y="1294.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 1.46%)</title><rect x="177.0" y="1267.0" width="17.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="180.0" y="1278.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 1.40%)</title><rect x="177.8" y="1251.0" width="16.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="180.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.20%)</title><rect x="180.1" y="1235.0" width="14.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="183.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 1.13%)</title><rect x="180.9" y="1219.0" width="13.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="183.9" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$63/32239911.run (586 samples, 38.94%)</title><rect x="194.3" y="1459.0" width="459.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.3" y="1470.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$63/32239911.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (585 samples, 38.87%)</title><rect x="195.0" y="1443.0" width="458.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.0" y="1454.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (474 samples, 31.50%)</title><rect x="195.8" y="1427.0" width="371.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="198.8" y="1438.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (11 samples, 0.73%)</title><rect x="195.8" y="1411.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.8" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.33%)</title><rect x="200.5" y="1395.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.27%)</title><rect x="201.3" y="1379.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.27%)</title><rect x="201.3" y="1363.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.27%)</title><rect x="201.3" y="1347.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (4 samples, 0.27%)</title><rect x="201.3" y="1331.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.13%)</title><rect x="202.9" y="1315.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.9" y="1326.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (445 samples, 29.57%)</title><rect x="204.4" y="1411.0" width="348.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.4" y="1422.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.80%)</title><rect x="204.4" y="1395.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.4" y="1406.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="207.6" y="1379.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="210.6" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.47%)</title><rect x="208.4" y="1379.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.4" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.40%)</title><rect x="208.4" y="1363.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.13%)</title><rect x="211.5" y="1347.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.5" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.07%)</title><rect x="212.3" y="1331.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.3" y="1342.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.07%)</title><rect x="213.1" y="1363.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.1" y="1374.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.07%)</title><rect x="213.1" y="1347.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.1" y="1358.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.07%)</title><rect x="213.1" y="1331.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.07%)</title><rect x="213.1" y="1315.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.1" y="1326.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (433 samples, 28.77%)</title><rect x="213.9" y="1395.0" width="339.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.9" y="1406.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (433 samples, 28.77%)</title><rect x="213.9" y="1379.0" width="339.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.9" y="1390.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (433 samples, 28.77%)</title><rect x="213.9" y="1363.0" width="339.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.9" y="1374.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (433 samples, 28.77%)</title><rect x="213.9" y="1347.0" width="339.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.9" y="1358.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.13%)</title><rect x="217.0" y="1331.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="220.0" y="1342.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 1.40%)</title><rect x="218.6" y="1331.0" width="16.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="221.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 1.40%)</title><rect x="218.6" y="1315.0" width="16.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="221.6" y="1326.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (16 samples, 1.06%)</title><rect x="218.6" y="1299.0" width="12.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="221.6" y="1310.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.13%)</title><rect x="219.3" y="1283.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="222.3" y="1294.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.07%)</title><rect x="220.9" y="1283.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="223.9" y="1294.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.07%)</title><rect x="221.7" y="1283.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="224.7" y="1294.0"></text>
</g>
<g>
<title>__memmove_ssse3 (4 samples, 0.27%)</title><rect x="222.5" y="1283.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="225.5" y="1294.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.40%)</title><rect x="225.6" y="1283.0" width="4.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="228.6" y="1294.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.07%)</title><rect x="227.2" y="1267.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="230.2" y="1278.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.13%)</title><rect x="228.0" y="1267.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="231.0" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.07%)</title><rect x="229.5" y="1267.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="232.5" y="1278.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.07%)</title><rect x="230.3" y="1283.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="233.3" y="1294.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="231.1" y="1299.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="234.1" y="1310.0"></text>
</g>
<g>
<title>__send (2 samples, 0.13%)</title><rect x="231.9" y="1299.0" width="1.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="234.9" y="1310.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.13%)</title><rect x="233.5" y="1299.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="236.5" y="1310.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.13%)</title><rect x="235.0" y="1331.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="238.0" y="1342.0"></text>
</g>
<g>
<title>__send (404 samples, 26.84%)</title><rect x="236.6" y="1331.0" width="316.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="239.6" y="1342.0">__send</text>
</g>
<g>
<title>[unknown] (398 samples, 26.45%)</title><rect x="241.3" y="1315.0" width="312.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="244.3" y="1326.0">[unknown]</text>
</g>
<g>
<title>[unknown] (398 samples, 26.45%)</title><rect x="241.3" y="1299.0" width="312.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="244.3" y="1310.0">[unknown]</text>
</g>
<g>
<title>[unknown] (391 samples, 25.98%)</title><rect x="246.8" y="1283.0" width="306.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="249.8" y="1294.0">[unknown]</text>
</g>
<g>
<title>[unknown] (390 samples, 25.91%)</title><rect x="247.6" y="1267.0" width="305.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="250.6" y="1278.0">[unknown]</text>
</g>
<g>
<title>[unknown] (386 samples, 25.65%)</title><rect x="250.7" y="1251.0" width="302.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="253.7" y="1262.0">[unknown]</text>
</g>
<g>
<title>[unknown] (380 samples, 25.25%)</title><rect x="255.4" y="1235.0" width="297.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="258.4" y="1246.0">[unknown]</text>
</g>
<g>
<title>[unknown] (377 samples, 25.05%)</title><rect x="257.8" y="1219.0" width="295.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="260.8" y="1230.0">[unknown]</text>
</g>
<g>
<title>[unknown] (373 samples, 24.78%)</title><rect x="260.9" y="1203.0" width="292.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="263.9" y="1214.0">[unknown]</text>
</g>
<g>
<title>[unknown] (357 samples, 23.72%)</title><rect x="273.4" y="1187.0" width="279.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="276.4" y="1198.0">[unknown]</text>
</g>
<g>
<title>[unknown] (337 samples, 22.39%)</title><rect x="289.1" y="1171.0" width="264.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="292.1" y="1182.0">[unknown]</text>
</g>
<g>
<title>[unknown] (323 samples, 21.46%)</title><rect x="300.1" y="1155.0" width="253.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="303.1" y="1166.0">[unknown]</text>
</g>
<g>
<title>[unknown] (301 samples, 20.00%)</title><rect x="317.3" y="1139.0" width="236.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="320.3" y="1150.0">[unknown]</text>
</g>
<g>
<title>[unknown] (278 samples, 18.47%)</title><rect x="335.4" y="1123.0" width="217.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="338.4" y="1134.0">[unknown]</text>
</g>
<g>
<title>[unknown] (269 samples, 17.87%)</title><rect x="342.4" y="1107.0" width="210.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="345.4" y="1118.0">[unknown]</text>
</g>
<g>
<title>[unknown] (257 samples, 17.08%)</title><rect x="351.8" y="1091.0" width="201.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="354.8" y="1102.0">[unknown]</text>
</g>
<g>
<title>[unknown] (252 samples, 16.74%)</title><rect x="355.8" y="1075.0" width="197.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="358.8" y="1086.0">[unknown]</text>
</g>
<g>
<title>[unknown] (247 samples, 16.41%)</title><rect x="359.7" y="1059.0" width="193.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="362.7" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (239 samples, 15.88%)</title><rect x="366.0" y="1043.0" width="187.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="369.0" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (227 samples, 15.08%)</title><rect x="375.4" y="1027.0" width="177.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="378.4" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (209 samples, 13.89%)</title><rect x="389.5" y="1011.0" width="163.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="392.5" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (189 samples, 12.56%)</title><rect x="405.2" y="995.0" width="148.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="408.2" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (184 samples, 12.23%)</title><rect x="409.1" y="979.0" width="144.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="412.1" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (178 samples, 11.83%)</title><rect x="413.8" y="963.0" width="139.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="416.8" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (172 samples, 11.43%)</title><rect x="418.5" y="947.0" width="134.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="421.5" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (164 samples, 10.90%)</title><rect x="424.8" y="931.0" width="128.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="427.8" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (160 samples, 10.63%)</title><rect x="427.9" y="915.0" width="125.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="430.9" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (157 samples, 10.43%)</title><rect x="430.3" y="899.0" width="123.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="433.3" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (156 samples, 10.37%)</title><rect x="431.0" y="883.0" width="122.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="434.0" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (151 samples, 10.03%)</title><rect x="435.0" y="867.0" width="118.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="438.0" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (151 samples, 10.03%)</title><rect x="435.0" y="851.0" width="118.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="438.0" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (147 samples, 9.77%)</title><rect x="438.1" y="835.0" width="115.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="441.1" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (147 samples, 9.77%)</title><rect x="438.1" y="819.0" width="115.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="441.1" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (136 samples, 9.04%)</title><rect x="446.7" y="803.0" width="106.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="449.7" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (123 samples, 8.17%)</title><rect x="456.9" y="787.0" width="96.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="459.9" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (113 samples, 7.51%)</title><rect x="464.8" y="771.0" width="88.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="467.8" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (95 samples, 6.31%)</title><rect x="478.9" y="755.0" width="74.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="481.9" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (76 samples, 5.05%)</title><rect x="493.8" y="739.0" width="59.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="496.8" y="750.0">[unkno..</text>
</g>
<g>
<title>[unknown] (66 samples, 4.39%)</title><rect x="501.6" y="723.0" width="51.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="504.6" y="734.0">[unkn..</text>
</g>
<g>
<title>[unknown] (65 samples, 4.32%)</title><rect x="502.4" y="707.0" width="50.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="505.4" y="718.0">[unkn..</text>
</g>
<g>
<title>[unknown] (7 samples, 0.47%)</title><rect x="547.9" y="691.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="550.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="551.0" y="675.0" width="2.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="554.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="551.8" y="659.0" width="1.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="554.8" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (18 samples, 1.20%)</title><rect x="553.3" y="1411.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="556.3" y="1422.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.20%)</title><rect x="553.3" y="1395.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="556.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.73%)</title><rect x="555.7" y="1395.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="558.7" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.07%)</title><rect x="558.1" y="1379.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.47%)</title><rect x="558.8" y="1379.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="561.8" y="1390.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.20%)</title><rect x="562.0" y="1363.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="565.0" y="1374.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.20%)</title><rect x="562.0" y="1347.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="565.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.20%)</title><rect x="562.0" y="1331.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="565.0" y="1342.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.07%)</title><rect x="562.8" y="1315.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="565.8" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (1 samples, 0.07%)</title><rect x="563.5" y="1315.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.27%)</title><rect x="564.3" y="1395.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.27%)</title><rect x="564.3" y="1379.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.3" y="1390.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.07%)</title><rect x="566.7" y="1363.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="569.7" y="1374.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$79/1761683581.action (110 samples, 7.31%)</title><rect x="567.5" y="1427.0" width="86.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="570.5" y="1438.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$1 (110 samples, 7.31%)</title><rect x="567.5" y="1411.0" width="86.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.5" y="1422.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (109 samples, 7.24%)</title><rect x="568.2" y="1395.0" width="85.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="571.2" y="1406.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.27%)</title><rect x="568.2" y="1379.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.2" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.27%)</title><rect x="568.2" y="1363.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="571.2" y="1374.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.27%)</title><rect x="568.2" y="1347.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="571.2" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.27%)</title><rect x="568.2" y="1331.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="571.2" y="1342.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="569.0" y="1315.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="572.0" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.upsert (1 samples, 0.07%)</title><rect x="570.6" y="1315.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="573.6" y="1326.0"></text>
</g>
<g>
<title>one/nio/http/Request.getBody (3 samples, 0.20%)</title><rect x="571.4" y="1379.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="574.4" y="1390.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.27%)</title><rect x="573.7" y="1379.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="576.7" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.20%)</title><rect x="573.7" y="1363.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="576.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="573.7" y="1347.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.7" y="1358.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.13%)</title><rect x="574.5" y="1347.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="577.5" y="1358.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (1 samples, 0.07%)</title><rect x="574.5" y="1331.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="577.5" y="1342.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="574.5" y="1315.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="577.5" y="1326.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="575.3" y="1331.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="578.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="576.1" y="1363.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="579.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (1 samples, 0.07%)</title><rect x="576.1" y="1347.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.1" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.upsert (98 samples, 6.51%)</title><rect x="576.9" y="1379.0" width="76.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="579.9" y="1390.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.upsert (98 samples, 6.51%)</title><rect x="576.9" y="1363.0" width="76.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="579.9" y="1374.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.07%)</title><rect x="577.7" y="1347.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="580.7" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (6 samples, 0.40%)</title><rect x="578.4" y="1347.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="581.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (6 samples, 0.40%)</title><rect x="578.4" y="1331.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="581.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (6 samples, 0.40%)</title><rect x="578.4" y="1315.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="581.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="579.2" y="1299.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="582.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.13%)</title><rect x="580.0" y="1299.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="583.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.13%)</title><rect x="580.0" y="1283.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="583.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.07%)</title><rect x="580.0" y="1267.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.07%)</title><rect x="580.8" y="1267.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="583.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.07%)</title><rect x="581.6" y="1299.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (1 samples, 0.07%)</title><rect x="582.4" y="1299.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="585.4" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.upsert (89 samples, 5.91%)</title><rect x="583.1" y="1347.0" width="69.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="586.1" y="1358.0">ru/mail..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.07%)</title><rect x="583.1" y="1331.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="586.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (85 samples, 5.65%)</title><rect x="583.9" y="1331.0" width="66.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="586.9" y="1342.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (85 samples, 5.65%)</title><rect x="583.9" y="1315.0" width="66.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="586.9" y="1326.0">java/ut..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (5 samples, 0.33%)</title><rect x="591.8" y="1299.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (5 samples, 0.33%)</title><rect x="591.8" y="1283.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="594.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="594.1" y="1267.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="597.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="594.1" y="1251.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="597.1" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="594.1" y="1235.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="597.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="594.1" y="1219.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="597.1" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="594.1" y="1203.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="597.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="594.1" y="1187.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="597.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="594.1" y="1171.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="597.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.07%)</title><rect x="594.9" y="1267.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="597.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (1 samples, 0.07%)</title><rect x="595.7" y="1299.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="598.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (9 samples, 0.60%)</title><rect x="596.5" y="1299.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.07%)</title><rect x="598.8" y="1283.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="601.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.07%)</title><rect x="598.8" y="1267.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="601.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.13%)</title><rect x="599.6" y="1283.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="602.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.07%)</title><rect x="599.6" y="1267.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.07%)</title><rect x="600.4" y="1267.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.20%)</title><rect x="601.2" y="1283.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="604.2" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.20%)</title><rect x="601.2" y="1267.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="604.2" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.20%)</title><rect x="601.2" y="1251.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="604.2" y="1262.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (1 samples, 0.07%)</title><rect x="602.0" y="1235.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="605.0" y="1246.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.07%)</title><rect x="602.7" y="1235.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (60 samples, 3.99%)</title><rect x="603.5" y="1299.0" width="47.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="606.5" y="1310.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (60 samples, 3.99%)</title><rect x="603.5" y="1283.0" width="47.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.5" y="1294.0">java..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="605.9" y="1267.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="608.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="605.9" y="1251.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="608.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="605.9" y="1235.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="608.9" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (56 samples, 3.72%)</title><rect x="606.7" y="1267.0" width="43.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.7" y="1278.0">java..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="618.4" y="1251.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="621.4" y="1262.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="618.4" y="1235.0" width="1.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="621.4" y="1246.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="618.4" y="1219.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="621.4" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="619.2" y="1203.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="622.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="619.2" y="1187.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="622.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="619.2" y="1171.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="622.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="619.2" y="1155.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="622.2" y="1166.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.13%)</title><rect x="620.0" y="1251.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.0" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.07%)</title><rect x="621.6" y="1251.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="624.6" y="1262.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (32 samples, 2.13%)</title><rect x="622.3" y="1251.0" width="25.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.3" y="1262.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.80%)</title><rect x="634.9" y="1235.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.9" y="1246.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.27%)</title><rect x="640.4" y="1219.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.4" y="1230.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.07%)</title><rect x="643.5" y="1219.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.5" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.27%)</title><rect x="644.3" y="1235.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.3" y="1246.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.27%)</title><rect x="647.4" y="1251.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="650.4" y="1262.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.07%)</title><rect x="649.8" y="1235.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="652.8" y="1246.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.07%)</title><rect x="649.8" y="1219.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="652.8" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getSizeOfFlushedRow (1 samples, 0.07%)</title><rect x="650.6" y="1331.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="653.6" y="1342.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.07%)</title><rect x="650.6" y="1315.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.6" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (2 samples, 0.13%)</title><rect x="651.4" y="1331.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="654.4" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.&lt;init&gt; (2 samples, 0.13%)</title><rect x="651.4" y="1315.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.4" y="1326.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.07%)</title><rect x="652.1" y="1299.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="655.1" y="1310.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (1 samples, 0.07%)</title><rect x="652.9" y="1347.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="655.9" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.sizeInBytes (1 samples, 0.07%)</title><rect x="652.9" y="1331.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="655.9" y="1342.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (422 samples, 28.04%)</title><rect x="653.7" y="1507.0" width="330.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.7" y="1518.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.07%)</title><rect x="653.7" y="1491.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="656.7" y="1502.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.07%)</title><rect x="654.5" y="1491.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.5" y="1502.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.07%)</title><rect x="654.5" y="1475.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.5" y="1486.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.07%)</title><rect x="654.5" y="1459.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="657.5" y="1470.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (105 samples, 6.98%)</title><rect x="655.3" y="1491.0" width="82.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="658.3" y="1502.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (102 samples, 6.78%)</title><rect x="657.6" y="1475.0" width="80.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.6" y="1486.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.07%)</title><rect x="661.5" y="1459.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="664.5" y="1470.0"></text>
</g>
<g>
<title>[unknown] (91 samples, 6.05%)</title><rect x="662.3" y="1459.0" width="71.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="665.3" y="1470.0">[unknown]</text>
</g>
<g>
<title>Klass::is_klass() const volatile (5 samples, 0.33%)</title><rect x="662.3" y="1443.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="665.3" y="1454.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.33%)</title><rect x="662.3" y="1427.0" width="4.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="665.3" y="1438.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.33%)</title><rect x="662.3" y="1411.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="665.3" y="1422.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (4 samples, 0.27%)</title><rect x="662.3" y="1395.0" width="3.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="665.3" y="1406.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.07%)</title><rect x="665.5" y="1395.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="668.5" y="1406.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="665.5" y="1379.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="668.5" y="1390.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.13%)</title><rect x="666.3" y="1443.0" width="1.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="669.3" y="1454.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.07%)</title><rect x="667.8" y="1443.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="670.8" y="1454.0"></text>
</g>
<g>
<title>epoll_wait (83 samples, 5.51%)</title><rect x="668.6" y="1443.0" width="65.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="671.6" y="1454.0">epoll_w..</text>
</g>
<g>
<title>[unknown] (77 samples, 5.12%)</title><rect x="673.3" y="1427.0" width="60.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="676.3" y="1438.0">[unkno..</text>
</g>
<g>
<title>[unknown] (77 samples, 5.12%)</title><rect x="673.3" y="1411.0" width="60.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="676.3" y="1422.0">[unkno..</text>
</g>
<g>
<title>[unknown] (71 samples, 4.72%)</title><rect x="678.0" y="1395.0" width="55.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="681.0" y="1406.0">[unkn..</text>
</g>
<g>
<title>[unknown] (70 samples, 4.65%)</title><rect x="678.8" y="1379.0" width="54.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="681.8" y="1390.0">[unkn..</text>
</g>
<g>
<title>[unknown] (69 samples, 4.58%)</title><rect x="679.6" y="1363.0" width="54.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="682.6" y="1374.0">[unkn..</text>
</g>
<g>
<title>[unknown] (55 samples, 3.65%)</title><rect x="690.6" y="1347.0" width="43.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="693.6" y="1358.0">[unk..</text>
</g>
<g>
<title>[unknown] (45 samples, 2.99%)</title><rect x="698.4" y="1331.0" width="35.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="701.4" y="1342.0">[un..</text>
</g>
<g>
<title>[unknown] (32 samples, 2.13%)</title><rect x="708.6" y="1315.0" width="25.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="711.6" y="1326.0">[..</text>
</g>
<g>
<title>[unknown] (28 samples, 1.86%)</title><rect x="711.7" y="1299.0" width="22.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="714.7" y="1310.0">[..</text>
</g>
<g>
<title>[unknown] (18 samples, 1.20%)</title><rect x="719.6" y="1283.0" width="14.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="722.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="732.9" y="1267.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="735.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="732.9" y="1251.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="735.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="732.9" y="1235.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="735.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="732.9" y="1219.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="735.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="732.9" y="1203.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="735.9" y="1214.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.07%)</title><rect x="733.7" y="1459.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="736.7" y="1470.0"></text>
</g>
<g>
<title>epoll_wait (4 samples, 0.27%)</title><rect x="734.5" y="1459.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="737.5" y="1470.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (315 samples, 20.93%)</title><rect x="737.6" y="1491.0" width="247.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="740.6" y="1502.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.07%)</title><rect x="741.5" y="1475.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="744.5" y="1486.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (309 samples, 20.53%)</title><rect x="742.3" y="1475.0" width="242.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="745.3" y="1486.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (245 samples, 16.28%)</title><rect x="742.3" y="1459.0" width="192.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="745.3" y="1470.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.07%)</title><rect x="749.4" y="1443.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="752.4" y="1454.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (172 samples, 11.43%)</title><rect x="750.1" y="1443.0" width="134.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.1" y="1454.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (172 samples, 11.43%)</title><rect x="750.1" y="1427.0" width="134.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.1" y="1438.0">one/nio/http/Http..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (154 samples, 10.23%)</title><rect x="750.1" y="1411.0" width="120.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="753.1" y="1422.0">RequestHandler1..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.80%)</title><rect x="750.1" y="1395.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.1" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.07%)</title><rect x="750.1" y="1379.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="753.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.07%)</title><rect x="750.1" y="1363.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="753.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.33%)</title><rect x="750.9" y="1379.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="753.9" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.07%)</title><rect x="750.9" y="1363.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.27%)</title><rect x="751.7" y="1363.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="754.7" y="1374.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.13%)</title><rect x="752.5" y="1347.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.5" y="1358.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="754.1" y="1347.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="757.1" y="1358.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.40%)</title><rect x="754.9" y="1379.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="757.9" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.33%)</title><rect x="755.6" y="1363.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.33%)</title><rect x="755.6" y="1347.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.33%)</title><rect x="755.6" y="1331.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.6" y="1342.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (142 samples, 9.44%)</title><rect x="759.6" y="1395.0" width="111.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="762.6" y="1406.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.07%)</title><rect x="761.9" y="1379.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="764.9" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.60%)</title><rect x="762.7" y="1379.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="765.7" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.47%)</title><rect x="764.3" y="1363.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="767.3" y="1374.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.33%)</title><rect x="765.8" y="1347.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.8" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.33%)</title><rect x="765.8" y="1331.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.8" y="1342.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.33%)</title><rect x="765.8" y="1315.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="768.8" y="1326.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.07%)</title><rect x="766.6" y="1299.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="769.6" y="1310.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.07%)</title><rect x="766.6" y="1283.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.6" y="1294.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.07%)</title><rect x="766.6" y="1267.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="769.6" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.20%)</title><rect x="767.4" y="1299.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="770.4" y="1310.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.13%)</title><rect x="767.4" y="1283.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="770.4" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.07%)</title><rect x="769.0" y="1283.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="772.0" y="1294.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.07%)</title><rect x="769.0" y="1267.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="772.0" y="1278.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.07%)</title><rect x="769.7" y="1379.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="772.7" y="1390.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (128 samples, 8.50%)</title><rect x="770.5" y="1379.0" width="100.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="773.5" y="1390.0">ru/mail/poli..</text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.07%)</title><rect x="770.5" y="1363.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="773.5" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.13%)</title><rect x="771.3" y="1363.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="774.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.07%)</title><rect x="772.1" y="1347.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="775.1" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$63/32239911.get$Lambda (1 samples, 0.07%)</title><rect x="772.1" y="1331.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="775.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (125 samples, 8.31%)</title><rect x="772.9" y="1363.0" width="98.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.9" y="1374.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (124 samples, 8.24%)</title><rect x="773.7" y="1347.0" width="97.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.7" y="1358.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (113 samples, 7.51%)</title><rect x="776.8" y="1331.0" width="88.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="779.8" y="1342.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.40%)</title><rect x="777.6" y="1315.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="780.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.40%)</title><rect x="777.6" y="1299.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.33%)</title><rect x="778.4" y="1283.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="781.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (4 samples, 0.27%)</title><rect x="779.2" y="1267.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="782.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (4 samples, 0.27%)</title><rect x="779.2" y="1251.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (4 samples, 0.27%)</title><rect x="779.2" y="1235.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (4 samples, 0.27%)</title><rect x="779.2" y="1219.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="782.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.40%)</title><rect x="782.3" y="1315.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="785.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.40%)</title><rect x="782.3" y="1299.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="785.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.07%)</title><rect x="782.3" y="1283.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.07%)</title><rect x="782.3" y="1267.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="785.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.07%)</title><rect x="782.3" y="1251.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="785.3" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="782.3" y="1235.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="785.3" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="782.3" y="1219.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="785.3" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.07%)</title><rect x="782.3" y="1203.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="785.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.33%)</title><rect x="783.1" y="1283.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="786.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.33%)</title><rect x="783.1" y="1267.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="786.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.13%)</title><rect x="783.1" y="1251.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.13%)</title><rect x="783.1" y="1235.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="786.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.13%)</title><rect x="783.1" y="1219.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="786.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (3 samples, 0.20%)</title><rect x="784.6" y="1251.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (100 samples, 6.64%)</title><rect x="787.0" y="1315.0" width="78.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="790.0" y="1326.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (98 samples, 6.51%)</title><rect x="788.6" y="1299.0" width="76.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="791.6" y="1310.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (97 samples, 6.45%)</title><rect x="789.3" y="1283.0" width="76.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="792.3" y="1294.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (96 samples, 6.38%)</title><rect x="790.1" y="1267.0" width="75.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="793.1" y="1278.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (96 samples, 6.38%)</title><rect x="790.1" y="1251.0" width="75.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="793.1" y="1262.0">jdk/inte..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.07%)</title><rect x="790.1" y="1235.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="793.1" y="1246.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.07%)</title><rect x="790.9" y="1235.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="793.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="790.9" y="1219.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="793.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="790.9" y="1203.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="793.9" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="790.9" y="1187.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="793.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="790.9" y="1171.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="793.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="790.9" y="1155.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="793.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="790.9" y="1139.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="793.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="790.9" y="1123.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="793.9" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Unpark (15 samples, 1.00%)</title><rect x="791.7" y="1235.0" width="11.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="794.7" y="1246.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.07%)</title><rect x="793.3" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.3" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.07%)</title><rect x="794.1" y="1219.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="797.1" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.07%)</title><rect x="794.8" y="1219.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="797.8" y="1230.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.13%)</title><rect x="795.6" y="1219.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.6" y="1230.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.07%)</title><rect x="797.2" y="1219.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="800.2" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.33%)</title><rect x="798.0" y="1219.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="801.0" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.07%)</title><rect x="801.9" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="804.9" y="1230.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="802.7" y="1219.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="805.7" y="1230.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.13%)</title><rect x="803.5" y="1235.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="806.5" y="1246.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (77 samples, 5.12%)</title><rect x="805.0" y="1235.0" width="60.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="808.0" y="1246.0">pthrea..</text>
</g>
<g>
<title>[unknown] (67 samples, 4.45%)</title><rect x="812.9" y="1219.0" width="52.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="815.9" y="1230.0">[unkn..</text>
</g>
<g>
<title>[unknown] (67 samples, 4.45%)</title><rect x="812.9" y="1203.0" width="52.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="815.9" y="1214.0">[unkn..</text>
</g>
<g>
<title>[unknown] (62 samples, 4.12%)</title><rect x="816.8" y="1187.0" width="48.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="819.8" y="1198.0">[unk..</text>
</g>
<g>
<title>[unknown] (60 samples, 3.99%)</title><rect x="818.4" y="1171.0" width="47.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="821.4" y="1182.0">[unk..</text>
</g>
<g>
<title>[unknown] (59 samples, 3.92%)</title><rect x="819.1" y="1155.0" width="46.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="822.1" y="1166.0">[unk..</text>
</g>
<g>
<title>[unknown] (57 samples, 3.79%)</title><rect x="820.7" y="1139.0" width="44.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="823.7" y="1150.0">[unk..</text>
</g>
<g>
<title>[unknown] (56 samples, 3.72%)</title><rect x="821.5" y="1123.0" width="43.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="824.5" y="1134.0">[unk..</text>
</g>
<g>
<title>[unknown] (53 samples, 3.52%)</title><rect x="823.8" y="1107.0" width="41.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="826.8" y="1118.0">[un..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="865.4" y="1331.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="868.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.07%)</title><rect x="865.4" y="1315.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="868.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.07%)</title><rect x="865.4" y="1299.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.40%)</title><rect x="866.2" y="1331.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="869.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.20%)</title><rect x="868.5" y="1315.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="871.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.13%)</title><rect x="868.5" y="1299.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="871.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.07%)</title><rect x="869.3" y="1283.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="872.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.07%)</title><rect x="869.3" y="1267.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="872.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.07%)</title><rect x="869.3" y="1251.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="872.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.07%)</title><rect x="869.3" y="1235.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="872.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.07%)</title><rect x="870.1" y="1299.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="873.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.07%)</title><rect x="870.1" y="1283.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="873.1" y="1294.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.33%)</title><rect x="870.9" y="1411.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="873.9" y="1422.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.07%)</title><rect x="874.8" y="1411.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="877.8" y="1422.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (10 samples, 0.66%)</title><rect x="875.6" y="1411.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="878.6" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.66%)</title><rect x="875.6" y="1395.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="878.6" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.33%)</title><rect x="875.6" y="1379.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="878.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.20%)</title><rect x="877.2" y="1363.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="880.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.07%)</title><rect x="878.7" y="1347.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="881.7" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.33%)</title><rect x="879.5" y="1379.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="882.5" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.33%)</title><rect x="879.5" y="1363.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="882.5" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.07%)</title><rect x="879.5" y="1347.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="882.5" y="1358.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.27%)</title><rect x="880.3" y="1347.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="883.3" y="1358.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.13%)</title><rect x="883.4" y="1411.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="886.4" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.07%)</title><rect x="883.4" y="1395.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="886.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.07%)</title><rect x="883.4" y="1379.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="886.4" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.07%)</title><rect x="884.2" y="1395.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.2" y="1406.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (19 samples, 1.26%)</title><rect x="885.0" y="1443.0" width="14.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="888.0" y="1454.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (9 samples, 0.60%)</title><rect x="888.9" y="1427.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="891.9" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.20%)</title><rect x="893.6" y="1411.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="896.6" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.20%)</title><rect x="893.6" y="1395.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="896.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.20%)</title><rect x="893.6" y="1379.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="896.6" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.33%)</title><rect x="896.0" y="1427.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="899.0" y="1438.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.33%)</title><rect x="896.0" y="1411.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="899.0" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.27%)</title><rect x="896.8" y="1395.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="899.8" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.27%)</title><rect x="896.8" y="1379.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="899.8" y="1390.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.13%)</title><rect x="899.9" y="1443.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="902.9" y="1454.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.07%)</title><rect x="900.7" y="1427.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="903.7" y="1438.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.07%)</title><rect x="900.7" y="1411.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="903.7" y="1422.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.07%)</title><rect x="901.5" y="1443.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.5" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="901.5" y="1427.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="904.5" y="1438.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (29 samples, 1.93%)</title><rect x="902.3" y="1443.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="905.3" y="1454.0">o..</text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.07%)</title><rect x="903.8" y="1427.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="906.8" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (25 samples, 1.66%)</title><rect x="904.6" y="1427.0" width="19.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="907.6" y="1438.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (18 samples, 1.20%)</title><rect x="910.1" y="1411.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="913.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.13%)</title><rect x="917.9" y="1395.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.07%)</title><rect x="918.7" y="1379.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.7" y="1390.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.07%)</title><rect x="918.7" y="1363.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="921.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.27%)</title><rect x="919.5" y="1395.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="922.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.27%)</title><rect x="919.5" y="1379.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.5" y="1390.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.07%)</title><rect x="919.5" y="1363.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="922.5" y="1374.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.20%)</title><rect x="920.3" y="1363.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (3 samples, 0.20%)</title><rect x="920.3" y="1347.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="923.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.13%)</title><rect x="922.6" y="1395.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="925.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.07%)</title><rect x="924.2" y="1427.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="927.2" y="1438.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.07%)</title><rect x="924.2" y="1411.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="927.2" y="1422.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.07%)</title><rect x="924.2" y="1395.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="927.2" y="1406.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.80%)</title><rect x="925.0" y="1443.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="928.0" y="1454.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.47%)</title><rect x="928.9" y="1427.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="931.9" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.47%)</title><rect x="928.9" y="1411.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="931.9" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.40%)</title><rect x="928.9" y="1395.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="931.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="929.7" y="1379.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="932.7" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.07%)</title><rect x="930.5" y="1379.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.5" y="1390.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.20%)</title><rect x="931.3" y="1379.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="934.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.07%)</title><rect x="933.6" y="1395.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="936.6" y="1406.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (64 samples, 4.25%)</title><rect x="934.4" y="1459.0" width="50.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="937.4" y="1470.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (64 samples, 4.25%)</title><rect x="934.4" y="1443.0" width="50.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="937.4" y="1454.0">one/n..</text>
</g>
<g>
<title>[unknown] (9 samples, 0.60%)</title><rect x="936.8" y="1427.0" width="7.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="939.8" y="1438.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.60%)</title><rect x="936.8" y="1411.0" width="7.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="939.8" y="1422.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (8 samples, 0.53%)</title><rect x="936.8" y="1395.0" width="6.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="939.8" y="1406.0"></text>
</g>
<g>
<title>__memmove_ssse3 (2 samples, 0.13%)</title><rect x="936.8" y="1379.0" width="1.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="939.8" y="1390.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.40%)</title><rect x="938.3" y="1379.0" width="4.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="941.3" y="1390.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.07%)</title><rect x="938.3" y="1363.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="941.3" y="1374.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.07%)</title><rect x="939.1" y="1363.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.1" y="1374.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (3 samples, 0.20%)</title><rect x="939.9" y="1363.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.9" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="941.5" y="1347.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="944.5" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="941.5" y="1331.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="944.5" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="941.5" y="1315.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="944.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="941.5" y="1299.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="944.5" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="941.5" y="1283.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="944.5" y="1294.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.07%)</title><rect x="942.2" y="1363.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="945.2" y="1374.0"></text>
</g>
<g>
<title>recv (1 samples, 0.07%)</title><rect x="943.0" y="1395.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="946.0" y="1406.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.20%)</title><rect x="943.8" y="1427.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="946.8" y="1438.0"></text>
</g>
<g>
<title>recv (49 samples, 3.26%)</title><rect x="946.2" y="1427.0" width="38.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="949.2" y="1438.0">recv</text>
</g>
<g>
<title>[unknown] (46 samples, 3.06%)</title><rect x="948.5" y="1411.0" width="36.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="951.5" y="1422.0">[un..</text>
</g>
<g>
<title>[unknown] (46 samples, 3.06%)</title><rect x="948.5" y="1395.0" width="36.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="951.5" y="1406.0">[un..</text>
</g>
<g>
<title>[unknown] (43 samples, 2.86%)</title><rect x="950.9" y="1379.0" width="33.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="953.9" y="1390.0">[u..</text>
</g>
<g>
<title>[unknown] (43 samples, 2.86%)</title><rect x="950.9" y="1363.0" width="33.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="953.9" y="1374.0">[u..</text>
</g>
<g>
<title>[unknown] (43 samples, 2.86%)</title><rect x="950.9" y="1347.0" width="33.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="953.9" y="1358.0">[u..</text>
</g>
<g>
<title>[unknown] (43 samples, 2.86%)</title><rect x="950.9" y="1331.0" width="33.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="953.9" y="1342.0">[u..</text>
</g>
<g>
<title>[unknown] (41 samples, 2.72%)</title><rect x="952.4" y="1315.0" width="32.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="955.4" y="1326.0">[u..</text>
</g>
<g>
<title>[unknown] (33 samples, 2.19%)</title><rect x="958.7" y="1299.0" width="25.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="961.7" y="1310.0">[..</text>
</g>
<g>
<title>[unknown] (23 samples, 1.53%)</title><rect x="966.5" y="1283.0" width="18.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="969.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.80%)</title><rect x="975.2" y="1267.0" width="9.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="978.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.53%)</title><rect x="978.3" y="1251.0" width="6.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="981.3" y="1262.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.33%)</title><rect x="980.7" y="1235.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="983.7" y="1246.0"></text>
</g>
<g>
<title>start_thread (262 samples, 17.41%)</title><rect x="984.6" y="1507.0" width="205.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="987.6" y="1518.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (262 samples, 17.41%)</title><rect x="984.6" y="1491.0" width="205.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="987.6" y="1502.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (262 samples, 17.41%)</title><rect x="984.6" y="1475.0" width="205.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.6" y="1486.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.07%)</title><rect x="984.6" y="1459.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.6" y="1470.0"></text>
</g>
<g>
<title>SuspendibleThreadSet::join() (1 samples, 0.07%)</title><rect x="984.6" y="1443.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.6" y="1454.0"></text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 0.80%)</title><rect x="985.4" y="1459.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.4" y="1470.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 0.80%)</title><rect x="985.4" y="1443.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.4" y="1454.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 0.80%)</title><rect x="985.4" y="1427.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.4" y="1438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 0.80%)</title><rect x="985.4" y="1411.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.4" y="1422.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (7 samples, 0.47%)</title><rect x="989.3" y="1395.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.3" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 0.40%)</title><rect x="990.1" y="1379.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.1" y="1390.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.13%)</title><rect x="993.2" y="1363.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.2" y="1374.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.07%)</title><rect x="994.0" y="1347.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="997.0" y="1358.0"></text>
</g>
<g>
<title>JavaThread::run() (247 samples, 16.41%)</title><rect x="994.8" y="1459.0" width="193.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.8" y="1470.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (247 samples, 16.41%)</title><rect x="994.8" y="1443.0" width="193.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="997.8" y="1454.0">JavaThread::thread_main_i..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (245 samples, 16.28%)</title><rect x="994.8" y="1427.0" width="192.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.8" y="1438.0">CompileBroker::compiler_t..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (245 samples, 16.28%)</title><rect x="994.8" y="1411.0" width="192.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="997.8" y="1422.0">CompileBroker::invoke_com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (237 samples, 15.75%)</title><rect x="994.8" y="1395.0" width="185.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="997.8" y="1406.0">C2Compiler::compile_meth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (237 samples, 15.75%)</title><rect x="994.8" y="1379.0" width="185.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.8" y="1390.0">Compile::Compile(ciEnv*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (149 samples, 9.90%)</title><rect x="994.8" y="1363.0" width="116.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="997.8" y="1374.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.40%)</title><rect x="994.8" y="1347.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="997.8" y="1358.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.13%)</title><rect x="994.8" y="1331.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.8" y="1342.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.13%)</title><rect x="996.3" y="1331.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.3" y="1342.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.13%)</title><rect x="996.3" y="1315.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="999.3" y="1326.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.07%)</title><rect x="997.9" y="1331.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.9" y="1342.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.07%)</title><rect x="998.7" y="1331.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1001.7" y="1342.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.27%)</title><rect x="999.5" y="1347.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.5" y="1358.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.20%)</title><rect x="999.5" y="1331.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1002.5" y="1342.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="999.5" y="1315.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.5" y="1326.0"></text>
</g>
<g>
<title>new_loc_value(PhaseRegAlloc*, int, Location::Type) (1 samples, 0.07%)</title><rect x="999.5" y="1299.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1002.5" y="1310.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="999.5" y="1283.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.5" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.13%)</title><rect x="1000.3" y="1315.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.3" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.13%)</title><rect x="1000.3" y="1299.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.3" y="1310.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.07%)</title><rect x="1001.8" y="1331.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1004.8" y="1342.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.53%)</title><rect x="1002.6" y="1347.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.6" y="1358.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.07%)</title><rect x="1002.6" y="1331.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.6" y="1342.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.47%)</title><rect x="1003.4" y="1331.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.4" y="1342.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.13%)</title><rect x="1005.0" y="1315.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.0" y="1326.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.13%)</title><rect x="1006.5" y="1315.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.5" y="1326.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.07%)</title><rect x="1006.5" y="1299.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.5" y="1310.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="1007.3" y="1299.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1010.3" y="1310.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="1007.3" y="1283.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1010.3" y="1294.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="1007.3" y="1267.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1010.3" y="1278.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="1007.3" y="1251.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1010.3" y="1262.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1008.1" y="1315.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1011.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1008.1" y="1299.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1011.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1008.1" y="1283.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1011.1" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1008.1" y="1267.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1011.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1008.1" y="1251.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1011.1" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1008.1" y="1235.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1011.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1008.1" y="1219.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1011.1" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1008.1" y="1203.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1011.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1008.1" y="1187.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1011.1" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (17 samples, 1.13%)</title><rect x="1008.9" y="1347.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.9" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.07%)</title><rect x="1008.9" y="1331.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1011.9" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (16 samples, 1.06%)</title><rect x="1009.7" y="1331.0" width="12.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1012.7" y="1342.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="1011.2" y="1315.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.2" y="1326.0"></text>
</g>
<g>
<title>MachIdealNode::oper_input_base() const (1 samples, 0.07%)</title><rect x="1012.0" y="1315.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1015.0" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.13%)</title><rect x="1012.8" y="1315.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.8" y="1326.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="1012.8" y="1299.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1015.8" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="1013.6" y="1299.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.6" y="1310.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="1013.6" y="1283.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.6" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.13%)</title><rect x="1014.4" y="1315.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.4" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.07%)</title><rect x="1014.4" y="1299.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.4" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (1 samples, 0.07%)</title><rect x="1015.2" y="1299.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1018.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.07%)</title><rect x="1015.2" y="1283.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1018.2" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.07%)</title><rect x="1015.9" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1018.9" y="1326.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1015.9" y="1299.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="1016.7" y="1315.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.7" y="1326.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1016.7" y="1299.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1019.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1016.7" y="1283.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1019.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1016.7" y="1267.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1019.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1016.7" y="1251.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1019.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1016.7" y="1235.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1019.7" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1016.7" y="1219.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1019.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1016.7" y="1203.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1019.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1016.7" y="1187.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1019.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1016.7" y="1171.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1019.7" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.27%)</title><rect x="1017.5" y="1315.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1020.5" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (1 samples, 0.07%)</title><rect x="1017.5" y="1299.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.5" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1017.5" y="1283.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1020.5" y="1294.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.20%)</title><rect x="1018.3" y="1299.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.3" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="1019.1" y="1283.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.1" y="1294.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.07%)</title><rect x="1020.6" y="1315.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1023.6" y="1326.0"></text>
</g>
<g>
<title>compI_rRegNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="1021.4" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.4" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="1022.2" y="1347.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1025.2" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (113 samples, 7.51%)</title><rect x="1023.0" y="1347.0" width="88.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1026.0" y="1358.0">PhaseChait..</text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.07%)</title><rect x="1023.0" y="1331.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1026.0" y="1342.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.13%)</title><rect x="1023.8" y="1331.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.8" y="1342.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.27%)</title><rect x="1025.3" y="1331.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.3" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.13%)</title><rect x="1028.5" y="1331.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.5" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1028.5" y="1315.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.5" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1029.3" y="1315.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1032.3" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.13%)</title><rect x="1030.1" y="1331.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.13%)</title><rect x="1030.1" y="1315.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.1" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (15 samples, 1.00%)</title><rect x="1031.6" y="1331.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.6" y="1342.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1039.5" y="1315.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.5" y="1326.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1040.2" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1043.2" y="1326.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="1041.0" y="1315.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1044.0" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="1041.8" y="1315.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1044.8" y="1326.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1041.8" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.8" y="1310.0"></text>
</g>
<g>
<title>leaPIdxOffNode::rule() const (1 samples, 0.07%)</title><rect x="1042.6" y="1315.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1045.6" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (24 samples, 1.59%)</title><rect x="1043.4" y="1331.0" width="18.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.4" y="1342.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="1044.2" y="1315.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (4 samples, 0.27%)</title><rect x="1045.0" y="1315.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.0" y="1326.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="1045.7" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.7" y="1310.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1046.5" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.5" y="1310.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="1046.5" y="1283.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.5" y="1294.0"></text>
</g>
<g>
<title>salL_rReg_1Node::rule() const (1 samples, 0.07%)</title><rect x="1047.3" y="1299.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1050.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (1 samples, 0.07%)</title><rect x="1048.1" y="1315.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.1" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1048.1" y="1299.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.1" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.73%)</title><rect x="1048.9" y="1315.0" width="8.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1051.9" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.20%)</title><rect x="1055.1" y="1299.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1056.7" y="1283.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1059.7" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1056.7" y="1267.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1059.7" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1056.7" y="1251.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1059.7" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1056.7" y="1235.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1059.7" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.20%)</title><rect x="1057.5" y="1315.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.5" y="1326.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1058.3" y="1299.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.3" y="1310.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="1059.1" y="1299.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1062.1" y="1310.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (3 samples, 0.20%)</title><rect x="1059.8" y="1315.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1062.8" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="1062.2" y="1331.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.2" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="1062.2" y="1315.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1065.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (4 samples, 0.27%)</title><rect x="1063.0" y="1331.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.0" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.20%)</title><rect x="1063.8" y="1315.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.8" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (10 samples, 0.66%)</title><rect x="1066.1" y="1331.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1069.1" y="1342.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1070.0" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.0" y="1326.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.07%)</title><rect x="1070.8" y="1315.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.8" y="1326.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1071.6" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.6" y="1326.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.07%)</title><rect x="1072.4" y="1315.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1075.4" y="1326.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.07%)</title><rect x="1073.2" y="1315.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.13%)</title><rect x="1074.0" y="1331.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.0" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (10 samples, 0.66%)</title><rect x="1075.5" y="1331.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.5" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.20%)</title><rect x="1081.0" y="1315.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.0" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="1083.4" y="1331.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.4" y="1342.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="1083.4" y="1315.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1086.4" y="1326.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.27%)</title><rect x="1084.2" y="1331.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.2" y="1342.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.27%)</title><rect x="1084.2" y="1315.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.2" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="1084.9" y="1299.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.9" y="1310.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.07%)</title><rect x="1084.9" y="1283.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.9" y="1294.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.13%)</title><rect x="1085.7" y="1299.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.7" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.07%)</title><rect x="1085.7" y="1283.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.7" y="1294.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1086.5" y="1283.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.27%)</title><rect x="1087.3" y="1331.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.3" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1088.9" y="1315.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.9" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1089.6" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.27%)</title><rect x="1090.4" y="1331.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.4" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="1092.0" y="1315.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.27%)</title><rect x="1093.6" y="1331.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.6" y="1342.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1095.1" y="1315.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.1" y="1326.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="1095.9" y="1315.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1098.9" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (13 samples, 0.86%)</title><rect x="1096.7" y="1331.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.7" y="1342.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.47%)</title><rect x="1099.8" y="1315.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.8" y="1326.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (3 samples, 0.20%)</title><rect x="1103.0" y="1299.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.0" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="1105.3" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.3" y="1326.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="1105.3" y="1299.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.3" y="1310.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="1106.1" y="1315.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1109.1" y="1326.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.07%)</title><rect x="1106.9" y="1331.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.9" y="1342.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.13%)</title><rect x="1107.7" y="1331.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1110.7" y="1342.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::oper_input_base() const (1 samples, 0.07%)</title><rect x="1109.2" y="1331.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.2" y="1342.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="1110.0" y="1331.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.0" y="1342.0"></text>
</g>
<g>
<title>storeINode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="1110.8" y="1331.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.8" y="1342.0"></text>
</g>
<g>
<title>Compile::Optimize() (64 samples, 4.25%)</title><rect x="1111.6" y="1363.0" width="50.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.6" y="1374.0">Compi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="1111.6" y="1347.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.6" y="1358.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1111.6" y="1331.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.6" y="1342.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="1112.4" y="1347.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.4" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1112.4" y="1331.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.4" y="1342.0"></text>
</g>
<g>
<title>TypeTuple::singleton() const (1 samples, 0.07%)</title><rect x="1112.4" y="1315.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.13%)</title><rect x="1113.2" y="1347.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*) (1 samples, 0.07%)</title><rect x="1113.2" y="1331.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.07%)</title><rect x="1113.9" y="1331.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.9" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1113.9" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.9" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1113.9" y="1299.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.07%)</title><rect x="1113.9" y="1283.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.9" y="1294.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.13%)</title><rect x="1114.7" y="1347.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.7" y="1358.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.13%)</title><rect x="1116.3" y="1347.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.3" y="1358.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.13%)</title><rect x="1116.3" y="1331.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.3" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (48 samples, 3.19%)</title><rect x="1117.9" y="1347.0" width="37.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.9" y="1358.0">Pha..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1331.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.9" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1315.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.9" y="1326.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1299.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.9" y="1310.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1283.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.9" y="1294.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1267.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.9" y="1278.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1251.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.9" y="1262.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1235.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.9" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.9" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1203.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.9" y="1214.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1187.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.9" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1171.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.9" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1155.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.9" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1139.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1117.9" y="1123.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.07%)</title><rect x="1117.9" y="1107.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.07%)</title><rect x="1117.9" y="1091.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.9" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate_invariants(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1118.7" y="1331.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.7" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::is_invariant(Node*) const (1 samples, 0.07%)</title><rect x="1118.7" y="1315.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.7" y="1326.0"></text>
</g>
<g>
<title>IfNode::pinned() const (1 samples, 0.07%)</title><rect x="1119.4" y="1331.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.4" y="1342.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1120.2" y="1331.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.2" y="1342.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1121.0" y="1331.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.33%)</title><rect x="1121.8" y="1331.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.8" y="1342.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="1124.1" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1124.9" y="1315.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1127.9" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1124.9" y="1299.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1127.9" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1124.9" y="1283.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1127.9" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1124.9" y="1267.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1127.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1124.9" y="1251.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1127.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1124.9" y="1235.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1127.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1124.9" y="1219.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1127.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1124.9" y="1203.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1127.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.20%)</title><rect x="1125.7" y="1331.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.7" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1127.3" y="1315.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.3" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1127.3" y="1299.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.07%)</title><rect x="1127.3" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 0.93%)</title><rect x="1128.1" y="1331.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 0.53%)</title><rect x="1131.2" y="1315.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.27%)</title><rect x="1134.3" y="1299.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1135.1" y="1283.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.1" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.07%)</title><rect x="1135.1" y="1267.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.13%)</title><rect x="1135.9" y="1283.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.9" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1137.5" y="1315.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.5" y="1326.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.07%)</title><rect x="1138.3" y="1315.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.13%)</title><rect x="1139.0" y="1331.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.07%)</title><rect x="1140.6" y="1331.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1140.6" y="1315.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1140.6" y="1299.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.07%)</title><rect x="1140.6" y="1283.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (10 samples, 0.66%)</title><rect x="1141.4" y="1331.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.4" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.07%)</title><rect x="1143.7" y="1315.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_up(Node*, Node*, Node*) [clone .part.105] (1 samples, 0.07%)</title><rect x="1143.7" y="1299.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.7" y="1310.0"></text>
</g>
<g>
<title>PhiNode::make_blank(Node*, Node*) (1 samples, 0.07%)</title><rect x="1143.7" y="1283.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (2 samples, 0.13%)</title><rect x="1144.5" y="1315.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1145.3" y="1299.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.3" y="1310.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1145.3" y="1283.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.27%)</title><rect x="1146.1" y="1315.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1146.1" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1146.1" y="1283.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.1" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 0.20%)</title><rect x="1146.9" y="1299.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.9" y="1310.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1146.9" y="1283.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.9" y="1294.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1146.9" y="1267.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.9" y="1278.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1146.9" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.9" y="1262.0"></text>
</g>
<g>
<title>AddNode::hash() const (1 samples, 0.07%)</title><rect x="1147.7" y="1283.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.7" y="1294.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1148.4" y="1283.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.4" y="1294.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1148.4" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.4" y="1278.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1148.4" y="1251.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.4" y="1262.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1148.4" y="1235.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.4" y="1246.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.07%)</title><rect x="1148.4" y="1219.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.33%)</title><rect x="1149.2" y="1331.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.33%)</title><rect x="1149.2" y="1315.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.2" y="1326.0"></text>
</g>
<g>
<title>CastIINode::Value(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1149.2" y="1299.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.2" y="1310.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1149.2" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.2" y="1294.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.07%)</title><rect x="1149.2" y="1267.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.2" y="1278.0"></text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 0.07%)</title><rect x="1150.0" y="1299.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.0" y="1310.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1150.8" y="1299.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.8" y="1310.0"></text>
</g>
<g>
<title>TypeLong::hash() const (1 samples, 0.07%)</title><rect x="1150.8" y="1283.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1151.6" y="1299.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.6" y="1310.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.4" y="1299.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="1310.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1152.4" y="1283.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.4" y="1294.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.07%)</title><rect x="1153.1" y="1331.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.1" y="1342.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1153.9" y="1331.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.9" y="1342.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.07%)</title><rect x="1154.7" y="1331.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.33%)</title><rect x="1155.5" y="1347.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.5" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.33%)</title><rect x="1155.5" y="1331.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.5" y="1342.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1155.5" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.5" y="1326.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1155.5" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.5" y="1310.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1155.5" y="1283.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.5" y="1294.0"></text>
</g>
<g>
<title>CheckCastPPNode::Identity(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1156.3" y="1315.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.3" y="1326.0"></text>
</g>
<g>
<title>ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1156.3" y="1299.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.3" y="1310.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1157.1" y="1315.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.1" y="1326.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1157.1" y="1299.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.1" y="1310.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1157.1" y="1283.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="1294.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1157.9" y="1315.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.9" y="1326.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.13%)</title><rect x="1157.9" y="1299.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.9" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.13%)</title><rect x="1159.4" y="1347.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.4" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1159.4" y="1331.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.4" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1159.4" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1159.4" y="1299.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.07%)</title><rect x="1159.4" y="1283.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.4" y="1294.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.07%)</title><rect x="1160.2" y="1331.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.2" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::prefetch_allocation(Node*, Node*&amp;, Node*&amp;, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1160.2" y="1315.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.2" y="1326.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1160.2" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.2" y="1310.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1160.2" y="1283.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.2" y="1294.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.07%)</title><rect x="1161.0" y="1347.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.0" y="1358.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.07%)</title><rect x="1161.0" y="1331.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.0" y="1342.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1161.0" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.0" y="1326.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.07%)</title><rect x="1161.8" y="1363.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.8" y="1374.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.07%)</title><rect x="1161.8" y="1347.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.8" y="1358.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1161.8" y="1331.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="1342.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.07%)</title><rect x="1161.8" y="1315.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1164.8" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (20 samples, 1.33%)</title><rect x="1162.6" y="1363.0" width="15.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (20 samples, 1.33%)</title><rect x="1162.6" y="1347.0" width="15.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 1.26%)</title><rect x="1163.3" y="1331.0" width="14.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 1.26%)</title><rect x="1163.3" y="1315.0" width="14.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (19 samples, 1.26%)</title><rect x="1163.3" y="1299.0" width="14.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 1.20%)</title><rect x="1163.3" y="1283.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.3" y="1294.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1163.3" y="1267.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="1278.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1163.3" y="1251.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="1262.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1163.3" y="1235.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.3" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1163.3" y="1219.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1163.3" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1163.3" y="1187.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.3" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1163.3" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1163.3" y="1155.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1163.3" y="1139.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="1150.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1163.3" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1163.3" y="1107.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1163.3" y="1091.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.3" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1163.3" y="1075.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="1086.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1163.3" y="1059.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="1070.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.07%)</title><rect x="1163.3" y="1043.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1163.3" y="1027.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.3" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.07%)</title><rect x="1163.3" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 1.13%)</title><rect x="1164.1" y="1267.0" width="13.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 1.13%)</title><rect x="1164.1" y="1251.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.00%)</title><rect x="1164.1" y="1235.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.00%)</title><rect x="1164.1" y="1219.0" width="11.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.1" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 1.00%)</title><rect x="1164.1" y="1203.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.1" y="1214.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.07%)</title><rect x="1164.1" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.1" y="1198.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.07%)</title><rect x="1164.1" y="1171.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.1" y="1182.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1164.1" y="1155.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="1166.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1164.1" y="1139.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="1150.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.07%)</title><rect x="1164.1" y="1123.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="1134.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1164.1" y="1107.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.1" y="1118.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1164.1" y="1091.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.80%)</title><rect x="1164.9" y="1187.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.9" y="1198.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1165.7" y="1171.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.7" y="1182.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1165.7" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.7" y="1166.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1165.7" y="1139.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.7" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1165.7" y="1123.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.66%)</title><rect x="1166.5" y="1171.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.66%)</title><rect x="1166.5" y="1155.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.66%)</title><rect x="1166.5" y="1139.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.66%)</title><rect x="1166.5" y="1123.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.66%)</title><rect x="1166.5" y="1107.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.5" y="1118.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.07%)</title><rect x="1166.5" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="1102.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.07%)</title><rect x="1166.5" y="1075.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.5" y="1086.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.07%)</title><rect x="1166.5" y="1059.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.5" y="1070.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.07%)</title><rect x="1166.5" y="1043.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.5" y="1054.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.07%)</title><rect x="1166.5" y="1027.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="1038.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1166.5" y="1011.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.5" y="1022.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.07%)</title><rect x="1166.5" y="995.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.5" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1166.5" y="979.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.5" y="990.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1166.5" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.53%)</title><rect x="1167.3" y="1091.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.3" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1167.3" y="1075.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.3" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1167.3" y="1059.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1167.3" y="1043.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1167.3" y="1027.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1167.3" y="1011.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1167.3" y="995.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.3" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1167.3" y="979.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1167.3" y="963.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.3" y="974.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1167.3" y="947.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.3" y="958.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.07%)</title><rect x="1167.3" y="931.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.3" y="942.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1167.3" y="915.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.3" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1167.3" y="899.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.3" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.07%)</title><rect x="1167.3" y="883.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1168.0" y="947.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1168.0" y="931.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1168.0" y="915.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1168.0" y="899.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1168.0" y="883.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1168.0" y="867.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1168.0" y="851.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1168.0" y="835.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1168.0" y="819.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1168.0" y="803.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1168.0" y="787.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1168.0" y="771.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="782.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1168.0" y="755.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.0" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1168.0" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.0" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1168.0" y="723.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1168.0" y="707.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.0" y="718.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.07%)</title><rect x="1168.0" y="691.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.0" y="702.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.07%)</title><rect x="1168.0" y="675.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="686.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.07%)</title><rect x="1168.0" y="659.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.07%)</title><rect x="1168.0" y="643.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.0" y="654.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.07%)</title><rect x="1168.0" y="627.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1168.0" y="611.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1168.8" y="755.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1168.8" y="739.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1168.8" y="723.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_newarray(BasicType) (1 samples, 0.07%)</title><rect x="1168.8" y="707.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.8" y="718.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.07%)</title><rect x="1168.8" y="691.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.8" y="702.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1168.8" y="675.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.8" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1168.8" y="659.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.8" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1168.8" y="643.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1169.6" y="851.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.6" y="862.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.6" y="835.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.6" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1170.4" y="1075.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.4" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1170.4" y="1059.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.4" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1170.4" y="1043.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1170.4" y="1027.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1170.4" y="1011.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1170.4" y="995.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1170.4" y="979.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1170.4" y="963.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1170.4" y="947.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1170.4" y="931.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1170.4" y="915.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1170.4" y="899.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1170.4" y="883.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1170.4" y="867.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1170.4" y="851.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.4" y="862.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1170.4" y="835.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.4" y="846.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.07%)</title><rect x="1170.4" y="819.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.4" y="830.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.07%)</title><rect x="1170.4" y="803.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1170.4" y="787.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.4" y="798.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1170.4" y="771.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="782.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.4" y="755.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="766.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.07%)</title><rect x="1170.4" y="739.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1173.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1171.2" y="835.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1171.2" y="819.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1171.2" y="803.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1171.2" y="787.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1171.2" y="771.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1171.2" y="755.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1171.2" y="739.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1171.2" y="723.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1171.2" y="707.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1171.2" y="691.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1171.2" y="675.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.2" y="686.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1171.2" y="659.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.2" y="670.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1171.2" y="643.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.2" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1172.0" y="659.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1172.0" y="643.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1172.0" y="627.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1172.0" y="611.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1172.0" y="595.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1172.0" y="579.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1172.0" y="563.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1172.0" y="547.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1172.0" y="531.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.0" y="515.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.0" y="499.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.0" y="467.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.0" y="451.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.0" y="435.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.0" y="419.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.0" y="403.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.0" y="387.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.0" y="371.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.0" y="339.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.0" y="323.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.0" y="307.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.0" y="291.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.0" y="275.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.0" y="259.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.0" y="243.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.0" y="227.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.0" y="211.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.0" y="195.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1172.0" y="179.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.0" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1172.0" y="163.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.0" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1172.0" y="147.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.0" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1172.0" y="131.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="142.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1172.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.0" y="99.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.0" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1172.0" y="83.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.0" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1172.0" y="67.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="78.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.07%)</title><rect x="1172.0" y="51.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="62.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.07%)</title><rect x="1172.0" y="35.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1175.0" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.164] (1 samples, 0.07%)</title><rect x="1172.8" y="515.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.8" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1172.8" y="499.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.8" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1172.8" y="483.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.8" y="494.0"></text>
</g>
<g>
<title>Mutex::Mutex(int, char const*, bool, Monitor::SafepointCheckRequired) (1 samples, 0.07%)</title><rect x="1172.8" y="467.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1173.5" y="1091.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1173.5" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="1086.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.07%)</title><rect x="1173.5" y="1059.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="1070.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.07%)</title><rect x="1173.5" y="1043.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="1054.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.07%)</title><rect x="1173.5" y="1027.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="1038.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.07%)</title><rect x="1173.5" y="1011.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1173.5" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.5" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1173.5" y="979.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="990.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1173.5" y="963.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.13%)</title><rect x="1174.3" y="1187.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1174.3" y="1171.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.3" y="1182.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1174.3" y="1155.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.3" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1174.3" y="1139.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.3" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1174.3" y="1123.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.3" y="1134.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1174.3" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.3" y="1118.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1174.3" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.3" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1174.3" y="1075.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1175.1" y="1171.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.1" y="1182.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.07%)</title><rect x="1175.1" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.1" y="1166.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1175.1" y="1139.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.1" y="1150.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1175.1" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.1" y="1134.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1175.1" y="1107.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="1118.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1175.1" y="1091.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.1" y="1102.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1175.1" y="1075.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.1" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1175.1" y="1059.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.1" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1175.1" y="1043.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.1" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1175.1" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.1" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1175.1" y="1011.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.1" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1175.1" y="995.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.1" y="1006.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1175.1" y="979.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.1" y="990.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1175.1" y="963.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1175.9" y="1235.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="1246.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1175.9" y="1219.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="1230.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.07%)</title><rect x="1175.9" y="1203.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="1214.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1175.9" y="1187.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_method_entry() (1 samples, 0.07%)</title><rect x="1176.7" y="1235.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.07%)</title><rect x="1177.5" y="1283.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="1294.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.07%)</title><rect x="1177.5" y="1267.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="1278.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1177.5" y="1251.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="1262.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1177.5" y="1235.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="1246.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.07%)</title><rect x="1178.2" y="1363.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="1374.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1178.2" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="1358.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (2 samples, 0.13%)</title><rect x="1179.0" y="1363.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="1374.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.07%)</title><rect x="1179.0" y="1347.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="1358.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (1 samples, 0.07%)</title><rect x="1179.0" y="1331.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="1342.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.07%)</title><rect x="1179.0" y="1315.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1182.0" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1179.0" y="1299.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1182.0" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1179.0" y="1283.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1182.0" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1179.0" y="1267.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1182.0" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1179.0" y="1251.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1182.0" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1179.0" y="1235.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1182.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1179.0" y="1219.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1182.0" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1179.0" y="1203.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1182.0" y="1214.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.07%)</title><rect x="1179.8" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="1358.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle const&amp;) (1 samples, 0.07%)</title><rect x="1179.8" y="1331.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.8" y="1342.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (8 samples, 0.53%)</title><rect x="1180.6" y="1395.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="1406.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (8 samples, 0.53%)</title><rect x="1180.6" y="1379.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1390.0"></text>
</g>
<g>
<title>Compilation::compile_method() (8 samples, 0.53%)</title><rect x="1180.6" y="1363.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (8 samples, 0.53%)</title><rect x="1180.6" y="1347.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="1358.0"></text>
</g>
<g>
<title>Compilation::build_hir() (4 samples, 0.27%)</title><rect x="1180.6" y="1331.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="1342.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.20%)</title><rect x="1180.6" y="1315.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="1326.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.20%)</title><rect x="1180.6" y="1299.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1310.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.20%)</title><rect x="1180.6" y="1283.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.13%)</title><rect x="1180.6" y="1267.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.13%)</title><rect x="1180.6" y="1251.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.13%)</title><rect x="1180.6" y="1235.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.13%)</title><rect x="1180.6" y="1219.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.13%)</title><rect x="1180.6" y="1203.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1180.6" y="1187.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1180.6" y="1171.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1180.6" y="1155.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1180.6" y="1139.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.07%)</title><rect x="1180.6" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1180.6" y="1107.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1180.6" y="1091.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1180.6" y="1075.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1180.6" y="1059.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1180.6" y="1043.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.6" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1180.6" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1180.6" y="1011.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1180.6" y="995.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1180.6" y="979.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="990.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.07%)</title><rect x="1180.6" y="963.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="974.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1180.6" y="947.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="958.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.07%)</title><rect x="1180.6" y="931.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="942.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.07%)</title><rect x="1180.6" y="915.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="926.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.07%)</title><rect x="1181.4" y="1187.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="1198.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.07%)</title><rect x="1181.4" y="1171.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1181.4" y="1155.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="1166.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1181.4" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="1150.0"></text>
</g>
<g>
<title>PhiSimplifier::PhiSimplifier(BlockBegin*) (1 samples, 0.07%)</title><rect x="1182.2" y="1267.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="1278.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.07%)</title><rect x="1182.2" y="1251.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="1262.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.07%)</title><rect x="1182.2" y="1235.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="1246.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.07%)</title><rect x="1182.2" y="1219.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="1230.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.07%)</title><rect x="1182.2" y="1203.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="1214.0"></text>
</g>
<g>
<title>BlockBegin::state_values_do(ValueVisitor*) (1 samples, 0.07%)</title><rect x="1182.2" y="1187.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="1198.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.07%)</title><rect x="1182.2" y="1171.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="1182.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.07%)</title><rect x="1182.9" y="1315.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="1326.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (1 samples, 0.07%)</title><rect x="1182.9" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="1310.0"></text>
</g>
<g>
<title>UseCountComputer::block_do(BlockBegin*) (1 samples, 0.07%)</title><rect x="1182.9" y="1283.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="1294.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.07%)</title><rect x="1182.9" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="1278.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 0.27%)</title><rect x="1183.7" y="1331.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="1342.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.13%)</title><rect x="1183.7" y="1315.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="1326.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.13%)</title><rect x="1183.7" y="1299.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.07%)</title><rect x="1183.7" y="1283.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="1294.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.07%)</title><rect x="1183.7" y="1267.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="1278.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.07%)</title><rect x="1183.7" y="1251.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.7" y="1262.0"></text>
</g>
<g>
<title>LIRGenerator::do_Intrinsic(Intrinsic*) (1 samples, 0.07%)</title><rect x="1184.5" y="1283.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="1294.0"></text>
</g>
<g>
<title>LIRGenerator::do_CompareAndSwap(Intrinsic*, ValueType*) (1 samples, 0.07%)</title><rect x="1184.5" y="1267.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="1278.0"></text>
</g>
<g>
<title>Instruction::as_Phi() (1 samples, 0.07%)</title><rect x="1184.5" y="1251.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="1262.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.13%)</title><rect x="1185.3" y="1315.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="1326.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.07%)</title><rect x="1185.3" y="1299.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="1310.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.07%)</title><rect x="1185.3" y="1283.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.3" y="1294.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.07%)</title><rect x="1185.3" y="1267.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.3" y="1278.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.07%)</title><rect x="1185.3" y="1251.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.3" y="1262.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.07%)</title><rect x="1185.3" y="1235.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.3" y="1246.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.07%)</title><rect x="1186.1" y="1299.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="1310.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.07%)</title><rect x="1186.1" y="1283.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="1294.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.07%)</title><rect x="1186.1" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.1" y="1278.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value_for_operand(LIR_OprDesc*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="1186.1" y="1251.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="1262.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.13%)</title><rect x="1186.9" y="1427.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="1438.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.13%)</title><rect x="1186.9" y="1411.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.9" y="1422.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.13%)</title><rect x="1186.9" y="1395.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="1406.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.13%)</title><rect x="1186.9" y="1379.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1189.9" y="1390.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1186.9" y="1363.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.9" y="1374.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1186.9" y="1347.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.9" y="1358.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1187.6" y="1363.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="1374.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (1 samples, 0.07%)</title><rect x="1187.6" y="1347.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.6" y="1358.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.13%)</title><rect x="1188.4" y="1459.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.4" y="1470.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.13%)</title><rect x="1188.4" y="1443.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="1454.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1427.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.2" y="1438.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="1189.2" y="1411.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.2" y="1422.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.07%)</title><rect x="1189.2" y="1395.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.2" y="1406.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1379.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1192.2" y="1390.0"></text>
</g>
</g>
</svg>
