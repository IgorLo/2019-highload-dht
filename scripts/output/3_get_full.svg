<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1430" onload="init(evt)" viewBox="0 0 1200 1430" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1413"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1413"> </text>
<g id="frames">
<g>
<title>all (1,427 samples, 100.00%)</title><rect x="10.0" y="1379.0" width="1180.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="1390.0">all</text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="10.8" y="1363.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="1374.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="10.8" y="1347.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="10.8" y="1331.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="1342.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="10.8" y="1315.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="1326.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="10.8" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="1310.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.07%)</title><rect x="10.8" y="1283.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="11.7" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.7" y="1374.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="11.7" y="1347.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.7" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="11.7" y="1331.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.7" y="1342.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="11.7" y="1315.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.7" y="1326.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="11.7" y="1299.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.7" y="1310.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="11.7" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.7" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="12.5" y="1363.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.5" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="12.5" y="1347.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.5" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="12.5" y="1331.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.5" y="1342.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="12.5" y="1315.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.5" y="1326.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="12.5" y="1299.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.5" y="1310.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="12.5" y="1283.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.5" y="1294.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="12.5" y="1267.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.5" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.07%)</title><rect x="12.5" y="1251.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.5" y="1262.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.07%)</title><rect x="13.3" y="1363.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.3" y="1374.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.63%)</title><rect x="14.1" y="1363.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.1" y="1374.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.56%)</title><rect x="14.1" y="1347.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.1" y="1358.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="14.1" y="1331.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.1" y="1342.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.21%)</title><rect x="15.0" y="1331.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.0" y="1342.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.14%)</title><rect x="15.0" y="1315.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.0" y="1326.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.07%)</title><rect x="16.6" y="1315.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.6" y="1326.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.21%)</title><rect x="17.4" y="1331.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="20.4" y="1342.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="19.9" y="1331.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="22.9" y="1342.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.07%)</title><rect x="20.7" y="1347.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="23.7" y="1358.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.07%)</title><rect x="20.7" y="1331.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="23.7" y="1342.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.07%)</title><rect x="21.6" y="1363.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="24.6" y="1374.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.21%)</title><rect x="22.4" y="1363.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="25.4" y="1374.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.07%)</title><rect x="22.4" y="1347.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="25.4" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="23.2" y="1347.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="26.2" y="1358.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.07%)</title><rect x="23.2" y="1331.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.2" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.07%)</title><rect x="24.1" y="1347.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="27.1" y="1358.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.42%)</title><rect x="24.9" y="1363.0" width="4.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="27.9" y="1374.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (2 samples, 0.14%)</title><rect x="28.2" y="1347.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="31.2" y="1358.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="28.2" y="1331.0" width="1.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="31.2" y="1342.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="28.2" y="1315.0" width="1.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="31.2" y="1326.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="28.2" y="1299.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="31.2" y="1310.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="28.2" y="1283.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="31.2" y="1294.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="28.2" y="1267.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="31.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="28.2" y="1251.0" width="1.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="31.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="28.2" y="1235.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="31.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="28.2" y="1219.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="31.2" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (4 samples, 0.28%)</title><rect x="29.8" y="1363.0" width="3.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="32.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.21%)</title><rect x="30.7" y="1347.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="33.7" y="1358.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.21%)</title><rect x="30.7" y="1331.0" width="2.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="33.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.21%)</title><rect x="30.7" y="1315.0" width="2.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="33.7" y="1326.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.21%)</title><rect x="30.7" y="1299.0" width="2.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="33.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="31.5" y="1283.0" width="1.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="34.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="32.3" y="1267.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="35.3" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="32.3" y="1251.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="35.3" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="32.3" y="1235.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="35.3" y="1246.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="33.2" y="1363.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="36.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/Thread.run (846 samples, 59.29%)</title><rect x="34.0" y="1363.0" width="699.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.0" y="1374.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (846 samples, 59.29%)</title><rect x="34.0" y="1347.0" width="699.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.0" y="1358.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (846 samples, 59.29%)</title><rect x="34.0" y="1331.0" width="699.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.0" y="1342.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.07%)</title><rect x="35.6" y="1315.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.07%)</title><rect x="35.6" y="1299.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.07%)</title><rect x="35.6" y="1283.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="38.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="35.6" y="1267.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.07%)</title><rect x="35.6" y="1251.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.07%)</title><rect x="35.6" y="1235.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.14%)</title><rect x="36.5" y="1315.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="39.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.14%)</title><rect x="36.5" y="1299.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 0.14%)</title><rect x="36.5" y="1283.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.14%)</title><rect x="36.5" y="1267.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="39.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (172 samples, 12.05%)</title><rect x="38.1" y="1315.0" width="142.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.1" y="1326.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (163 samples, 11.42%)</title><rect x="45.6" y="1299.0" width="134.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.6" y="1310.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (124 samples, 8.69%)</title><rect x="46.4" y="1283.0" width="102.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.4" y="1294.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (16 samples, 1.12%)</title><rect x="48.9" y="1267.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="58.0" y="1251.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="61.0" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="58.0" y="1235.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="61.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="58.0" y="1219.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="61.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (3 samples, 0.21%)</title><rect x="58.8" y="1251.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (3 samples, 0.21%)</title><rect x="58.8" y="1235.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.8" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.07%)</title><rect x="61.3" y="1251.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.42%)</title><rect x="62.1" y="1267.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.14%)</title><rect x="62.1" y="1251.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.14%)</title><rect x="62.1" y="1235.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.1" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.14%)</title><rect x="62.1" y="1219.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.1" y="1230.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.14%)</title><rect x="62.1" y="1203.0" width="1.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="65.1" y="1214.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.14%)</title><rect x="62.1" y="1187.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="65.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="62.1" y="1171.0" width="1.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="65.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="62.1" y="1155.0" width="1.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="65.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="62.9" y="1139.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="65.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="62.9" y="1123.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="65.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="62.9" y="1107.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="65.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="62.9" y="1091.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="65.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.28%)</title><rect x="63.7" y="1251.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.28%)</title><rect x="63.7" y="1235.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="66.2" y="1219.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.07%)</title><rect x="66.2" y="1203.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.07%)</title><rect x="66.2" y="1187.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.84%)</title><rect x="67.1" y="1267.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.84%)</title><rect x="67.1" y="1251.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.84%)</title><rect x="67.1" y="1235.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (3 samples, 0.21%)</title><rect x="67.1" y="1219.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="70.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.14%)</title><rect x="67.9" y="1203.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.14%)</title><rect x="67.9" y="1187.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.63%)</title><rect x="69.5" y="1219.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.5" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.63%)</title><rect x="69.5" y="1203.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.5" y="1214.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.07%)</title><rect x="69.5" y="1187.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="72.5" y="1198.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.07%)</title><rect x="69.5" y="1171.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="72.5" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="69.5" y="1155.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="72.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="69.5" y="1139.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="72.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="69.5" y="1123.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="72.5" y="1134.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (8 samples, 0.56%)</title><rect x="70.4" y="1187.0" width="6.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="73.4" y="1198.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.56%)</title><rect x="70.4" y="1171.0" width="6.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="73.4" y="1182.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.56%)</title><rect x="70.4" y="1155.0" width="6.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="73.4" y="1166.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.56%)</title><rect x="70.4" y="1139.0" width="6.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="73.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.56%)</title><rect x="70.4" y="1123.0" width="6.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="73.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.56%)</title><rect x="70.4" y="1107.0" width="6.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="73.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.49%)</title><rect x="71.2" y="1091.0" width="5.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="74.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.42%)</title><rect x="72.0" y="1075.0" width="5.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="75.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.42%)</title><rect x="72.0" y="1059.0" width="5.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="75.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (87 samples, 6.10%)</title><rect x="77.0" y="1267.0" width="71.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.0" y="1278.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.07%)</title><rect x="77.0" y="1251.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.0" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (86 samples, 6.03%)</title><rect x="77.8" y="1251.0" width="71.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.8" y="1262.0">jdk/inte..</text>
</g>
<g>
<title>Unsafe_Park (43 samples, 3.01%)</title><rect x="80.3" y="1235.0" width="35.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="83.3" y="1246.0">Uns..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.14%)</title><rect x="80.3" y="1219.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="83.3" y="1230.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.26%)</title><rect x="81.9" y="1219.0" width="14.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="84.9" y="1230.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="90.2" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="93.2" y="1214.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.21%)</title><rect x="91.0" y="1203.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="94.0" y="1214.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="92.7" y="1187.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="95.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="92.7" y="1171.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="95.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="92.7" y="1155.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="95.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="92.7" y="1139.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="95.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="92.7" y="1123.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="95.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="92.7" y="1107.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="95.7" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="92.7" y="1091.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="95.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="92.7" y="1075.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="95.7" y="1086.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="93.5" y="1203.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="96.5" y="1214.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.21%)</title><rect x="94.3" y="1203.0" width="2.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="97.3" y="1214.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="96.8" y="1219.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="99.8" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.07%)</title><rect x="97.7" y="1219.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="100.7" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.07%)</title><rect x="98.5" y="1219.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="101.5" y="1230.0"></text>
</g>
<g>
<title>__lll_unlock_wake (14 samples, 0.98%)</title><rect x="99.3" y="1219.0" width="11.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="102.3" y="1230.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.77%)</title><rect x="101.8" y="1203.0" width="9.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="104.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.77%)</title><rect x="101.8" y="1187.0" width="9.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="104.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="109.2" y="1171.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="112.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="109.2" y="1155.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="112.2" y="1166.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="109.2" y="1139.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="112.2" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="110.1" y="1123.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="113.1" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.07%)</title><rect x="110.9" y="1219.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="113.9" y="1230.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.14%)</title><rect x="111.7" y="1219.0" width="1.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="114.7" y="1230.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.21%)</title><rect x="113.4" y="1219.0" width="2.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="116.4" y="1230.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 2.80%)</title><rect x="115.8" y="1235.0" width="33.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="118.8" y="1246.0">[u..</text>
</g>
<g>
<title>__pthread_cond_wait (31 samples, 2.17%)</title><rect x="115.8" y="1219.0" width="25.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="118.8" y="1230.0">_..</text>
</g>
<g>
<title>[unknown] (22 samples, 1.54%)</title><rect x="123.3" y="1203.0" width="18.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="126.3" y="1214.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 1.54%)</title><rect x="123.3" y="1187.0" width="18.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="126.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 1.40%)</title><rect x="124.9" y="1171.0" width="16.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="127.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.33%)</title><rect x="125.8" y="1155.0" width="15.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="128.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.26%)</title><rect x="126.6" y="1139.0" width="14.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="129.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.91%)</title><rect x="130.7" y="1123.0" width="10.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="133.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.42%)</title><rect x="136.5" y="1107.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="139.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.21%)</title><rect x="139.0" y="1091.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="142.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.21%)</title><rect x="139.0" y="1075.0" width="2.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="142.0" y="1086.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="141.5" y="1219.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="144.5" y="1230.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="142.3" y="1219.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="145.3" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="142.3" y="1203.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="145.3" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="142.3" y="1187.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="145.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="142.3" y="1171.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="145.3" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (6 samples, 0.42%)</title><rect x="143.1" y="1219.0" width="5.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="146.1" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="148.1" y="1219.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="151.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.28%)</title><rect x="148.9" y="1283.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.28%)</title><rect x="148.9" y="1267.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="151.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.28%)</title><rect x="148.9" y="1251.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="151.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.28%)</title><rect x="148.9" y="1235.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.21%)</title><rect x="149.7" y="1219.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.14%)</title><rect x="150.6" y="1203.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (34 samples, 2.38%)</title><rect x="152.2" y="1283.0" width="28.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.2" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (34 samples, 2.38%)</title><rect x="152.2" y="1267.0" width="28.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.2" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (34 samples, 2.38%)</title><rect x="152.2" y="1251.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.2" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (34 samples, 2.38%)</title><rect x="152.2" y="1235.0" width="28.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.2" y="1246.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (34 samples, 2.38%)</title><rect x="152.2" y="1219.0" width="28.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.2" y="1230.0">jd..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.07%)</title><rect x="153.1" y="1203.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="156.1" y="1214.0"></text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 0.56%)</title><rect x="153.9" y="1203.0" width="6.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="156.9" y="1214.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.14%)</title><rect x="153.9" y="1187.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="156.9" y="1198.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.14%)</title><rect x="155.5" y="1187.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="158.5" y="1198.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.14%)</title><rect x="157.2" y="1187.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="160.2" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (2 samples, 0.14%)</title><rect x="158.8" y="1187.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="161.8" y="1198.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (24 samples, 1.68%)</title><rect x="160.5" y="1203.0" width="19.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="163.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 1.47%)</title><rect x="163.0" y="1187.0" width="17.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="166.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 1.47%)</title><rect x="163.0" y="1171.0" width="17.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="166.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.33%)</title><rect x="164.6" y="1155.0" width="15.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="167.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.33%)</title><rect x="164.6" y="1139.0" width="15.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="167.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.33%)</title><rect x="164.6" y="1123.0" width="15.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="167.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.26%)</title><rect x="165.5" y="1107.0" width="14.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="168.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 1.19%)</title><rect x="166.3" y="1091.0" width="14.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="169.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 1.19%)</title><rect x="166.3" y="1075.0" width="14.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="169.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="179.5" y="1059.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="182.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="179.5" y="1043.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="182.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="179.5" y="1027.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="182.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="179.5" y="1011.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="182.5" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$63/32239911.run (669 samples, 46.88%)</title><rect x="180.3" y="1315.0" width="553.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.3" y="1326.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$63/32239911.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (668 samples, 46.81%)</title><rect x="181.2" y="1299.0" width="552.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.2" y="1310.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (451 samples, 31.60%)</title><rect x="181.2" y="1283.0" width="372.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.2" y="1294.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.28%)</title><rect x="182.0" y="1267.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.14%)</title><rect x="183.7" y="1251.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="186.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.14%)</title><rect x="183.7" y="1235.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.14%)</title><rect x="183.7" y="1219.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.14%)</title><rect x="183.7" y="1203.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.14%)</title><rect x="183.7" y="1187.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.14%)</title><rect x="183.7" y="1171.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.7" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (428 samples, 29.99%)</title><rect x="185.3" y="1267.0" width="353.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.3" y="1278.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.84%)</title><rect x="185.3" y="1251.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.3" y="1262.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="187.0" y="1235.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="190.0" y="1246.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="187.8" y="1235.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="190.8" y="1246.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.49%)</title><rect x="189.4" y="1235.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.4" y="1246.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.07%)</title><rect x="189.4" y="1219.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.4" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.07%)</title><rect x="190.3" y="1219.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.3" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.35%)</title><rect x="191.1" y="1219.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.1" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.35%)</title><rect x="191.1" y="1203.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="194.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.07%)</title><rect x="193.6" y="1187.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.07%)</title><rect x="193.6" y="1171.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.6" y="1182.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (1 samples, 0.07%)</title><rect x="194.4" y="1187.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.4" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (416 samples, 29.15%)</title><rect x="195.2" y="1251.0" width="344.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="198.2" y="1262.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (416 samples, 29.15%)</title><rect x="195.2" y="1235.0" width="344.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="198.2" y="1246.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (416 samples, 29.15%)</title><rect x="195.2" y="1219.0" width="344.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="198.2" y="1230.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (416 samples, 29.15%)</title><rect x="195.2" y="1203.0" width="344.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.2" y="1214.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (25 samples, 1.75%)</title><rect x="201.8" y="1187.0" width="20.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="204.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 1.75%)</title><rect x="201.8" y="1171.0" width="20.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="204.8" y="1182.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (19 samples, 1.33%)</title><rect x="201.8" y="1155.0" width="15.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="204.8" y="1166.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.14%)</title><rect x="204.3" y="1139.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="207.3" y="1150.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.07%)</title><rect x="206.0" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="209.0" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.14%)</title><rect x="206.8" y="1139.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="209.8" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.07%)</title><rect x="208.5" y="1139.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="211.5" y="1150.0"></text>
</g>
<g>
<title>__memmove_ssse3 (6 samples, 0.42%)</title><rect x="209.3" y="1139.0" width="4.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="212.3" y="1150.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.28%)</title><rect x="214.2" y="1139.0" width="3.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="217.2" y="1150.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.07%)</title><rect x="214.2" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="217.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="214.2" y="1107.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="217.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="214.2" y="1091.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="217.2" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="214.2" y="1075.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="217.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="214.2" y="1059.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="217.2" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="214.2" y="1043.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="217.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="214.2" y="1027.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="217.2" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.07%)</title><rect x="215.1" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="218.1" y="1134.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.14%)</title><rect x="215.9" y="1123.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="218.9" y="1134.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="217.6" y="1155.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="220.6" y="1166.0"></text>
</g>
<g>
<title>__send (3 samples, 0.21%)</title><rect x="218.4" y="1155.0" width="2.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="221.4" y="1166.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.14%)</title><rect x="220.9" y="1155.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="223.9" y="1166.0"></text>
</g>
<g>
<title>__send (383 samples, 26.84%)</title><rect x="222.5" y="1187.0" width="316.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="225.5" y="1198.0">__send</text>
</g>
<g>
<title>[unknown] (374 samples, 26.21%)</title><rect x="230.0" y="1171.0" width="309.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="233.0" y="1182.0">[unknown]</text>
</g>
<g>
<title>[unknown] (374 samples, 26.21%)</title><rect x="230.0" y="1155.0" width="309.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="233.0" y="1166.0">[unknown]</text>
</g>
<g>
<title>[unknown] (371 samples, 26.00%)</title><rect x="232.4" y="1139.0" width="306.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="235.4" y="1150.0">[unknown]</text>
</g>
<g>
<title>[unknown] (371 samples, 26.00%)</title><rect x="232.4" y="1123.0" width="306.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="235.4" y="1134.0">[unknown]</text>
</g>
<g>
<title>[unknown] (367 samples, 25.72%)</title><rect x="235.7" y="1107.0" width="303.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="238.7" y="1118.0">[unknown]</text>
</g>
<g>
<title>[unknown] (367 samples, 25.72%)</title><rect x="235.7" y="1091.0" width="303.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="238.7" y="1102.0">[unknown]</text>
</g>
<g>
<title>[unknown] (366 samples, 25.65%)</title><rect x="236.6" y="1075.0" width="302.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="239.6" y="1086.0">[unknown]</text>
</g>
<g>
<title>[unknown] (363 samples, 25.44%)</title><rect x="239.1" y="1059.0" width="300.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="242.1" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (340 samples, 23.83%)</title><rect x="258.1" y="1043.0" width="281.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="261.1" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (324 samples, 22.70%)</title><rect x="271.3" y="1027.0" width="267.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="274.3" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (309 samples, 21.65%)</title><rect x="283.7" y="1011.0" width="255.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="286.7" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (287 samples, 20.11%)</title><rect x="301.9" y="995.0" width="237.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="304.9" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (262 samples, 18.36%)</title><rect x="322.6" y="979.0" width="216.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="325.6" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (259 samples, 18.15%)</title><rect x="325.1" y="963.0" width="214.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="328.1" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (250 samples, 17.52%)</title><rect x="332.5" y="947.0" width="206.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="335.5" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (244 samples, 17.10%)</title><rect x="337.5" y="931.0" width="201.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="340.5" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (239 samples, 16.75%)</title><rect x="341.6" y="915.0" width="197.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="344.6" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (228 samples, 15.98%)</title><rect x="350.7" y="899.0" width="188.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="353.7" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (221 samples, 15.49%)</title><rect x="356.5" y="883.0" width="182.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="359.5" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (208 samples, 14.58%)</title><rect x="367.2" y="867.0" width="172.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="370.2" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (187 samples, 13.10%)</title><rect x="384.6" y="851.0" width="154.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="387.6" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (172 samples, 12.05%)</title><rect x="397.0" y="835.0" width="142.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="400.0" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (165 samples, 11.56%)</title><rect x="402.8" y="819.0" width="136.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="405.8" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (160 samples, 11.21%)</title><rect x="406.9" y="803.0" width="132.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="409.9" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (155 samples, 10.86%)</title><rect x="411.1" y="787.0" width="128.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="414.1" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (149 samples, 10.44%)</title><rect x="416.0" y="771.0" width="123.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="419.0" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (147 samples, 10.30%)</title><rect x="417.7" y="755.0" width="121.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="420.7" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (143 samples, 10.02%)</title><rect x="421.0" y="739.0" width="118.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="424.0" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (141 samples, 9.88%)</title><rect x="422.6" y="723.0" width="116.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="425.6" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (141 samples, 9.88%)</title><rect x="422.6" y="707.0" width="116.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="425.6" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (140 samples, 9.81%)</title><rect x="423.5" y="691.0" width="115.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="426.5" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (137 samples, 9.60%)</title><rect x="425.9" y="675.0" width="113.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="428.9" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (131 samples, 9.18%)</title><rect x="430.9" y="659.0" width="108.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="433.9" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (119 samples, 8.34%)</title><rect x="440.8" y="643.0" width="98.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="443.8" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (108 samples, 7.57%)</title><rect x="449.9" y="627.0" width="89.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="452.9" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (92 samples, 6.45%)</title><rect x="463.1" y="611.0" width="76.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="466.1" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (71 samples, 4.98%)</title><rect x="480.5" y="595.0" width="58.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="483.5" y="606.0">[unkno..</text>
</g>
<g>
<title>[unknown] (67 samples, 4.70%)</title><rect x="483.8" y="579.0" width="55.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="486.8" y="590.0">[unkn..</text>
</g>
<g>
<title>[unknown] (66 samples, 4.63%)</title><rect x="484.6" y="563.0" width="54.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="487.6" y="574.0">[unkn..</text>
</g>
<g>
<title>[unknown] (11 samples, 0.77%)</title><rect x="530.1" y="547.0" width="9.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="533.1" y="558.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.70%)</title><rect x="531.0" y="531.0" width="8.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="534.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.70%)</title><rect x="531.0" y="515.0" width="8.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="534.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (15 samples, 1.05%)</title><rect x="539.2" y="1267.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.2" y="1278.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.14%)</title><rect x="539.2" y="1251.0" width="1.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="542.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.84%)</title><rect x="540.9" y="1251.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="543.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.56%)</title><rect x="544.2" y="1235.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="547.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.14%)</title><rect x="544.2" y="1219.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="547.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.14%)</title><rect x="544.2" y="1203.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="547.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.07%)</title><rect x="545.0" y="1187.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.07%)</title><rect x="545.0" y="1171.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="548.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.42%)</title><rect x="545.8" y="1219.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="548.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.35%)</title><rect x="546.7" y="1203.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="549.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (4 samples, 0.28%)</title><rect x="546.7" y="1187.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.07%)</title><rect x="550.0" y="1187.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="553.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.07%)</title><rect x="550.0" y="1171.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.07%)</title><rect x="550.8" y="1251.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.07%)</title><rect x="550.8" y="1235.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="553.8" y="1246.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.21%)</title><rect x="551.6" y="1267.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="554.6" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/130504574.action (214 samples, 15.00%)</title><rect x="554.1" y="1283.0" width="177.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="557.1" y="1294.0">ru/mail/polis/service/i..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0 (214 samples, 15.00%)</title><rect x="554.1" y="1267.0" width="177.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="557.1" y="1278.0">ru/mail/polis/service/i..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (214 samples, 15.00%)</title><rect x="554.1" y="1251.0" width="177.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="557.1" y="1262.0">ru/mail/polis/service/i..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.07%)</title><rect x="555.8" y="1235.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="558.8" y="1246.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.07%)</title><rect x="555.8" y="1219.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="558.8" y="1230.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="555.8" y="1203.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.8" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="555.8" y="1187.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="558.8" y="1198.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="555.8" y="1171.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="558.8" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.07%)</title><rect x="555.8" y="1155.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="558.8" y="1166.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.07%)</title><rect x="555.8" y="1139.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="558.8" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (211 samples, 14.79%)</title><rect x="556.6" y="1235.0" width="174.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.6" y="1246.0">ru/mail/polis/dao/DAO...</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (31 samples, 2.17%)</title><rect x="557.4" y="1219.0" width="25.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.4" y="1230.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (30 samples, 2.10%)</title><rect x="558.2" y="1203.0" width="24.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.2" y="1214.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (30 samples, 2.10%)</title><rect x="558.2" y="1187.0" width="24.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.2" y="1198.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (30 samples, 2.10%)</title><rect x="558.2" y="1171.0" width="24.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.2" y="1182.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (30 samples, 2.10%)</title><rect x="558.2" y="1155.0" width="24.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="561.2" y="1166.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (29 samples, 2.03%)</title><rect x="558.2" y="1139.0" width="24.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="561.2" y="1150.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (13 samples, 0.91%)</title><rect x="559.1" y="1123.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="562.1" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (13 samples, 0.91%)</title><rect x="559.1" y="1107.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="562.1" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (12 samples, 0.84%)</title><rect x="559.9" y="1091.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.9" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (11 samples, 0.77%)</title><rect x="560.7" y="1075.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="563.7" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (10 samples, 0.70%)</title><rect x="561.5" y="1059.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="564.5" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.21%)</title><rect x="561.5" y="1043.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="564.5" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.14%)</title><rect x="562.4" y="1027.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="565.4" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (1 samples, 0.07%)</title><rect x="562.4" y="1011.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="565.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (1 samples, 0.07%)</title><rect x="563.2" y="1011.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="566.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.07%)</title><rect x="563.2" y="995.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="566.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="563.2" y="979.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="566.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="563.2" y="963.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="566.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="563.2" y="947.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="566.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="563.2" y="931.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="566.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="563.2" y="915.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="566.2" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="563.2" y="899.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="566.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="563.2" y="883.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="566.2" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (6 samples, 0.42%)</title><rect x="564.0" y="1043.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.0" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.14%)</title><rect x="564.0" y="1027.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="567.0" y="1038.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.28%)</title><rect x="565.7" y="1027.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="568.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.07%)</title><rect x="565.7" y="1011.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="568.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.14%)</title><rect x="566.5" y="1011.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="569.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.07%)</title><rect x="566.5" y="995.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="569.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.07%)</title><rect x="567.3" y="995.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.3" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.07%)</title><rect x="568.2" y="1011.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="571.2" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$69/1288005806.apply (1 samples, 0.07%)</title><rect x="569.0" y="1043.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="572.0" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (13 samples, 0.91%)</title><rect x="569.8" y="1123.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="572.8" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (10 samples, 0.70%)</title><rect x="570.6" y="1107.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="573.6" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (10 samples, 0.70%)</title><rect x="570.6" y="1091.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="573.6" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (10 samples, 0.70%)</title><rect x="570.6" y="1075.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="573.6" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (7 samples, 0.49%)</title><rect x="572.3" y="1059.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="575.3" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.endOfData (3 samples, 0.21%)</title><rect x="572.3" y="1043.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="575.3" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.07%)</title><rect x="573.1" y="1027.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.1" y="1038.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (1 samples, 0.07%)</title><rect x="574.0" y="1027.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="577.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="574.0" y="1011.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="577.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="574.0" y="995.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="577.0" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="574.0" y="979.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="577.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="574.0" y="963.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="577.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="574.0" y="947.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="577.0" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="574.0" y="931.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="577.0" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="574.0" y="915.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="577.0" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2 samples, 0.14%)</title><rect x="574.8" y="1043.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.8" y="1054.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.07%)</title><rect x="574.8" y="1027.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.8" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (1 samples, 0.07%)</title><rect x="575.6" y="1027.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="578.6" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.isDead (2 samples, 0.14%)</title><rect x="576.4" y="1043.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="579.4" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.07%)</title><rect x="578.1" y="1059.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="581.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.14%)</title><rect x="578.9" y="1107.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="581.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.14%)</title><rect x="578.9" y="1091.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.9" y="1102.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2 samples, 0.14%)</title><rect x="580.6" y="1123.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="583.6" y="1134.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2 samples, 0.14%)</title><rect x="580.6" y="1107.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="583.6" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$69/1288005806.apply (1 samples, 0.07%)</title><rect x="582.2" y="1139.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="585.2" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (1 samples, 0.07%)</title><rect x="582.2" y="1123.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="585.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.07%)</title><rect x="582.2" y="1107.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="585.2" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.07%)</title><rect x="582.2" y="1091.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="585.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="582.2" y="1075.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="585.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="582.2" y="1059.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="585.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="582.2" y="1043.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="585.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.07%)</title><rect x="582.2" y="1027.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="585.2" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (8 samples, 0.56%)</title><rect x="583.0" y="1219.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="586.0" y="1230.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 0.14%)</title><rect x="583.0" y="1203.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="586.0" y="1214.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="583.9" y="1187.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="586.9" y="1198.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.07%)</title><rect x="583.9" y="1171.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.9" y="1182.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.07%)</title><rect x="583.9" y="1155.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="586.9" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.07%)</title><rect x="583.9" y="1139.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.9" y="1150.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.07%)</title><rect x="583.9" y="1123.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="586.9" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.07%)</title><rect x="583.9" y="1107.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="586.9" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (1 samples, 0.07%)</title><rect x="583.9" y="1091.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.9" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="583.9" y="1075.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="586.9" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.07%)</title><rect x="583.9" y="1059.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="586.9" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (6 samples, 0.42%)</title><rect x="584.7" y="1203.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="587.7" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$75/1865180444.apply (6 samples, 0.42%)</title><rect x="584.7" y="1187.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="587.7" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (6 samples, 0.42%)</title><rect x="584.7" y="1171.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.7" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (6 samples, 0.42%)</title><rect x="584.7" y="1155.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.7" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.42%)</title><rect x="584.7" y="1139.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="587.7" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (6 samples, 0.42%)</title><rect x="584.7" y="1123.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.7" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.42%)</title><rect x="584.7" y="1107.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="587.7" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.42%)</title><rect x="584.7" y="1091.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="587.7" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="587.2" y="1075.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="590.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="588.0" y="1075.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="591.0" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (1 samples, 0.07%)</title><rect x="588.8" y="1075.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="591.8" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (3 samples, 0.21%)</title><rect x="589.7" y="1219.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="592.7" y="1230.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (3 samples, 0.21%)</title><rect x="589.7" y="1203.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="592.7" y="1214.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3 samples, 0.21%)</title><rect x="589.7" y="1187.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="592.7" y="1198.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.21%)</title><rect x="589.7" y="1171.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="592.7" y="1182.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.21%)</title><rect x="589.7" y="1155.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="592.7" y="1166.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.21%)</title><rect x="589.7" y="1139.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="592.7" y="1150.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.14%)</title><rect x="590.5" y="1123.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="593.5" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.14%)</title><rect x="590.5" y="1107.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="593.5" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.14%)</title><rect x="590.5" y="1091.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.5" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.07%)</title><rect x="590.5" y="1075.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="593.5" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.07%)</title><rect x="591.3" y="1075.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.3" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (1 samples, 0.07%)</title><rect x="592.1" y="1219.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.1" y="1230.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.07%)</title><rect x="592.1" y="1203.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="595.1" y="1214.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.07%)</title><rect x="592.1" y="1187.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="595.1" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (167 samples, 11.70%)</title><rect x="593.0" y="1219.0" width="138.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="596.0" y="1230.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (2 samples, 0.14%)</title><rect x="593.0" y="1203.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="596.0" y="1214.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.&lt;init&gt; (2 samples, 0.14%)</title><rect x="593.0" y="1187.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="596.0" y="1198.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.&lt;init&gt; (2 samples, 0.14%)</title><rect x="593.0" y="1171.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.0" y="1182.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.21%)</title><rect x="594.6" y="1203.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="597.6" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (162 samples, 11.35%)</title><rect x="597.1" y="1203.0" width="134.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="600.1" y="1214.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (116 samples, 8.13%)</title><rect x="597.1" y="1187.0" width="95.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="600.1" y="1198.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (1 samples, 0.07%)</title><rect x="597.1" y="1171.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="600.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="597.1" y="1155.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="600.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (1 samples, 0.07%)</title><rect x="597.1" y="1139.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="600.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandle.acquireFence (1 samples, 0.07%)</title><rect x="597.1" y="1123.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="600.1" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.iterator (115 samples, 8.06%)</title><rect x="597.9" y="1171.0" width="95.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="600.9" y="1182.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (6 samples, 0.42%)</title><rect x="600.4" y="1155.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="603.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (6 samples, 0.42%)</title><rect x="600.4" y="1139.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="603.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (6 samples, 0.42%)</title><rect x="600.4" y="1123.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="602.1" y="1107.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="605.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="602.1" y="1091.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="605.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.21%)</title><rect x="602.9" y="1107.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.21%)</title><rect x="602.9" y="1091.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="605.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.21%)</title><rect x="602.9" y="1075.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="605.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.14%)</title><rect x="605.4" y="1155.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="608.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.14%)</title><rect x="605.4" y="1139.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="608.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (2 samples, 0.14%)</title><rect x="605.4" y="1123.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (1 samples, 0.07%)</title><rect x="606.2" y="1107.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.remove (1 samples, 0.07%)</title><rect x="606.2" y="1091.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.2" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (90 samples, 6.31%)</title><rect x="607.0" y="1155.0" width="74.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.0" y="1166.0">ru/mail/..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (5 samples, 0.35%)</title><rect x="607.0" y="1139.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.0" y="1150.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (5 samples, 0.35%)</title><rect x="607.0" y="1123.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="610.0" y="1134.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (5 samples, 0.35%)</title><rect x="607.0" y="1107.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.0" y="1118.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (4 samples, 0.28%)</title><rect x="607.9" y="1091.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="610.9" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (3 samples, 0.21%)</title><rect x="608.7" y="1075.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="611.7" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.14%)</title><rect x="611.2" y="1139.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="614.2" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.28%)</title><rect x="612.8" y="1139.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="615.8" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.28%)</title><rect x="612.8" y="1123.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="615.8" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.07%)</title><rect x="615.3" y="1107.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="618.3" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.07%)</title><rect x="615.3" y="1091.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (2 samples, 0.14%)</title><rect x="616.1" y="1139.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="619.1" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (77 samples, 5.40%)</title><rect x="617.8" y="1139.0" width="63.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="620.8" y="1150.0">ru/mail..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (2 samples, 0.14%)</title><rect x="617.8" y="1123.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="620.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (73 samples, 5.12%)</title><rect x="619.4" y="1123.0" width="60.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.4" y="1134.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (73 samples, 5.12%)</title><rect x="619.4" y="1107.0" width="60.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="622.4" y="1118.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (73 samples, 5.12%)</title><rect x="619.4" y="1091.0" width="60.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.4" y="1102.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (5 samples, 0.35%)</title><rect x="619.4" y="1075.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (5 samples, 0.35%)</title><rect x="619.4" y="1059.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="622.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.21%)</title><rect x="621.1" y="1043.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.1" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.14%)</title><rect x="621.9" y="1027.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.14%)</title><rect x="621.9" y="1011.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="624.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.14%)</title><rect x="621.9" y="995.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="624.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.07%)</title><rect x="621.9" y="979.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="624.9" y="990.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.07%)</title><rect x="622.7" y="979.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="625.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (68 samples, 4.77%)</title><rect x="623.6" y="1075.0" width="56.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.6" y="1086.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (67 samples, 4.70%)</title><rect x="624.4" y="1059.0" width="55.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.4" y="1070.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (9 samples, 0.63%)</title><rect x="626.9" y="1043.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="629.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.63%)</title><rect x="626.9" y="1027.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="629.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.63%)</title><rect x="626.9" y="1011.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="629.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.49%)</title><rect x="627.7" y="995.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="630.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.07%)</title><rect x="633.5" y="995.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.07%)</title><rect x="633.5" y="979.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.5" y="990.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.07%)</title><rect x="633.5" y="963.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="636.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (55 samples, 3.85%)</title><rect x="634.3" y="1043.0" width="45.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.3" y="1054.0">java..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="649.2" y="1027.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="652.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="649.2" y="1011.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="652.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="649.2" y="995.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="652.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="649.2" y="979.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="652.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="649.2" y="963.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="652.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="649.2" y="947.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="652.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="649.2" y="931.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="652.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (36 samples, 2.52%)</title><rect x="650.0" y="1027.0" width="29.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="653.0" y="1038.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (35 samples, 2.45%)</title><rect x="650.9" y="1011.0" width="28.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="653.9" y="1022.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (32 samples, 2.24%)</title><rect x="653.3" y="995.0" width="26.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.3" y="1006.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.21%)</title><rect x="653.3" y="979.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="656.3" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.07%)</title><rect x="655.8" y="979.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="658.8" y="990.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (18 samples, 1.26%)</title><rect x="656.6" y="979.0" width="14.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.6" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.07%)</title><rect x="667.4" y="963.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="670.4" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.07%)</title><rect x="667.4" y="947.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="670.4" y="958.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.28%)</title><rect x="668.2" y="963.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.2" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.70%)</title><rect x="671.5" y="979.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="674.5" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.35%)</title><rect x="675.7" y="963.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="678.7" y="974.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.14%)</title><rect x="678.1" y="947.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.14%)</title><rect x="679.8" y="1123.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.14%)</title><rect x="679.8" y="1107.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="682.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.14%)</title><rect x="679.8" y="1091.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (2 samples, 0.14%)</title><rect x="679.8" y="1075.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="682.8" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (14 samples, 0.98%)</title><rect x="681.5" y="1155.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="684.5" y="1166.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (2 samples, 0.14%)</title><rect x="681.5" y="1139.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="684.5" y="1150.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.&lt;init&gt; (2 samples, 0.14%)</title><rect x="681.5" y="1123.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="684.5" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.&lt;init&gt; (2 samples, 0.14%)</title><rect x="681.5" y="1107.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.5" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/UnmodifiableIterator.&lt;init&gt; (2 samples, 0.14%)</title><rect x="681.5" y="1091.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="684.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.14%)</title><rect x="681.5" y="1075.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="684.5" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (5 samples, 0.35%)</title><rect x="683.1" y="1139.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="686.1" y="1150.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (5 samples, 0.35%)</title><rect x="683.1" y="1123.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.1" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.07%)</title><rect x="683.9" y="1107.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="686.9" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (2 samples, 0.14%)</title><rect x="684.8" y="1107.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="687.8" y="1118.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (1 samples, 0.07%)</title><rect x="686.4" y="1107.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="689.4" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (7 samples, 0.49%)</title><rect x="687.2" y="1139.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="690.2" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (7 samples, 0.49%)</title><rect x="687.2" y="1123.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="690.2" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (7 samples, 0.49%)</title><rect x="687.2" y="1107.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.2" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.21%)</title><rect x="687.2" y="1091.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.2" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="687.2" y="1075.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="690.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.14%)</title><rect x="688.1" y="1075.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="691.1" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (3 samples, 0.21%)</title><rect x="689.7" y="1091.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="692.7" y="1102.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (3 samples, 0.21%)</title><rect x="689.7" y="1075.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="692.7" y="1086.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.07%)</title><rect x="692.2" y="1091.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="695.2" y="1102.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.07%)</title><rect x="692.2" y="1075.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="695.2" y="1086.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1 samples, 0.07%)</title><rect x="692.2" y="1059.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="695.2" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (46 samples, 3.22%)</title><rect x="693.0" y="1187.0" width="38.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="696.0" y="1198.0">ru/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (2 samples, 0.14%)</title><rect x="693.0" y="1171.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="696.0" y="1182.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (24 samples, 1.68%)</title><rect x="694.7" y="1171.0" width="19.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="697.7" y="1182.0"></text>
</g>
<g>
<title>com/google/common/base/Preconditions.checkNotNull (1 samples, 0.07%)</title><rect x="694.7" y="1155.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="697.7" y="1166.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (23 samples, 1.61%)</title><rect x="695.5" y="1155.0" width="19.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="698.5" y="1166.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (22 samples, 1.54%)</title><rect x="696.3" y="1139.0" width="18.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="699.3" y="1150.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (21 samples, 1.47%)</title><rect x="697.2" y="1123.0" width="17.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="700.2" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (21 samples, 1.47%)</title><rect x="697.2" y="1107.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="700.2" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (21 samples, 1.47%)</title><rect x="697.2" y="1091.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="700.2" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (15 samples, 1.05%)</title><rect x="697.2" y="1075.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="700.2" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.14%)</title><rect x="697.2" y="1059.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="700.2" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 0.14%)</title><rect x="697.2" y="1043.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="700.2" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2 samples, 0.14%)</title><rect x="697.2" y="1027.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="700.2" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (11 samples, 0.77%)</title><rect x="698.8" y="1059.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="701.8" y="1070.0"></text>
</g>
<g>
<title>InlineCacheBuffer (1 samples, 0.07%)</title><rect x="698.8" y="1043.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="701.8" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (8 samples, 0.56%)</title><rect x="699.6" y="1043.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="702.6" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (8 samples, 0.56%)</title><rect x="699.6" y="1027.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="702.6" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (7 samples, 0.49%)</title><rect x="700.5" y="1011.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="703.5" y="1022.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (4 samples, 0.28%)</title><rect x="702.1" y="995.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="705.1" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.07%)</title><rect x="704.6" y="979.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="707.6" y="990.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.07%)</title><rect x="705.4" y="995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="708.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.14%)</title><rect x="706.3" y="1043.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.14%)</title><rect x="706.3" y="1027.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="709.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.14%)</title><rect x="706.3" y="1011.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.3" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2 samples, 0.14%)</title><rect x="707.9" y="1059.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.9" y="1070.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2 samples, 0.14%)</title><rect x="707.9" y="1043.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="710.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.14%)</title><rect x="709.6" y="1075.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.14%)</title><rect x="709.6" y="1059.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.6" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.07%)</title><rect x="709.6" y="1043.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="712.6" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.07%)</title><rect x="709.6" y="1027.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="712.6" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.07%)</title><rect x="710.4" y="1043.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.4" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$69/1288005806.apply (4 samples, 0.28%)</title><rect x="711.2" y="1075.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="714.2" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (4 samples, 0.28%)</title><rect x="711.2" y="1059.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.28%)</title><rect x="711.2" y="1043.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="714.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.28%)</title><rect x="711.2" y="1027.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.28%)</title><rect x="711.2" y="1011.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="714.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.28%)</title><rect x="711.2" y="995.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="714.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.28%)</title><rect x="711.2" y="979.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="714.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.14%)</title><rect x="712.0" y="963.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="715.0" y="974.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.14%)</title><rect x="712.0" y="947.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="715.0" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.07%)</title><rect x="713.7" y="963.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="716.7" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.07%)</title><rect x="713.7" y="947.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.7" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.07%)</title><rect x="713.7" y="931.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="716.7" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (20 samples, 1.40%)</title><rect x="714.5" y="1171.0" width="16.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.5" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (20 samples, 1.40%)</title><rect x="714.5" y="1155.0" width="16.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.5" y="1166.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (8 samples, 0.56%)</title><rect x="723.6" y="1139.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="726.6" y="1150.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (7 samples, 0.49%)</title><rect x="723.6" y="1123.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="726.6" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (7 samples, 0.49%)</title><rect x="723.6" y="1107.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="726.6" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (7 samples, 0.49%)</title><rect x="723.6" y="1091.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="726.6" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (6 samples, 0.42%)</title><rect x="724.4" y="1075.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="727.4" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (6 samples, 0.42%)</title><rect x="724.4" y="1059.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="727.4" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (6 samples, 0.42%)</title><rect x="724.4" y="1043.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="727.4" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (5 samples, 0.35%)</title><rect x="725.3" y="1027.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="728.3" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (4 samples, 0.28%)</title><rect x="725.3" y="1011.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="728.3" y="1022.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (4 samples, 0.28%)</title><rect x="725.3" y="995.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="728.3" y="1006.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (4 samples, 0.28%)</title><rect x="725.3" y="979.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="728.3" y="990.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.21%)</title><rect x="726.1" y="963.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="729.1" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.hasNext (2 samples, 0.14%)</title><rect x="726.1" y="947.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.1" y="958.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="726.9" y="931.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.9" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.07%)</title><rect x="727.8" y="947.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (1 samples, 0.07%)</title><rect x="728.6" y="1011.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.07%)</title><rect x="728.6" y="995.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.6" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.07%)</title><rect x="729.4" y="1123.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.4" y="1134.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.07%)</title><rect x="729.4" y="1107.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="732.4" y="1118.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="730.2" y="1139.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="733.2" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$79/1761683581.action (3 samples, 0.21%)</title><rect x="731.1" y="1283.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="734.1" y="1294.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (401 samples, 28.10%)</title><rect x="733.5" y="1363.0" width="331.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="736.5" y="1374.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (1 samples, 0.07%)</title><rect x="734.4" y="1347.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="737.4" y="1358.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (109 samples, 7.64%)</title><rect x="735.2" y="1347.0" width="90.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.2" y="1358.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (7 samples, 0.49%)</title><rect x="736.9" y="1331.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="739.9" y="1342.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.07%)</title><rect x="741.8" y="1315.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="744.8" y="1326.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (100 samples, 7.01%)</title><rect x="742.6" y="1331.0" width="82.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="745.6" y="1342.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 0.42%)</title><rect x="745.9" y="1315.0" width="5.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="748.9" y="1326.0"></text>
</g>
<g>
<title>[unknown] (88 samples, 6.17%)</title><rect x="750.9" y="1315.0" width="72.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="753.9" y="1326.0">[unknown]</text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.07%)</title><rect x="750.9" y="1299.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="753.9" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="750.9" y="1283.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="753.9" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="750.9" y="1267.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="753.9" y="1278.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="750.9" y="1251.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="753.9" y="1262.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.07%)</title><rect x="751.7" y="1299.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="754.7" y="1310.0"></text>
</g>
<g>
<title>epoll_wait (86 samples, 6.03%)</title><rect x="752.6" y="1299.0" width="71.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="755.6" y="1310.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (82 samples, 5.75%)</title><rect x="755.9" y="1283.0" width="67.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="758.9" y="1294.0">[unknown]</text>
</g>
<g>
<title>[unknown] (82 samples, 5.75%)</title><rect x="755.9" y="1267.0" width="67.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="758.9" y="1278.0">[unknown]</text>
</g>
<g>
<title>[unknown] (71 samples, 4.98%)</title><rect x="765.0" y="1251.0" width="58.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="768.0" y="1262.0">[unkno..</text>
</g>
<g>
<title>[unknown] (71 samples, 4.98%)</title><rect x="765.0" y="1235.0" width="58.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="768.0" y="1246.0">[unkno..</text>
</g>
<g>
<title>[unknown] (69 samples, 4.84%)</title><rect x="766.6" y="1219.0" width="57.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="769.6" y="1230.0">[unkno..</text>
</g>
<g>
<title>[unknown] (59 samples, 4.13%)</title><rect x="774.9" y="1203.0" width="48.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="777.9" y="1214.0">[unk..</text>
</g>
<g>
<title>[unknown] (45 samples, 3.15%)</title><rect x="786.5" y="1187.0" width="37.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="789.5" y="1198.0">[un..</text>
</g>
<g>
<title>[unknown] (30 samples, 2.10%)</title><rect x="798.9" y="1171.0" width="24.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="801.9" y="1182.0">[..</text>
</g>
<g>
<title>[unknown] (25 samples, 1.75%)</title><rect x="803.0" y="1155.0" width="20.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="806.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.26%)</title><rect x="808.8" y="1139.0" width="14.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="811.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="822.0" y="1123.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="825.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="822.0" y="1107.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="825.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="822.0" y="1091.0" width="1.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="825.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="822.0" y="1075.0" width="1.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="825.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="822.0" y="1059.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="825.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="822.9" y="1043.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="825.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="822.9" y="1027.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="825.9" y="1038.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.07%)</title><rect x="823.7" y="1315.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="826.7" y="1326.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.07%)</title><rect x="824.5" y="1315.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="827.5" y="1326.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (290 samples, 20.32%)</title><rect x="825.3" y="1347.0" width="239.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="828.3" y="1358.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.07%)</title><rect x="829.5" y="1331.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="832.5" y="1342.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (282 samples, 19.76%)</title><rect x="830.3" y="1331.0" width="233.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.3" y="1342.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (199 samples, 13.95%)</title><rect x="831.9" y="1315.0" width="164.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="834.9" y="1326.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.07%)</title><rect x="840.2" y="1299.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.2" y="1310.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (140 samples, 9.81%)</title><rect x="841.0" y="1299.0" width="115.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="844.0" y="1310.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (140 samples, 9.81%)</title><rect x="841.0" y="1283.0" width="115.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.0" y="1294.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (131 samples, 9.18%)</title><rect x="841.0" y="1267.0" width="108.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.0" y="1278.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10 samples, 0.70%)</title><rect x="841.0" y="1251.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="844.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.07%)</title><rect x="841.9" y="1235.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="844.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.07%)</title><rect x="841.9" y="1219.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.9" y="1230.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="842.7" y="1235.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="845.7" y="1246.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.35%)</title><rect x="845.2" y="1235.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="848.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.35%)</title><rect x="845.2" y="1219.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="848.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.35%)</title><rect x="845.2" y="1203.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.35%)</title><rect x="845.2" y="1187.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="848.2" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (121 samples, 8.48%)</title><rect x="849.3" y="1251.0" width="100.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="852.3" y="1262.0">ru/mail/poli..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="849.3" y="1235.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="852.3" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="849.3" y="1219.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="852.3" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="849.3" y="1203.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="852.3" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="849.3" y="1187.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="852.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="849.3" y="1171.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="852.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="849.3" y="1155.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="852.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="849.3" y="1139.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="852.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.14%)</title><rect x="850.1" y="1235.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="853.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.14%)</title><rect x="850.1" y="1219.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.1" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$79/1761683581.get$Lambda (2 samples, 0.14%)</title><rect x="850.1" y="1203.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="853.1" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (118 samples, 8.27%)</title><rect x="851.8" y="1235.0" width="97.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="854.8" y="1246.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (117 samples, 8.20%)</title><rect x="852.6" y="1219.0" width="96.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.6" y="1230.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (117 samples, 8.20%)</title><rect x="852.6" y="1203.0" width="96.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="855.6" y="1214.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (2 samples, 0.14%)</title><rect x="853.4" y="1187.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="856.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (107 samples, 7.50%)</title><rect x="855.1" y="1187.0" width="88.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="858.1" y="1198.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.49%)</title><rect x="855.1" y="1171.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.49%)</title><rect x="855.1" y="1155.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="858.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.42%)</title><rect x="855.9" y="1139.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.14%)</title><rect x="857.6" y="1123.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="860.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.14%)</title><rect x="857.6" y="1107.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="860.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.14%)</title><rect x="857.6" y="1091.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.14%)</title><rect x="859.2" y="1123.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="862.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.14%)</title><rect x="859.2" y="1107.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="862.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.14%)</title><rect x="859.2" y="1091.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="862.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (2 samples, 0.14%)</title><rect x="859.2" y="1075.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="862.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.21%)</title><rect x="860.9" y="1171.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="863.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.21%)</title><rect x="860.9" y="1155.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="863.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.21%)</title><rect x="860.9" y="1139.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="863.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.21%)</title><rect x="860.9" y="1123.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="863.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.14%)</title><rect x="860.9" y="1107.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="863.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.14%)</title><rect x="860.9" y="1091.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="863.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.14%)</title><rect x="860.9" y="1075.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="863.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.07%)</title><rect x="862.5" y="1107.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="865.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (97 samples, 6.80%)</title><rect x="863.4" y="1171.0" width="80.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="866.4" y="1182.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (95 samples, 6.66%)</title><rect x="865.0" y="1155.0" width="78.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="868.0" y="1166.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (94 samples, 6.59%)</title><rect x="865.9" y="1139.0" width="77.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.9" y="1150.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (94 samples, 6.59%)</title><rect x="865.9" y="1123.0" width="77.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="868.9" y="1134.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (94 samples, 6.59%)</title><rect x="865.9" y="1107.0" width="77.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="868.9" y="1118.0">jdk/inter..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.49%)</title><rect x="867.5" y="1091.0" width="5.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="870.5" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.07%)</title><rect x="867.5" y="1075.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="870.5" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.07%)</title><rect x="868.3" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.3" y="1086.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.07%)</title><rect x="869.2" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="872.2" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.07%)</title><rect x="870.0" y="1075.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="873.0" y="1086.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.14%)</title><rect x="870.8" y="1075.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="873.8" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="872.5" y="1075.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="875.5" y="1086.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.14%)</title><rect x="873.3" y="1091.0" width="1.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="876.3" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="874.9" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.9" y="1102.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (82 samples, 5.75%)</title><rect x="875.8" y="1091.0" width="67.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="878.8" y="1102.0">pthread..</text>
</g>
<g>
<title>[unknown] (72 samples, 5.05%)</title><rect x="884.0" y="1075.0" width="59.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="887.0" y="1086.0">[unkno..</text>
</g>
<g>
<title>[unknown] (72 samples, 5.05%)</title><rect x="884.0" y="1059.0" width="59.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="887.0" y="1070.0">[unkno..</text>
</g>
<g>
<title>[unknown] (65 samples, 4.56%)</title><rect x="889.8" y="1043.0" width="53.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="892.8" y="1054.0">[unkn..</text>
</g>
<g>
<title>[unknown] (65 samples, 4.56%)</title><rect x="889.8" y="1027.0" width="53.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="892.8" y="1038.0">[unkn..</text>
</g>
<g>
<title>[unknown] (63 samples, 4.41%)</title><rect x="891.5" y="1011.0" width="52.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="894.5" y="1022.0">[unkn..</text>
</g>
<g>
<title>[unknown] (63 samples, 4.41%)</title><rect x="891.5" y="995.0" width="52.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="894.5" y="1006.0">[unkn..</text>
</g>
<g>
<title>[unknown] (54 samples, 3.78%)</title><rect x="898.9" y="979.0" width="44.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="901.9" y="990.0">[unk..</text>
</g>
<g>
<title>[unknown] (51 samples, 3.57%)</title><rect x="901.4" y="963.0" width="42.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="904.4" y="974.0">[unk..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.07%)</title><rect x="943.6" y="1187.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="946.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.42%)</title><rect x="944.4" y="1187.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="947.4" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="944.4" y="1171.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="947.4" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="944.4" y="1155.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="947.4" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="944.4" y="1139.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="947.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="944.4" y="1123.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="947.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="944.4" y="1107.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="947.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="944.4" y="1091.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="947.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="944.4" y="1075.0" width="0.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="947.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.35%)</title><rect x="945.2" y="1171.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="948.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.21%)</title><rect x="945.2" y="1155.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="948.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="946.9" y="1139.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="949.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.14%)</title><rect x="947.7" y="1155.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="950.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.14%)</title><rect x="947.7" y="1139.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="950.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="947.7" y="1123.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="950.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="948.5" y="1123.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="951.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.07%)</title><rect x="948.5" y="1107.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="951.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.07%)</title><rect x="948.5" y="1091.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="951.5" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.07%)</title><rect x="949.4" y="1267.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="952.4" y="1278.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.49%)</title><rect x="950.2" y="1267.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="953.2" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.42%)</title><rect x="951.0" y="1251.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="954.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="951.9" y="1235.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="954.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.07%)</title><rect x="951.9" y="1219.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="954.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.07%)</title><rect x="951.9" y="1203.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="954.9" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.28%)</title><rect x="952.7" y="1235.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="955.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.28%)</title><rect x="952.7" y="1219.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.21%)</title><rect x="953.5" y="1203.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.5" y="1214.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="953.5" y="1187.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="956.5" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.07%)</title><rect x="956.0" y="1267.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="959.0" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.07%)</title><rect x="956.0" y="1251.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="959.0" y="1262.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9 samples, 0.63%)</title><rect x="956.8" y="1299.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="959.8" y="1310.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.07%)</title><rect x="956.8" y="1283.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="959.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.07%)</title><rect x="956.8" y="1267.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="959.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.07%)</title><rect x="956.8" y="1251.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="959.8" y="1262.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.56%)</title><rect x="957.6" y="1283.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="960.6" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.56%)</title><rect x="957.6" y="1267.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="960.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.56%)</title><rect x="957.6" y="1251.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="960.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.56%)</title><rect x="957.6" y="1235.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="960.6" y="1246.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.28%)</title><rect x="964.3" y="1299.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="967.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.21%)</title><rect x="965.1" y="1283.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="968.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.21%)</title><rect x="965.1" y="1267.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="968.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.07%)</title><rect x="966.7" y="1251.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="969.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.07%)</title><rect x="966.7" y="1235.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="969.7" y="1246.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.07%)</title><rect x="967.6" y="1299.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="970.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="967.6" y="1283.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="970.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="967.6" y="1267.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="970.6" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="967.6" y="1251.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="970.6" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="967.6" y="1235.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="970.6" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="967.6" y="1219.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="970.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="967.6" y="1203.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="970.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="967.6" y="1187.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="970.6" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (18 samples, 1.26%)</title><rect x="968.4" y="1299.0" width="14.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.98%)</title><rect x="970.9" y="1283.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="973.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.70%)</title><rect x="974.2" y="1267.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="977.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="980.0" y="1251.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="983.0" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="980.0" y="1235.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="983.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="980.0" y="1219.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="983.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.14%)</title><rect x="980.8" y="1251.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="983.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.14%)</title><rect x="980.8" y="1235.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="983.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.14%)</title><rect x="980.8" y="1219.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="983.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.14%)</title><rect x="980.8" y="1203.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="983.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.07%)</title><rect x="982.4" y="1283.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="985.4" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 1.12%)</title><rect x="983.3" y="1299.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="986.3" y="1310.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.70%)</title><rect x="988.2" y="1283.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="991.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.63%)</title><rect x="989.1" y="1267.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="992.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.56%)</title><rect x="989.1" y="1251.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="992.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.14%)</title><rect x="993.2" y="1235.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="996.2" y="1246.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.07%)</title><rect x="994.8" y="1235.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="997.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.07%)</title><rect x="995.7" y="1251.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="998.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.07%)</title><rect x="995.7" y="1235.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="998.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.isRunning (1 samples, 0.07%)</title><rect x="995.7" y="1219.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="998.7" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (81 samples, 5.68%)</title><rect x="996.5" y="1315.0" width="67.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="999.5" y="1326.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (81 samples, 5.68%)</title><rect x="996.5" y="1299.0" width="67.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.5" y="1310.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.07%)</title><rect x="999.8" y="1283.0" width="0.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1002.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.26%)</title><rect x="1000.6" y="1283.0" width="14.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1003.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.26%)</title><rect x="1000.6" y="1267.0" width="14.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1003.6" y="1278.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (16 samples, 1.12%)</title><rect x="1000.6" y="1251.0" width="13.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1003.6" y="1262.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.07%)</title><rect x="1000.6" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1003.6" y="1246.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.28%)</title><rect x="1001.5" y="1235.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1004.5" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.07%)</title><rect x="1004.8" y="1235.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1007.8" y="1246.0"></text>
</g>
<g>
<title>__memmove_ssse3 (2 samples, 0.14%)</title><rect x="1005.6" y="1235.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1008.6" y="1246.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.56%)</title><rect x="1007.3" y="1235.0" width="6.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1010.3" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.07%)</title><rect x="1008.1" y="1219.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.1" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.07%)</title><rect x="1008.9" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.9" y="1230.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.35%)</title><rect x="1009.7" y="1219.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1012.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="1012.2" y="1203.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1015.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="1012.2" y="1187.0" width="1.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1015.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="1012.2" y="1171.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1015.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1013.0" y="1155.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1016.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1013.0" y="1139.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1016.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1013.0" y="1123.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1016.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1013.0" y="1107.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1016.0" y="1118.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="1013.9" y="1251.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1016.9" y="1262.0"></text>
</g>
<g>
<title>recv (1 samples, 0.07%)</title><rect x="1014.7" y="1251.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1017.7" y="1262.0"></text>
</g>
<g>
<title>recv (58 samples, 4.06%)</title><rect x="1015.5" y="1283.0" width="48.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1018.5" y="1294.0">recv</text>
</g>
<g>
<title>[unknown] (55 samples, 3.85%)</title><rect x="1018.0" y="1267.0" width="45.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1021.0" y="1278.0">[unk..</text>
</g>
<g>
<title>[unknown] (55 samples, 3.85%)</title><rect x="1018.0" y="1251.0" width="45.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1021.0" y="1262.0">[unk..</text>
</g>
<g>
<title>[unknown] (53 samples, 3.71%)</title><rect x="1019.7" y="1235.0" width="43.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1022.7" y="1246.0">[unk..</text>
</g>
<g>
<title>[unknown] (53 samples, 3.71%)</title><rect x="1019.7" y="1219.0" width="43.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1022.7" y="1230.0">[unk..</text>
</g>
<g>
<title>[unknown] (50 samples, 3.50%)</title><rect x="1022.1" y="1203.0" width="41.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1025.1" y="1214.0">[un..</text>
</g>
<g>
<title>[unknown] (48 samples, 3.36%)</title><rect x="1023.8" y="1187.0" width="39.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1026.8" y="1198.0">[un..</text>
</g>
<g>
<title>[unknown] (43 samples, 3.01%)</title><rect x="1027.9" y="1171.0" width="35.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1030.9" y="1182.0">[un..</text>
</g>
<g>
<title>[unknown] (37 samples, 2.59%)</title><rect x="1032.9" y="1155.0" width="30.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1035.9" y="1166.0">[u..</text>
</g>
<g>
<title>[unknown] (23 samples, 1.61%)</title><rect x="1044.5" y="1139.0" width="19.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1047.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.91%)</title><rect x="1052.7" y="1123.0" width="10.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1055.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.70%)</title><rect x="1055.2" y="1107.0" width="8.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1058.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.35%)</title><rect x="1059.3" y="1091.0" width="4.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1062.3" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.14%)</title><rect x="1063.5" y="1331.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.5" y="1342.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.14%)</title><rect x="1063.5" y="1315.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1066.5" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1063.5" y="1299.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1066.5" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1063.5" y="1283.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1066.5" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1063.5" y="1267.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1066.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1063.5" y="1251.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1066.5" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1063.5" y="1235.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1066.5" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1063.5" y="1219.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1066.5" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1063.5" y="1203.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1066.5" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="1064.3" y="1299.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1067.3" y="1310.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.07%)</title><rect x="1065.1" y="1363.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1068.1" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1065.1" y="1347.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1068.1" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1065.1" y="1331.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1068.1" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1065.1" y="1315.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1068.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1065.1" y="1299.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1068.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1065.1" y="1283.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1068.1" y="1294.0"></text>
</g>
<g>
<title>start_thread (150 samples, 10.51%)</title><rect x="1066.0" y="1363.0" width="124.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1069.0" y="1374.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (150 samples, 10.51%)</title><rect x="1066.0" y="1347.0" width="124.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1069.0" y="1358.0">thread_native_e..</text>
</g>
<g>
<title>Thread::call_run() (150 samples, 10.51%)</title><rect x="1066.0" y="1331.0" width="124.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1069.0" y="1342.0">Thread::call_ru..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.07%)</title><rect x="1066.0" y="1315.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1069.0" y="1326.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.07%)</title><rect x="1066.0" y="1299.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.0" y="1310.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.07%)</title><rect x="1066.0" y="1283.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.0" y="1294.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="1066.0" y="1267.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.0" y="1278.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="1066.0" y="1251.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.0" y="1262.0"></text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 1.12%)</title><rect x="1066.8" y="1315.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1069.8" y="1326.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.12%)</title><rect x="1066.8" y="1299.0" width="13.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.8" y="1310.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (15 samples, 1.05%)</title><rect x="1066.8" y="1283.0" width="12.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.8" y="1294.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (15 samples, 1.05%)</title><rect x="1066.8" y="1267.0" width="12.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1069.8" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (15 samples, 1.05%)</title><rect x="1066.8" y="1251.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.8" y="1262.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (15 samples, 1.05%)</title><rect x="1066.8" y="1235.0" width="12.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.8" y="1246.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (15 samples, 1.05%)</title><rect x="1066.8" y="1219.0" width="12.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.8" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (14 samples, 0.98%)</title><rect x="1066.8" y="1203.0" width="11.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.8" y="1214.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 0.70%)</title><rect x="1070.1" y="1187.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.1" y="1198.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.07%)</title><rect x="1074.2" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.2" y="1182.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.28%)</title><rect x="1075.1" y="1171.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.1" y="1182.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.28%)</title><rect x="1075.1" y="1155.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.1" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.07%)</title><rect x="1078.4" y="1203.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.4" y="1214.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.07%)</title><rect x="1078.4" y="1187.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.4" y="1198.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="1078.4" y="1171.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.4" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.07%)</title><rect x="1078.4" y="1155.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.4" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1079.2" y="1283.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.2" y="1294.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.07%)</title><rect x="1079.2" y="1267.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.2" y="1278.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="1079.2" y="1251.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.2" y="1262.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.07%)</title><rect x="1079.2" y="1235.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1082.2" y="1246.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (1 samples, 0.07%)</title><rect x="1079.2" y="1219.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1082.2" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.07%)</title><rect x="1079.2" y="1203.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.2" y="1214.0"></text>
</g>
<g>
<title>JavaThread::run() (132 samples, 9.25%)</title><rect x="1080.0" y="1315.0" width="109.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.0" y="1326.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (132 samples, 9.25%)</title><rect x="1080.0" y="1299.0" width="109.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.0" y="1310.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (131 samples, 9.18%)</title><rect x="1080.0" y="1283.0" width="108.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.0" y="1294.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (131 samples, 9.18%)</title><rect x="1080.0" y="1267.0" width="108.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.0" y="1278.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (129 samples, 9.04%)</title><rect x="1080.0" y="1251.0" width="106.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.0" y="1262.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (129 samples, 9.04%)</title><rect x="1080.0" y="1235.0" width="106.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.0" y="1246.0">Compile::Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (86 samples, 6.03%)</title><rect x="1080.0" y="1219.0" width="71.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.0" y="1230.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.21%)</title><rect x="1080.0" y="1203.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1083.0" y="1214.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.21%)</title><rect x="1080.0" y="1187.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.0" y="1198.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.21%)</title><rect x="1080.0" y="1171.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1083.0" y="1182.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (3 samples, 0.21%)</title><rect x="1080.0" y="1155.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1083.0" y="1166.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.07%)</title><rect x="1080.0" y="1139.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.0" y="1150.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="1080.8" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.8" y="1150.0"></text>
</g>
<g>
<title>loadINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="1081.7" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.7" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.21%)</title><rect x="1082.5" y="1203.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.5" y="1214.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.14%)</title><rect x="1083.3" y="1187.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1086.3" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="1084.2" y="1171.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1087.2" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="1084.2" y="1155.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.2" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.77%)</title><rect x="1085.0" y="1203.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.0" y="1214.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.14%)</title><rect x="1085.0" y="1187.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.0" y="1198.0"></text>
</g>
<g>
<title>Matcher::clone_address_expressions(AddPNode*, Matcher::MStack&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="1085.8" y="1171.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.8" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.56%)</title><rect x="1086.6" y="1187.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.6" y="1198.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="1087.5" y="1171.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.5" y="1182.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 0.35%)</title><rect x="1088.3" y="1171.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.3" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.21%)</title><rect x="1088.3" y="1155.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.3" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.21%)</title><rect x="1088.3" y="1139.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.3" y="1150.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="1089.1" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.1" y="1134.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.07%)</title><rect x="1089.9" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.9" y="1134.0"></text>
</g>
<g>
<title>State::_sub_Op_CmpI(Node const*) (1 samples, 0.07%)</title><rect x="1089.9" y="1107.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="1090.8" y="1155.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.8" y="1166.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.07%)</title><rect x="1090.8" y="1139.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.8" y="1150.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.07%)</title><rect x="1091.6" y="1155.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.6" y="1166.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1092.4" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.4" y="1182.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.07%)</title><rect x="1093.3" y="1187.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.3" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (11 samples, 0.77%)</title><rect x="1094.1" y="1203.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.1" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (10 samples, 0.70%)</title><rect x="1094.1" y="1187.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.1" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1094.1" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.1" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="1094.1" y="1155.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.14%)</title><rect x="1094.9" y="1171.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.9" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.07%)</title><rect x="1095.7" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.07%)</title><rect x="1095.7" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.07%)</title><rect x="1096.6" y="1171.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.6" y="1182.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1096.6" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.14%)</title><rect x="1097.4" y="1171.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (1 samples, 0.07%)</title><rect x="1099.0" y="1171.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.0" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.21%)</title><rect x="1099.9" y="1171.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.9" y="1182.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1099.9" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.9" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="1100.7" y="1155.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.7" y="1166.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="1101.5" y="1139.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.5" y="1150.0"></text>
</g>
<g>
<title>jmpDirNode::pinned() const (1 samples, 0.07%)</title><rect x="1102.3" y="1187.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (58 samples, 4.06%)</title><rect x="1103.2" y="1203.0" width="47.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.2" y="1214.0">Phas..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.14%)</title><rect x="1103.2" y="1187.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.2" y="1198.0"></text>
</g>
<g>
<title>rRegIOper::clone() const (1 samples, 0.07%)</title><rect x="1104.0" y="1171.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.21%)</title><rect x="1104.8" y="1187.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.8" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1104.8" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.8" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1105.7" y="1171.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.07%)</title><rect x="1107.3" y="1187.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.3" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1107.3" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.3" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.21%)</title><rect x="1108.1" y="1187.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.1" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.07%)</title><rect x="1109.8" y="1171.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.07%)</title><rect x="1109.8" y="1155.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.70%)</title><rect x="1110.6" y="1187.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.6" y="1198.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1110.6" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.6" y="1182.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.07%)</title><rect x="1110.6" y="1155.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.07%)</title><rect x="1111.4" y="1171.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.4" y="1182.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1111.4" y="1155.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.28%)</title><rect x="1112.3" y="1171.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.3" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.07%)</title><rect x="1115.6" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.21%)</title><rect x="1116.4" y="1171.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.4" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1117.2" y="1155.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.2" y="1166.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="1118.1" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (8 samples, 0.56%)</title><rect x="1118.9" y="1187.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.9" y="1198.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="1122.2" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.2" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.14%)</title><rect x="1123.0" y="1171.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.0" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.07%)</title><rect x="1124.7" y="1171.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="1125.5" y="1187.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.5" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (15 samples, 1.05%)</title><rect x="1126.3" y="1187.0" width="12.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.3" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.35%)</title><rect x="1133.8" y="1171.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1137.1" y="1155.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="1166.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="1137.9" y="1171.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1140.9" y="1182.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.07%)</title><rect x="1138.7" y="1187.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.7" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="1138.7" y="1171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="1138.7" y="1155.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.07%)</title><rect x="1139.6" y="1187.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1139.6" y="1171.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.6" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.77%)</title><rect x="1140.4" y="1187.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.4" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1142.9" y="1171.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.9" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.49%)</title><rect x="1143.7" y="1171.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.7" y="1182.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.14%)</title><rect x="1147.0" y="1155.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1148.7" y="1155.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.7" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.07%)</title><rect x="1149.5" y="1187.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1152.5" y="1198.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="1150.3" y="1187.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.3" y="1198.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 1.68%)</title><rect x="1151.1" y="1219.0" width="19.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.1" y="1230.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="1151.1" y="1203.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="1214.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1151.1" y="1187.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.1" y="1198.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.07%)</title><rect x="1151.1" y="1171.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.1" y="1182.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="1152.0" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.07%)</title><rect x="1152.8" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.07%)</title><rect x="1152.8" y="1187.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1152.8" y="1171.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.07%)</title><rect x="1152.8" y="1155.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.14%)</title><rect x="1153.6" y="1203.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.6" y="1214.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1153.6" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.6" y="1198.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1154.4" y="1187.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (12 samples, 0.84%)</title><rect x="1155.3" y="1203.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.07%)</title><rect x="1155.3" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.21%)</title><rect x="1156.1" y="1187.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.21%)</title><rect x="1156.1" y="1171.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.1" y="1182.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.07%)</title><rect x="1156.1" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.14%)</title><rect x="1156.9" y="1155.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.14%)</title><rect x="1156.9" y="1139.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.28%)</title><rect x="1158.6" y="1187.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::identical_backtoback_ifs(Node*) (1 samples, 0.07%)</title><rect x="1158.6" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (2 samples, 0.14%)</title><rect x="1159.4" y="1171.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1160.2" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1160.2" y="1139.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.2" y="1150.0"></text>
</g>
<g>
<title>VectorSet::operator[](unsigned int) const (1 samples, 0.07%)</title><rect x="1160.2" y="1123.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1161.1" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1161.1" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1161.1" y="1139.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1161.9" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1161.9" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.9" y="1182.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1161.9" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.9" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1161.9" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.9" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.9" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="1107.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.9" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="1091.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.9" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.9" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="1059.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.9" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="1043.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.9" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="1027.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.9" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="1011.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.9" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="995.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="979.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="963.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.9" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.9" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1161.9" y="915.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.9" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1161.9" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.9" y="910.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.07%)</title><rect x="1161.9" y="883.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.9" y="894.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1162.7" y="1187.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.7" y="1198.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.14%)</title><rect x="1163.5" y="1187.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1166.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1165.2" y="1203.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.42%)</title><rect x="1166.0" y="1203.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.42%)</title><rect x="1166.0" y="1187.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.0" y="1198.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1166.0" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.0" y="1182.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1166.0" y="1155.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.0" y="1166.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*) (1 samples, 0.07%)</title><rect x="1166.0" y="1139.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.0" y="1150.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1166.8" y="1171.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1166.8" y="1155.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.07%)</title><rect x="1166.8" y="1139.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="1150.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.07%)</title><rect x="1166.8" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.8" y="1134.0"></text>
</g>
<g>
<title>SystemDictionary::box_klass_type(Klass*) (1 samples, 0.07%)</title><rect x="1166.8" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1167.7" y="1171.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.7" y="1182.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (2 samples, 0.14%)</title><rect x="1167.7" y="1155.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.7" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1169.3" y="1171.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.3" y="1182.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1169.3" y="1155.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.3" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1170.2" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.2" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 1.19%)</title><rect x="1171.0" y="1219.0" width="14.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 1.19%)</title><rect x="1171.0" y="1203.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 1.19%)</title><rect x="1171.0" y="1187.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 1.19%)</title><rect x="1171.0" y="1171.0" width="14.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 1.19%)</title><rect x="1171.0" y="1155.0" width="14.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 1.19%)</title><rect x="1171.0" y="1139.0" width="14.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.0" y="1150.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.21%)</title><rect x="1171.0" y="1123.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.0" y="1134.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.14%)</title><rect x="1171.0" y="1107.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.0" y="1118.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.14%)</title><rect x="1171.0" y="1091.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.14%)</title><rect x="1171.0" y="1075.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.14%)</title><rect x="1171.0" y="1059.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.0" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.14%)</title><rect x="1171.0" y="1043.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.0" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.14%)</title><rect x="1171.0" y="1027.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.14%)</title><rect x="1171.0" y="1011.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.07%)</title><rect x="1171.0" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1171.8" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.8" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1171.8" y="979.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1171.8" y="963.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1171.8" y="947.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1171.8" y="931.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1171.8" y="915.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.8" y="926.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1171.8" y="899.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.8" y="910.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.07%)</title><rect x="1171.8" y="883.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1171.8" y="867.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="878.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.07%)</title><rect x="1171.8" y="851.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="862.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.07%)</title><rect x="1171.8" y="835.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1172.6" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="1118.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1172.6" y="1091.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1172.6" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1172.6" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.6" y="1043.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.07%)</title><rect x="1172.6" y="1027.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::SuccIter::next() (1 samples, 0.07%)</title><rect x="1172.6" y="1011.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.56%)</title><rect x="1173.5" y="1123.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.56%)</title><rect x="1173.5" y="1107.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.56%)</title><rect x="1173.5" y="1091.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.56%)</title><rect x="1173.5" y="1075.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.56%)</title><rect x="1173.5" y="1059.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.56%)</title><rect x="1173.5" y="1043.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1173.5" y="1027.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1173.5" y="1011.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1173.5" y="995.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1173.5" y="979.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1173.5" y="963.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="974.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1173.5" y="947.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1174.3" y="947.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.3" y="931.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.3" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.3" y="915.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1174.3" y="899.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.3" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1174.3" y="883.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.3" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1174.3" y="867.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.3" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.3" y="851.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.3" y="862.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1174.3" y="835.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.1" y="931.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.1" y="915.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.1" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.1" y="883.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.1" y="867.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.1" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1175.1" y="851.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.1" y="862.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1175.1" y="835.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.1" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1175.1" y="819.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.1" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1175.1" y="803.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.1" y="814.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.07%)</title><rect x="1175.1" y="787.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1178.1" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.9" y="931.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.9" y="915.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.9" y="899.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.9" y="883.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.9" y="867.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.9" y="851.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.9" y="835.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.9" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.9" y="803.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1175.9" y="787.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="798.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1175.9" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="782.0"></text>
</g>
<g>
<title>ciMethod::is_boxing_method() const (1 samples, 0.07%)</title><rect x="1175.9" y="755.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="819.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="803.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="787.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="771.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="739.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="723.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="707.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="691.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="675.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="659.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="643.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="627.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="611.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="595.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="579.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="563.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="547.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="531.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="515.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="499.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="510.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.07%)</title><rect x="1176.8" y="483.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="494.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.07%)</title><rect x="1176.8" y="467.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="478.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.07%)</title><rect x="1176.8" y="451.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="462.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.07%)</title><rect x="1176.8" y="435.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="446.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="419.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="430.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="403.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1176.8" y="387.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="398.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="371.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="382.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="355.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="366.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.07%)</title><rect x="1176.8" y="339.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="350.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1176.8" y="323.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.8" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.07%)</title><rect x="1176.8" y="307.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="318.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.07%)</title><rect x="1176.8" y="291.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="302.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.07%)</title><rect x="1176.8" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::box_klass_type(Klass*) (1 samples, 0.07%)</title><rect x="1176.8" y="259.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1177.6" y="1027.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1177.6" y="1011.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1177.6" y="995.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1177.6" y="979.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1177.6" y="963.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1177.6" y="947.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.6" y="931.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.6" y="915.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.6" y="899.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="910.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1177.6" y="883.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1177.6" y="867.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1177.6" y="851.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.6" y="835.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="846.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.07%)</title><rect x="1177.6" y="819.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="830.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.07%)</title><rect x="1177.6" y="803.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="814.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.07%)</title><rect x="1177.6" y="787.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.07%)</title><rect x="1177.6" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="782.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.07%)</title><rect x="1177.6" y="755.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="766.0"></text>
</g>
<g>
<title>Reflection::verify_member_access(Klass const*, Klass const*, Klass const*, AccessFlags, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1177.6" y="739.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(Klass const*) const (1 samples, 0.07%)</title><rect x="1177.6" y="723.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="883.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="851.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="835.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="819.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="803.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="739.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="723.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="707.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="691.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="675.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="643.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="627.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="611.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="595.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="579.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="563.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="547.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="531.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="515.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="499.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="483.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="467.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="451.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="435.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="419.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="403.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="387.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="371.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="355.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="339.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="323.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="307.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="291.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="275.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="259.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="243.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="227.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="211.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="195.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="179.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="163.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="147.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1178.4" y="131.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.4" y="115.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="126.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.07%)</title><rect x="1178.4" y="99.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="110.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.07%)</title><rect x="1178.4" y="83.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="94.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.07%)</title><rect x="1178.4" y="67.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="78.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.07%)</title><rect x="1178.4" y="51.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="62.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.07%)</title><rect x="1178.4" y="35.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.3" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.3" y="915.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1179.3" y="899.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="910.0"></text>
</g>
<g>
<title>TypeAryPtr::xdual() const (1 samples, 0.07%)</title><rect x="1179.3" y="883.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1180.1" y="1123.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1180.1" y="1107.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1180.1" y="1091.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1180.1" y="1075.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1180.1" y="1059.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1180.1" y="1043.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1180.1" y="1027.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="1038.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1011.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1180.1" y="995.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.1" y="1006.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1180.1" y="979.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="990.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.07%)</title><rect x="1180.1" y="963.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="974.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.07%)</title><rect x="1180.1" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="958.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.07%)</title><rect x="1180.1" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="942.0"></text>
</g>
<g>
<title>SignatureStream::is_done() const (1 samples, 0.07%)</title><rect x="1180.1" y="915.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1180.9" y="1011.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1180.9" y="995.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1180.9" y="979.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1180.9" y="963.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1180.9" y="947.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1180.9" y="931.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.9" y="915.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1180.9" y="899.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1180.9" y="883.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1180.9" y="867.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1180.9" y="851.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1180.9" y="835.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.9" y="819.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.9" y="803.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.9" y="787.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.9" y="771.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.9" y="755.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.9" y="739.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1180.9" y="723.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.07%)</title><rect x="1180.9" y="707.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1180.9" y="691.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>TypeLong::xdual() const (1 samples, 0.07%)</title><rect x="1180.9" y="675.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.7" y="819.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.7" y="803.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.7" y="787.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.7" y="771.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.7" y="755.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.7" y="739.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.7" y="723.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="707.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="691.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="675.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="659.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="643.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="611.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="595.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="579.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="547.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="531.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="515.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="499.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="483.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="467.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="451.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="435.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="419.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="403.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="387.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="371.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="355.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="339.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="323.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="307.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="291.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="275.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="259.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="243.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="227.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.7" y="211.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.7" y="195.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.7" y="179.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.7" y="163.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.7" y="147.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.7" y="131.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="142.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1181.7" y="115.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="126.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1181.7" y="99.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="110.0"></text>
</g>
<g>
<title>ciMethod::has_balanced_monitors() (1 samples, 0.07%)</title><rect x="1181.7" y="83.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="707.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="691.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.6" y="675.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.6" y="659.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.6" y="643.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.6" y="627.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.6" y="611.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="595.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.6" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.6" y="563.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.6" y="547.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.6" y="531.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.6" y="515.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="499.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="483.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="467.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.6" y="451.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.6" y="435.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.6" y="419.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.6" y="403.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.6" y="387.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.6" y="371.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.6" y="355.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1182.6" y="339.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="931.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="915.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="926.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.07%)</title><rect x="1183.4" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="910.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1183.4" y="883.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="894.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1183.4" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="878.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1183.4" y="851.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="862.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="835.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.4" y="819.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="830.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="803.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="814.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="787.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="755.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.4" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="739.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="723.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="707.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="691.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="675.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="659.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1183.4" y="643.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="627.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.2" y="1075.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.2" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.2" y="1043.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.2" y="1027.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.2" y="1011.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="995.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="979.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.2" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.2" y="947.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.2" y="931.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.2" y="915.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.2" y="899.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="883.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.2" y="867.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.2" y="851.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.2" y="835.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.2" y="819.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.2" y="803.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="787.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.2" y="771.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.2" y="755.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.2" y="739.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.2" y="723.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.2" y="707.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="691.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.2" y="675.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.2" y="659.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.2" y="643.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.2" y="627.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.2" y="611.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="622.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="595.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="606.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1184.2" y="579.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="590.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.14%)</title><rect x="1185.0" y="1219.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.0" y="1230.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.0" y="1203.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.0" y="1214.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.9" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="1214.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.14%)</title><rect x="1186.7" y="1251.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="1262.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.14%)</title><rect x="1186.7" y="1235.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.14%)</title><rect x="1186.7" y="1219.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.7" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1186.7" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="1214.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1186.7" y="1187.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="1198.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.07%)</title><rect x="1186.7" y="1171.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="1182.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.07%)</title><rect x="1186.7" y="1155.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="1166.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.07%)</title><rect x="1186.7" y="1139.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="1150.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.07%)</title><rect x="1186.7" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="1134.0"></text>
</g>
<g>
<title>Instruction::as_Constant() (1 samples, 0.07%)</title><rect x="1186.7" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="1118.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1187.5" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.5" y="1214.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.07%)</title><rect x="1187.5" y="1187.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.5" y="1198.0"></text>
</g>
<g>
<title>JvmtiDeferredEventQueue::enqueue(JvmtiDeferredEvent const&amp;) (1 samples, 0.07%)</title><rect x="1187.5" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="1182.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1188.3" y="1283.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="1294.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1188.3" y="1267.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.3" y="1278.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1188.3" y="1251.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.3" y="1262.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.07%)</title><rect x="1188.3" y="1235.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.3" y="1246.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="1188.3" y="1219.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1188.3" y="1203.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1191.3" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1188.3" y="1187.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1191.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1188.3" y="1171.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1191.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1188.3" y="1155.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1191.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1188.3" y="1139.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1191.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1188.3" y="1123.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1191.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1188.3" y="1107.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1191.3" y="1118.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.07%)</title><rect x="1189.2" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.2" y="1326.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.07%)</title><rect x="1189.2" y="1299.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.2" y="1310.0"></text>
</g>
</g>
</svg>
