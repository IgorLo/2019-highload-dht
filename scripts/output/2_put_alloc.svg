<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (3,903 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.13%)</title><rect x="10.0" y="883.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="10.0" y="867.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.10%)</title><rect x="10.3" y="867.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.10%)</title><rect x="10.3" y="851.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.3" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.10%)</title><rect x="10.3" y="835.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.3" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.08%)</title><rect x="10.3" y="819.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.3" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.08%)</title><rect x="10.3" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="10.3" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.3" y="798.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="10.3" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="782.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.03%)</title><rect x="10.6" y="787.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.6" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="10.9" y="787.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="10.9" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.9" y="782.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned (1 samples, 0.03%)</title><rect x="11.2" y="819.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="14.2" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="11.5" y="883.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="11.5" y="867.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.10%)</title><rect x="11.8" y="883.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.08%)</title><rect x="12.1" y="867.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.1" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="12.4" y="851.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.4" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="12.4" y="835.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.4" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="12.4" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.4" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="12.4" y="803.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.4" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="12.4" y="787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.4" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="12.4" y="771.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.4" y="782.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.03%)</title><rect x="12.4" y="755.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.03%)</title><rect x="12.4" y="739.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.4" y="750.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.03%)</title><rect x="12.4" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.4" y="734.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="12.4" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.4" y="718.0"></text>
</g>
<g>
<title>G1ConcurrentRefine::max_num_threads() (1 samples, 0.03%)</title><rect x="12.4" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.4" y="702.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="12.7" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.7" y="846.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.03%)</title><rect x="13.0" y="883.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.0" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (39 samples, 1.00%)</title><rect x="13.3" y="883.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.3" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.03%)</title><rect x="13.9" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.9" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (34 samples, 0.87%)</title><rect x="14.2" y="867.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="17.2" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="14.5" y="851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.5" y="862.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="14.5" y="835.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.5" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (17 samples, 0.44%)</title><rect x="14.8" y="851.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.8" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (9 samples, 0.23%)</title><rect x="15.4" y="835.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.4" y="846.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="18.2" y="835.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="21.2" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.08%)</title><rect x="18.5" y="835.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="21.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="18.8" y="819.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="21.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="18.8" y="803.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="21.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="18.8" y="787.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="21.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="18.8" y="771.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="21.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="19.1" y="755.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="22.1" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.05%)</title><rect x="19.4" y="835.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="22.4" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (15 samples, 0.38%)</title><rect x="20.0" y="851.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="23.0" y="862.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.05%)</title><rect x="24.5" y="867.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="27.5" y="878.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.03%)</title><rect x="25.1" y="883.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="28.1" y="894.0"></text>
</g>
<g>
<title>[not_walkable_Java] (8 samples, 0.20%)</title><rect x="25.4" y="883.0" width="2.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="28.4" y="894.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="25.4" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="28.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="25.7" y="867.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="28.7" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.05%)</title><rect x="25.7" y="851.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="28.7" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="25.7" y="835.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="28.7" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="25.7" y="819.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="28.7" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="25.7" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="28.7" y="814.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="26.0" y="835.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="29.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="26.3" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="29.3" y="878.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="26.3" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="29.3" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="26.6" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="29.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="26.9" y="867.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="29.9" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="26.9" y="851.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="29.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="883.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="30.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="867.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="30.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="851.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="30.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="835.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="30.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="819.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="30.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="803.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="30.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="787.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="30.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="771.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="30.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="755.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="30.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="739.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="30.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="723.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="30.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="707.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="30.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="691.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="30.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="675.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="30.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="659.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="30.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="643.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="30.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="627.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="30.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="611.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="30.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="595.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="30.8" y="606.0"></text>
</g>
<g>
<title>read (1 samples, 0.03%)</title><rect x="27.8" y="579.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="30.8" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="563.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="30.8" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="547.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="30.8" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="531.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="30.8" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="515.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="30.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="499.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="30.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="483.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="30.8" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="467.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="30.8" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="451.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="30.8" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="435.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="30.8" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.8" y="419.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="30.8" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (53 samples, 1.36%)</title><rect x="28.1" y="883.0" width="16.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="31.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="38.1" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="41.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="38.4" y="867.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="41.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="38.4" y="851.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="41.4" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="38.4" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="41.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="38.7" y="835.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="41.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="38.7" y="819.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="41.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="38.7" y="803.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="41.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="38.7" y="787.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="41.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="38.7" y="771.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="41.7" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.10%)</title><rect x="39.3" y="867.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="42.3" y="878.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (12 samples, 0.31%)</title><rect x="40.5" y="867.0" width="3.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="43.5" y="878.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.28%)</title><rect x="40.8" y="851.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="43.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.28%)</title><rect x="40.8" y="835.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="43.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.28%)</title><rect x="40.8" y="819.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="43.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.28%)</title><rect x="40.8" y="803.0" width="3.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="43.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.28%)</title><rect x="40.8" y="787.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="43.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.23%)</title><rect x="41.4" y="771.0" width="2.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="44.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.23%)</title><rect x="41.4" y="755.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="44.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.20%)</title><rect x="41.7" y="739.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="44.7" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 0.26%)</title><rect x="44.2" y="883.0" width="3.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="47.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="45.1" y="867.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="48.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="45.1" y="851.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="48.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="45.4" y="835.0" width="1.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="48.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="45.4" y="819.0" width="1.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="48.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="45.4" y="803.0" width="1.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="48.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="46.3" y="787.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="49.3" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="46.9" y="771.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="49.9" y="782.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="47.2" y="883.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="50.2" y="894.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="47.5" y="883.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="50.5" y="894.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.05%)</title><rect x="47.8" y="883.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="50.8" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,357 samples, 60.39%)</title><rect x="48.4" y="883.0" width="712.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.4" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,357 samples, 60.39%)</title><rect x="48.4" y="867.0" width="712.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.4" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,357 samples, 60.39%)</title><rect x="48.4" y="851.0" width="712.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.4" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.03%)</title><rect x="49.9" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="49.9" y="819.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.03%)</title><rect x="49.9" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="49.9" y="787.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.9" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="49.9" y="771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.9" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="49.9" y="755.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.05%)</title><rect x="50.2" y="835.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="50.2" y="819.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (553 samples, 14.17%)</title><rect x="50.8" y="835.0" width="167.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.8" y="846.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (545 samples, 13.96%)</title><rect x="52.6" y="819.0" width="164.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.6" y="830.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (1 samples, 0.03%)</title><rect x="53.5" y="803.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (398 samples, 10.20%)</title><rect x="53.8" y="803.0" width="120.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.8" y="814.0">java/util/concu..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (19 samples, 0.49%)</title><rect x="55.0" y="787.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.0" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.08%)</title><rect x="59.9" y="771.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.08%)</title><rect x="60.8" y="787.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 0.51%)</title><rect x="61.7" y="787.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="64.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="62.3" y="771.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="62.3" y="755.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.3" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="62.3" y="739.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="62.6" y="723.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="65.6" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="62.6" y="707.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="65.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.03%)</title><rect x="62.9" y="771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (15 samples, 0.38%)</title><rect x="63.2" y="771.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="66.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (15 samples, 0.38%)</title><rect x="63.2" y="755.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="66.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (6 samples, 0.15%)</title><rect x="65.6" y="739.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="67.4" y="739.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="67.4" y="723.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="67.4" y="707.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (18 samples, 0.46%)</title><rect x="67.7" y="787.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 0.46%)</title><rect x="67.7" y="771.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.36%)</title><rect x="67.7" y="755.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.36%)</title><rect x="67.7" y="739.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="70.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.36%)</title><rect x="67.7" y="723.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.7" y="734.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="68.0" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="71.0" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.08%)</title><rect x="68.3" y="707.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="71.3" y="718.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.05%)</title><rect x="68.7" y="691.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="71.7" y="702.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (9 samples, 0.23%)</title><rect x="69.3" y="707.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="72.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="69.9" y="691.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="72.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="69.9" y="675.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="72.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="69.9" y="659.0" width="2.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="72.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="69.9" y="643.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="72.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="69.9" y="627.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="72.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="70.2" y="611.0" width="1.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="73.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.13%)</title><rect x="70.5" y="595.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="73.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.13%)</title><rect x="70.5" y="579.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="73.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.10%)</title><rect x="72.0" y="755.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (334 samples, 8.56%)</title><rect x="73.2" y="787.0" width="101.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.2" y="798.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (334 samples, 8.56%)</title><rect x="73.2" y="771.0" width="101.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.2" y="782.0">jdk/internal..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="74.4" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="77.4" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.05%)</title><rect x="74.7" y="755.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="77.7" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.03%)</title><rect x="75.3" y="755.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="78.3" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (166 samples, 4.25%)</title><rect x="75.6" y="755.0" width="50.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="78.6" y="766.0">Unsaf..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.10%)</title><rect x="80.7" y="739.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="83.7" y="750.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.08%)</title><rect x="82.0" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="85.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="82.6" y="723.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="85.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="82.6" y="707.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="85.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="82.6" y="691.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="85.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="82.6" y="675.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="85.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="82.6" y="659.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="85.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="82.6" y="643.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="85.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="82.6" y="627.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="85.6" y="638.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.08%)</title><rect x="82.9" y="739.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="85.9" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.05%)</title><rect x="83.8" y="739.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="86.8" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (41 samples, 1.05%)</title><rect x="84.4" y="739.0" width="12.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="87.4" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.05%)</title><rect x="91.0" y="723.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="94.0" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.13%)</title><rect x="91.6" y="723.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="94.6" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.05%)</title><rect x="92.5" y="707.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="95.5" y="718.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.10%)</title><rect x="93.1" y="723.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="96.1" y="734.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="94.4" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="97.4" y="734.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.03%)</title><rect x="94.4" y="707.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="97.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="94.4" y="691.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="97.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="94.4" y="675.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="97.4" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.18%)</title><rect x="94.7" y="723.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="97.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.08%)</title><rect x="96.8" y="739.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="99.8" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (4 samples, 0.10%)</title><rect x="97.7" y="739.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="100.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="98.9" y="739.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="101.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="98.9" y="723.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="101.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="98.9" y="707.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="101.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="98.9" y="691.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="101.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="98.9" y="675.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="101.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="98.9" y="659.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="101.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="98.9" y="643.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="101.9" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (66 samples, 1.69%)</title><rect x="99.5" y="739.0" width="19.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="102.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="103.1" y="723.0" width="16.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="106.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="103.1" y="707.0" width="16.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="106.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.61%)</title><rect x="112.2" y="691.0" width="7.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="115.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.51%)</title><rect x="113.4" y="675.0" width="6.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="116.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.41%)</title><rect x="114.6" y="659.0" width="4.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="117.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="116.4" y="643.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="119.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="118.8" y="627.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="121.8" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 0.10%)</title><rect x="119.4" y="739.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="122.4" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.08%)</title><rect x="120.7" y="739.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="123.7" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.13%)</title><rect x="121.6" y="739.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="124.6" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.23%)</title><rect x="123.1" y="739.0" width="2.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="126.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (155 samples, 3.97%)</title><rect x="125.8" y="755.0" width="46.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="128.8" y="766.0">[unk..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="125.8" y="739.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="128.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="125.8" y="723.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="128.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="125.8" y="707.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="128.8" y="718.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (2 samples, 0.05%)</title><rect x="126.1" y="739.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="129.1" y="750.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (4 samples, 0.10%)</title><rect x="126.7" y="739.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="129.7" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (117 samples, 3.00%)</title><rect x="127.9" y="739.0" width="35.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="130.9" y="750.0">__p..</text>
</g>
<g>
<title>[unknown] (75 samples, 1.92%)</title><rect x="140.6" y="723.0" width="22.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="143.6" y="734.0">[..</text>
</g>
<g>
<title>[unknown] (75 samples, 1.92%)</title><rect x="140.6" y="707.0" width="22.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="143.6" y="718.0">[..</text>
</g>
<g>
<title>[unknown] (62 samples, 1.59%)</title><rect x="144.5" y="691.0" width="18.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="147.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (59 samples, 1.51%)</title><rect x="145.4" y="675.0" width="17.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="148.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="147.0" y="659.0" width="16.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="150.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 1.18%)</title><rect x="149.4" y="643.0" width="13.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="152.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.69%)</title><rect x="155.1" y="627.0" width="8.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="158.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.54%)</title><rect x="156.9" y="611.0" width="6.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="159.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.49%)</title><rect x="157.5" y="595.0" width="5.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="160.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="162.4" y="579.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="165.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="162.4" y="563.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="165.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="162.4" y="547.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="165.4" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="162.7" y="531.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="165.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="162.7" y="515.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="165.7" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="162.7" y="499.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="165.7" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="162.7" y="483.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="165.7" y="494.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (11 samples, 0.28%)</title><rect x="163.3" y="739.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="166.3" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="166.6" y="739.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="169.6" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (15 samples, 0.38%)</title><rect x="166.9" y="739.0" width="4.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="169.9" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.08%)</title><rect x="171.4" y="739.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="174.4" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="172.4" y="739.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="175.4" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="172.7" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="175.7" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.10%)</title><rect x="173.0" y="755.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="176.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (54 samples, 1.38%)</title><rect x="174.2" y="803.0" width="16.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (52 samples, 1.33%)</title><rect x="174.5" y="787.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.08%)</title><rect x="175.4" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (36 samples, 0.92%)</title><rect x="176.3" y="771.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="177.5" y="755.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="180.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="177.5" y="739.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="180.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="177.5" y="723.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="180.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="177.5" y="707.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="180.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="177.5" y="691.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="180.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="177.5" y="675.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="180.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="177.5" y="659.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="180.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.23%)</title><rect x="177.8" y="755.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.23%)</title><rect x="177.8" y="739.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (6 samples, 0.15%)</title><rect x="177.8" y="723.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.8" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.08%)</title><rect x="179.6" y="723.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.6" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.05%)</title><rect x="179.6" y="707.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="182.6" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="179.6" y="691.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="182.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="179.6" y="675.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="182.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="179.6" y="659.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="182.6" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="179.9" y="691.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="182.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="180.2" y="707.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="183.2" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.03%)</title><rect x="180.2" y="691.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="183.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="180.2" y="675.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="183.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="180.2" y="659.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="183.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="180.2" y="643.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="183.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="180.2" y="627.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="183.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="180.2" y="611.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="183.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="180.2" y="595.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="183.2" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="180.2" y="579.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="183.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (22 samples, 0.56%)</title><rect x="180.5" y="755.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.26%)</title><rect x="187.2" y="771.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.26%)</title><rect x="187.2" y="755.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.15%)</title><rect x="188.1" y="739.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="191.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="189.9" y="739.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.9" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="190.2" y="787.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (89 samples, 2.28%)</title><rect x="190.5" y="803.0" width="26.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="193.5" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (89 samples, 2.28%)</title><rect x="190.5" y="787.0" width="26.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.5" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (89 samples, 2.28%)</title><rect x="190.5" y="771.0" width="26.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.5" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (89 samples, 2.28%)</title><rect x="190.5" y="755.0" width="26.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.5" y="766.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (89 samples, 2.28%)</title><rect x="190.5" y="739.0" width="26.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.5" y="750.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.05%)</title><rect x="191.1" y="723.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="194.1" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="191.7" y="723.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="194.7" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (13 samples, 0.33%)</title><rect x="192.0" y="723.0" width="3.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="195.0" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="192.3" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="195.3" y="718.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="192.6" y="707.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="195.6" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.03%)</title><rect x="192.9" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="195.9" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.10%)</title><rect x="193.2" y="707.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="196.2" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="194.4" y="707.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="197.4" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (2 samples, 0.05%)</title><rect x="194.7" y="707.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="197.7" y="718.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="195.3" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="198.3" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="195.6" y="707.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="198.6" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (71 samples, 1.82%)</title><rect x="195.9" y="723.0" width="21.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="198.9" y="734.0">p..</text>
</g>
<g>
<title>[unknown] (63 samples, 1.61%)</title><rect x="198.4" y="707.0" width="19.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="201.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (63 samples, 1.61%)</title><rect x="198.4" y="691.0" width="19.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="201.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 1.49%)</title><rect x="199.9" y="675.0" width="17.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="202.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 1.46%)</title><rect x="200.2" y="659.0" width="17.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="203.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 1.46%)</title><rect x="200.2" y="643.0" width="17.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="203.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.41%)</title><rect x="200.8" y="627.0" width="16.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="203.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 1.33%)</title><rect x="201.7" y="611.0" width="15.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="204.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.26%)</title><rect x="202.6" y="595.0" width="14.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="205.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.05%)</title><rect x="217.4" y="819.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.4" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$FlushingTask.run (89 samples, 2.28%)</title><rect x="218.0" y="835.0" width="26.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.0" y="846.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.flushAndLoad (89 samples, 2.28%)</title><rect x="218.0" y="819.0" width="26.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.0" y="830.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.flush (89 samples, 2.28%)</title><rect x="218.0" y="803.0" width="26.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.0" y="814.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.05%)</title><rect x="218.3" y="787.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.05%)</title><rect x="218.3" y="771.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.03%)</title><rect x="218.6" y="755.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.05%)</title><rect x="218.9" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.9" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="218.9" y="771.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.9" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="218.9" y="755.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.9" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="218.9" y="739.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.9" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="218.9" y="723.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.9" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="219.2" y="771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.2" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="219.2" y="755.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.2" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="219.2" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="219.2" y="723.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.2" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="219.2" y="707.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="219.2" y="691.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="219.2" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (5 samples, 0.13%)</title><rect x="219.5" y="787.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.5" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="219.5" y="771.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.5" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.05%)</title><rect x="219.5" y="755.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.5" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="219.8" y="739.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.8" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="219.8" y="723.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.8" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.08%)</title><rect x="220.1" y="771.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.1" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.08%)</title><rect x="220.1" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.1" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="220.4" y="739.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="220.4" y="723.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.4" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="220.4" y="707.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.4" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="220.4" y="691.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="220.4" y="675.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.4" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="220.4" y="659.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.4" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.isDead (1 samples, 0.03%)</title><rect x="221.0" y="787.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.0" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (78 samples, 2.00%)</title><rect x="221.3" y="787.0" width="23.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.3" y="798.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.08%)</title><rect x="221.3" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.3" y="782.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.08%)</title><rect x="221.3" y="755.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.3" y="766.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.08%)</title><rect x="221.3" y="739.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.3" y="750.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="221.3" y="723.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="221.3" y="707.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="221.3" y="691.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.3" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="221.6" y="691.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="224.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="221.9" y="723.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.9" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (74 samples, 1.90%)</title><rect x="222.2" y="771.0" width="22.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.2" y="782.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (71 samples, 1.82%)</title><rect x="222.2" y="755.0" width="21.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="225.2" y="766.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (71 samples, 1.82%)</title><rect x="222.2" y="739.0" width="21.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.2" y="750.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (71 samples, 1.82%)</title><rect x="222.2" y="723.0" width="21.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.2" y="734.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="223.4" y="707.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="226.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 1.64%)</title><rect x="223.7" y="707.0" width="19.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="226.7" y="718.0"></text>
</g>
<g>
<title>__write (64 samples, 1.64%)</title><rect x="223.7" y="691.0" width="19.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="226.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 1.59%)</title><rect x="224.4" y="675.0" width="18.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="227.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 1.59%)</title><rect x="224.4" y="659.0" width="18.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="227.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 1.43%)</title><rect x="226.2" y="643.0" width="16.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="229.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 1.43%)</title><rect x="226.2" y="627.0" width="16.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="229.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 1.43%)</title><rect x="226.2" y="611.0" width="16.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="229.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.41%)</title><rect x="226.5" y="595.0" width="16.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="229.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="226.8" y="579.0" width="16.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="229.8" y="590.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.31%)</title><rect x="227.7" y="563.0" width="15.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="230.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.28%)</title><rect x="228.0" y="547.0" width="15.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="231.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.23%)</title><rect x="228.6" y="531.0" width="14.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="231.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.15%)</title><rect x="229.5" y="515.0" width="13.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="232.5" y="526.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 1.05%)</title><rect x="230.7" y="499.0" width="12.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="233.7" y="510.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.90%)</title><rect x="232.5" y="483.0" width="10.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="235.5" y="494.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.87%)</title><rect x="232.8" y="467.0" width="10.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="235.8" y="478.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.74%)</title><rect x="234.3" y="451.0" width="8.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="237.3" y="462.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.69%)</title><rect x="234.9" y="435.0" width="8.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="237.9" y="446.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.67%)</title><rect x="235.2" y="419.0" width="7.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="238.2" y="430.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.61%)</title><rect x="235.8" y="403.0" width="7.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="238.8" y="414.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.54%)</title><rect x="236.7" y="387.0" width="6.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="239.7" y="398.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.44%)</title><rect x="238.0" y="371.0" width="5.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="241.0" y="382.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.33%)</title><rect x="239.2" y="355.0" width="3.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="242.2" y="366.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="240.1" y="339.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="243.1" y="350.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="240.1" y="323.0" width="3.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="243.1" y="334.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="243.1" y="707.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="246.1" y="718.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="243.4" y="707.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="246.4" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="243.7" y="755.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="244.0" y="739.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="244.0" y="723.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="244.3" y="755.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="244.3" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.3" y="750.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="244.3" y="723.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="247.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="244.6" y="771.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="244.6" y="755.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.6" y="766.0"></text>
</g>
<g>
<title>pthread_self@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="244.6" y="739.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="247.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.run (1,707 samples, 43.74%)</title><rect x="244.9" y="835.0" width="516.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.9" y="846.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (1,705 samples, 43.68%)</title><rect x="245.5" y="819.0" width="515.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.5" y="830.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,448 samples, 37.10%)</title><rect x="245.5" y="803.0" width="437.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.5" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="250.7" y="787.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="253.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="250.7" y="771.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="253.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="250.7" y="755.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="253.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="250.7" y="739.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="253.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="250.7" y="723.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="253.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="250.7" y="707.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="253.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="250.7" y="691.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="253.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (10 samples, 0.26%)</title><rect x="251.0" y="787.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.23%)</title><rect x="251.3" y="771.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.23%)</title><rect x="251.3" y="755.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.3" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (2 samples, 0.05%)</title><rect x="254.0" y="787.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,385 samples, 35.49%)</title><rect x="254.6" y="787.0" width="418.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.6" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (50 samples, 1.28%)</title><rect x="254.6" y="771.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.6" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="256.1" y="755.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="259.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.05%)</title><rect x="256.4" y="755.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (42 samples, 1.08%)</title><rect x="257.0" y="755.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (5 samples, 0.13%)</title><rect x="257.0" y="739.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (18 samples, 0.46%)</title><rect x="258.5" y="739.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="261.8" y="723.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="264.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="261.8" y="707.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="264.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="261.8" y="691.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="264.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="261.8" y="675.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="264.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="261.8" y="659.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="264.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="261.8" y="643.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="264.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="261.8" y="627.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="264.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.15%)</title><rect x="262.1" y="723.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.1" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (5 samples, 0.13%)</title><rect x="262.4" y="707.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.4" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (19 samples, 0.49%)</title><rect x="264.0" y="739.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (19 samples, 0.49%)</title><rect x="264.0" y="723.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="267.6" y="707.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="270.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="267.6" y="691.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="270.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="267.6" y="675.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="270.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="267.6" y="659.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="270.6" y="670.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.05%)</title><rect x="267.9" y="707.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.05%)</title><rect x="267.9" y="691.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.9" y="702.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (4 samples, 0.10%)</title><rect x="268.5" y="707.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.5" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,335 samples, 34.20%)</title><rect x="269.7" y="771.0" width="403.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.7" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,334 samples, 34.18%)</title><rect x="270.0" y="755.0" width="403.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.0" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="270.3" y="739.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="273.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,327 samples, 34.00%)</title><rect x="270.9" y="739.0" width="401.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.9" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,324 samples, 33.92%)</title><rect x="271.8" y="723.0" width="400.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.8" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.03%)</title><rect x="275.4" y="707.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="278.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 1.74%)</title><rect x="275.7" y="707.0" width="20.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="278.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 1.74%)</title><rect x="275.7" y="691.0" width="20.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="278.7" y="702.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (54 samples, 1.38%)</title><rect x="275.7" y="675.0" width="16.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="278.7" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.15%)</title><rect x="277.6" y="659.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="280.6" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.03%)</title><rect x="279.4" y="659.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="282.4" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (3 samples, 0.08%)</title><rect x="279.7" y="659.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="282.7" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3 (10 samples, 0.26%)</title><rect x="280.6" y="659.0" width="3.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="283.6" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (27 samples, 0.69%)</title><rect x="283.6" y="659.0" width="8.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="286.6" y="670.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="284.2" y="643.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="287.2" y="654.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (6 samples, 0.15%)</title><rect x="284.8" y="643.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="287.8" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (8 samples, 0.20%)</title><rect x="286.6" y="643.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="289.6" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.13%)</title><rect x="289.1" y="643.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="292.1" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.10%)</title><rect x="290.6" y="643.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="293.6" y="654.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="291.8" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="294.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="292.1" y="675.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="295.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="292.1" y="659.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="295.1" y="670.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="292.4" y="675.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="295.4" y="686.0"></text>
</g>
<g>
<title>__send (7 samples, 0.18%)</title><rect x="293.0" y="675.0" width="2.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="296.0" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.10%)</title><rect x="295.1" y="675.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="298.1" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="296.3" y="707.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="299.3" y="718.0"></text>
</g>
<g>
<title>__send (1,242 samples, 31.82%)</title><rect x="296.6" y="707.0" width="375.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="299.6" y="718.0">__send</text>
</g>
<g>
<title>[unknown] (1,222 samples, 31.31%)</title><rect x="302.7" y="691.0" width="369.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="305.7" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,222 samples, 31.31%)</title><rect x="302.7" y="675.0" width="369.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="305.7" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,202 samples, 30.80%)</title><rect x="308.7" y="659.0" width="363.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="311.7" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,197 samples, 30.67%)</title><rect x="310.2" y="643.0" width="361.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="313.2" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,186 samples, 30.39%)</title><rect x="313.5" y="627.0" width="358.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="316.5" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,174 samples, 30.08%)</title><rect x="317.2" y="611.0" width="354.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="320.2" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,161 samples, 29.75%)</title><rect x="321.1" y="595.0" width="351.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="324.1" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,154 samples, 29.57%)</title><rect x="323.2" y="579.0" width="348.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="326.2" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,093 samples, 28.00%)</title><rect x="341.7" y="563.0" width="330.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="344.7" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,039 samples, 26.62%)</title><rect x="358.0" y="547.0" width="314.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="361.0" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (987 samples, 25.29%)</title><rect x="373.7" y="531.0" width="298.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="376.7" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (915 samples, 23.44%)</title><rect x="395.5" y="515.0" width="276.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="398.5" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (837 samples, 21.45%)</title><rect x="419.1" y="499.0" width="253.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="422.1" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (815 samples, 20.88%)</title><rect x="425.7" y="483.0" width="246.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="428.7" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (794 samples, 20.34%)</title><rect x="432.1" y="467.0" width="240.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="435.1" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (782 samples, 20.04%)</title><rect x="435.7" y="451.0" width="236.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="438.7" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (771 samples, 19.75%)</title><rect x="439.0" y="435.0" width="233.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="442.0" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (741 samples, 18.99%)</title><rect x="448.1" y="419.0" width="224.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="451.1" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (715 samples, 18.32%)</title><rect x="455.9" y="403.0" width="216.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="458.9" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (679 samples, 17.40%)</title><rect x="466.8" y="387.0" width="205.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="469.8" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (589 samples, 15.09%)</title><rect x="494.0" y="371.0" width="178.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="497.0" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (542 samples, 13.89%)</title><rect x="508.2" y="355.0" width="163.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="511.2" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (513 samples, 13.14%)</title><rect x="517.0" y="339.0" width="155.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="520.0" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (488 samples, 12.50%)</title><rect x="524.6" y="323.0" width="147.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="527.6" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (473 samples, 12.12%)</title><rect x="529.1" y="307.0" width="143.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="532.1" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (457 samples, 11.71%)</title><rect x="533.9" y="291.0" width="138.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="536.9" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (454 samples, 11.63%)</title><rect x="534.8" y="275.0" width="137.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="537.8" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (430 samples, 11.02%)</title><rect x="542.1" y="259.0" width="130.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="545.1" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (413 samples, 10.58%)</title><rect x="547.2" y="243.0" width="124.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="550.2" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (409 samples, 10.48%)</title><rect x="548.5" y="227.0" width="123.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="551.5" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (402 samples, 10.30%)</title><rect x="550.6" y="211.0" width="121.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="553.6" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (395 samples, 10.12%)</title><rect x="552.7" y="195.0" width="119.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="555.7" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (364 samples, 9.33%)</title><rect x="562.1" y="179.0" width="110.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="565.1" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (327 samples, 8.38%)</title><rect x="573.2" y="163.0" width="98.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="576.2" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (301 samples, 7.71%)</title><rect x="581.1" y="147.0" width="91.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="584.1" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (264 samples, 6.76%)</title><rect x="592.3" y="131.0" width="79.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="595.3" y="142.0">[unknown]</text>
</g>
<g>
<title>[unknown] (204 samples, 5.23%)</title><rect x="610.4" y="115.0" width="61.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="613.4" y="126.0">[unkno..</text>
</g>
<g>
<title>[unknown] (188 samples, 4.82%)</title><rect x="615.3" y="99.0" width="56.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="618.3" y="110.0">[unkno..</text>
</g>
<g>
<title>[unknown] (182 samples, 4.66%)</title><rect x="617.1" y="83.0" width="55.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="620.1" y="94.0">[unkn..</text>
</g>
<g>
<title>[unknown] (22 samples, 0.56%)</title><rect x="665.5" y="67.0" width="6.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="668.5" y="78.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.38%)</title><rect x="667.6" y="51.0" width="4.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="670.6" y="62.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="668.5" y="35.0" width="3.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="671.5" y="46.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.10%)</title><rect x="672.1" y="739.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="675.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="672.1" y="723.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="675.1" y="734.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="673.0" y="723.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="676.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="673.0" y="707.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="676.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (33 samples, 0.85%)</title><rect x="673.3" y="787.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="674.2" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="677.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (29 samples, 0.74%)</title><rect x="674.5" y="771.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="677.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (12 samples, 0.31%)</title><rect x="674.5" y="755.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="677.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.08%)</title><rect x="677.2" y="739.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="680.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.44%)</title><rect x="678.2" y="755.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="681.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.10%)</title><rect x="680.3" y="739.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="683.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.08%)</title><rect x="680.6" y="723.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.6" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.08%)</title><rect x="680.6" y="707.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="683.6" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.05%)</title><rect x="680.9" y="691.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="683.9" y="702.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.15%)</title><rect x="681.5" y="739.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="684.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.15%)</title><rect x="681.5" y="723.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="684.5" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (6 samples, 0.15%)</title><rect x="681.5" y="707.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="684.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$76/721413497.action (257 samples, 6.58%)</title><rect x="683.3" y="803.0" width="77.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.3" y="814.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$1 (253 samples, 6.48%)</title><rect x="683.6" y="787.0" width="76.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="686.6" y="798.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (253 samples, 6.48%)</title><rect x="683.6" y="771.0" width="76.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.6" y="782.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.10%)</title><rect x="683.6" y="755.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.10%)</title><rect x="683.6" y="739.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.6" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.10%)</title><rect x="683.6" y="723.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="686.6" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.10%)</title><rect x="683.6" y="707.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.upsert (249 samples, 6.38%)</title><rect x="684.8" y="755.0" width="75.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="687.8" y="766.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.upsert (247 samples, 6.33%)</title><rect x="685.4" y="739.0" width="74.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.4" y="750.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.05%)</title><rect x="685.4" y="723.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="688.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.05%)</title><rect x="685.4" y="707.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="688.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.05%)</title><rect x="685.4" y="691.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="688.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="685.4" y="675.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="685.4" y="659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="688.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.03%)</title><rect x="685.7" y="675.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="688.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.03%)</title><rect x="685.7" y="659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="688.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.upsert (179 samples, 4.59%)</title><rect x="686.0" y="723.0" width="54.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="689.0" y="734.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (179 samples, 4.59%)</title><rect x="686.0" y="707.0" width="54.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="689.0" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (179 samples, 4.59%)</title><rect x="686.0" y="691.0" width="54.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.0" y="702.0">java/..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="706.0" y="675.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="709.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="706.0" y="659.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="709.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="706.0" y="643.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="709.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="706.3" y="627.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="709.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="706.3" y="611.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="709.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="706.3" y="595.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="709.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="706.6" y="579.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="709.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (8 samples, 0.20%)</title><rect x="706.9" y="675.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="709.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="709.0" y="659.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="712.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="709.0" y="643.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="712.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="709.0" y="627.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="712.0" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="709.0" y="611.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="712.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="709.0" y="595.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="712.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="709.0" y="579.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="712.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="709.0" y="563.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="712.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (2 samples, 0.05%)</title><rect x="709.3" y="675.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (2 samples, 0.05%)</title><rect x="709.3" y="659.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/Striped64.casBase (2 samples, 0.05%)</title><rect x="709.3" y="643.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (2 samples, 0.05%)</title><rect x="709.3" y="627.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (2 samples, 0.05%)</title><rect x="709.3" y="611.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (7 samples, 0.18%)</title><rect x="709.9" y="675.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="712.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.05%)</title><rect x="709.9" y="659.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="712.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="710.2" y="643.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="713.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="710.2" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="713.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (5 samples, 0.13%)</title><rect x="710.5" y="659.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.13%)</title><rect x="710.5" y="643.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="713.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.13%)</title><rect x="710.5" y="627.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.5" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.13%)</title><rect x="710.5" y="611.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="713.5" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.05%)</title><rect x="711.4" y="595.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="714.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (92 samples, 2.36%)</title><rect x="712.0" y="675.0" width="27.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="715.0" y="686.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (89 samples, 2.28%)</title><rect x="712.9" y="659.0" width="26.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="715.9" y="670.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (75 samples, 1.92%)</title><rect x="717.2" y="643.0" width="22.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="720.2" y="654.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.08%)</title><rect x="718.1" y="627.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="721.1" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="719.0" y="627.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="722.0" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (64 samples, 1.64%)</title><rect x="719.3" y="627.0" width="19.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="722.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="727.4" y="611.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="730.4" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="727.4" y="595.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="730.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="727.4" y="579.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="730.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="727.4" y="563.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="730.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="727.4" y="547.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="730.4" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="727.4" y="531.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="730.4" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="727.4" y="515.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="730.4" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.08%)</title><rect x="727.7" y="611.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="730.7" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (16 samples, 0.41%)</title><rect x="728.6" y="611.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.6" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="732.6" y="595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="735.6" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.05%)</title><rect x="732.9" y="595.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="735.9" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="579.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="736.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="563.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="736.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="547.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="736.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="531.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="736.2" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="515.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="736.2" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="499.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="736.2" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="483.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="736.2" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="467.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="736.2" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="451.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="736.2" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="435.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="736.2" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="419.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="736.2" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="403.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="736.2" y="414.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="387.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="736.2" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="371.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="736.2" y="382.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="733.2" y="355.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="736.2" y="366.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (17 samples, 0.44%)</title><rect x="733.5" y="611.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="736.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="736.5" y="595.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="739.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="736.5" y="579.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="739.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="736.5" y="563.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="739.5" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="736.5" y="547.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="739.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="736.5" y="531.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="739.5" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="736.5" y="515.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="739.5" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="736.5" y="499.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="739.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (6 samples, 0.15%)</title><rect x="736.8" y="595.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="739.8" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.10%)</title><rect x="738.6" y="627.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="741.6" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="739.2" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.2" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.03%)</title><rect x="739.5" y="611.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="742.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (1 samples, 0.03%)</title><rect x="739.8" y="675.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="742.8" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (66 samples, 1.69%)</title><rect x="740.1" y="723.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (66 samples, 1.69%)</title><rect x="740.1" y="707.0" width="20.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="743.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (17 samples, 0.44%)</title><rect x="740.1" y="691.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="743.1" y="702.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="741.3" y="675.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="744.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.&lt;init&gt; (4 samples, 0.10%)</title><rect x="741.9" y="675.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="744.9" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (4 samples, 0.10%)</title><rect x="741.9" y="659.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="744.9" y="670.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.10%)</title><rect x="741.9" y="643.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="744.9" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.18%)</title><rect x="743.2" y="675.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="746.2" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="743.2" y="659.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="746.2" y="670.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.13%)</title><rect x="743.8" y="659.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="746.8" y="670.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="744.4" y="643.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="747.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (49 samples, 1.26%)</title><rect x="745.3" y="691.0" width="14.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="748.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (49 samples, 1.26%)</title><rect x="745.3" y="675.0" width="14.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="748.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (48 samples, 1.23%)</title><rect x="745.6" y="659.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="748.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (44 samples, 1.13%)</title><rect x="746.8" y="643.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (44 samples, 1.13%)</title><rect x="746.8" y="627.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="749.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (44 samples, 1.13%)</title><rect x="746.8" y="611.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="749.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.remove (1 samples, 0.03%)</title><rect x="757.4" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.4" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (8 samples, 0.20%)</title><rect x="757.7" y="595.0" width="2.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="760.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (3 samples, 0.08%)</title><rect x="760.1" y="787.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="763.1" y="798.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,316 samples, 33.72%)</title><rect x="761.0" y="883.0" width="397.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="764.0" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (2 samples, 0.05%)</title><rect x="762.5" y="867.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="765.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (15 samples, 0.38%)</title><rect x="763.1" y="867.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="766.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (15 samples, 0.38%)</title><rect x="763.1" y="851.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="766.1" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (1 samples, 0.03%)</title><rect x="767.6" y="867.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="770.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (314 samples, 8.05%)</title><rect x="767.9" y="867.0" width="95.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="770.9" y="878.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (4 samples, 0.10%)</title><rect x="771.6" y="851.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.6" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.05%)</title><rect x="772.2" y="835.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="775.2" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (298 samples, 7.64%)</title><rect x="772.8" y="851.0" width="90.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="775.8" y="862.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 0.15%)</title><rect x="776.4" y="835.0" width="1.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="779.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (268 samples, 6.87%)</title><rect x="778.2" y="835.0" width="81.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="781.2" y="846.0">[unknown]</text>
</g>
<g>
<title>JavaThread::~JavaThread() (1 samples, 0.03%)</title><rect x="778.2" y="819.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="781.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="778.2" y="803.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="781.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="778.2" y="787.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="781.2" y="798.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="778.2" y="771.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="781.2" y="782.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (12 samples, 0.31%)</title><rect x="778.5" y="819.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="781.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="778.5" y="803.0" width="3.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="781.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="778.5" y="787.0" width="3.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="781.5" y="798.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="778.5" y="771.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="781.5" y="782.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="779.1" y="771.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="782.1" y="782.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.20%)</title><rect x="779.7" y="771.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="782.7" y="782.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.15%)</title><rect x="780.0" y="755.0" width="1.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="783.0" y="766.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="781.9" y="755.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="784.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="782.2" y="819.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="785.2" y="830.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="782.2" y="803.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="785.2" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="782.2" y="787.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="785.2" y="798.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.08%)</title><rect x="782.5" y="819.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="785.5" y="830.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.08%)</title><rect x="783.4" y="819.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="786.4" y="830.0"></text>
</g>
<g>
<title>epoll_wait (248 samples, 6.35%)</title><rect x="784.3" y="819.0" width="74.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="787.3" y="830.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (236 samples, 6.05%)</title><rect x="787.9" y="803.0" width="71.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="790.9" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (236 samples, 6.05%)</title><rect x="787.9" y="787.0" width="71.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="790.9" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (211 samples, 5.41%)</title><rect x="795.5" y="771.0" width="63.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="798.5" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (210 samples, 5.38%)</title><rect x="795.8" y="755.0" width="63.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="798.8" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (209 samples, 5.35%)</title><rect x="796.1" y="739.0" width="63.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="799.1" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (182 samples, 4.66%)</title><rect x="804.2" y="723.0" width="55.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="807.2" y="734.0">[unkn..</text>
</g>
<g>
<title>[unknown] (134 samples, 3.43%)</title><rect x="818.7" y="707.0" width="40.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="821.7" y="718.0">[un..</text>
</g>
<g>
<title>[unknown] (105 samples, 2.69%)</title><rect x="827.5" y="691.0" width="31.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="830.5" y="702.0">[u..</text>
</g>
<g>
<title>[unknown] (86 samples, 2.20%)</title><rect x="833.2" y="675.0" width="26.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="836.2" y="686.0">[..</text>
</g>
<g>
<title>[unknown] (57 samples, 1.46%)</title><rect x="842.0" y="659.0" width="17.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="845.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="858.3" y="643.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="861.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="858.3" y="627.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="861.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="858.3" y="611.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="861.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="858.3" y="595.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="861.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="858.3" y="579.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="861.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="858.3" y="563.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="861.3" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="858.6" y="547.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="861.6" y="558.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.10%)</title><rect x="859.2" y="835.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="862.2" y="846.0"></text>
</g>
<g>
<title>epoll_wait (8 samples, 0.20%)</title><rect x="860.5" y="835.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="863.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (979 samples, 25.08%)</title><rect x="862.9" y="867.0" width="296.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="865.9" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="863.8" y="851.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="866.8" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="864.1" y="851.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="867.1" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="864.1" y="835.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.1" y="846.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="864.4" y="851.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="867.4" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (967 samples, 24.78%)</title><rect x="864.7" y="851.0" width="292.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="867.7" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (679 samples, 17.40%)</title><rect x="867.1" y="835.0" width="205.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="870.1" y="846.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="868.6" y="819.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="871.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="868.6" y="803.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="871.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="868.6" y="787.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="871.6" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="868.6" y="771.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="871.6" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="868.6" y="755.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="871.6" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="868.6" y="739.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="871.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="868.6" y="723.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="871.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (570 samples, 14.60%)</title><rect x="868.9" y="819.0" width="172.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="871.9" y="830.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.08%)</title><rect x="873.2" y="803.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="876.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (553 samples, 14.17%)</title><rect x="874.1" y="803.0" width="167.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="877.1" y="814.0">one/nio/http/HttpServ..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (476 samples, 12.20%)</title><rect x="879.5" y="787.0" width="143.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="882.5" y="798.0">RequestHandler0_en..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (30 samples, 0.77%)</title><rect x="879.5" y="771.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="882.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.13%)</title><rect x="880.1" y="755.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="883.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.13%)</title><rect x="880.1" y="739.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="883.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.08%)</title><rect x="881.6" y="755.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="884.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (13 samples, 0.33%)</title><rect x="882.5" y="755.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="885.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="882.5" y="739.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="885.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="882.5" y="723.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="885.5" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.20%)</title><rect x="882.8" y="739.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="885.8" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="884.0" y="723.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.0" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="884.6" y="723.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="887.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.10%)</title><rect x="885.2" y="739.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="888.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.18%)</title><rect x="886.5" y="755.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="889.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.15%)</title><rect x="886.8" y="739.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="889.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.15%)</title><rect x="886.8" y="723.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="889.8" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.13%)</title><rect x="887.1" y="707.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="890.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (446 samples, 11.43%)</title><rect x="888.6" y="771.0" width="134.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="891.6" y="782.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="889.8" y="755.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="892.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.03%)</title><rect x="889.8" y="739.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="892.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.03%)</title><rect x="889.8" y="723.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="892.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (1 samples, 0.03%)</title><rect x="890.1" y="755.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="893.1" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (18 samples, 0.46%)</title><rect x="890.4" y="755.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="893.4" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (18 samples, 0.46%)</title><rect x="890.4" y="739.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="893.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.internalMemberName (4 samples, 0.10%)</title><rect x="890.4" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="893.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.10%)</title><rect x="890.4" y="707.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="893.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$84/2072101037.get$Lambda (14 samples, 0.36%)</title><rect x="891.6" y="723.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="894.6" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="894.9" y="707.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="897.9" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.15%)</title><rect x="895.8" y="755.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="898.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.15%)</title><rect x="895.8" y="739.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.8" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="895.8" y="723.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="898.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="895.8" y="707.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="898.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="895.8" y="691.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.15%)</title><rect x="895.8" y="675.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="898.8" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.10%)</title><rect x="896.1" y="659.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="899.1" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="897.3" y="659.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="900.3" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="897.3" y="643.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="900.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (416 samples, 10.66%)</title><rect x="897.6" y="755.0" width="125.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="900.6" y="766.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (21 samples, 0.54%)</title><rect x="898.3" y="739.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="901.3" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (21 samples, 0.54%)</title><rect x="898.3" y="723.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="901.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.get$Lambda (21 samples, 0.54%)</title><rect x="898.3" y="707.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="901.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/1479440256.&lt;init&gt; (21 samples, 0.54%)</title><rect x="898.3" y="691.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="901.3" y="702.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (8 samples, 0.20%)</title><rect x="902.2" y="675.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="905.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (393 samples, 10.07%)</title><rect x="904.6" y="739.0" width="118.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="907.6" y="750.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (383 samples, 9.81%)</title><rect x="907.6" y="723.0" width="115.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="910.6" y="734.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (2 samples, 0.05%)</title><rect x="907.6" y="707.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="910.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (354 samples, 9.07%)</title><rect x="908.2" y="707.0" width="107.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.2" y="718.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (17 samples, 0.44%)</title><rect x="909.1" y="691.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="912.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (17 samples, 0.44%)</title><rect x="909.1" y="675.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="912.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.28%)</title><rect x="910.9" y="659.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="913.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (4 samples, 0.10%)</title><rect x="911.6" y="643.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="914.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.10%)</title><rect x="911.6" y="627.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="914.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.10%)</title><rect x="911.6" y="611.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="914.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (5 samples, 0.13%)</title><rect x="912.8" y="643.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="915.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (5 samples, 0.13%)</title><rect x="912.8" y="627.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="915.8" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.13%)</title><rect x="912.8" y="611.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.8" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (5 samples, 0.13%)</title><rect x="912.8" y="595.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="915.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 0.44%)</title><rect x="914.3" y="691.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="917.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 0.41%)</title><rect x="914.6" y="675.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="917.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.08%)</title><rect x="916.7" y="659.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="919.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="917.0" y="643.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="920.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="917.0" y="627.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="917.0" y="611.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.0" y="622.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.03%)</title><rect x="917.0" y="595.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="920.0" y="606.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="917.0" y="579.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="917.3" y="595.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="920.3" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.03%)</title><rect x="917.3" y="579.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="920.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.15%)</title><rect x="917.6" y="659.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.15%)</title><rect x="917.6" y="643.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="920.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.15%)</title><rect x="917.6" y="627.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.15%)</title><rect x="917.6" y="611.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.6" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (6 samples, 0.15%)</title><rect x="917.6" y="595.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (317 samples, 8.12%)</title><rect x="919.4" y="691.0" width="95.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="922.4" y="702.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (317 samples, 8.12%)</title><rect x="919.4" y="675.0" width="95.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="922.4" y="686.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (316 samples, 8.10%)</title><rect x="919.4" y="659.0" width="95.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.4" y="670.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (315 samples, 8.07%)</title><rect x="919.4" y="643.0" width="95.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="922.4" y="654.0">java/util/c..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (314 samples, 8.05%)</title><rect x="919.7" y="627.0" width="94.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.7" y="638.0">jdk/interna..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.05%)</title><rect x="921.5" y="611.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="924.5" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.05%)</title><rect x="922.1" y="611.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.1" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.05%)</title><rect x="922.7" y="611.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="925.7" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.08%)</title><rect x="923.3" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.3" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="924.3" y="611.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.3" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark (39 samples, 1.00%)</title><rect x="924.6" y="611.0" width="11.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="927.6" y="622.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="926.1" y="595.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="929.1" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.05%)</title><rect x="926.4" y="595.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="929.4" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (5 samples, 0.13%)</title><rect x="927.0" y="595.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="930.0" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.08%)</title><rect x="928.5" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.5" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.08%)</title><rect x="929.4" y="595.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="932.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="930.0" y="579.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="933.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="930.0" y="563.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="933.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="930.0" y="547.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="933.0" y="558.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (5 samples, 0.13%)</title><rect x="930.3" y="595.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="933.3" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.13%)</title><rect x="931.8" y="595.0" width="1.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="934.8" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (4 samples, 0.10%)</title><rect x="933.3" y="595.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="936.3" y="606.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.10%)</title><rect x="934.5" y="595.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.5" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.05%)</title><rect x="935.7" y="595.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="938.7" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.08%)</title><rect x="936.3" y="611.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="939.3" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (256 samples, 6.56%)</title><rect x="937.3" y="611.0" width="77.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="940.3" y="622.0">pthread_c..</text>
</g>
<g>
<title>[unknown] (234 samples, 6.00%)</title><rect x="943.9" y="595.0" width="70.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="946.9" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (234 samples, 6.00%)</title><rect x="943.9" y="579.0" width="70.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="946.9" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (219 samples, 5.61%)</title><rect x="948.4" y="563.0" width="66.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="951.4" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (213 samples, 5.46%)</title><rect x="950.3" y="547.0" width="64.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="953.3" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (210 samples, 5.38%)</title><rect x="951.2" y="531.0" width="63.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="954.2" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (193 samples, 4.94%)</title><rect x="956.3" y="515.0" width="58.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="959.3" y="526.0">[unkno..</text>
</g>
<g>
<title>[unknown] (176 samples, 4.51%)</title><rect x="961.4" y="499.0" width="53.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="964.4" y="510.0">[unkn..</text>
</g>
<g>
<title>[unknown] (161 samples, 4.13%)</title><rect x="966.0" y="483.0" width="48.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="969.0" y="494.0">[unk..</text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="1012.5" y="467.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1015.5" y="478.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="1012.5" y="451.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1015.5" y="462.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="1012.5" y="435.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1015.5" y="446.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="1012.5" y="419.0" width="2.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1015.5" y="430.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="1012.8" y="403.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1015.8" y="414.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.13%)</title><rect x="1013.1" y="387.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1016.1" y="398.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.13%)</title><rect x="1013.1" y="371.0" width="1.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1016.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="1014.6" y="643.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1017.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="1015.0" y="659.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1018.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.15%)</title><rect x="1015.3" y="707.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1018.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.13%)</title><rect x="1015.6" y="691.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1018.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (19 samples, 0.49%)</title><rect x="1017.1" y="707.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1020.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (19 samples, 0.49%)</title><rect x="1017.1" y="691.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1020.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (6 samples, 0.15%)</title><rect x="1017.1" y="675.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1020.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (13 samples, 0.33%)</title><rect x="1018.9" y="675.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1021.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (13 samples, 0.33%)</title><rect x="1018.9" y="659.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1021.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.18%)</title><rect x="1019.8" y="643.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1022.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (7 samples, 0.18%)</title><rect x="1019.8" y="627.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1022.8" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (7 samples, 0.18%)</title><rect x="1019.8" y="611.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (3 samples, 0.08%)</title><rect x="1021.9" y="643.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1024.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="1022.8" y="707.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1025.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="1022.8" y="691.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1025.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="1022.8" y="675.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1025.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="1023.1" y="675.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1026.1" y="686.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="1023.4" y="787.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1026.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.03%)</title><rect x="1024.0" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1027.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.03%)</title><rect x="1024.0" y="771.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1027.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.05%)</title><rect x="1024.3" y="787.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1027.3" y="798.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (42 samples, 1.08%)</title><rect x="1024.9" y="787.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1027.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (31 samples, 0.79%)</title><rect x="1025.5" y="771.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.13%)</title><rect x="1025.8" y="755.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1028.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.13%)</title><rect x="1025.8" y="739.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1028.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (25 samples, 0.64%)</title><rect x="1027.3" y="755.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1030.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (24 samples, 0.61%)</title><rect x="1027.6" y="739.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1030.6" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (21 samples, 0.54%)</title><rect x="1028.6" y="723.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1031.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1034.6" y="707.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1037.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1034.6" y="691.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1037.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1034.6" y="675.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1037.6" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.23%)</title><rect x="1034.9" y="771.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1037.9" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (12 samples, 0.31%)</title><rect x="1037.6" y="787.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.23%)</title><rect x="1038.5" y="771.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1041.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.15%)</title><rect x="1038.5" y="755.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1041.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.10%)</title><rect x="1038.5" y="739.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1041.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.10%)</title><rect x="1038.5" y="723.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1041.5" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="1039.7" y="739.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1042.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="1040.0" y="723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1043.0" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.08%)</title><rect x="1040.3" y="755.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1043.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (39 samples, 1.00%)</title><rect x="1041.3" y="819.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1044.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.08%)</title><rect x="1043.1" y="803.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1046.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.08%)</title><rect x="1043.1" y="787.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1046.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.08%)</title><rect x="1043.1" y="771.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1046.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="1043.4" y="755.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1046.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (25 samples, 0.64%)</title><rect x="1044.0" y="803.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1047.0" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 0.61%)</title><rect x="1044.3" y="787.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1047.3" y="798.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.03%)</title><rect x="1051.2" y="771.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1054.2" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.13%)</title><rect x="1051.5" y="803.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1054.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (20 samples, 0.51%)</title><rect x="1053.0" y="819.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1056.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (10 samples, 0.26%)</title><rect x="1053.0" y="803.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1056.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (10 samples, 0.26%)</title><rect x="1053.0" y="787.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1056.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.08%)</title><rect x="1054.3" y="771.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1057.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.08%)</title><rect x="1054.3" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1057.3" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (3 samples, 0.08%)</title><rect x="1054.3" y="739.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1054.9" y="723.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1057.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1054.9" y="707.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1057.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1054.9" y="691.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1057.9" y="702.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.08%)</title><rect x="1055.2" y="771.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1058.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (10 samples, 0.26%)</title><rect x="1056.1" y="803.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1059.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="1058.8" y="787.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1061.8" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="1059.1" y="819.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1062.1" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (27 samples, 0.69%)</title><rect x="1059.4" y="819.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1062.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.08%)</title><rect x="1059.4" y="803.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1062.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (22 samples, 0.56%)</title><rect x="1060.3" y="803.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1063.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1060.6" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1063.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (20 samples, 0.51%)</title><rect x="1060.9" y="787.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1063.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="1065.7" y="771.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1068.7" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="1065.7" y="755.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1068.7" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.03%)</title><rect x="1065.7" y="739.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1068.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title><rect x="1066.0" y="771.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1069.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title><rect x="1066.0" y="755.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1069.0" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.05%)</title><rect x="1066.0" y="739.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1069.0" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1066.6" y="771.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1069.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="1067.0" y="803.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1067.3" y="787.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1070.3" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1067.3" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1070.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.41%)</title><rect x="1067.6" y="819.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1070.6" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.41%)</title><rect x="1067.6" y="803.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1070.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.41%)</title><rect x="1067.6" y="787.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1070.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.41%)</title><rect x="1067.6" y="771.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1070.6" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (280 samples, 7.17%)</title><rect x="1072.4" y="835.0" width="84.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1075.4" y="846.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (277 samples, 7.10%)</title><rect x="1072.7" y="819.0" width="83.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1075.7" y="830.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.05%)</title><rect x="1076.9" y="803.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1079.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 1.69%)</title><rect x="1077.5" y="803.0" width="20.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1080.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 1.69%)</title><rect x="1077.5" y="787.0" width="20.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1080.5" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (54 samples, 1.38%)</title><rect x="1077.5" y="771.0" width="16.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1080.5" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.05%)</title><rect x="1079.3" y="755.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.3" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.05%)</title><rect x="1080.0" y="755.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.0" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3 (14 samples, 0.36%)</title><rect x="1080.6" y="755.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1083.6" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.05%)</title><rect x="1084.8" y="755.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1087.8" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (28 samples, 0.72%)</title><rect x="1085.4" y="755.0" width="8.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1088.4" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="1087.2" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.2" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.08%)</title><rect x="1087.8" y="739.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.8" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.05%)</title><rect x="1088.7" y="739.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (7 samples, 0.18%)</title><rect x="1089.3" y="739.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.3" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.20%)</title><rect x="1091.4" y="739.0" width="2.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1094.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1093.9" y="771.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1096.9" y="782.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.10%)</title><rect x="1094.2" y="771.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1097.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1095.1" y="755.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1098.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1095.1" y="739.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1098.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1095.1" y="723.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1098.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1095.1" y="707.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1098.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1095.1" y="691.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1098.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1095.1" y="675.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1098.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1095.1" y="659.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1098.1" y="670.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.13%)</title><rect x="1095.4" y="771.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1098.4" y="782.0"></text>
</g>
<g>
<title>recv (2 samples, 0.05%)</title><rect x="1096.9" y="771.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1099.9" y="782.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="1097.5" y="803.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1100.5" y="814.0"></text>
</g>
<g>
<title>recv (194 samples, 4.97%)</title><rect x="1097.8" y="803.0" width="58.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1100.8" y="814.0">recv</text>
</g>
<g>
<title>[unknown] (175 samples, 4.48%)</title><rect x="1103.5" y="787.0" width="52.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1106.5" y="798.0">[unkn..</text>
</g>
<g>
<title>[unknown] (175 samples, 4.48%)</title><rect x="1103.5" y="771.0" width="52.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1106.5" y="782.0">[unkn..</text>
</g>
<g>
<title>[unknown] (157 samples, 4.02%)</title><rect x="1109.0" y="755.0" width="47.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1112.0" y="766.0">[unk..</text>
</g>
<g>
<title>[unknown] (157 samples, 4.02%)</title><rect x="1109.0" y="739.0" width="47.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1112.0" y="750.0">[unk..</text>
</g>
<g>
<title>[unknown] (151 samples, 3.87%)</title><rect x="1110.8" y="723.0" width="45.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1113.8" y="734.0">[unk..</text>
</g>
<g>
<title>[unknown] (139 samples, 3.56%)</title><rect x="1114.4" y="707.0" width="42.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1117.4" y="718.0">[unk..</text>
</g>
<g>
<title>[unknown] (136 samples, 3.48%)</title><rect x="1115.3" y="691.0" width="41.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1118.3" y="702.0">[un..</text>
</g>
<g>
<title>[unknown] (119 samples, 3.05%)</title><rect x="1120.5" y="675.0" width="35.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1123.5" y="686.0">[un..</text>
</g>
<g>
<title>[unknown] (87 samples, 2.23%)</title><rect x="1130.1" y="659.0" width="26.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1133.1" y="670.0">[..</text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="1140.1" y="643.0" width="16.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1143.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.87%)</title><rect x="1146.2" y="627.0" width="10.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1149.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.44%)</title><rect x="1151.3" y="611.0" width="5.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1154.3" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.05%)</title><rect x="1156.4" y="819.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1159.4" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.15%)</title><rect x="1157.0" y="851.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.0" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="1157.0" y="835.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1160.0" y="846.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.10%)</title><rect x="1157.7" y="835.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1160.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="1158.3" y="819.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1161.3" y="830.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="1158.9" y="883.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1161.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.9" y="867.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1161.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.9" y="851.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1161.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.9" y="835.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1161.9" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.9" y="819.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1161.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.9" y="803.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1161.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.9" y="787.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1161.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.9" y="771.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1161.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.9" y="755.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1161.9" y="766.0"></text>
</g>
<g>
<title>start_thread (102 samples, 2.61%)</title><rect x="1159.2" y="883.0" width="30.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1162.2" y="894.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (102 samples, 2.61%)</title><rect x="1159.2" y="867.0" width="30.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1162.2" y="878.0">th..</text>
</g>
<g>
<title>Thread::call_run() (102 samples, 2.61%)</title><rect x="1159.2" y="851.0" width="30.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.2" y="862.0">Th..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (5 samples, 0.13%)</title><rect x="1159.2" y="835.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.2" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (5 samples, 0.13%)</title><rect x="1159.2" y="819.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.2" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (4 samples, 0.10%)</title><rect x="1159.2" y="803.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.2" y="814.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (4 samples, 0.10%)</title><rect x="1159.2" y="787.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.2" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (3 samples, 0.08%)</title><rect x="1159.2" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.2" y="782.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (3 samples, 0.08%)</title><rect x="1159.2" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.2" y="766.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.03%)</title><rect x="1159.5" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1159.8" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.8" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1160.1" y="771.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.1" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1160.1" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.1" y="766.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1160.4" y="803.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.4" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1160.4" y="787.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1160.4" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.4" y="782.0"></text>
</g>
<g>
<title>GangWorker::loop() (76 samples, 1.95%)</title><rect x="1160.7" y="835.0" width="23.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.7" y="846.0">G..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (4 samples, 0.10%)</title><rect x="1160.7" y="819.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.7" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (4 samples, 0.10%)</title><rect x="1160.7" y="803.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.7" y="814.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (4 samples, 0.10%)</title><rect x="1160.7" y="787.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.7" y="798.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.241] (1 samples, 0.03%)</title><rect x="1160.7" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.7" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1160.7" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.7" y="766.0"></text>
</g>
<g>
<title>bool G1CMTask::deal_with_reference&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1160.7" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.7" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.08%)</title><rect x="1161.0" y="771.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.0" y="782.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (69 samples, 1.77%)</title><rect x="1161.9" y="819.0" width="20.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.9" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (46 samples, 1.18%)</title><rect x="1161.9" y="803.0" width="13.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (46 samples, 1.18%)</title><rect x="1161.9" y="787.0" width="13.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.9" y="798.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (30 samples, 0.77%)</title><rect x="1166.7" y="771.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.7" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (25 samples, 0.64%)</title><rect x="1167.6" y="755.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.6" y="766.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (2 samples, 0.05%)</title><rect x="1171.3" y="739.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.3" y="750.0"></text>
</g>
<g>
<title>G1Allocator::survivor_attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1171.3" y="723.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="734.0"></text>
</g>
<g>
<title>PLAB::retire() (1 samples, 0.03%)</title><rect x="1171.6" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="734.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="1171.6" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.6" y="718.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.05%)</title><rect x="1171.9" y="739.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (9 samples, 0.23%)</title><rect x="1172.5" y="739.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::start_of_nonstatic_oop_maps() const (1 samples, 0.03%)</title><rect x="1172.8" y="723.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.8" y="734.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (7 samples, 0.18%)</title><rect x="1173.1" y="723.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.1" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1175.2" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1175.5" y="755.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="766.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (21 samples, 0.54%)</title><rect x="1175.8" y="803.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (21 samples, 0.54%)</title><rect x="1175.8" y="787.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (21 samples, 0.54%)</title><rect x="1175.8" y="771.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (21 samples, 0.54%)</title><rect x="1175.8" y="755.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="766.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (21 samples, 0.54%)</title><rect x="1175.8" y="739.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="1175.8" y="723.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (12 samples, 0.31%)</title><rect x="1176.1" y="723.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 0.18%)</title><rect x="1177.3" y="707.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.10%)</title><rect x="1178.2" y="691.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::start_of_nonstatic_oop_maps() const (1 samples, 0.03%)</title><rect x="1178.8" y="675.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="686.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1179.1" y="675.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="686.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1179.4" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (8 samples, 0.20%)</title><rect x="1179.7" y="723.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.08%)</title><rect x="1179.7" y="707.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.05%)</title><rect x="1180.0" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="702.0"></text>
</g>
<g>
<title>G1ContiguousSpace::block_start(void const*) (1 samples, 0.03%)</title><rect x="1180.6" y="707.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1180.6" y="691.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1180.6" y="675.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1180.9" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (3 samples, 0.08%)</title><rect x="1181.2" y="707.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="718.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.08%)</title><rect x="1181.2" y="691.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.05%)</title><rect x="1182.1" y="803.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="814.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.05%)</title><rect x="1182.1" y="787.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="798.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="1182.1" y="771.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.1" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.03%)</title><rect x="1182.4" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="782.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (2 samples, 0.05%)</title><rect x="1182.7" y="819.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (2 samples, 0.05%)</title><rect x="1182.7" y="803.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.05%)</title><rect x="1182.7" y="787.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.7" y="798.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1183.0" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="782.0"></text>
</g>
<g>
<title>GCIdMark::~GCIdMark() (1 samples, 0.03%)</title><rect x="1183.3" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>JavaThread::run() (12 samples, 0.31%)</title><rect x="1183.7" y="835.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (12 samples, 0.31%)</title><rect x="1183.7" y="819.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (12 samples, 0.31%)</title><rect x="1183.7" y="803.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (12 samples, 0.31%)</title><rect x="1183.7" y="787.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="798.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (12 samples, 0.31%)</title><rect x="1183.7" y="771.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="782.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (12 samples, 0.31%)</title><rect x="1183.7" y="755.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="766.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (8 samples, 0.20%)</title><rect x="1183.7" y="739.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.03%)</title><rect x="1183.7" y="723.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.7" y="734.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.03%)</title><rect x="1183.7" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.03%)</title><rect x="1184.0" y="723.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.03%)</title><rect x="1184.0" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.03%)</title><rect x="1184.0" y="691.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="702.0"></text>
</g>
<g>
<title>CreateExNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="1184.0" y="675.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.03%)</title><rect x="1184.3" y="723.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.03%)</title><rect x="1184.3" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.03%)</title><rect x="1184.3" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.03%)</title><rect x="1184.3" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.3" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (5 samples, 0.13%)</title><rect x="1184.6" y="723.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.03%)</title><rect x="1184.6" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="1184.6" y="691.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.6" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1184.6" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.6" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.05%)</title><rect x="1184.9" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="718.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.03%)</title><rect x="1185.2" y="691.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1188.2" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.03%)</title><rect x="1185.5" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1185.5" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="702.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.03%)</title><rect x="1185.8" y="707.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1188.8" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 0.05%)</title><rect x="1186.1" y="739.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (2 samples, 0.05%)</title><rect x="1186.1" y="723.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.03%)</title><rect x="1186.1" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.03%)</title><rect x="1186.4" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1186.7" y="739.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1186.7" y="723.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1186.7" y="707.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1186.7" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1186.7" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1186.7" y="659.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1186.7" y="643.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1186.7" y="627.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1186.7" y="611.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1186.7" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1186.7" y="579.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1186.7" y="563.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1186.7" y="547.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1186.7" y="531.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1186.7" y="515.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1186.7" y="499.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1186.7" y="483.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1186.7" y="467.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1186.7" y="451.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1186.7" y="435.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="446.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.03%)</title><rect x="1186.7" y="419.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="430.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1186.7" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="414.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1186.7" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="398.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1186.7" y="371.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="382.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="1186.7" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1186.7" y="339.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="1186.7" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1187.0" y="659.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="670.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.03%)</title><rect x="1187.0" y="643.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="654.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.03%)</title><rect x="1187.0" y="627.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="638.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1187.0" y="611.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.0" y="622.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.03%)</title><rect x="1187.0" y="595.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.0" y="606.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.03%)</title><rect x="1187.0" y="579.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1190.0" y="590.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.03%)</title><rect x="1187.3" y="835.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="846.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.03%)</title><rect x="1187.6" y="835.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.6" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.03%)</title><rect x="1187.6" y="819.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.6" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.03%)</title><rect x="1187.6" y="803.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.6" y="814.0"></text>
</g>
<g>
<title>WatcherThread::run() (7 samples, 0.18%)</title><rect x="1187.9" y="835.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="1187.9" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.9" y="830.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (4 samples, 0.10%)</title><rect x="1188.2" y="819.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.2" y="830.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (2 samples, 0.05%)</title><rect x="1188.8" y="803.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
<g>
<title>HighResTimeSampler::take_sample() (2 samples, 0.05%)</title><rect x="1188.8" y="787.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.1" y="771.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1192.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.1" y="755.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.1" y="739.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1192.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.1" y="723.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1192.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.1" y="707.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1192.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.1" y="691.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1192.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.1" y="675.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1192.1" y="686.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.05%)</title><rect x="1189.4" y="819.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.4" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1189.4" y="803.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.4" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1189.4" y="787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.4" y="798.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1189.4" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.4" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="1189.7" y="803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.7" y="814.0"></text>
</g>
</g>
</svg>
