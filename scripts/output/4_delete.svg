<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1478" onload="init(evt)" viewBox="0 0 1200 1478" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1461"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1461"> </text>
<g id="frames">
<g>
<title>all (1,356 samples, 100.00%)</title><rect x="10.0" y="1427.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1438.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (2 samples, 0.15%)</title><rect x="10.9" y="1411.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.9" y="1422.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame(JavaThread*, long*) (1 samples, 0.07%)</title><rect x="10.9" y="1395.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.9" y="1406.0"></text>
</g>
<g>
<title>Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason) (1 samples, 0.07%)</title><rect x="10.9" y="1379.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.9" y="1390.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="10.9" y="1363.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.9" y="1374.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="10.9" y="1347.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.9" y="1358.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.07%)</title><rect x="11.7" y="1395.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.7" y="1406.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.07%)</title><rect x="12.6" y="1411.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.6" y="1422.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.07%)</title><rect x="12.6" y="1395.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.6" y="1406.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.07%)</title><rect x="12.6" y="1379.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.6" y="1390.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.59%)</title><rect x="13.5" y="1411.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.5" y="1422.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.59%)</title><rect x="13.5" y="1395.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.5" y="1406.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.29%)</title><rect x="14.4" y="1379.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.4" y="1390.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.15%)</title><rect x="14.4" y="1363.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.4" y="1374.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.15%)</title><rect x="16.1" y="1363.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="19.1" y="1374.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="16.1" y="1347.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="19.1" y="1358.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="16.1" y="1331.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="19.1" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="17.0" y="1315.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="20.0" y="1326.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.22%)</title><rect x="17.8" y="1379.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="19.6" y="1363.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="22.6" y="1374.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="19.6" y="1347.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="22.6" y="1358.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="19.6" y="1331.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="22.6" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="19.6" y="1315.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="22.6" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="19.6" y="1299.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="22.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="19.6" y="1283.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="22.6" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="19.6" y="1267.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="22.6" y="1278.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.07%)</title><rect x="20.4" y="1411.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="23.4" y="1422.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.07%)</title><rect x="21.3" y="1411.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="24.3" y="1422.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.07%)</title><rect x="21.3" y="1395.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="24.3" y="1406.0"></text>
</g>
<g>
<title>[unknown_Java] (11 samples, 0.81%)</title><rect x="22.2" y="1411.0" width="9.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="25.2" y="1422.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="25.7" y="1395.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="28.7" y="1406.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="25.7" y="1379.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="28.7" y="1390.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="25.7" y="1363.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="28.7" y="1374.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (6 samples, 0.44%)</title><rect x="26.5" y="1395.0" width="5.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="29.5" y="1406.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="27.4" y="1379.0" width="4.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="30.4" y="1390.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="27.4" y="1363.0" width="4.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="30.4" y="1374.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="27.4" y="1347.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="30.4" y="1358.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="27.4" y="1331.0" width="4.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="30.4" y="1342.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="27.4" y="1315.0" width="4.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="30.4" y="1326.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="27.4" y="1299.0" width="4.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="30.4" y="1310.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="27.4" y="1283.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="30.4" y="1294.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="27.4" y="1267.0" width="4.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="30.4" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="30.9" y="1251.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="33.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="30.9" y="1235.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="33.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="30.9" y="1219.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="33.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="30.9" y="1203.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="33.9" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="30.9" y="1187.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="33.9" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.15%)</title><rect x="31.8" y="1411.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="34.8" y="1422.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="31.8" y="1395.0" width="1.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="34.8" y="1406.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="31.8" y="1379.0" width="1.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="34.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="31.8" y="1363.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="34.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="31.8" y="1347.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="34.8" y="1358.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="31.8" y="1331.0" width="1.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="34.8" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="32.6" y="1315.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="35.6" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="32.6" y="1299.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="35.6" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="32.6" y="1283.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="35.6" y="1294.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.07%)</title><rect x="33.5" y="1411.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="36.5" y="1422.0"></text>
</g>
<g>
<title>java/lang/Thread.run (743 samples, 54.79%)</title><rect x="34.4" y="1411.0" width="646.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="37.4" y="1422.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (743 samples, 54.79%)</title><rect x="34.4" y="1395.0" width="646.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.4" y="1406.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (743 samples, 54.79%)</title><rect x="34.4" y="1379.0" width="646.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="37.4" y="1390.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.07%)</title><rect x="35.2" y="1363.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.22%)</title><rect x="36.1" y="1363.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.22%)</title><rect x="36.1" y="1347.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.22%)</title><rect x="36.1" y="1331.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="39.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="37.8" y="1315.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.8" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.07%)</title><rect x="37.8" y="1299.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.07%)</title><rect x="37.8" y="1283.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.07%)</title><rect x="38.7" y="1363.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="38.7" y="1347.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="41.7" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.07%)</title><rect x="38.7" y="1331.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="38.7" y="1315.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (167 samples, 12.32%)</title><rect x="39.6" y="1363.0" width="145.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.6" y="1374.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (166 samples, 12.24%)</title><rect x="40.5" y="1347.0" width="144.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.5" y="1358.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (128 samples, 9.44%)</title><rect x="40.5" y="1331.0" width="111.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.5" y="1342.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4 samples, 0.29%)</title><rect x="43.1" y="1315.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.59%)</title><rect x="46.5" y="1315.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.15%)</title><rect x="46.5" y="1299.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.15%)</title><rect x="46.5" y="1283.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.5" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.15%)</title><rect x="46.5" y="1267.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.5" y="1278.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.15%)</title><rect x="46.5" y="1251.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="49.5" y="1262.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.07%)</title><rect x="46.5" y="1235.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="49.5" y="1246.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="46.5" y="1219.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="49.5" y="1230.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="46.5" y="1203.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="49.5" y="1214.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.07%)</title><rect x="47.4" y="1235.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="50.4" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="47.4" y="1219.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="50.4" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="47.4" y="1203.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="50.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.44%)</title><rect x="48.3" y="1299.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.44%)</title><rect x="48.3" y="1283.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="50.0" y="1267.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.22%)</title><rect x="50.9" y="1267.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.22%)</title><rect x="50.9" y="1251.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.22%)</title><rect x="50.9" y="1235.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.88%)</title><rect x="53.5" y="1315.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.88%)</title><rect x="53.5" y="1299.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.88%)</title><rect x="53.5" y="1283.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (3 samples, 0.22%)</title><rect x="55.3" y="1267.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.22%)</title><rect x="55.3" y="1251.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.07%)</title><rect x="55.3" y="1235.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.15%)</title><rect x="56.1" y="1235.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.52%)</title><rect x="57.9" y="1267.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.9" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.52%)</title><rect x="57.9" y="1251.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.9" y="1262.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.07%)</title><rect x="57.9" y="1235.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="60.9" y="1246.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.07%)</title><rect x="58.7" y="1235.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="61.7" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.07%)</title><rect x="58.7" y="1219.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="61.7" y="1230.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (5 samples, 0.37%)</title><rect x="59.6" y="1235.0" width="4.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="62.6" y="1246.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="59.6" y="1219.0" width="4.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="62.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="59.6" y="1203.0" width="4.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="62.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="59.6" y="1187.0" width="4.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="62.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="59.6" y="1171.0" width="4.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="62.6" y="1182.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="59.6" y="1155.0" width="4.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="62.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.37%)</title><rect x="59.6" y="1139.0" width="4.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="62.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.22%)</title><rect x="61.3" y="1123.0" width="2.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="64.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.22%)</title><rect x="61.3" y="1107.0" width="2.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="64.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.07%)</title><rect x="64.0" y="1315.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.07%)</title><rect x="64.0" y="1299.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (98 samples, 7.23%)</title><rect x="64.8" y="1315.0" width="85.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.8" y="1326.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (98 samples, 7.23%)</title><rect x="64.8" y="1299.0" width="85.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.8" y="1310.0">jdk/intern..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.07%)</title><rect x="66.6" y="1283.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="69.6" y="1294.0"></text>
</g>
<g>
<title>Unsafe_Park (42 samples, 3.10%)</title><rect x="67.4" y="1283.0" width="36.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="70.4" y="1294.0">Uns..</text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.88%)</title><rect x="69.2" y="1267.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="72.2" y="1278.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.07%)</title><rect x="75.3" y="1251.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="78.3" y="1262.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="76.1" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="79.1" y="1262.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="77.0" y="1251.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="80.0" y="1262.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="77.0" y="1235.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="80.0" y="1246.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.15%)</title><rect x="77.9" y="1251.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="80.9" y="1262.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.22%)</title><rect x="79.6" y="1267.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="82.6" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.07%)</title><rect x="82.2" y="1267.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="85.2" y="1278.0"></text>
</g>
<g>
<title>__lll_unlock_wake (16 samples, 1.18%)</title><rect x="83.1" y="1267.0" width="13.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="86.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 1.03%)</title><rect x="84.8" y="1251.0" width="12.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="87.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 1.03%)</title><rect x="84.8" y="1235.0" width="12.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="87.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.66%)</title><rect x="89.2" y="1219.0" width="7.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="92.2" y="1230.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.66%)</title><rect x="89.2" y="1203.0" width="7.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="92.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.59%)</title><rect x="90.1" y="1187.0" width="6.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="93.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.29%)</title><rect x="93.5" y="1171.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="96.5" y="1182.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="95.3" y="1155.0" width="1.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="98.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="96.2" y="1139.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="99.2" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="96.2" y="1123.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="99.2" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.22%)</title><rect x="97.0" y="1267.0" width="2.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="100.0" y="1278.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="99.6" y="1267.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="102.6" y="1278.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="100.5" y="1267.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="103.5" y="1278.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="101.4" y="1267.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="104.4" y="1278.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.15%)</title><rect x="102.2" y="1267.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="105.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 3.83%)</title><rect x="104.0" y="1283.0" width="45.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="107.0" y="1294.0">[unk..</text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.07%)</title><rect x="104.0" y="1267.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="107.0" y="1278.0"></text>
</g>
<g>
<title>__pthread_cond_wait (40 samples, 2.95%)</title><rect x="104.9" y="1267.0" width="34.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="107.9" y="1278.0">__..</text>
</g>
<g>
<title>[unknown] (28 samples, 2.06%)</title><rect x="115.3" y="1251.0" width="24.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="118.3" y="1262.0">[..</text>
</g>
<g>
<title>[unknown] (28 samples, 2.06%)</title><rect x="115.3" y="1235.0" width="24.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="118.3" y="1246.0">[..</text>
</g>
<g>
<title>[unknown] (20 samples, 1.47%)</title><rect x="122.3" y="1219.0" width="17.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="125.3" y="1230.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 1.47%)</title><rect x="122.3" y="1203.0" width="17.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="125.3" y="1214.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 1.47%)</title><rect x="122.3" y="1187.0" width="17.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="125.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.40%)</title><rect x="123.1" y="1171.0" width="16.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="126.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 1.03%)</title><rect x="127.5" y="1155.0" width="12.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="130.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.74%)</title><rect x="131.0" y="1139.0" width="8.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="134.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.59%)</title><rect x="132.7" y="1123.0" width="7.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="135.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="138.8" y="1107.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="141.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="138.8" y="1091.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="141.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="138.8" y="1075.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="141.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="138.8" y="1059.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="141.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="138.8" y="1043.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="141.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="138.8" y="1027.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="141.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="138.8" y="1011.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="141.8" y="1022.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.44%)</title><rect x="139.7" y="1267.0" width="5.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="142.7" y="1278.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="144.9" y="1267.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="147.9" y="1278.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.22%)</title><rect x="145.8" y="1267.0" width="2.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="148.8" y="1278.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="148.4" y="1267.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="151.4" y="1278.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="149.2" y="1283.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="152.2" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.15%)</title><rect x="150.1" y="1315.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 0.59%)</title><rect x="151.8" y="1331.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.59%)</title><rect x="151.8" y="1315.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.15%)</title><rect x="151.8" y="1299.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.15%)</title><rect x="151.8" y="1283.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.15%)</title><rect x="151.8" y="1267.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="154.8" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.15%)</title><rect x="151.8" y="1251.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.8" y="1262.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.07%)</title><rect x="151.8" y="1235.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="154.8" y="1246.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.07%)</title><rect x="151.8" y="1219.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="154.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="151.8" y="1203.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="154.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="151.8" y="1187.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="154.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="151.8" y="1171.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="154.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="151.8" y="1155.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="154.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="151.8" y="1139.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="154.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="152.7" y="1235.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="155.7" y="1246.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="152.7" y="1219.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="155.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.44%)</title><rect x="153.6" y="1299.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="156.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.44%)</title><rect x="153.6" y="1283.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.15%)</title><rect x="153.6" y="1267.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.15%)</title><rect x="153.6" y="1251.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="156.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.29%)</title><rect x="155.3" y="1267.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="158.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.22%)</title><rect x="156.2" y="1251.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.07%)</title><rect x="157.9" y="1235.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="160.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 2.21%)</title><rect x="158.8" y="1331.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="161.8" y="1342.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 2.21%)</title><rect x="158.8" y="1315.0" width="26.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="161.8" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 2.21%)</title><rect x="158.8" y="1299.0" width="26.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.8" y="1310.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 2.21%)</title><rect x="158.8" y="1283.0" width="26.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.8" y="1294.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (30 samples, 2.21%)</title><rect x="158.8" y="1267.0" width="26.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.8" y="1278.0">j..</text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.07%)</title><rect x="158.8" y="1251.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="161.8" y="1262.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.52%)</title><rect x="159.7" y="1251.0" width="6.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="162.7" y="1262.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.15%)</title><rect x="160.5" y="1235.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="163.5" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.07%)</title><rect x="162.3" y="1235.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="165.3" y="1246.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (2 samples, 0.15%)</title><rect x="163.2" y="1235.0" width="1.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="166.2" y="1246.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="164.9" y="1235.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="167.9" y="1246.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (22 samples, 1.62%)</title><rect x="165.8" y="1251.0" width="19.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="168.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.33%)</title><rect x="169.2" y="1235.0" width="15.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="172.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 1.33%)</title><rect x="169.2" y="1219.0" width="15.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="172.2" y="1230.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 1.25%)</title><rect x="170.1" y="1203.0" width="14.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="173.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 1.25%)</title><rect x="170.1" y="1187.0" width="14.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="173.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 1.25%)</title><rect x="170.1" y="1171.0" width="14.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="173.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 1.18%)</title><rect x="171.0" y="1155.0" width="13.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="174.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.96%)</title><rect x="173.6" y="1139.0" width="11.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="176.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.96%)</title><rect x="173.6" y="1123.0" width="11.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="176.6" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$63/32239911.run (570 samples, 42.04%)</title><rect x="184.9" y="1363.0" width="496.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.9" y="1374.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$63/32239911.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$86/1293871524.action (3 samples, 0.22%)</title><rect x="188.4" y="1347.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.4" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (563 samples, 41.52%)</title><rect x="191.0" y="1347.0" width="489.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.0" y="1358.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (457 samples, 33.70%)</title><rect x="192.7" y="1331.0" width="397.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.7" y="1342.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.15%)</title><rect x="195.4" y="1315.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.15%)</title><rect x="195.4" y="1299.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="198.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.15%)</title><rect x="195.4" y="1283.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="198.4" y="1294.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.07%)</title><rect x="196.2" y="1267.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.2" y="1278.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (448 samples, 33.04%)</title><rect x="197.1" y="1315.0" width="389.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="200.1" y="1326.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.96%)</title><rect x="197.1" y="1299.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="200.1" y="1310.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="198.8" y="1283.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.8" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.74%)</title><rect x="199.7" y="1283.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.7" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.52%)</title><rect x="200.6" y="1267.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.29%)</title><rect x="203.2" y="1251.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="204.9" y="1235.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="207.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="204.9" y="1219.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="207.9" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="204.9" y="1203.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="207.9" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="204.9" y="1187.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="207.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="204.9" y="1171.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="207.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="204.9" y="1155.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="207.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="204.9" y="1139.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="207.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.07%)</title><rect x="205.8" y="1235.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.8" y="1246.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.15%)</title><rect x="206.7" y="1267.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.7" y="1278.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.15%)</title><rect x="206.7" y="1251.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.07%)</title><rect x="207.5" y="1235.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.5" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.07%)</title><rect x="207.5" y="1219.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.5" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (435 samples, 32.08%)</title><rect x="208.4" y="1299.0" width="378.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="211.4" y="1310.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (435 samples, 32.08%)</title><rect x="208.4" y="1283.0" width="378.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.4" y="1294.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.15%)</title><rect x="208.4" y="1267.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="211.4" y="1278.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (429 samples, 31.64%)</title><rect x="210.1" y="1267.0" width="373.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.1" y="1278.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (426 samples, 31.42%)</title><rect x="212.8" y="1251.0" width="370.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.8" y="1262.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (20 samples, 1.47%)</title><rect x="218.0" y="1235.0" width="17.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="221.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 1.47%)</title><rect x="218.0" y="1219.0" width="17.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="221.0" y="1230.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (17 samples, 1.25%)</title><rect x="218.0" y="1203.0" width="14.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="221.0" y="1214.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.07%)</title><rect x="220.6" y="1187.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="223.6" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.07%)</title><rect x="221.5" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="224.5" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="222.3" y="1187.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="225.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="222.3" y="1171.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="225.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="222.3" y="1155.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="225.3" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="222.3" y="1139.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="225.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="222.3" y="1123.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="225.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="222.3" y="1107.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="225.3" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="222.3" y="1091.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="225.3" y="1102.0"></text>
</g>
<g>
<title>__memmove_ssse3 (2 samples, 0.15%)</title><rect x="223.2" y="1187.0" width="1.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="226.2" y="1198.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.66%)</title><rect x="224.9" y="1187.0" width="7.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="227.9" y="1198.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.07%)</title><rect x="226.7" y="1171.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="229.7" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.15%)</title><rect x="227.6" y="1171.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="230.6" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.15%)</title><rect x="229.3" y="1171.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="232.3" y="1182.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.15%)</title><rect x="231.0" y="1171.0" width="1.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="234.0" y="1182.0"></text>
</g>
<g>
<title>__send (2 samples, 0.15%)</title><rect x="232.8" y="1203.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="235.8" y="1214.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.07%)</title><rect x="234.5" y="1203.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="237.5" y="1214.0"></text>
</g>
<g>
<title>__send (400 samples, 29.50%)</title><rect x="235.4" y="1235.0" width="348.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="238.4" y="1246.0">__send</text>
</g>
<g>
<title>[unknown] (393 samples, 28.98%)</title><rect x="241.5" y="1219.0" width="342.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="244.5" y="1230.0">[unknown]</text>
</g>
<g>
<title>[unknown] (393 samples, 28.98%)</title><rect x="241.5" y="1203.0" width="342.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="244.5" y="1214.0">[unknown]</text>
</g>
<g>
<title>[unknown] (384 samples, 28.32%)</title><rect x="249.3" y="1187.0" width="334.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="252.3" y="1198.0">[unknown]</text>
</g>
<g>
<title>[unknown] (384 samples, 28.32%)</title><rect x="249.3" y="1171.0" width="334.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="252.3" y="1182.0">[unknown]</text>
</g>
<g>
<title>[unknown] (382 samples, 28.17%)</title><rect x="251.0" y="1155.0" width="332.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="254.0" y="1166.0">[unknown]</text>
</g>
<g>
<title>[unknown] (380 samples, 28.02%)</title><rect x="252.8" y="1139.0" width="330.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="255.8" y="1150.0">[unknown]</text>
</g>
<g>
<title>[unknown] (375 samples, 27.65%)</title><rect x="257.1" y="1123.0" width="326.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="260.1" y="1134.0">[unknown]</text>
</g>
<g>
<title>[unknown] (373 samples, 27.51%)</title><rect x="258.9" y="1107.0" width="324.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="261.9" y="1118.0">[unknown]</text>
</g>
<g>
<title>[unknown] (353 samples, 26.03%)</title><rect x="276.3" y="1091.0" width="307.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="279.3" y="1102.0">[unknown]</text>
</g>
<g>
<title>[unknown] (333 samples, 24.56%)</title><rect x="293.7" y="1075.0" width="289.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="296.7" y="1086.0">[unknown]</text>
</g>
<g>
<title>[unknown] (316 samples, 23.30%)</title><rect x="308.5" y="1059.0" width="275.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="311.5" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (297 samples, 21.90%)</title><rect x="325.0" y="1043.0" width="258.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="328.0" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (268 samples, 19.76%)</title><rect x="350.3" y="1027.0" width="233.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="353.3" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (262 samples, 19.32%)</title><rect x="355.5" y="1011.0" width="228.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="358.5" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (256 samples, 18.88%)</title><rect x="360.7" y="995.0" width="222.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="363.7" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (254 samples, 18.73%)</title><rect x="362.4" y="979.0" width="221.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="365.4" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (253 samples, 18.66%)</title><rect x="363.3" y="963.0" width="220.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="366.3" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (243 samples, 17.92%)</title><rect x="372.0" y="947.0" width="211.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="375.0" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (236 samples, 17.40%)</title><rect x="378.1" y="931.0" width="205.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="381.1" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (227 samples, 16.74%)</title><rect x="385.9" y="915.0" width="197.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="388.9" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (189 samples, 13.94%)</title><rect x="419.0" y="899.0" width="164.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="422.0" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (179 samples, 13.20%)</title><rect x="427.7" y="883.0" width="155.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="430.7" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (177 samples, 13.05%)</title><rect x="429.4" y="867.0" width="154.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="432.4" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (172 samples, 12.68%)</title><rect x="433.8" y="851.0" width="149.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="436.8" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (167 samples, 12.32%)</title><rect x="438.1" y="835.0" width="145.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="441.1" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (164 samples, 12.09%)</title><rect x="440.8" y="819.0" width="142.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="443.8" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (164 samples, 12.09%)</title><rect x="440.8" y="803.0" width="142.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="443.8" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (159 samples, 11.73%)</title><rect x="445.1" y="787.0" width="138.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="448.1" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (146 samples, 10.77%)</title><rect x="456.4" y="771.0" width="127.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="459.4" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (144 samples, 10.62%)</title><rect x="458.2" y="755.0" width="125.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="461.2" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (140 samples, 10.32%)</title><rect x="461.6" y="739.0" width="121.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="464.6" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (137 samples, 10.10%)</title><rect x="464.2" y="723.0" width="119.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="467.2" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (120 samples, 8.85%)</title><rect x="479.0" y="707.0" width="104.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="482.0" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (108 samples, 7.96%)</title><rect x="489.5" y="691.0" width="94.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="492.5" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (97 samples, 7.15%)</title><rect x="499.1" y="675.0" width="84.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="502.1" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (84 samples, 6.19%)</title><rect x="510.4" y="659.0" width="73.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="513.4" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (66 samples, 4.87%)</title><rect x="526.0" y="643.0" width="57.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="529.0" y="654.0">[unkno..</text>
</g>
<g>
<title>[unknown] (64 samples, 4.72%)</title><rect x="527.8" y="627.0" width="55.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="530.8" y="638.0">[unkn..</text>
</g>
<g>
<title>[unknown] (62 samples, 4.57%)</title><rect x="529.5" y="611.0" width="54.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="532.5" y="622.0">[unkn..</text>
</g>
<g>
<title>[unknown] (7 samples, 0.52%)</title><rect x="577.4" y="595.0" width="6.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="580.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="581.7" y="579.0" width="1.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="584.7" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="583.5" y="1267.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="586.5" y="1278.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.29%)</title><rect x="583.5" y="1251.0" width="3.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="586.5" y="1262.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="584.3" y="1235.0" width="2.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="587.3" y="1246.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.29%)</title><rect x="586.9" y="1315.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="589.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.07%)</title><rect x="589.6" y="1299.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.07%)</title><rect x="589.6" y="1283.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="592.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.07%)</title><rect x="589.6" y="1267.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.07%)</title><rect x="589.6" y="1251.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.07%)</title><rect x="589.6" y="1235.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="592.6" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$86/1293871524.action (104 samples, 7.67%)</title><rect x="590.4" y="1331.0" width="90.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="593.4" y="1342.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$2 (104 samples, 7.67%)</title><rect x="590.4" y="1315.0" width="90.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="593.4" y="1326.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.delete (104 samples, 7.67%)</title><rect x="590.4" y="1299.0" width="90.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="593.4" y="1310.0">ru/mail/po..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.22%)</title><rect x="593.9" y="1283.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="596.9" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.remove (97 samples, 7.15%)</title><rect x="596.5" y="1283.0" width="84.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="599.5" y="1294.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.remove (97 samples, 7.15%)</title><rect x="596.5" y="1267.0" width="84.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="599.5" y="1278.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.07%)</title><rect x="596.5" y="1251.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="599.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.07%)</title><rect x="597.4" y="1251.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.07%)</title><rect x="597.4" y="1235.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="600.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.07%)</title><rect x="597.4" y="1219.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="600.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.07%)</title><rect x="598.3" y="1251.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="601.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.07%)</title><rect x="598.3" y="1235.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="601.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.07%)</title><rect x="598.3" y="1219.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.3" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.remove (92 samples, 6.78%)</title><rect x="599.1" y="1251.0" width="80.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="602.1" y="1262.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (79 samples, 5.83%)</title><rect x="599.1" y="1235.0" width="68.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="602.1" y="1246.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (79 samples, 5.83%)</title><rect x="599.1" y="1219.0" width="68.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="602.1" y="1230.0">java/ut..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.15%)</title><rect x="605.2" y="1203.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="608.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.15%)</title><rect x="605.2" y="1187.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="608.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (2 samples, 0.15%)</title><rect x="607.0" y="1203.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="610.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (4 samples, 0.29%)</title><rect x="608.7" y="1203.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="611.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.29%)</title><rect x="608.7" y="1187.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="611.7" y="1198.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.29%)</title><rect x="608.7" y="1171.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="611.7" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.07%)</title><rect x="611.3" y="1155.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.3" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.07%)</title><rect x="611.3" y="1139.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (64 samples, 4.72%)</title><rect x="612.2" y="1203.0" width="55.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="615.2" y="1214.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (64 samples, 4.72%)</title><rect x="612.2" y="1187.0" width="55.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="615.2" y="1198.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (64 samples, 4.72%)</title><rect x="612.2" y="1171.0" width="55.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="615.2" y="1182.0">java/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="635.7" y="1155.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="638.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="635.7" y="1139.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="638.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="635.7" y="1123.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="638.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="635.7" y="1107.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="638.7" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="635.7" y="1091.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="638.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="635.7" y="1075.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="638.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="635.7" y="1059.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="638.7" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (5 samples, 0.37%)</title><rect x="636.5" y="1155.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.5" y="1166.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (31 samples, 2.29%)</title><rect x="640.9" y="1155.0" width="27.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="643.9" y="1166.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.22%)</title><rect x="658.3" y="1139.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="661.3" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.15%)</title><rect x="660.9" y="1139.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="663.9" y="1150.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.15%)</title><rect x="660.9" y="1123.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.9" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (6 samples, 0.44%)</title><rect x="662.7" y="1139.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.7" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.isDead (1 samples, 0.07%)</title><rect x="667.9" y="1235.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.9" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (12 samples, 0.88%)</title><rect x="668.7" y="1235.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="671.7" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.&lt;init&gt; (10 samples, 0.74%)</title><rect x="670.5" y="1219.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="673.5" y="1230.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.22%)</title><rect x="671.4" y="1203.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="674.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.07%)</title><rect x="674.0" y="1203.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.0" y="1214.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="674.8" y="1203.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="677.8" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.22%)</title><rect x="676.6" y="1203.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="679.6" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="676.6" y="1187.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="679.6" y="1198.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.15%)</title><rect x="677.4" y="1187.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="680.4" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="678.3" y="1171.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="681.3" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (2 samples, 0.15%)</title><rect x="679.2" y="1251.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="682.2" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.sizeInBytes (1 samples, 0.07%)</title><rect x="679.2" y="1235.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="682.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.get (1 samples, 0.07%)</title><rect x="679.2" y="1219.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="682.2" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getSizeOfFlushedRow (1 samples, 0.07%)</title><rect x="680.1" y="1235.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="683.1" y="1246.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.07%)</title><rect x="680.1" y="1219.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="683.1" y="1230.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (419 samples, 30.90%)</title><rect x="680.9" y="1411.0" width="364.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="683.9" y="1422.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.07%)</title><rect x="681.8" y="1395.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="684.8" y="1406.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.07%)</title><rect x="681.8" y="1379.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="684.8" y="1390.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (106 samples, 7.82%)</title><rect x="682.7" y="1395.0" width="92.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.7" y="1406.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.15%)</title><rect x="686.2" y="1379.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="689.2" y="1390.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.07%)</title><rect x="687.0" y="1363.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.0" y="1374.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (100 samples, 7.37%)</title><rect x="687.9" y="1379.0" width="87.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="690.9" y="1390.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.29%)</title><rect x="692.2" y="1363.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="695.2" y="1374.0"></text>
</g>
<g>
<title>[unknown] (89 samples, 6.56%)</title><rect x="695.7" y="1363.0" width="77.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="698.7" y="1374.0">[unknown]</text>
</g>
<g>
<title>Klass::is_klass() const volatile (2 samples, 0.15%)</title><rect x="695.7" y="1347.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="698.7" y="1358.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="695.7" y="1331.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="698.7" y="1342.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="695.7" y="1315.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="698.7" y="1326.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.15%)</title><rect x="695.7" y="1299.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="698.7" y="1310.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.07%)</title><rect x="697.5" y="1347.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="700.5" y="1358.0"></text>
</g>
<g>
<title>epoll_wait (86 samples, 6.34%)</title><rect x="698.3" y="1347.0" width="74.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="701.3" y="1358.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (79 samples, 5.83%)</title><rect x="704.4" y="1331.0" width="68.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="707.4" y="1342.0">[unknown]</text>
</g>
<g>
<title>[unknown] (79 samples, 5.83%)</title><rect x="704.4" y="1315.0" width="68.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="707.4" y="1326.0">[unknown]</text>
</g>
<g>
<title>[unknown] (74 samples, 5.46%)</title><rect x="708.8" y="1299.0" width="64.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="711.8" y="1310.0">[unknown]</text>
</g>
<g>
<title>[unknown] (73 samples, 5.38%)</title><rect x="709.6" y="1283.0" width="63.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="712.6" y="1294.0">[unknown]</text>
</g>
<g>
<title>[unknown] (68 samples, 5.01%)</title><rect x="714.0" y="1267.0" width="59.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="717.0" y="1278.0">[unkno..</text>
</g>
<g>
<title>[unknown] (62 samples, 4.57%)</title><rect x="719.2" y="1251.0" width="54.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="722.2" y="1262.0">[unkn..</text>
</g>
<g>
<title>[unknown] (46 samples, 3.39%)</title><rect x="733.1" y="1235.0" width="40.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="736.1" y="1246.0">[un..</text>
</g>
<g>
<title>[unknown] (34 samples, 2.51%)</title><rect x="743.6" y="1219.0" width="29.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="746.6" y="1230.0">[u..</text>
</g>
<g>
<title>[unknown] (22 samples, 1.62%)</title><rect x="754.0" y="1203.0" width="19.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="757.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 1.18%)</title><rect x="759.2" y="1187.0" width="14.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="762.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="772.3" y="1171.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="775.3" y="1182.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.07%)</title><rect x="773.2" y="1363.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="776.2" y="1374.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.07%)</title><rect x="774.0" y="1363.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="777.0" y="1374.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (311 samples, 22.94%)</title><rect x="774.9" y="1395.0" width="270.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="777.9" y="1406.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (5 samples, 0.37%)</title><rect x="780.1" y="1379.0" width="4.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="783.1" y="1390.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (297 samples, 21.90%)</title><rect x="784.5" y="1379.0" width="258.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="787.5" y="1390.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (202 samples, 14.90%)</title><rect x="784.5" y="1363.0" width="175.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.5" y="1374.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (167 samples, 12.32%)</title><rect x="790.6" y="1347.0" width="145.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="793.6" y="1358.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (167 samples, 12.32%)</title><rect x="790.6" y="1331.0" width="145.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="793.6" y="1342.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (154 samples, 11.36%)</title><rect x="790.6" y="1315.0" width="134.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="793.6" y="1326.0">RequestHandler1_e..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.66%)</title><rect x="791.4" y="1299.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.15%)</title><rect x="791.4" y="1283.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="794.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.15%)</title><rect x="791.4" y="1267.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.4" y="1278.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="791.4" y="1251.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="794.4" y="1262.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.07%)</title><rect x="792.3" y="1251.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.22%)</title><rect x="793.2" y="1283.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="796.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.07%)</title><rect x="794.9" y="1267.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.22%)</title><rect x="795.8" y="1283.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.22%)</title><rect x="795.8" y="1267.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="798.8" y="1278.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.22%)</title><rect x="795.8" y="1251.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.8" y="1262.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.07%)</title><rect x="798.4" y="1283.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="801.4" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (144 samples, 10.62%)</title><rect x="799.3" y="1299.0" width="125.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.3" y="1310.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.22%)</title><rect x="799.3" y="1283.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.22%)</title><rect x="799.3" y="1267.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="802.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.internalMemberName (1 samples, 0.07%)</title><rect x="799.3" y="1251.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="802.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.07%)</title><rect x="800.1" y="1251.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="803.1" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$86/1293871524.get$Lambda (1 samples, 0.07%)</title><rect x="801.0" y="1251.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="804.0" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$86/1293871524.&lt;init&gt; (1 samples, 0.07%)</title><rect x="801.0" y="1235.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="804.0" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.15%)</title><rect x="801.9" y="1283.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="804.9" y="1294.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.15%)</title><rect x="801.9" y="1267.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="804.9" y="1278.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="801.9" y="1251.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="804.9" y="1262.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="801.9" y="1235.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="804.9" y="1246.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="801.9" y="1219.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.9" y="1230.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.07%)</title><rect x="801.9" y="1203.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="804.9" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.07%)</title><rect x="801.9" y="1187.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="804.9" y="1198.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.07%)</title><rect x="801.9" y="1171.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.9" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.07%)</title><rect x="802.8" y="1203.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.8" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.07%)</title><rect x="802.8" y="1187.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="805.8" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (139 samples, 10.25%)</title><rect x="803.6" y="1283.0" width="121.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.6" y="1294.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.29%)</title><rect x="803.6" y="1267.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.29%)</title><rect x="803.6" y="1251.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="806.6" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$63/32239911.get$Lambda (4 samples, 0.29%)</title><rect x="803.6" y="1235.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="806.6" y="1246.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$63/32239911.&lt;init&gt; (1 samples, 0.07%)</title><rect x="806.2" y="1219.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="809.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (135 samples, 9.96%)</title><rect x="807.1" y="1267.0" width="117.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="810.1" y="1278.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (135 samples, 9.96%)</title><rect x="807.1" y="1251.0" width="117.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.1" y="1262.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (2 samples, 0.15%)</title><rect x="808.8" y="1235.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (120 samples, 8.85%)</title><rect x="810.6" y="1235.0" width="104.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="813.6" y="1246.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (8 samples, 0.59%)</title><rect x="811.5" y="1219.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (8 samples, 0.59%)</title><rect x="811.5" y="1203.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="814.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.52%)</title><rect x="812.3" y="1187.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="815.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (3 samples, 0.22%)</title><rect x="814.9" y="1171.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.22%)</title><rect x="814.9" y="1155.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.22%)</title><rect x="814.9" y="1139.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="817.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.07%)</title><rect x="817.6" y="1171.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="820.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.07%)</title><rect x="817.6" y="1155.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.07%)</title><rect x="817.6" y="1139.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="820.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.07%)</title><rect x="817.6" y="1123.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="820.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.37%)</title><rect x="818.4" y="1219.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="821.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.37%)</title><rect x="818.4" y="1203.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="821.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.07%)</title><rect x="819.3" y="1187.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.07%)</title><rect x="819.3" y="1171.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="822.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.22%)</title><rect x="820.2" y="1187.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="823.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.22%)</title><rect x="820.2" y="1171.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="823.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.22%)</title><rect x="820.2" y="1155.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="823.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.22%)</title><rect x="820.2" y="1139.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="823.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.22%)</title><rect x="820.2" y="1123.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="823.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (106 samples, 7.82%)</title><rect x="822.8" y="1219.0" width="92.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="825.8" y="1230.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (106 samples, 7.82%)</title><rect x="822.8" y="1203.0" width="92.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.8" y="1214.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (102 samples, 7.52%)</title><rect x="825.4" y="1187.0" width="88.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="828.4" y="1198.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (101 samples, 7.45%)</title><rect x="825.4" y="1171.0" width="87.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="828.4" y="1182.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (101 samples, 7.45%)</title><rect x="825.4" y="1155.0" width="87.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="828.4" y="1166.0">jdk/intern..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.07%)</title><rect x="825.4" y="1139.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="828.4" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.15%)</title><rect x="826.3" y="1139.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="829.3" y="1150.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.07%)</title><rect x="828.0" y="1139.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="831.0" y="1150.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.07%)</title><rect x="828.9" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="831.9" y="1150.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.07%)</title><rect x="829.7" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="832.7" y="1150.0"></text>
</g>
<g>
<title>Unsafe_Unpark (22 samples, 1.62%)</title><rect x="830.6" y="1139.0" width="19.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="833.6" y="1150.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.15%)</title><rect x="832.3" y="1123.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="835.3" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (4 samples, 0.29%)</title><rect x="834.1" y="1123.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="837.1" y="1134.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.29%)</title><rect x="837.6" y="1123.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.6" y="1134.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.07%)</title><rect x="841.0" y="1123.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.0" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (7 samples, 0.52%)</title><rect x="841.9" y="1123.0" width="6.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="844.9" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.07%)</title><rect x="848.0" y="1123.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="851.0" y="1134.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.07%)</title><rect x="848.9" y="1123.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="851.9" y="1134.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.15%)</title><rect x="849.7" y="1139.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="852.7" y="1150.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (71 samples, 5.24%)</title><rect x="851.5" y="1139.0" width="61.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="854.5" y="1150.0">pthrea..</text>
</g>
<g>
<title>[unknown] (65 samples, 4.79%)</title><rect x="856.7" y="1123.0" width="56.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="859.7" y="1134.0">[unkno..</text>
</g>
<g>
<title>[unknown] (65 samples, 4.79%)</title><rect x="856.7" y="1107.0" width="56.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="859.7" y="1118.0">[unkno..</text>
</g>
<g>
<title>[unknown] (59 samples, 4.35%)</title><rect x="861.9" y="1091.0" width="51.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="864.9" y="1102.0">[unkn..</text>
</g>
<g>
<title>[unknown] (58 samples, 4.28%)</title><rect x="862.8" y="1075.0" width="50.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="865.8" y="1086.0">[unkn..</text>
</g>
<g>
<title>[unknown] (58 samples, 4.28%)</title><rect x="862.8" y="1059.0" width="50.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="865.8" y="1070.0">[unkn..</text>
</g>
<g>
<title>[unknown] (51 samples, 3.76%)</title><rect x="868.9" y="1043.0" width="44.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="871.9" y="1054.0">[unk..</text>
</g>
<g>
<title>[unknown] (50 samples, 3.69%)</title><rect x="869.8" y="1027.0" width="43.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="872.8" y="1038.0">[unk..</text>
</g>
<g>
<title>[unknown] (46 samples, 3.39%)</title><rect x="873.2" y="1011.0" width="40.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="876.2" y="1022.0">[un..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.07%)</title><rect x="913.3" y="1171.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="916.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="914.1" y="1187.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="917.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.22%)</title><rect x="915.0" y="1235.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="918.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.22%)</title><rect x="915.0" y="1219.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="918.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.44%)</title><rect x="917.6" y="1235.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.44%)</title><rect x="917.6" y="1219.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="920.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.29%)</title><rect x="917.6" y="1203.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.6" y="1214.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="918.5" y="1187.0" width="2.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="921.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.15%)</title><rect x="921.1" y="1203.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="924.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.15%)</title><rect x="921.1" y="1187.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="924.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.15%)</title><rect x="921.1" y="1171.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.15%)</title><rect x="921.1" y="1155.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="924.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.15%)</title><rect x="921.1" y="1139.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="924.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.15%)</title><rect x="922.8" y="1235.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="925.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.15%)</title><rect x="922.8" y="1219.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="925.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="922.8" y="1203.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="925.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="923.7" y="1203.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="926.7" y="1214.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.07%)</title><rect x="924.6" y="1315.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.6" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="924.6" y="1299.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="927.6" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="924.6" y="1283.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="927.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.07%)</title><rect x="924.6" y="1267.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="927.6" y="1278.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (12 samples, 0.88%)</title><rect x="925.5" y="1315.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="928.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.66%)</title><rect x="928.1" y="1299.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="931.1" y="1310.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (2 samples, 0.15%)</title><rect x="928.9" y="1283.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="931.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.44%)</title><rect x="930.7" y="1283.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="933.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.29%)</title><rect x="930.7" y="1267.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="933.7" y="1278.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.15%)</title><rect x="934.2" y="1267.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="937.2" y="1278.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8 samples, 0.59%)</title><rect x="935.9" y="1347.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="938.9" y="1358.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.07%)</title><rect x="936.8" y="1331.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="939.8" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.07%)</title><rect x="936.8" y="1315.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="939.8" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.07%)</title><rect x="936.8" y="1299.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="939.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.07%)</title><rect x="936.8" y="1283.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="939.8" y="1294.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.29%)</title><rect x="937.6" y="1331.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="940.6" y="1342.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.29%)</title><rect x="937.6" y="1315.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="940.6" y="1326.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.15%)</title><rect x="941.1" y="1331.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="944.1" y="1342.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (16 samples, 1.18%)</title><rect x="942.9" y="1347.0" width="13.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="945.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.52%)</title><rect x="948.1" y="1331.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="951.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.52%)</title><rect x="948.1" y="1315.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="951.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.07%)</title><rect x="951.6" y="1299.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="954.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.07%)</title><rect x="951.6" y="1283.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="954.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.07%)</title><rect x="951.6" y="1267.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="954.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.15%)</title><rect x="952.4" y="1299.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="955.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.15%)</title><rect x="952.4" y="1283.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="955.4" y="1294.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (3 samples, 0.22%)</title><rect x="954.2" y="1331.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="957.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="955.9" y="1315.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.9" y="1326.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.22%)</title><rect x="956.8" y="1347.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.8" y="1358.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.22%)</title><rect x="956.8" y="1331.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.8" y="1342.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.22%)</title><rect x="956.8" y="1315.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="959.8" y="1326.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.07%)</title><rect x="957.7" y="1299.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="960.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.07%)</title><rect x="957.7" y="1283.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="960.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.07%)</title><rect x="957.7" y="1267.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="960.7" y="1278.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.07%)</title><rect x="957.7" y="1251.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="960.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.07%)</title><rect x="958.5" y="1299.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="961.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.07%)</title><rect x="958.5" y="1283.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="961.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.07%)</title><rect x="958.5" y="1267.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="961.5" y="1278.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.07%)</title><rect x="959.4" y="1347.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="962.4" y="1358.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.07%)</title><rect x="959.4" y="1331.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="962.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="959.4" y="1315.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="962.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="959.4" y="1299.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="962.4" y="1310.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (95 samples, 7.01%)</title><rect x="960.3" y="1363.0" width="82.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="963.3" y="1374.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (94 samples, 6.93%)</title><rect x="961.1" y="1347.0" width="81.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="964.1" y="1358.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.15%)</title><rect x="962.0" y="1331.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="965.0" y="1342.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 1.84%)</title><rect x="963.7" y="1331.0" width="21.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="966.7" y="1342.0">[..</text>
</g>
<g>
<title>[unknown] (25 samples, 1.84%)</title><rect x="963.7" y="1315.0" width="21.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="966.7" y="1326.0">[..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (21 samples, 1.55%)</title><rect x="963.7" y="1299.0" width="18.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="966.7" y="1310.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.07%)</title><rect x="963.7" y="1283.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="966.7" y="1294.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.15%)</title><rect x="964.6" y="1283.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="967.6" y="1294.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.07%)</title><rect x="966.4" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.4" y="1294.0"></text>
</g>
<g>
<title>__memmove_ssse3 (5 samples, 0.37%)</title><rect x="967.2" y="1283.0" width="4.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="970.2" y="1294.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (11 samples, 0.81%)</title><rect x="971.6" y="1283.0" width="9.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="974.6" y="1294.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.07%)</title><rect x="973.3" y="1267.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.3" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (3 samples, 0.22%)</title><rect x="974.2" y="1267.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="977.2" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.07%)</title><rect x="976.8" y="1267.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.8" y="1278.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.29%)</title><rect x="977.7" y="1267.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="980.7" y="1278.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.07%)</title><rect x="981.2" y="1283.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.2" y="1294.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="982.0" y="1299.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="985.0" y="1310.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.07%)</title><rect x="982.9" y="1299.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="985.9" y="1310.0"></text>
</g>
<g>
<title>recv (2 samples, 0.15%)</title><rect x="983.8" y="1299.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="986.8" y="1310.0"></text>
</g>
<g>
<title>recv (66 samples, 4.87%)</title><rect x="985.5" y="1331.0" width="57.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="988.5" y="1342.0">recv</text>
</g>
<g>
<title>[unknown] (60 samples, 4.42%)</title><rect x="990.7" y="1315.0" width="52.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="993.7" y="1326.0">[unkn..</text>
</g>
<g>
<title>[unknown] (60 samples, 4.42%)</title><rect x="990.7" y="1299.0" width="52.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="993.7" y="1310.0">[unkn..</text>
</g>
<g>
<title>[unknown] (54 samples, 3.98%)</title><rect x="995.9" y="1283.0" width="47.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="998.9" y="1294.0">[unk..</text>
</g>
<g>
<title>[unknown] (54 samples, 3.98%)</title><rect x="995.9" y="1267.0" width="47.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="998.9" y="1278.0">[unk..</text>
</g>
<g>
<title>[unknown] (52 samples, 3.83%)</title><rect x="997.7" y="1251.0" width="45.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1000.7" y="1262.0">[unk..</text>
</g>
<g>
<title>[unknown] (44 samples, 3.24%)</title><rect x="1004.6" y="1235.0" width="38.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1007.6" y="1246.0">[un..</text>
</g>
<g>
<title>[unknown] (39 samples, 2.88%)</title><rect x="1009.0" y="1219.0" width="33.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1012.0" y="1230.0">[u..</text>
</g>
<g>
<title>[unknown] (36 samples, 2.65%)</title><rect x="1011.6" y="1203.0" width="31.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1014.6" y="1214.0">[u..</text>
</g>
<g>
<title>[unknown] (28 samples, 2.06%)</title><rect x="1018.6" y="1187.0" width="24.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1021.6" y="1198.0">[..</text>
</g>
<g>
<title>[unknown] (18 samples, 1.33%)</title><rect x="1027.3" y="1171.0" width="15.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1030.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.88%)</title><rect x="1032.5" y="1155.0" width="10.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1035.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.22%)</title><rect x="1040.3" y="1139.0" width="2.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1043.3" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.22%)</title><rect x="1042.9" y="1379.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.9" y="1390.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.07%)</title><rect x="1044.7" y="1363.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1047.7" y="1374.0"></text>
</g>
<g>
<title>start_thread (166 samples, 12.24%)</title><rect x="1045.5" y="1411.0" width="144.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1048.5" y="1422.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (166 samples, 12.24%)</title><rect x="1045.5" y="1395.0" width="144.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1048.5" y="1406.0">thread_native_entr..</text>
</g>
<g>
<title>Thread::call_run() (166 samples, 12.24%)</title><rect x="1045.5" y="1379.0" width="144.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.5" y="1390.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (6 samples, 0.44%)</title><rect x="1045.5" y="1363.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.5" y="1374.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (5 samples, 0.37%)</title><rect x="1045.5" y="1347.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.5" y="1358.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (5 samples, 0.37%)</title><rect x="1045.5" y="1331.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1048.5" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (5 samples, 0.37%)</title><rect x="1045.5" y="1315.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1048.5" y="1326.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.22%)</title><rect x="1046.4" y="1299.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.4" y="1310.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWord**, unsigned long*, HeapWord*, HeapWord*) (1 samples, 0.07%)</title><rect x="1046.4" y="1283.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.4" y="1294.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.15%)</title><rect x="1047.3" y="1283.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1050.3" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.07%)</title><rect x="1047.3" y="1267.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.3" y="1278.0"></text>
</g>
<g>
<title>G1ContiguousSpace::used_region() const (1 samples, 0.07%)</title><rect x="1048.2" y="1267.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.2" y="1278.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (1 samples, 0.07%)</title><rect x="1049.0" y="1299.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1052.0" y="1310.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.07%)</title><rect x="1049.9" y="1347.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.9" y="1358.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.07%)</title><rect x="1049.9" y="1331.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.9" y="1342.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="1049.9" y="1315.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.9" y="1326.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="1049.9" y="1299.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1052.9" y="1310.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="1049.9" y="1283.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.9" y="1294.0"></text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 0.88%)</title><rect x="1050.8" y="1363.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.8" y="1374.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 0.88%)</title><rect x="1050.8" y="1347.0" width="10.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.8" y="1358.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1050.8" y="1331.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.8" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1050.8" y="1315.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.8" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="1050.8" y="1299.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.8" y="1310.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="1050.8" y="1283.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.8" y="1294.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.07%)</title><rect x="1050.8" y="1267.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.8" y="1278.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.07%)</title><rect x="1050.8" y="1251.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.8" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (11 samples, 0.81%)</title><rect x="1051.6" y="1331.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.6" y="1342.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (11 samples, 0.81%)</title><rect x="1051.6" y="1315.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.6" y="1326.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (11 samples, 0.81%)</title><rect x="1051.6" y="1299.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1054.6" y="1310.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (11 samples, 0.81%)</title><rect x="1051.6" y="1283.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1054.6" y="1294.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (11 samples, 0.81%)</title><rect x="1051.6" y="1267.0" width="9.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.6" y="1278.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.07%)</title><rect x="1052.5" y="1251.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1055.5" y="1262.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="1052.5" y="1235.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.5" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.07%)</title><rect x="1052.5" y="1219.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.5" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (8 samples, 0.59%)</title><rect x="1053.4" y="1251.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.4" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.22%)</title><rect x="1056.9" y="1235.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1058.6" y="1219.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1061.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1058.6" y="1203.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1061.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1058.6" y="1187.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1061.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1058.6" y="1171.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1061.6" y="1182.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.07%)</title><rect x="1059.5" y="1235.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.5" y="1246.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringScanRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.07%)</title><rect x="1060.3" y="1251.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1063.3" y="1262.0"></text>
</g>
<g>
<title>JavaThread::run() (144 samples, 10.62%)</title><rect x="1061.2" y="1363.0" width="125.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.2" y="1374.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (144 samples, 10.62%)</title><rect x="1061.2" y="1347.0" width="125.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.2" y="1358.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (143 samples, 10.55%)</title><rect x="1061.2" y="1331.0" width="124.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.2" y="1342.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (143 samples, 10.55%)</title><rect x="1061.2" y="1315.0" width="124.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.2" y="1326.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (142 samples, 10.47%)</title><rect x="1061.2" y="1299.0" width="123.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.2" y="1310.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (142 samples, 10.47%)</title><rect x="1061.2" y="1283.0" width="123.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1064.2" y="1294.0">Compile::Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (89 samples, 6.56%)</title><rect x="1061.2" y="1267.0" width="77.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.2" y="1278.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.22%)</title><rect x="1061.2" y="1251.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.2" y="1262.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.15%)</title><rect x="1061.2" y="1235.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1064.2" y="1246.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="1062.1" y="1219.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.1" y="1230.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="1062.9" y="1235.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1065.9" y="1246.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="1062.9" y="1219.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.9" y="1230.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="1062.9" y="1203.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.9" y="1214.0"></text>
</g>
<g>
<title>CodeSection::initialize_shared_locs(relocInfo*, int) (1 samples, 0.07%)</title><rect x="1062.9" y="1187.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.9" y="1198.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.07%)</title><rect x="1063.8" y="1251.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.8" y="1262.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.07%)</title><rect x="1063.8" y="1235.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.8" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="1063.8" y="1219.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.8" y="1230.0"></text>
</g>
<g>
<title>OopRecorder::find_index(Metadata*) (1 samples, 0.07%)</title><rect x="1063.8" y="1203.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.8" y="1214.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.07%)</title><rect x="1063.8" y="1187.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.8" y="1198.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_initialize() (1 samples, 0.07%)</title><rect x="1063.8" y="1171.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.8" y="1182.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="1064.7" y="1251.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.7" y="1262.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.44%)</title><rect x="1065.6" y="1251.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.6" y="1262.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="1065.6" y="1235.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.6" y="1246.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.37%)</title><rect x="1066.4" y="1235.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.4" y="1246.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="1066.4" y="1219.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.4" y="1230.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="1067.3" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.3" y="1230.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.22%)</title><rect x="1068.2" y="1219.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1071.2" y="1230.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.22%)</title><rect x="1068.2" y="1203.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.2" y="1214.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.22%)</title><rect x="1068.2" y="1187.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.2" y="1198.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.15%)</title><rect x="1068.2" y="1171.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.2" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="1068.2" y="1155.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.2" y="1166.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.07%)</title><rect x="1068.2" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.2" y="1150.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.07%)</title><rect x="1069.0" y="1155.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.0" y="1166.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.07%)</title><rect x="1069.0" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.0" y="1150.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.07%)</title><rect x="1069.9" y="1171.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.9" y="1182.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.07%)</title><rect x="1069.9" y="1155.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.9" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="1070.8" y="1251.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.8" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.07%)</title><rect x="1070.8" y="1235.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.8" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.52%)</title><rect x="1071.7" y="1251.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.7" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.52%)</title><rect x="1071.7" y="1235.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.7" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1071.7" y="1219.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.7" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.07%)</title><rect x="1071.7" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.7" y="1214.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1071.7" y="1187.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.7" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.07%)</title><rect x="1072.5" y="1219.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.5" y="1230.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1072.5" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.5" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (1 samples, 0.07%)</title><rect x="1073.4" y="1219.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="1074.3" y="1219.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.3" y="1230.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1074.3" y="1203.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.3" y="1214.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.22%)</title><rect x="1075.1" y="1219.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.1" y="1230.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1075.1" y="1203.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1075.1" y="1187.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1078.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1075.1" y="1171.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1078.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1075.1" y="1155.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1078.1" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (1 samples, 0.07%)</title><rect x="1076.0" y="1203.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.0" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1076.0" y="1187.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.0" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="1076.9" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.9" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (70 samples, 5.16%)</title><rect x="1077.7" y="1251.0" width="61.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.7" y="1262.0">PhaseC..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="1078.6" y="1235.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.6" y="1246.0"></text>
</g>
<g>
<title>MachSpillCopyNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1079.5" y="1235.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.5" y="1246.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="1080.4" y="1235.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.4" y="1246.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.15%)</title><rect x="1081.2" y="1235.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.2" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.22%)</title><rect x="1083.0" y="1235.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1086.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.22%)</title><rect x="1083.0" y="1219.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 0.88%)</title><rect x="1085.6" y="1235.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.6" y="1246.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.07%)</title><rect x="1094.3" y="1219.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.3" y="1230.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.07%)</title><rect x="1095.1" y="1219.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.1" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (17 samples, 1.25%)</title><rect x="1096.0" y="1235.0" width="14.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.0" y="1246.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.15%)</title><rect x="1099.5" y="1219.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.5" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.07%)</title><rect x="1101.2" y="1219.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.2" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (8 samples, 0.59%)</title><rect x="1102.1" y="1219.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.1" y="1230.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.15%)</title><rect x="1104.7" y="1203.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.7" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="1106.5" y="1203.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.5" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.07%)</title><rect x="1109.1" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.1" y="1230.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1109.1" y="1203.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.1" y="1214.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="1109.9" y="1219.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.9" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.07%)</title><rect x="1110.8" y="1235.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.8" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (1 samples, 0.07%)</title><rect x="1111.7" y="1235.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.7" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1111.7" y="1219.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.7" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (4 samples, 0.29%)</title><rect x="1112.6" y="1235.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.6" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.22%)</title><rect x="1113.4" y="1219.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="1116.0" y="1235.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.0" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.66%)</title><rect x="1116.9" y="1235.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.9" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.22%)</title><rect x="1120.4" y="1219.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.4" y="1230.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 0.15%)</title><rect x="1123.0" y="1219.0" width="1.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1126.0" y="1230.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.15%)</title><rect x="1124.7" y="1235.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.7" y="1246.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="1124.7" y="1219.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.7" y="1230.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.07%)</title><rect x="1124.7" y="1203.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.07%)</title><rect x="1124.7" y="1187.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.7" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="1125.6" y="1219.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.6" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.07%)</title><rect x="1125.6" y="1203.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.07%)</title><rect x="1125.6" y="1187.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.15%)</title><rect x="1126.5" y="1235.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.5" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1127.3" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.15%)</title><rect x="1128.2" y="1235.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.2" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1129.1" y="1219.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.15%)</title><rect x="1130.0" y="1235.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.0" y="1246.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.15%)</title><rect x="1130.0" y="1219.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.0" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.44%)</title><rect x="1131.7" y="1235.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.7" y="1246.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.07%)</title><rect x="1133.4" y="1219.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.4" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.22%)</title><rect x="1134.3" y="1219.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.3" y="1230.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.07%)</title><rect x="1136.9" y="1235.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1139.9" y="1246.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="1137.8" y="1235.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.8" y="1246.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 2.95%)</title><rect x="1138.7" y="1267.0" width="34.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.7" y="1278.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="1138.7" y="1251.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.7" y="1262.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1138.7" y="1235.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.7" y="1246.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1138.7" y="1219.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.7" y="1230.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1251.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1139.5" y="1235.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1139.5" y="1219.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.5" y="1230.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1139.5" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.5" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1139.5" y="1187.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.5" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1171.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.5" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.5" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.5" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.5" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.5" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1091.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.5" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.5" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.5" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1043.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.5" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.5" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="1011.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.5" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="995.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.5" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1139.5" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.5" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1139.5" y="963.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.07%)</title><rect x="1140.4" y="1251.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.07%)</title><rect x="1140.4" y="1235.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1140.4" y="1219.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1140.4" y="1203.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1140.4" y="1187.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1140.4" y="1171.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1140.4" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1140.4" y="1139.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1140.4" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.4" y="1134.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1140.4" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (29 samples, 2.14%)</title><rect x="1141.3" y="1251.0" width="25.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.3" y="1262.0">P..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1141.3" y="1235.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.3" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1141.3" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1141.3" y="1203.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&amp;) (1 samples, 0.07%)</title><rect x="1141.3" y="1187.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1141.3" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.3" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.15%)</title><rect x="1142.1" y="1235.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.1" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1142.1" y="1219.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.1" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1142.1" y="1203.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.1" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="1142.1" y="1187.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::skip_loop_predicates(Node*) (1 samples, 0.07%)</title><rect x="1142.1" y="1171.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="1143.0" y="1219.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1143.0" y="1203.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.07%)</title><rect x="1143.0" y="1187.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.0" y="1198.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1143.9" y="1235.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.29%)</title><rect x="1144.7" y="1235.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.7" y="1246.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.22%)</title><rect x="1145.6" y="1219.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.15%)</title><rect x="1148.2" y="1235.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1149.1" y="1219.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1149.1" y="1203.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.1" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.52%)</title><rect x="1150.0" y="1235.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.29%)</title><rect x="1152.6" y="1219.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="1230.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.07%)</title><rect x="1152.6" y="1203.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.22%)</title><rect x="1153.5" y="1203.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1153.5" y="1187.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1154.3" y="1187.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.07%)</title><rect x="1154.3" y="1171.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.07%)</title><rect x="1155.2" y="1187.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.29%)</title><rect x="1156.1" y="1235.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.1" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.29%)</title><rect x="1159.5" y="1235.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::identical_backtoback_ifs(Node*) (1 samples, 0.07%)</title><rect x="1160.4" y="1219.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.15%)</title><rect x="1161.3" y="1219.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1161.3" y="1203.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1162.2" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.22%)</title><rect x="1163.0" y="1235.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.15%)</title><rect x="1163.9" y="1219.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.9" y="1230.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1164.8" y="1203.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.8" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1164.8" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.8" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1164.8" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.8" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1164.8" y="1155.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.8" y="1166.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.8" y="1139.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.8" y="1150.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1164.8" y="1123.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.8" y="1134.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1165.6" y="1235.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.37%)</title><rect x="1166.5" y="1251.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.22%)</title><rect x="1167.4" y="1235.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.4" y="1246.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1168.2" y="1219.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.2" y="1230.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1168.2" y="1203.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.2" y="1214.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.07%)</title><rect x="1169.1" y="1219.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="1230.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1170.0" y="1235.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1170.9" y="1251.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.9" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1170.9" y="1235.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1170.9" y="1219.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.9" y="1230.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1170.9" y="1203.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="1214.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.07%)</title><rect x="1170.9" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.9" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1170.9" y="1171.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.9" y="1182.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1170.9" y="1155.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.9" y="1166.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1170.9" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="1150.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.07%)</title><rect x="1171.7" y="1251.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.7" y="1262.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.07%)</title><rect x="1171.7" y="1235.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.7" y="1246.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1171.7" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.7" y="1230.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.07%)</title><rect x="1172.6" y="1251.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1175.6" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.88%)</title><rect x="1173.5" y="1267.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.88%)</title><rect x="1173.5" y="1251.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.88%)</title><rect x="1173.5" y="1235.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.88%)</title><rect x="1173.5" y="1219.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.88%)</title><rect x="1173.5" y="1203.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.88%)</title><rect x="1173.5" y="1187.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.81%)</title><rect x="1173.5" y="1171.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.81%)</title><rect x="1173.5" y="1155.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.81%)</title><rect x="1173.5" y="1139.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.81%)</title><rect x="1173.5" y="1123.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.81%)</title><rect x="1173.5" y="1107.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.81%)</title><rect x="1173.5" y="1091.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.5" y="1102.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1173.5" y="1075.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="1086.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1173.5" y="1059.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="1070.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.07%)</title><rect x="1173.5" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.5" y="1054.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.07%)</title><rect x="1173.5" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.74%)</title><rect x="1174.3" y="1075.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.3" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.74%)</title><rect x="1174.3" y="1059.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.74%)</title><rect x="1174.3" y="1043.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.74%)</title><rect x="1174.3" y="1027.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.74%)</title><rect x="1174.3" y="1011.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.66%)</title><rect x="1174.3" y="995.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.3" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1174.3" y="979.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1174.3" y="963.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1174.3" y="947.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1174.3" y="931.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1174.3" y="915.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1174.3" y="899.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1174.3" y="883.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1174.3" y="867.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1174.3" y="851.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1174.3" y="835.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1174.3" y="819.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.3" y="830.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.07%)</title><rect x="1174.3" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.3" y="814.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.3" y="787.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.3" y="798.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1174.3" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1174.3" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="766.0"></text>
</g>
<g>
<title>AbstractInterpreter::bytecode_should_reexecute(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1174.3" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1175.2" y="803.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1175.2" y="787.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1175.2" y="771.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1175.2" y="755.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1175.2" y="739.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1175.2" y="723.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1175.2" y="707.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1175.2" y="691.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1175.2" y="675.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.2" y="686.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1175.2" y="659.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="670.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.07%)</title><rect x="1175.2" y="643.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="654.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="627.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="638.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1175.2" y="611.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="622.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="595.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="606.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="1175.2" y="579.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1175.2" y="563.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1175.2" y="547.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1175.2" y="531.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.1" y="659.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.1" y="643.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.1" y="627.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1176.1" y="611.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.1" y="622.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.07%)</title><rect x="1176.1" y="595.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="606.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1176.9" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.07%)</title><rect x="1176.9" y="723.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>Parse::ensure_memory_phi(int, bool) (1 samples, 0.07%)</title><rect x="1176.9" y="707.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1176.9" y="691.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1176.9" y="675.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.8" y="979.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.8" y="963.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1177.8" y="947.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1177.8" y="931.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1177.8" y="915.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1177.8" y="899.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1177.8" y="883.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.8" y="867.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1177.8" y="851.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1177.8" y="835.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1177.8" y="819.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1177.8" y="803.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1177.8" y="787.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.8" y="771.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1177.8" y="755.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1177.8" y="739.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1177.8" y="723.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1177.8" y="707.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1177.8" y="691.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.8" y="675.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.8" y="659.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1177.8" y="643.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1177.8" y="627.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1177.8" y="611.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1177.8" y="595.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1177.8" y="579.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.8" y="563.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.8" y="547.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1177.8" y="531.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1177.8" y="515.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1177.8" y="499.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1177.8" y="483.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1177.8" y="467.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1177.8" y="451.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1177.8" y="435.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1177.8" y="419.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1177.8" y="403.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1177.8" y="387.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1178.7" y="371.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="355.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="339.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="323.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.7" y="307.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.7" y="291.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.7" y="275.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="259.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="243.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1178.7" y="227.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="238.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1178.7" y="211.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="222.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.07%)</title><rect x="1178.7" y="195.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="206.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1178.7" y="179.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="190.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1178.7" y="163.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="355.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="339.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.6" y="323.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.6" y="307.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.6" y="291.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.6" y="275.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.6" y="259.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="243.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.6" y="227.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.6" y="211.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.6" y="195.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.6" y="179.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.6" y="163.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.6" y="147.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.6" y="131.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1179.6" y="115.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="126.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1179.6" y="99.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="110.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.07%)</title><rect x="1179.6" y="83.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="94.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.07%)</title><rect x="1179.6" y="67.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="78.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.07%)</title><rect x="1179.6" y="51.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="62.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1179.6" y="35.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="371.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="355.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.07%)</title><rect x="1180.4" y="339.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="350.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1180.4" y="323.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1180.4" y="307.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.07%)</title><rect x="1180.4" y="291.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1180.4" y="275.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.07%)</title><rect x="1180.4" y="259.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="270.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="243.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="254.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="227.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.07%)</title><rect x="1180.4" y="211.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1180.4" y="195.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="451.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="435.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.3" y="419.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.3" y="403.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.3" y="387.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.3" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.3" y="355.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="339.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.3" y="323.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.3" y="307.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.3" y="291.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.3" y="275.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.3" y="259.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="243.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.3" y="227.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.3" y="211.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.3" y="195.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.3" y="179.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.3" y="163.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="174.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.07%)</title><rect x="1181.3" y="147.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1181.3" y="131.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="142.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1181.3" y="115.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="126.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1181.3" y="99.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="110.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.07%)</title><rect x="1181.3" y="83.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="94.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1182.2" y="995.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="1006.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.2" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="990.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1182.2" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="1171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.0" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.0" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.0" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.0" y="1091.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.0" y="1075.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="1059.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.0" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.0" y="1027.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.0" y="1011.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.0" y="995.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.0" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.0" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.0" y="931.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.0" y="915.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.0" y="899.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.0" y="883.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="867.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.0" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.0" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.0" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="830.0"></text>
</g>
<g>
<title>GraphKit::push_node(BasicType, Node*) (1 samples, 0.07%)</title><rect x="1183.0" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="814.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.07%)</title><rect x="1183.9" y="1267.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="1278.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1183.9" y="1251.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.9" y="1262.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.07%)</title><rect x="1184.8" y="1299.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="1310.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.07%)</title><rect x="1184.8" y="1283.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.07%)</title><rect x="1184.8" y="1267.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="1278.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1184.8" y="1251.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.8" y="1262.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.07%)</title><rect x="1184.8" y="1235.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="1246.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.07%)</title><rect x="1184.8" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="1230.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.07%)</title><rect x="1184.8" y="1203.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.8" y="1214.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.07%)</title><rect x="1184.8" y="1187.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1187.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1184.8" y="1171.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1187.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1184.8" y="1155.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1187.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1184.8" y="1139.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1187.8" y="1150.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1185.6" y="1331.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.6" y="1342.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1185.6" y="1315.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.6" y="1326.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1185.6" y="1299.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.6" y="1310.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1185.6" y="1283.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1188.6" y="1294.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1185.6" y="1267.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.6" y="1278.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1185.6" y="1251.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="1262.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.29%)</title><rect x="1186.5" y="1363.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.5" y="1374.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.15%)</title><rect x="1188.3" y="1347.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.3" y="1358.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="1189.1" y="1331.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="1342.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="1189.1" y="1315.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.1" y="1326.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.07%)</title><rect x="1189.1" y="1299.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1192.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1189.1" y="1283.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1192.1" y="1294.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="1189.1" y="1267.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1192.1" y="1278.0"></text>
</g>
</g>
</svg>
