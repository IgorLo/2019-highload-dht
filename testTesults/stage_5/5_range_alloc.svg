<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (283,476 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=32103] (93,762 samples, 33.08%)</title><rect x="10.0" y="547.0" width="390.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="558.0">[NIO Selector #0 tid=32103]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (93,762 samples, 33.08%)</title><rect x="10.0" y="531.0" width="390.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="542.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (93,762 samples, 33.08%)</title><rect x="10.0" y="515.0" width="390.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="526.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (93,762 samples, 33.08%)</title><rect x="10.0" y="499.0" width="390.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="510.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (93,762 samples, 33.08%)</title><rect x="10.0" y="483.0" width="390.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="494.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (93,762 samples, 33.08%)</title><rect x="10.0" y="467.0" width="390.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="478.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (93,762 samples, 33.08%)</title><rect x="10.0" y="451.0" width="390.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="462.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (93,762 samples, 33.08%)</title><rect x="10.0" y="435.0" width="390.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="446.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/ShardedService.entities (93,762 samples, 33.08%)</title><rect x="10.0" y="419.0" width="390.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="430.0">ru/mail/polis/service/igorlo/ShardedService.entities</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (60,098 samples, 21.20%)</title><rect x="10.0" y="403.0" width="250.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="414.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (60,086 samples, 21.20%)</title><rect x="10.0" y="387.0" width="250.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="398.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (60,086 samples, 21.20%)</title><rect x="10.0" y="371.0" width="250.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="382.0">ru/mail/polis/dao/Iters$UntilIter..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (60,086 samples, 21.20%)</title><rect x="10.0" y="355.0" width="250.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="366.0">com/google/common/collect/Transfo..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (60,086 samples, 21.20%)</title><rect x="10.0" y="339.0" width="250.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="350.0">com/google/common/collect/Abstrac..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (60,086 samples, 21.20%)</title><rect x="10.0" y="323.0" width="250.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="334.0">com/google/common/collect/Abstrac..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (60,086 samples, 21.20%)</title><rect x="10.0" y="307.0" width="250.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="318.0">com/google/common/collect/Iterato..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (60,086 samples, 21.20%)</title><rect x="10.0" y="291.0" width="250.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="302.0">ru/mail/polis/dao/Iters$CollapseE..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (51,462 samples, 18.15%)</title><rect x="10.0" y="275.0" width="214.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="286.0">com/google/common/collect/It..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (29,160 samples, 10.29%)</title><rect x="10.0" y="259.0" width="121.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/Abstr..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (29,160 samples, 10.29%)</title><rect x="10.0" y="243.0" width="121.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (29,160 samples, 10.29%)</title><rect x="10.0" y="227.0" width="121.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="238.0">java/util/Prior..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (29,160 samples, 10.29%)</title><rect x="10.0" y="211.0" width="121.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="222.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (29,160 samples, 10.29%)</title><rect x="10.0" y="195.0" width="121.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="206.0">com/google/comm..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (29,160 samples, 10.29%)</title><rect x="10.0" y="179.0" width="121.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="190.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (29,160 samples, 10.29%)</title><rect x="10.0" y="163.0" width="121.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="174.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (29,160 samples, 10.29%)</title><rect x="10.0" y="147.0" width="121.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="158.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (25,895 samples, 9.13%)</title><rect x="10.0" y="131.0" width="107.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="142.0">java/nio/Dire..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (25,895 samples, 9.13%)</title><rect x="10.0" y="115.0" width="107.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="126.0">java/nio/Dire..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (25,895 samples, 9.13%)</title><rect x="10.0" y="99.0" width="107.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="13.0" y="110.0">java.nio.Dire..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3,265 samples, 1.15%)</title><rect x="117.8" y="131.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.8" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3,265 samples, 1.15%)</title><rect x="117.8" y="115.0" width="13.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="120.8" y="126.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (22,302 samples, 7.87%)</title><rect x="131.4" y="259.0" width="92.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.4" y="270.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (22,302 samples, 7.87%)</title><rect x="131.4" y="243.0" width="92.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.4" y="254.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (22,302 samples, 7.87%)</title><rect x="131.4" y="227.0" width="92.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.4" y="238.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (22,302 samples, 7.87%)</title><rect x="131.4" y="211.0" width="92.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.4" y="222.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (22,302 samples, 7.87%)</title><rect x="131.4" y="195.0" width="92.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.4" y="206.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (22,302 samples, 7.87%)</title><rect x="131.4" y="179.0" width="92.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.4" y="190.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (15,825 samples, 5.58%)</title><rect x="131.4" y="163.0" width="65.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.4" y="174.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (458 samples, 0.16%)</title><rect x="131.4" y="147.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (458 samples, 0.16%)</title><rect x="131.4" y="131.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (458 samples, 0.16%)</title><rect x="131.4" y="115.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.4" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (458 samples, 0.16%)</title><rect x="131.4" y="99.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.4" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (458 samples, 0.16%)</title><rect x="131.4" y="83.0" width="1.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="134.4" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (15,367 samples, 5.42%)</title><rect x="133.3" y="147.0" width="64.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.3" y="158.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (15,367 samples, 5.42%)</title><rect x="133.3" y="131.0" width="64.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.3" y="142.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (15,367 samples, 5.42%)</title><rect x="133.3" y="115.0" width="64.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="136.3" y="126.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,089 samples, 0.74%)</title><rect x="133.3" y="99.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.3" y="110.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,089 samples, 0.74%)</title><rect x="133.3" y="83.0" width="8.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="136.3" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2,280 samples, 0.80%)</title><rect x="142.0" y="99.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="145.0" y="110.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,280 samples, 0.80%)</title><rect x="142.0" y="83.0" width="9.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="145.0" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (8,332 samples, 2.94%)</title><rect x="151.5" y="99.0" width="34.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.5" y="110.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4,220 samples, 1.49%)</title><rect x="151.5" y="83.0" width="17.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.5" y="94.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,220 samples, 1.49%)</title><rect x="151.5" y="67.0" width="17.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="154.5" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4,112 samples, 1.45%)</title><rect x="169.1" y="83.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.1" y="94.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,112 samples, 1.45%)</title><rect x="169.1" y="67.0" width="17.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="172.1" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (2,666 samples, 0.94%)</title><rect x="186.2" y="99.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.2" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (2,666 samples, 0.94%)</title><rect x="186.2" y="83.0" width="11.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="189.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (6,477 samples, 2.28%)</title><rect x="197.3" y="163.0" width="26.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.3" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (6,477 samples, 2.28%)</title><rect x="197.3" y="147.0" width="26.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.3" y="158.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (6,477 samples, 2.28%)</title><rect x="197.3" y="131.0" width="26.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.3" y="142.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6,045 samples, 2.13%)</title><rect x="197.3" y="115.0" width="25.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="200.3" y="126.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6,045 samples, 2.13%)</title><rect x="197.3" y="99.0" width="25.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.3" y="110.0">j..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (6,045 samples, 2.13%)</title><rect x="197.3" y="83.0" width="25.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="200.3" y="94.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (432 samples, 0.15%)</title><rect x="222.4" y="115.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.4" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (432 samples, 0.15%)</title><rect x="222.4" y="99.0" width="1.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="225.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (8,624 samples, 3.04%)</title><rect x="224.2" y="275.0" width="35.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.2" y="286.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (8,624 samples, 3.04%)</title><rect x="224.2" y="259.0" width="35.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.2" y="270.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7,551 samples, 2.66%)</title><rect x="224.2" y="243.0" width="31.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="227.2" y="254.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7,551 samples, 2.66%)</title><rect x="224.2" y="227.0" width="31.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.2" y="238.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (7,551 samples, 2.66%)</title><rect x="224.2" y="211.0" width="31.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="227.2" y="222.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,073 samples, 0.38%)</title><rect x="255.7" y="243.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.7" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,073 samples, 0.38%)</title><rect x="255.7" y="227.0" width="4.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="258.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (33,664 samples, 11.88%)</title><rect x="260.2" y="403.0" width="140.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.2" y="414.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.next (33,664 samples, 11.88%)</title><rect x="260.2" y="387.0" width="140.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.2" y="398.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession$Chunks.next (33,623 samples, 11.86%)</title><rect x="260.4" y="371.0" width="139.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.4" y="382.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (68 samples, 0.02%)</title><rect x="260.8" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="263.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (68 samples, 0.02%)</title><rect x="260.8" y="339.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (68 samples, 0.02%)</title><rect x="260.8" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.8" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (68 samples, 0.02%)</title><rect x="260.8" y="307.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="263.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (33,251 samples, 11.73%)</title><rect x="261.2" y="355.0" width="138.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.2" y="366.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (33,251 samples, 11.73%)</title><rect x="261.2" y="339.0" width="138.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.2" y="350.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (33,241 samples, 11.73%)</title><rect x="261.2" y="323.0" width="138.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.2" y="334.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (33,241 samples, 11.73%)</title><rect x="261.2" y="307.0" width="138.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.2" y="318.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (33,241 samples, 11.73%)</title><rect x="261.2" y="291.0" width="138.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.2" y="302.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (33,241 samples, 11.73%)</title><rect x="261.2" y="275.0" width="138.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.2" y="286.0">com/google/common..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (33,241 samples, 11.73%)</title><rect x="261.2" y="259.0" width="138.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.2" y="270.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (28,644 samples, 10.10%)</title><rect x="261.2" y="243.0" width="119.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.2" y="254.0">com/google/comm..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (16,461 samples, 5.81%)</title><rect x="261.2" y="227.0" width="68.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.2" y="238.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (16,461 samples, 5.81%)</title><rect x="261.2" y="211.0" width="68.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.2" y="222.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (16,461 samples, 5.81%)</title><rect x="261.2" y="195.0" width="68.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.2" y="206.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16,461 samples, 5.81%)</title><rect x="261.2" y="179.0" width="68.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.2" y="190.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16,461 samples, 5.81%)</title><rect x="261.2" y="163.0" width="68.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.2" y="174.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (16,461 samples, 5.81%)</title><rect x="261.2" y="147.0" width="68.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.2" y="158.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (16,461 samples, 5.81%)</title><rect x="261.2" y="131.0" width="68.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.2" y="142.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (16,461 samples, 5.81%)</title><rect x="261.2" y="115.0" width="68.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.2" y="126.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (16,077 samples, 5.67%)</title><rect x="261.2" y="99.0" width="67.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.2" y="110.0">java/ni..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (16,077 samples, 5.67%)</title><rect x="261.2" y="83.0" width="67.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.2" y="94.0">java/ni..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (16,077 samples, 5.67%)</title><rect x="261.2" y="67.0" width="67.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="264.2" y="78.0">java.ni..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (384 samples, 0.14%)</title><rect x="328.2" y="99.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (384 samples, 0.14%)</title><rect x="328.2" y="83.0" width="1.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="331.2" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (12,183 samples, 4.30%)</title><rect x="329.8" y="227.0" width="50.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="332.8" y="238.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (12,183 samples, 4.30%)</title><rect x="329.8" y="211.0" width="50.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.8" y="222.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (12,183 samples, 4.30%)</title><rect x="329.8" y="195.0" width="50.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.8" y="206.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (12,183 samples, 4.30%)</title><rect x="329.8" y="179.0" width="50.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.8" y="190.0">java/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12,183 samples, 4.30%)</title><rect x="329.8" y="163.0" width="50.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.8" y="174.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12,183 samples, 4.30%)</title><rect x="329.8" y="147.0" width="50.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.8" y="158.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (8,546 samples, 3.01%)</title><rect x="329.8" y="131.0" width="35.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.8" y="142.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (114 samples, 0.04%)</title><rect x="329.8" y="115.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (114 samples, 0.04%)</title><rect x="329.8" y="99.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (114 samples, 0.04%)</title><rect x="329.8" y="83.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (114 samples, 0.04%)</title><rect x="329.8" y="67.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.8" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (114 samples, 0.04%)</title><rect x="329.8" y="51.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="332.8" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (8,432 samples, 2.97%)</title><rect x="330.2" y="115.0" width="35.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.2" y="126.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (8,432 samples, 2.97%)</title><rect x="330.2" y="99.0" width="35.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.2" y="110.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (8,432 samples, 2.97%)</title><rect x="330.2" y="83.0" width="35.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.2" y="94.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,184 samples, 0.42%)</title><rect x="330.2" y="67.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="333.2" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,184 samples, 0.42%)</title><rect x="330.2" y="51.0" width="5.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="333.2" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1,135 samples, 0.40%)</title><rect x="335.2" y="67.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="338.2" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,135 samples, 0.40%)</title><rect x="335.2" y="51.0" width="4.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="338.2" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (4,578 samples, 1.61%)</title><rect x="339.9" y="67.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.9" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,296 samples, 0.81%)</title><rect x="339.9" y="51.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="342.9" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,296 samples, 0.81%)</title><rect x="339.9" y="35.0" width="9.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="342.9" y="46.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2,282 samples, 0.81%)</title><rect x="349.4" y="51.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="352.4" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,282 samples, 0.81%)</title><rect x="349.4" y="35.0" width="9.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="352.4" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (1,535 samples, 0.54%)</title><rect x="358.9" y="67.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.9" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (1,535 samples, 0.54%)</title><rect x="358.9" y="51.0" width="6.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="361.9" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (3,637 samples, 1.28%)</title><rect x="365.3" y="131.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (3,637 samples, 1.28%)</title><rect x="365.3" y="115.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (3,637 samples, 1.28%)</title><rect x="365.3" y="99.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.3" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3,516 samples, 1.24%)</title><rect x="365.3" y="83.0" width="14.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.3" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3,516 samples, 1.24%)</title><rect x="365.3" y="67.0" width="14.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.3" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (3,516 samples, 1.24%)</title><rect x="365.3" y="51.0" width="14.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="368.3" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (121 samples, 0.04%)</title><rect x="380.0" y="83.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.0" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (121 samples, 0.04%)</title><rect x="380.0" y="67.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="383.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (4,597 samples, 1.62%)</title><rect x="380.5" y="243.0" width="19.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="383.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (4,597 samples, 1.62%)</title><rect x="380.5" y="227.0" width="19.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="383.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4,342 samples, 1.53%)</title><rect x="380.5" y="211.0" width="18.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.5" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4,342 samples, 1.53%)</title><rect x="380.5" y="195.0" width="18.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.5" y="206.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,342 samples, 1.53%)</title><rect x="380.5" y="179.0" width="18.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="383.5" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (255 samples, 0.09%)</title><rect x="398.5" y="211.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.5" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (255 samples, 0.09%)</title><rect x="398.5" y="195.0" width="1.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="401.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.bufferToArray (162 samples, 0.06%)</title><rect x="399.6" y="355.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (111 samples, 0.04%)</title><rect x="399.9" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.9" y="350.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (111 samples, 0.04%)</title><rect x="399.9" y="323.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="402.9" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=32104] (96,096 samples, 33.90%)</title><rect x="400.3" y="547.0" width="400.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="403.3" y="558.0">[NIO Selector #1 tid=32104]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (96,096 samples, 33.90%)</title><rect x="400.3" y="531.0" width="400.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.3" y="542.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (96,095 samples, 33.90%)</title><rect x="400.3" y="515.0" width="400.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="403.3" y="526.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (96,095 samples, 33.90%)</title><rect x="400.3" y="499.0" width="400.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.3" y="510.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (96,095 samples, 33.90%)</title><rect x="400.3" y="483.0" width="400.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="403.3" y="494.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (96,094 samples, 33.90%)</title><rect x="400.3" y="467.0" width="400.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.3" y="478.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (96,094 samples, 33.90%)</title><rect x="400.3" y="451.0" width="400.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.3" y="462.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (96,094 samples, 33.90%)</title><rect x="400.3" y="435.0" width="400.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.3" y="446.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/ShardedService.entities (96,093 samples, 33.90%)</title><rect x="400.3" y="419.0" width="400.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.3" y="430.0">ru/mail/polis/service/igorlo/ShardedService.entities</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (61,479 samples, 21.69%)</title><rect x="400.3" y="403.0" width="255.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.3" y="414.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (61,453 samples, 21.68%)</title><rect x="400.3" y="387.0" width="255.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="403.3" y="398.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (61,453 samples, 21.68%)</title><rect x="400.3" y="371.0" width="255.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.3" y="382.0">ru/mail/polis/dao/Iters$UntilItera..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (61,453 samples, 21.68%)</title><rect x="400.3" y="355.0" width="255.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.3" y="366.0">com/google/common/collect/Transfor..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (61,453 samples, 21.68%)</title><rect x="400.3" y="339.0" width="255.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.3" y="350.0">com/google/common/collect/Abstract..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (61,453 samples, 21.68%)</title><rect x="400.3" y="323.0" width="255.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.3" y="334.0">com/google/common/collect/Abstract..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (61,453 samples, 21.68%)</title><rect x="400.3" y="307.0" width="255.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.3" y="318.0">com/google/common/collect/Iterator..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (61,453 samples, 21.68%)</title><rect x="400.3" y="291.0" width="255.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.3" y="302.0">ru/mail/polis/dao/Iters$CollapseEq..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (52,684 samples, 18.58%)</title><rect x="400.3" y="275.0" width="219.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.3" y="286.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (30,002 samples, 10.58%)</title><rect x="400.3" y="259.0" width="124.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.3" y="270.0">java/util/Abstr..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (30,002 samples, 10.58%)</title><rect x="400.3" y="243.0" width="124.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.3" y="254.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (30,002 samples, 10.58%)</title><rect x="400.3" y="227.0" width="124.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.3" y="238.0">java/util/Prior..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (30,002 samples, 10.58%)</title><rect x="400.3" y="211.0" width="124.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.3" y="222.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (30,002 samples, 10.58%)</title><rect x="400.3" y="195.0" width="124.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.3" y="206.0">com/google/comm..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (30,002 samples, 10.58%)</title><rect x="400.3" y="179.0" width="124.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.3" y="190.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (30,002 samples, 10.58%)</title><rect x="400.3" y="163.0" width="124.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.3" y="174.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (30,002 samples, 10.58%)</title><rect x="400.3" y="147.0" width="124.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.3" y="158.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (26,640 samples, 9.40%)</title><rect x="400.3" y="131.0" width="110.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.3" y="142.0">java/nio/Dire..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (26,640 samples, 9.40%)</title><rect x="400.3" y="115.0" width="110.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.3" y="126.0">java/nio/Dire..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (26,560 samples, 9.37%)</title><rect x="400.3" y="99.0" width="110.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="403.3" y="110.0">java.nio.Dire..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (80 samples, 0.03%)</title><rect x="510.9" y="99.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="513.9" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3,362 samples, 1.19%)</title><rect x="511.2" y="131.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="514.2" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3,362 samples, 1.19%)</title><rect x="511.2" y="115.0" width="14.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="514.2" y="126.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (22,682 samples, 8.00%)</title><rect x="525.2" y="259.0" width="94.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="528.2" y="270.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (22,682 samples, 8.00%)</title><rect x="525.2" y="243.0" width="94.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.2" y="254.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (22,682 samples, 8.00%)</title><rect x="525.2" y="227.0" width="94.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="528.2" y="238.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (22,682 samples, 8.00%)</title><rect x="525.2" y="211.0" width="94.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="528.2" y="222.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (22,682 samples, 8.00%)</title><rect x="525.2" y="195.0" width="94.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="528.2" y="206.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (22,682 samples, 8.00%)</title><rect x="525.2" y="179.0" width="94.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="528.2" y="190.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (16,060 samples, 5.67%)</title><rect x="525.2" y="163.0" width="66.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="528.2" y="174.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (474 samples, 0.17%)</title><rect x="525.2" y="147.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="528.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (474 samples, 0.17%)</title><rect x="525.2" y="131.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="528.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (474 samples, 0.17%)</title><rect x="525.2" y="115.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (474 samples, 0.17%)</title><rect x="525.2" y="99.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="528.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (474 samples, 0.17%)</title><rect x="525.2" y="83.0" width="2.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="528.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (15,586 samples, 5.50%)</title><rect x="527.2" y="147.0" width="64.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.2" y="158.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (15,586 samples, 5.50%)</title><rect x="527.2" y="131.0" width="64.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="530.2" y="142.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (15,586 samples, 5.50%)</title><rect x="527.2" y="115.0" width="64.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="530.2" y="126.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,225 samples, 0.78%)</title><rect x="527.2" y="99.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.2" y="110.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,210 samples, 0.78%)</title><rect x="527.2" y="83.0" width="9.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="530.2" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2,239 samples, 0.79%)</title><rect x="536.5" y="99.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.5" y="110.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,238 samples, 0.79%)</title><rect x="536.5" y="83.0" width="9.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="539.5" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (8,435 samples, 2.98%)</title><rect x="545.8" y="99.0" width="35.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="548.8" y="110.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4,216 samples, 1.49%)</title><rect x="545.8" y="83.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.8" y="94.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,212 samples, 1.49%)</title><rect x="545.8" y="67.0" width="17.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="548.8" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4,219 samples, 1.49%)</title><rect x="563.3" y="83.0" width="17.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="566.3" y="94.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,214 samples, 1.49%)</title><rect x="563.3" y="67.0" width="17.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="566.3" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (2,687 samples, 0.95%)</title><rect x="580.9" y="99.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="583.9" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (2,687 samples, 0.95%)</title><rect x="580.9" y="83.0" width="11.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="583.9" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (6,622 samples, 2.34%)</title><rect x="592.1" y="163.0" width="27.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="595.1" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (6,622 samples, 2.34%)</title><rect x="592.1" y="147.0" width="27.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="595.1" y="158.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (6,622 samples, 2.34%)</title><rect x="592.1" y="131.0" width="27.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="595.1" y="142.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6,185 samples, 2.18%)</title><rect x="592.1" y="115.0" width="25.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="595.1" y="126.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6,185 samples, 2.18%)</title><rect x="592.1" y="99.0" width="25.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="595.1" y="110.0">j..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (6,169 samples, 2.18%)</title><rect x="592.1" y="83.0" width="25.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="595.1" y="94.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (437 samples, 0.15%)</title><rect x="617.8" y="115.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="620.8" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (437 samples, 0.15%)</title><rect x="617.8" y="99.0" width="1.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="620.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (8,769 samples, 3.09%)</title><rect x="619.6" y="275.0" width="36.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="622.6" y="286.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (8,769 samples, 3.09%)</title><rect x="619.6" y="259.0" width="36.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="622.6" y="270.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7,758 samples, 2.74%)</title><rect x="619.6" y="243.0" width="32.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.6" y="254.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7,758 samples, 2.74%)</title><rect x="619.6" y="227.0" width="32.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="622.6" y="238.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (7,672 samples, 2.71%)</title><rect x="619.6" y="211.0" width="32.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="622.6" y="222.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (86 samples, 0.03%)</title><rect x="651.6" y="211.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="654.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,011 samples, 0.36%)</title><rect x="651.9" y="243.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.9" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,011 samples, 0.36%)</title><rect x="651.9" y="227.0" width="4.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="654.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (34,614 samples, 12.21%)</title><rect x="656.2" y="403.0" width="144.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.2" y="414.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.next (34,614 samples, 12.21%)</title><rect x="656.2" y="387.0" width="144.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.2" y="398.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession$Chunks.next (34,571 samples, 12.20%)</title><rect x="656.4" y="371.0" width="143.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.4" y="382.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (71 samples, 0.03%)</title><rect x="657.0" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (71 samples, 0.03%)</title><rect x="657.0" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (71 samples, 0.03%)</title><rect x="657.0" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.0" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (71 samples, 0.03%)</title><rect x="657.0" y="307.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="660.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (75 samples, 0.03%)</title><rect x="657.3" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="660.3" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (75 samples, 0.03%)</title><rect x="657.3" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="660.3" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (75 samples, 0.03%)</title><rect x="657.3" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.3" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (75 samples, 0.03%)</title><rect x="657.3" y="307.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="660.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (34,092 samples, 12.03%)</title><rect x="657.6" y="355.0" width="141.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.6" y="366.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (34,092 samples, 12.03%)</title><rect x="657.6" y="339.0" width="141.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.6" y="350.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (34,072 samples, 12.02%)</title><rect x="657.6" y="323.0" width="141.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.6" y="334.0">com/google/common/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (34,072 samples, 12.02%)</title><rect x="657.6" y="307.0" width="141.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="660.6" y="318.0">com/google/common/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (34,072 samples, 12.02%)</title><rect x="657.6" y="291.0" width="141.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="660.6" y="302.0">com/google/common/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (34,072 samples, 12.02%)</title><rect x="657.6" y="275.0" width="141.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.6" y="286.0">com/google/common/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (34,072 samples, 12.02%)</title><rect x="657.6" y="259.0" width="141.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="660.6" y="270.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (29,319 samples, 10.34%)</title><rect x="657.6" y="243.0" width="122.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="660.6" y="254.0">com/google/comm..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (16,674 samples, 5.88%)</title><rect x="657.6" y="227.0" width="69.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.6" y="238.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (16,674 samples, 5.88%)</title><rect x="657.6" y="211.0" width="69.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.6" y="222.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (16,674 samples, 5.88%)</title><rect x="657.6" y="195.0" width="69.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.6" y="206.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16,674 samples, 5.88%)</title><rect x="657.6" y="179.0" width="69.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.6" y="190.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16,674 samples, 5.88%)</title><rect x="657.6" y="163.0" width="69.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.6" y="174.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (16,674 samples, 5.88%)</title><rect x="657.6" y="147.0" width="69.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="660.6" y="158.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (16,674 samples, 5.88%)</title><rect x="657.6" y="131.0" width="69.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="660.6" y="142.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (16,674 samples, 5.88%)</title><rect x="657.6" y="115.0" width="69.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="660.6" y="126.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (16,294 samples, 5.75%)</title><rect x="657.6" y="99.0" width="67.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.6" y="110.0">java/ni..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (16,294 samples, 5.75%)</title><rect x="657.6" y="83.0" width="67.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.6" y="94.0">java/ni..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (16,294 samples, 5.75%)</title><rect x="657.6" y="67.0" width="67.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="660.6" y="78.0">java.ni..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (380 samples, 0.13%)</title><rect x="725.4" y="99.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="728.4" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (380 samples, 0.13%)</title><rect x="725.4" y="83.0" width="1.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="728.4" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (12,645 samples, 4.46%)</title><rect x="727.0" y="227.0" width="52.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.0" y="238.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (12,645 samples, 4.46%)</title><rect x="727.0" y="211.0" width="52.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="730.0" y="222.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (12,645 samples, 4.46%)</title><rect x="727.0" y="195.0" width="52.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.0" y="206.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (12,645 samples, 4.46%)</title><rect x="727.0" y="179.0" width="52.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.0" y="190.0">java/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12,645 samples, 4.46%)</title><rect x="727.0" y="163.0" width="52.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.0" y="174.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12,645 samples, 4.46%)</title><rect x="727.0" y="147.0" width="52.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="730.0" y="158.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (8,878 samples, 3.13%)</title><rect x="727.0" y="131.0" width="37.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.0" y="142.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (122 samples, 0.04%)</title><rect x="727.0" y="115.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="730.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (122 samples, 0.04%)</title><rect x="727.0" y="99.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="730.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (122 samples, 0.04%)</title><rect x="727.0" y="83.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="730.0" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (122 samples, 0.04%)</title><rect x="727.0" y="67.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="730.0" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (122 samples, 0.04%)</title><rect x="727.0" y="51.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="730.0" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (8,756 samples, 3.09%)</title><rect x="727.5" y="115.0" width="36.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="730.5" y="126.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (8,756 samples, 3.09%)</title><rect x="727.5" y="99.0" width="36.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="730.5" y="110.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (8,756 samples, 3.09%)</title><rect x="727.5" y="83.0" width="36.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="730.5" y="94.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,179 samples, 0.42%)</title><rect x="727.5" y="67.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.5" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,179 samples, 0.42%)</title><rect x="727.5" y="51.0" width="4.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="730.5" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1,221 samples, 0.43%)</title><rect x="732.4" y="67.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="735.4" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,221 samples, 0.43%)</title><rect x="732.4" y="51.0" width="5.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="735.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (4,753 samples, 1.68%)</title><rect x="737.5" y="67.0" width="19.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="740.5" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,410 samples, 0.85%)</title><rect x="737.5" y="51.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="740.5" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,410 samples, 0.85%)</title><rect x="737.5" y="35.0" width="10.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="740.5" y="46.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2,343 samples, 0.83%)</title><rect x="747.5" y="51.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="750.5" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,343 samples, 0.83%)</title><rect x="747.5" y="35.0" width="9.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="750.5" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (1,603 samples, 0.57%)</title><rect x="757.3" y="67.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.3" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (1,603 samples, 0.57%)</title><rect x="757.3" y="51.0" width="6.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="760.3" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (3,767 samples, 1.33%)</title><rect x="764.0" y="131.0" width="15.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="767.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (3,767 samples, 1.33%)</title><rect x="764.0" y="115.0" width="15.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="767.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (3,767 samples, 1.33%)</title><rect x="764.0" y="99.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.0" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3,655 samples, 1.29%)</title><rect x="764.0" y="83.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="767.0" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3,655 samples, 1.29%)</title><rect x="764.0" y="67.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.0" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (3,655 samples, 1.29%)</title><rect x="764.0" y="51.0" width="15.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="767.0" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (112 samples, 0.04%)</title><rect x="779.2" y="83.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (112 samples, 0.04%)</title><rect x="779.2" y="67.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="782.2" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (4,753 samples, 1.68%)</title><rect x="779.7" y="243.0" width="19.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (4,753 samples, 1.68%)</title><rect x="779.7" y="227.0" width="19.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="782.7" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4,513 samples, 1.59%)</title><rect x="779.7" y="211.0" width="18.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.7" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4,513 samples, 1.59%)</title><rect x="779.7" y="195.0" width="18.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="782.7" y="206.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,513 samples, 1.59%)</title><rect x="779.7" y="179.0" width="18.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="782.7" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (240 samples, 0.08%)</title><rect x="798.4" y="211.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="801.4" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (240 samples, 0.08%)</title><rect x="798.4" y="195.0" width="1.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="801.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.bufferToArray (194 samples, 0.07%)</title><rect x="799.5" y="355.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="802.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (134 samples, 0.05%)</title><rect x="799.8" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="802.8" y="350.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (134 samples, 0.05%)</title><rect x="799.8" y="323.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="802.8" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=32105] (93,611 samples, 33.02%)</title><rect x="800.3" y="547.0" width="389.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="803.3" y="558.0">[NIO Selector #2 tid=32105]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (93,611 samples, 33.02%)</title><rect x="800.3" y="531.0" width="389.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="803.3" y="542.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (93,611 samples, 33.02%)</title><rect x="800.3" y="515.0" width="389.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="803.3" y="526.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (93,611 samples, 33.02%)</title><rect x="800.3" y="499.0" width="389.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.3" y="510.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (93,611 samples, 33.02%)</title><rect x="800.3" y="483.0" width="389.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.3" y="494.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (93,607 samples, 33.02%)</title><rect x="800.3" y="467.0" width="389.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="803.3" y="478.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (93,607 samples, 33.02%)</title><rect x="800.3" y="451.0" width="389.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="803.3" y="462.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (93,607 samples, 33.02%)</title><rect x="800.3" y="435.0" width="389.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.3" y="446.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/ShardedService.entities (93,607 samples, 33.02%)</title><rect x="800.3" y="419.0" width="389.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="803.3" y="430.0">ru/mail/polis/service/igorlo/ShardedService.entities</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (60,282 samples, 21.27%)</title><rect x="800.3" y="403.0" width="251.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.3" y="414.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (60,272 samples, 21.26%)</title><rect x="800.3" y="387.0" width="250.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="803.3" y="398.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (60,272 samples, 21.26%)</title><rect x="800.3" y="371.0" width="250.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="803.3" y="382.0">ru/mail/polis/dao/Iters$UntilIter..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (60,272 samples, 21.26%)</title><rect x="800.3" y="355.0" width="250.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="803.3" y="366.0">com/google/common/collect/Transfo..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (60,272 samples, 21.26%)</title><rect x="800.3" y="339.0" width="250.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="803.3" y="350.0">com/google/common/collect/Abstrac..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (60,272 samples, 21.26%)</title><rect x="800.3" y="323.0" width="250.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.3" y="334.0">com/google/common/collect/Abstrac..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (60,272 samples, 21.26%)</title><rect x="800.3" y="307.0" width="250.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.3" y="318.0">com/google/common/collect/Iterato..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (60,272 samples, 21.26%)</title><rect x="800.3" y="291.0" width="250.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.3" y="302.0">ru/mail/polis/dao/Iters$CollapseE..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (51,650 samples, 18.22%)</title><rect x="800.3" y="275.0" width="215.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="803.3" y="286.0">com/google/common/collect/It..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (29,418 samples, 10.38%)</title><rect x="800.3" y="259.0" width="122.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="803.3" y="270.0">java/util/Abstr..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (29,418 samples, 10.38%)</title><rect x="800.3" y="243.0" width="122.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.3" y="254.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (29,418 samples, 10.38%)</title><rect x="800.3" y="227.0" width="122.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="803.3" y="238.0">java/util/Prior..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (29,418 samples, 10.38%)</title><rect x="800.3" y="211.0" width="122.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.3" y="222.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (29,418 samples, 10.38%)</title><rect x="800.3" y="195.0" width="122.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="803.3" y="206.0">com/google/comm..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (29,418 samples, 10.38%)</title><rect x="800.3" y="179.0" width="122.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="803.3" y="190.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (29,418 samples, 10.38%)</title><rect x="800.3" y="163.0" width="122.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="803.3" y="174.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (29,418 samples, 10.38%)</title><rect x="800.3" y="147.0" width="122.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="803.3" y="158.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (26,136 samples, 9.22%)</title><rect x="800.3" y="131.0" width="108.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="803.3" y="142.0">java/nio/Dire..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (26,136 samples, 9.22%)</title><rect x="800.3" y="115.0" width="108.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.3" y="126.0">java/nio/Dire..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (26,136 samples, 9.22%)</title><rect x="800.3" y="99.0" width="108.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="803.3" y="110.0">java.nio.Dire..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3,282 samples, 1.16%)</title><rect x="909.1" y="131.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="912.1" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3,282 samples, 1.16%)</title><rect x="909.1" y="115.0" width="13.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="912.1" y="126.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (22,232 samples, 7.84%)</title><rect x="922.8" y="259.0" width="92.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="925.8" y="270.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (22,232 samples, 7.84%)</title><rect x="922.8" y="243.0" width="92.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="925.8" y="254.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (22,232 samples, 7.84%)</title><rect x="922.8" y="227.0" width="92.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="925.8" y="238.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (22,232 samples, 7.84%)</title><rect x="922.8" y="211.0" width="92.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="925.8" y="222.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (22,232 samples, 7.84%)</title><rect x="922.8" y="195.0" width="92.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="925.8" y="206.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (22,232 samples, 7.84%)</title><rect x="922.8" y="179.0" width="92.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="925.8" y="190.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (15,844 samples, 5.59%)</title><rect x="922.8" y="163.0" width="65.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="925.8" y="174.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (430 samples, 0.15%)</title><rect x="922.8" y="147.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="925.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (430 samples, 0.15%)</title><rect x="922.8" y="131.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="925.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (430 samples, 0.15%)</title><rect x="922.8" y="115.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="925.8" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (430 samples, 0.15%)</title><rect x="922.8" y="99.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="925.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (430 samples, 0.15%)</title><rect x="922.8" y="83.0" width="1.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="925.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (15,414 samples, 5.44%)</title><rect x="924.6" y="147.0" width="64.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="927.6" y="158.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (15,414 samples, 5.44%)</title><rect x="924.6" y="131.0" width="64.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="927.6" y="142.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (15,414 samples, 5.44%)</title><rect x="924.6" y="115.0" width="64.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="927.6" y="126.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,145 samples, 0.76%)</title><rect x="924.6" y="99.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.6" y="110.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,145 samples, 0.76%)</title><rect x="924.6" y="83.0" width="8.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="927.6" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2,195 samples, 0.77%)</title><rect x="933.5" y="99.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="936.5" y="110.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,195 samples, 0.77%)</title><rect x="933.5" y="83.0" width="9.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="936.5" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (8,333 samples, 2.94%)</title><rect x="942.6" y="99.0" width="34.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="945.6" y="110.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4,160 samples, 1.47%)</title><rect x="942.6" y="83.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="945.6" y="94.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,160 samples, 1.47%)</title><rect x="942.6" y="67.0" width="17.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="945.6" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4,173 samples, 1.47%)</title><rect x="960.0" y="83.0" width="17.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="963.0" y="94.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,173 samples, 1.47%)</title><rect x="960.0" y="67.0" width="17.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="963.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (2,741 samples, 0.97%)</title><rect x="977.3" y="99.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="980.3" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (2,741 samples, 0.97%)</title><rect x="977.3" y="83.0" width="11.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="980.3" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (6,388 samples, 2.25%)</title><rect x="988.7" y="163.0" width="26.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="991.7" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (6,388 samples, 2.25%)</title><rect x="988.7" y="147.0" width="26.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="991.7" y="158.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (6,388 samples, 2.25%)</title><rect x="988.7" y="131.0" width="26.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="991.7" y="142.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5,936 samples, 2.09%)</title><rect x="988.7" y="115.0" width="24.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="991.7" y="126.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5,936 samples, 2.09%)</title><rect x="988.7" y="99.0" width="24.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="991.7" y="110.0">j..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (5,936 samples, 2.09%)</title><rect x="988.7" y="83.0" width="24.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="991.7" y="94.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (452 samples, 0.16%)</title><rect x="1013.5" y="115.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1016.5" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (452 samples, 0.16%)</title><rect x="1013.5" y="99.0" width="1.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1016.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (8,622 samples, 3.04%)</title><rect x="1015.3" y="275.0" width="35.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1018.3" y="286.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (8,622 samples, 3.04%)</title><rect x="1015.3" y="259.0" width="35.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1018.3" y="270.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7,654 samples, 2.70%)</title><rect x="1015.3" y="243.0" width="31.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1018.3" y="254.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7,654 samples, 2.70%)</title><rect x="1015.3" y="227.0" width="31.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1018.3" y="238.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (7,654 samples, 2.70%)</title><rect x="1015.3" y="211.0" width="31.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1018.3" y="222.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (968 samples, 0.34%)</title><rect x="1047.2" y="243.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1050.2" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (968 samples, 0.34%)</title><rect x="1047.2" y="227.0" width="4.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1050.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (33,325 samples, 11.76%)</title><rect x="1051.3" y="403.0" width="138.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1054.3" y="414.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.next (33,325 samples, 11.76%)</title><rect x="1051.3" y="387.0" width="138.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1054.3" y="398.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession$Chunks.next (33,281 samples, 11.74%)</title><rect x="1051.4" y="371.0" width="138.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1054.4" y="382.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (74 samples, 0.03%)</title><rect x="1051.8" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1054.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (74 samples, 0.03%)</title><rect x="1051.8" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1054.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (74 samples, 0.03%)</title><rect x="1051.8" y="323.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1054.8" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (74 samples, 0.03%)</title><rect x="1051.8" y="307.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1054.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (80 samples, 0.03%)</title><rect x="1052.1" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1055.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (80 samples, 0.03%)</title><rect x="1052.1" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1055.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (80 samples, 0.03%)</title><rect x="1052.1" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1055.1" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (80 samples, 0.03%)</title><rect x="1052.1" y="307.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1055.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (32,877 samples, 11.60%)</title><rect x="1052.4" y="355.0" width="136.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1055.4" y="366.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (32,877 samples, 11.60%)</title><rect x="1052.4" y="339.0" width="136.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1055.4" y="350.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (32,861 samples, 11.59%)</title><rect x="1052.4" y="323.0" width="136.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1055.4" y="334.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (32,861 samples, 11.59%)</title><rect x="1052.4" y="307.0" width="136.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1055.4" y="318.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (32,861 samples, 11.59%)</title><rect x="1052.4" y="291.0" width="136.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1055.4" y="302.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (32,861 samples, 11.59%)</title><rect x="1052.4" y="275.0" width="136.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1055.4" y="286.0">com/google/common..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (32,861 samples, 11.59%)</title><rect x="1052.4" y="259.0" width="136.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1055.4" y="270.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (28,211 samples, 9.95%)</title><rect x="1052.4" y="243.0" width="117.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1055.4" y="254.0">com/google/com..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (16,061 samples, 5.67%)</title><rect x="1052.4" y="227.0" width="66.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.4" y="238.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (16,061 samples, 5.67%)</title><rect x="1052.4" y="211.0" width="66.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1055.4" y="222.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (16,061 samples, 5.67%)</title><rect x="1052.4" y="195.0" width="66.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1055.4" y="206.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16,061 samples, 5.67%)</title><rect x="1052.4" y="179.0" width="66.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1055.4" y="190.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16,061 samples, 5.67%)</title><rect x="1052.4" y="163.0" width="66.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1055.4" y="174.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (16,061 samples, 5.67%)</title><rect x="1052.4" y="147.0" width="66.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1055.4" y="158.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (16,061 samples, 5.67%)</title><rect x="1052.4" y="131.0" width="66.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1055.4" y="142.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (16,061 samples, 5.67%)</title><rect x="1052.4" y="115.0" width="66.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1055.4" y="126.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (15,632 samples, 5.51%)</title><rect x="1052.4" y="99.0" width="65.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1055.4" y="110.0">java/ni..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (15,632 samples, 5.51%)</title><rect x="1052.4" y="83.0" width="65.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1055.4" y="94.0">java/ni..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (15,632 samples, 5.51%)</title><rect x="1052.4" y="67.0" width="65.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1055.4" y="78.0">java.ni..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (429 samples, 0.15%)</title><rect x="1117.5" y="99.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.5" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (429 samples, 0.15%)</title><rect x="1117.5" y="83.0" width="1.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1120.5" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (12,150 samples, 4.29%)</title><rect x="1119.3" y="227.0" width="50.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1122.3" y="238.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (12,150 samples, 4.29%)</title><rect x="1119.3" y="211.0" width="50.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1122.3" y="222.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (12,150 samples, 4.29%)</title><rect x="1119.3" y="195.0" width="50.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1122.3" y="206.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (12,150 samples, 4.29%)</title><rect x="1119.3" y="179.0" width="50.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1122.3" y="190.0">java/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12,150 samples, 4.29%)</title><rect x="1119.3" y="163.0" width="50.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1122.3" y="174.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12,150 samples, 4.29%)</title><rect x="1119.3" y="147.0" width="50.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1122.3" y="158.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (8,524 samples, 3.01%)</title><rect x="1119.3" y="131.0" width="35.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1122.3" y="142.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (122 samples, 0.04%)</title><rect x="1119.3" y="115.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1122.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (122 samples, 0.04%)</title><rect x="1119.3" y="99.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1122.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (122 samples, 0.04%)</title><rect x="1119.3" y="83.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1122.3" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (122 samples, 0.04%)</title><rect x="1119.3" y="67.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1122.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (122 samples, 0.04%)</title><rect x="1119.3" y="51.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1122.3" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (8,402 samples, 2.96%)</title><rect x="1119.8" y="115.0" width="35.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1122.8" y="126.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (8,402 samples, 2.96%)</title><rect x="1119.8" y="99.0" width="35.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1122.8" y="110.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (8,402 samples, 2.96%)</title><rect x="1119.8" y="83.0" width="35.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1122.8" y="94.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,137 samples, 0.40%)</title><rect x="1119.8" y="67.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1122.8" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,137 samples, 0.40%)</title><rect x="1119.8" y="51.0" width="4.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1122.8" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1,190 samples, 0.42%)</title><rect x="1124.5" y="67.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1127.5" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,190 samples, 0.42%)</title><rect x="1124.5" y="51.0" width="5.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1127.5" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (4,504 samples, 1.59%)</title><rect x="1129.5" y="67.0" width="18.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1132.5" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,196 samples, 0.77%)</title><rect x="1129.5" y="51.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1132.5" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,196 samples, 0.77%)</title><rect x="1129.5" y="35.0" width="9.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1132.5" y="46.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2,308 samples, 0.81%)</title><rect x="1138.6" y="51.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1141.6" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,308 samples, 0.81%)</title><rect x="1138.6" y="35.0" width="9.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1141.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (1,571 samples, 0.55%)</title><rect x="1148.2" y="67.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1151.2" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (1,571 samples, 0.55%)</title><rect x="1148.2" y="51.0" width="6.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1151.2" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (3,626 samples, 1.28%)</title><rect x="1154.8" y="131.0" width="15.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1157.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (3,626 samples, 1.28%)</title><rect x="1154.8" y="115.0" width="15.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1157.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (3,626 samples, 1.28%)</title><rect x="1154.8" y="99.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1157.8" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3,520 samples, 1.24%)</title><rect x="1154.8" y="83.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1157.8" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3,520 samples, 1.24%)</title><rect x="1154.8" y="67.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1157.8" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (3,520 samples, 1.24%)</title><rect x="1154.8" y="51.0" width="14.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1157.8" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (106 samples, 0.04%)</title><rect x="1169.4" y="83.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1172.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (106 samples, 0.04%)</title><rect x="1169.4" y="67.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1172.4" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (4,650 samples, 1.64%)</title><rect x="1169.9" y="243.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1172.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (4,650 samples, 1.64%)</title><rect x="1169.9" y="227.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1172.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4,383 samples, 1.55%)</title><rect x="1169.9" y="211.0" width="18.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1172.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4,383 samples, 1.55%)</title><rect x="1169.9" y="195.0" width="18.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1172.9" y="206.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,383 samples, 1.55%)</title><rect x="1169.9" y="179.0" width="18.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1172.9" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (267 samples, 0.09%)</title><rect x="1188.1" y="211.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1191.1" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (267 samples, 0.09%)</title><rect x="1188.1" y="195.0" width="1.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1191.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.bufferToArray (169 samples, 0.06%)</title><rect x="1189.3" y="355.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1192.3" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (114 samples, 0.04%)</title><rect x="1189.5" y="339.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1192.5" y="350.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (114 samples, 0.04%)</title><rect x="1189.5" y="323.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1192.5" y="334.0"></text>
</g>
</g>
</svg>
