<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (16,072 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=32103] (3,892 samples, 24.22%)</title><rect x="10.0" y="659.0" width="285.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="670.0">[NIO Selector #0 tid=32103]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (42 samples, 0.26%)</title><rect x="10.0" y="643.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (41 samples, 0.26%)</title><rect x="10.1" y="627.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.1" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (41 samples, 0.26%)</title><rect x="10.1" y="611.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.1" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (40 samples, 0.25%)</title><rect x="10.1" y="595.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.1" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (34 samples, 0.21%)</title><rect x="10.5" y="579.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.5" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (24 samples, 0.15%)</title><rect x="10.6" y="563.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.6" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (19 samples, 0.12%)</title><rect x="10.9" y="547.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.9" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (10 samples, 0.06%)</title><rect x="10.9" y="531.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (8 samples, 0.05%)</title><rect x="10.9" y="515.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.9" y="526.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (5 samples, 0.03%)</title><rect x="11.8" y="531.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.8" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (5 samples, 0.03%)</title><rect x="11.8" y="515.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.8" y="526.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (5 samples, 0.03%)</title><rect x="11.8" y="499.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.8" y="510.0"></text>
</g>
<g>
<title>[unknown_Java] (602 samples, 3.75%)</title><rect x="13.3" y="643.0" width="44.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="16.3" y="654.0">[unk..</text>
</g>
<g>
<title>[unknown] (8 samples, 0.05%)</title><rect x="56.9" y="627.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="59.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="57.0" y="611.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="60.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="57.0" y="595.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="60.0" y="606.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,243 samples, 20.18%)</title><rect x="57.5" y="643.0" width="238.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.5" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (3,243 samples, 20.18%)</title><rect x="57.5" y="627.0" width="238.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.5" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,242 samples, 20.17%)</title><rect x="57.6" y="611.0" width="238.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.6" y="622.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,242 samples, 20.17%)</title><rect x="57.6" y="595.0" width="238.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.6" y="606.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,241 samples, 20.17%)</title><rect x="57.6" y="579.0" width="237.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.6" y="590.0">one/nio/http/HttpSession.handle..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,241 samples, 20.17%)</title><rect x="57.6" y="563.0" width="237.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.6" y="574.0">one/nio/http/HttpServer.handleR..</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (3,241 samples, 20.17%)</title><rect x="57.6" y="547.0" width="237.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.6" y="558.0">RequestHandler2_entities.handle..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/ShardedService.entities (3,241 samples, 20.17%)</title><rect x="57.6" y="531.0" width="237.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.6" y="542.0">ru/mail/polis/service/igorlo/Sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (3,236 samples, 20.13%)</title><rect x="57.6" y="515.0" width="237.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.6" y="526.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (3,234 samples, 20.12%)</title><rect x="57.6" y="499.0" width="237.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.6" y="510.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (3,234 samples, 20.12%)</title><rect x="57.6" y="483.0" width="237.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.6" y="494.0">ru/mail/polis/dao/Iters$UntilIt..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3,234 samples, 20.12%)</title><rect x="57.6" y="467.0" width="237.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.6" y="478.0">com/google/common/collect/Trans..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3,234 samples, 20.12%)</title><rect x="57.6" y="451.0" width="237.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.6" y="462.0">com/google/common/collect/Abstr..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3,234 samples, 20.12%)</title><rect x="57.6" y="435.0" width="237.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.6" y="446.0">com/google/common/collect/Abstr..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3,234 samples, 20.12%)</title><rect x="57.6" y="419.0" width="237.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.6" y="430.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,221 samples, 20.04%)</title><rect x="58.5" y="403.0" width="236.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.5" y="414.0">ru/mail/polis/dao/Iters$Collaps..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,993 samples, 18.62%)</title><rect x="60.4" y="387.0" width="219.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.4" y="398.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (29 samples, 0.18%)</title><rect x="62.9" y="371.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.9" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (23 samples, 0.14%)</title><rect x="65.1" y="371.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.1" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,593 samples, 9.91%)</title><rect x="66.8" y="371.0" width="116.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.8" y="382.0">java/util/Abst..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,590 samples, 9.89%)</title><rect x="67.0" y="355.0" width="116.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.0" y="366.0">java/util/Prio..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,530 samples, 9.52%)</title><rect x="71.4" y="339.0" width="112.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.4" y="350.0">java/util/Prio..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,458 samples, 9.07%)</title><rect x="75.7" y="323.0" width="107.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.7" y="334.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,436 samples, 8.93%)</title><rect x="77.3" y="307.0" width="105.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.3" y="318.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (26 samples, 0.16%)</title><rect x="83.6" y="291.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (1,324 samples, 8.24%)</title><rect x="85.5" y="291.0" width="97.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.5" y="302.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,317 samples, 8.19%)</title><rect x="86.1" y="275.0" width="96.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.1" y="286.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (951 samples, 5.92%)</title><rect x="86.7" y="259.0" width="69.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.7" y="270.0">java/ni..</text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.05%)</title><rect x="89.1" y="243.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.1" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (14 samples, 0.09%)</title><rect x="89.7" y="243.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.7" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (863 samples, 5.37%)</title><rect x="90.7" y="243.0" width="63.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.7" y="254.0">java/ni..</text>
</g>
<g>
<title>[unknown] (7 samples, 0.04%)</title><rect x="134.5" y="227.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="137.5" y="238.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.04%)</title><rect x="134.5" y="211.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="137.5" y="222.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.04%)</title><rect x="134.5" y="195.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="137.5" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (181 samples, 1.13%)</title><rect x="135.1" y="227.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.1" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (113 samples, 0.70%)</title><rect x="135.1" y="211.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="138.1" y="222.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="143.1" y="195.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="146.1" y="206.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="143.1" y="179.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="146.1" y="190.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="143.1" y="163.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="146.1" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (68 samples, 0.42%)</title><rect x="143.4" y="211.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.4" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (48 samples, 0.30%)</title><rect x="148.4" y="227.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.4" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.04%)</title><rect x="151.5" y="211.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.5" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (29 samples, 0.18%)</title><rect x="151.9" y="227.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (23 samples, 0.14%)</title><rect x="154.0" y="243.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.0" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (11 samples, 0.07%)</title><rect x="154.0" y="227.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.0" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (12 samples, 0.07%)</title><rect x="154.9" y="227.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="157.9" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.06%)</title><rect x="155.7" y="243.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (358 samples, 2.23%)</title><rect x="156.5" y="259.0" width="26.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.5" y="270.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (252 samples, 1.57%)</title><rect x="160.7" y="243.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="163.7" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (252 samples, 1.57%)</title><rect x="160.7" y="227.0" width="18.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="163.7" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (236 samples, 1.47%)</title><rect x="161.8" y="211.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (229 samples, 1.42%)</title><rect x="162.3" y="195.0" width="16.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="165.3" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (221 samples, 1.38%)</title><rect x="162.9" y="179.0" width="16.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="165.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (219 samples, 1.36%)</title><rect x="163.1" y="163.0" width="16.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (208 samples, 1.29%)</title><rect x="163.9" y="147.0" width="15.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.9" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (165 samples, 1.03%)</title><rect x="167.0" y="131.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.0" y="142.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.03%)</title><rect x="167.9" y="115.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.9" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (32 samples, 0.20%)</title><rect x="168.3" y="115.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.3" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (29 samples, 0.18%)</title><rect x="168.5" y="99.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.5" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (28 samples, 0.17%)</title><rect x="168.6" y="83.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.6" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (28 samples, 0.17%)</title><rect x="168.6" y="67.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.6" y="78.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (116 samples, 0.72%)</title><rect x="170.6" y="115.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.6" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (20 samples, 0.12%)</title><rect x="177.7" y="99.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.7" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (20 samples, 0.12%)</title><rect x="177.7" y="83.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.7" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (20 samples, 0.12%)</title><rect x="177.7" y="67.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.7" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (31 samples, 0.19%)</title><rect x="179.2" y="243.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (28 samples, 0.17%)</title><rect x="179.4" y="227.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.4" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (28 samples, 0.17%)</title><rect x="179.4" y="211.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.4" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (28 samples, 0.17%)</title><rect x="179.4" y="195.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.4" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (27 samples, 0.17%)</title><rect x="179.5" y="179.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.5" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (16 samples, 0.10%)</title><rect x="180.3" y="163.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="183.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (16 samples, 0.10%)</title><rect x="180.3" y="147.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.3" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (16 samples, 0.10%)</title><rect x="180.3" y="131.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="183.3" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (18 samples, 0.11%)</title><rect x="181.4" y="243.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (13 samples, 0.08%)</title><rect x="182.8" y="323.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.8" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,314 samples, 8.18%)</title><rect x="183.7" y="371.0" width="96.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.7" y="382.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,311 samples, 8.16%)</title><rect x="183.9" y="355.0" width="96.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="186.9" y="366.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (20 samples, 0.12%)</title><rect x="184.4" y="339.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="187.4" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,284 samples, 7.99%)</title><rect x="185.9" y="339.0" width="94.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.9" y="350.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,282 samples, 7.98%)</title><rect x="186.1" y="323.0" width="94.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.1" y="334.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,259 samples, 7.83%)</title><rect x="187.7" y="307.0" width="92.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.7" y="318.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,254 samples, 7.80%)</title><rect x="188.1" y="291.0" width="92.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="191.1" y="302.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (496 samples, 3.09%)</title><rect x="193.3" y="275.0" width="36.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.3" y="286.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (145 samples, 0.90%)</title><rect x="194.3" y="259.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.3" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (41 samples, 0.26%)</title><rect x="196.6" y="243.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.6" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (32 samples, 0.20%)</title><rect x="196.8" y="227.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (32 samples, 0.20%)</title><rect x="196.8" y="211.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (30 samples, 0.19%)</title><rect x="196.9" y="195.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (29 samples, 0.18%)</title><rect x="197.0" y="179.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (11 samples, 0.07%)</title><rect x="199.6" y="243.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.6" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.06%)</title><rect x="199.7" y="227.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (62 samples, 0.39%)</title><rect x="200.4" y="243.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (27 samples, 0.17%)</title><rect x="202.9" y="227.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (16 samples, 0.10%)</title><rect x="203.0" y="211.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (16 samples, 0.10%)</title><rect x="203.0" y="195.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.0" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (16 samples, 0.10%)</title><rect x="203.0" y="179.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (16 samples, 0.10%)</title><rect x="203.0" y="163.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.0" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (16 samples, 0.10%)</title><rect x="203.0" y="147.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (16 samples, 0.10%)</title><rect x="203.0" y="131.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (16 samples, 0.10%)</title><rect x="203.0" y="115.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.0" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.06%)</title><rect x="204.2" y="211.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.2" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="204.4" y="195.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="207.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (338 samples, 2.10%)</title><rect x="204.9" y="259.0" width="24.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.9" y="270.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (338 samples, 2.10%)</title><rect x="204.9" y="243.0" width="24.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.9" y="254.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (333 samples, 2.07%)</title><rect x="205.3" y="227.0" width="24.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.3" y="238.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (9 samples, 0.06%)</title><rect x="207.2" y="211.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (6 samples, 0.04%)</title><rect x="207.2" y="195.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.2" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (6 samples, 0.04%)</title><rect x="207.2" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.2" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (5 samples, 0.03%)</title><rect x="207.3" y="163.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.3" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (15 samples, 0.09%)</title><rect x="207.9" y="211.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (11 samples, 0.07%)</title><rect x="208.1" y="195.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLongUnaligned (11 samples, 0.07%)</title><rect x="208.1" y="179.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.1" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (8 samples, 0.05%)</title><rect x="208.3" y="163.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.3" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (60 samples, 0.37%)</title><rect x="209.0" y="211.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.0" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (15 samples, 0.09%)</title><rect x="209.3" y="195.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (38 samples, 0.24%)</title><rect x="210.6" y="195.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.6" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (38 samples, 0.24%)</title><rect x="210.6" y="179.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.6" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="210.7" y="163.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="210.7" y="147.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="210.7" y="131.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.7" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (32 samples, 0.20%)</title><rect x="211.0" y="115.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.0" y="126.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (8 samples, 0.05%)</title><rect x="212.2" y="99.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.2" y="110.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (7 samples, 0.04%)</title><rect x="212.3" y="83.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="215.3" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.04%)</title><rect x="212.8" y="99.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.8" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="212.9" y="83.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.9" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.03%)</title><rect x="212.9" y="67.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.9" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.03%)</title><rect x="212.9" y="51.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.9" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (37 samples, 0.23%)</title><rect x="213.4" y="211.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (36 samples, 0.22%)</title><rect x="213.4" y="195.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.4" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="213.4" y="179.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.4" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="213.6" y="163.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="213.6" y="147.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="213.6" y="131.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.6" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (30 samples, 0.19%)</title><rect x="213.9" y="115.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.9" y="126.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (9 samples, 0.06%)</title><rect x="215.2" y="99.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.2" y="110.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (8 samples, 0.05%)</title><rect x="215.3" y="83.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="218.3" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectIntBufferS.get (22 samples, 0.14%)</title><rect x="216.1" y="211.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.1" y="222.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (22 samples, 0.14%)</title><rect x="216.1" y="195.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (156 samples, 0.97%)</title><rect x="217.8" y="211.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (9 samples, 0.06%)</title><rect x="219.0" y="195.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.0" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (4 samples, 0.02%)</title><rect x="219.2" y="179.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.2" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (4 samples, 0.02%)</title><rect x="219.2" y="163.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.2" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (4 samples, 0.02%)</title><rect x="219.2" y="147.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.2" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (72 samples, 0.45%)</title><rect x="219.7" y="195.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.7" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (68 samples, 0.42%)</title><rect x="220.0" y="179.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (68 samples, 0.42%)</title><rect x="220.0" y="163.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.0" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (65 samples, 0.40%)</title><rect x="220.2" y="147.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (65 samples, 0.40%)</title><rect x="220.2" y="131.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.2" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (65 samples, 0.40%)</title><rect x="220.2" y="115.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.2" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (42 samples, 0.26%)</title><rect x="221.9" y="99.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.9" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (19 samples, 0.12%)</title><rect x="222.3" y="83.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.3" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (19 samples, 0.12%)</title><rect x="222.3" y="67.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="225.3" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (19 samples, 0.12%)</title><rect x="222.3" y="51.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.3" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (19 samples, 0.12%)</title><rect x="222.3" y="35.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="225.3" y="46.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (17 samples, 0.11%)</title><rect x="223.7" y="83.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.7" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (17 samples, 0.11%)</title><rect x="223.7" y="67.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.7" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (17 samples, 0.11%)</title><rect x="223.7" y="51.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.7" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (45 samples, 0.28%)</title><rect x="225.0" y="195.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.0" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (39 samples, 0.24%)</title><rect x="225.4" y="179.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.4" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (39 samples, 0.24%)</title><rect x="225.4" y="163.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.4" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (38 samples, 0.24%)</title><rect x="225.5" y="147.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (38 samples, 0.24%)</title><rect x="225.5" y="131.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (38 samples, 0.24%)</title><rect x="225.5" y="115.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.5" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (33 samples, 0.21%)</title><rect x="225.9" y="99.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.9" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.05%)</title><rect x="225.9" y="83.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.9" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.05%)</title><rect x="225.9" y="67.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.9" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.05%)</title><rect x="225.9" y="51.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.9" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.04%)</title><rect x="226.0" y="35.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.0" y="46.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.16%)</title><rect x="226.4" y="83.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.4" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.16%)</title><rect x="226.4" y="67.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.4" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (25 samples, 0.16%)</title><rect x="226.4" y="51.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.4" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.04%)</title><rect x="227.8" y="35.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.8" y="46.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.02%)</title><rect x="228.4" y="195.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.4" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.02%)</title><rect x="228.4" y="179.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.02%)</title><rect x="228.4" y="163.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.4" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.02%)</title><rect x="228.4" y="147.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.4" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="228.7" y="195.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.7" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="228.7" y="179.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.04%)</title><rect x="228.7" y="163.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.7" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.04%)</title><rect x="228.7" y="147.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (7 samples, 0.04%)</title><rect x="229.2" y="211.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (687 samples, 4.27%)</title><rect x="229.7" y="275.0" width="50.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.7" y="286.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (673 samples, 4.19%)</title><rect x="230.8" y="259.0" width="49.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.8" y="270.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (477 samples, 2.97%)</title><rect x="232.8" y="243.0" width="35.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.8" y="254.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (6 samples, 0.04%)</title><rect x="234.0" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.0" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (441 samples, 2.74%)</title><rect x="234.4" y="227.0" width="32.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.4" y="238.0">ja..</text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="256.8" y="211.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="259.8" y="222.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="256.8" y="195.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="259.8" y="206.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="256.8" y="179.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="259.8" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (80 samples, 0.50%)</title><rect x="257.1" y="211.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.1" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (41 samples, 0.26%)</title><rect x="257.1" y="195.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (39 samples, 0.24%)</title><rect x="260.1" y="195.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.1" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (5 samples, 0.03%)</title><rect x="263.0" y="211.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.0" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.07%)</title><rect x="263.4" y="211.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.4" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (35 samples, 0.22%)</title><rect x="264.3" y="211.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (11 samples, 0.07%)</title><rect x="266.8" y="227.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.8" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (7 samples, 0.04%)</title><rect x="266.8" y="211.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (4 samples, 0.02%)</title><rect x="267.3" y="211.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (169 samples, 1.05%)</title><rect x="267.8" y="243.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.8" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (145 samples, 0.90%)</title><rect x="268.7" y="227.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.7" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (145 samples, 0.90%)</title><rect x="268.7" y="211.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.7" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="270.3" y="195.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (118 samples, 0.73%)</title><rect x="270.6" y="195.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.6" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (95 samples, 0.59%)</title><rect x="272.3" y="179.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.3" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (61 samples, 0.38%)</title><rect x="274.8" y="163.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.8" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (61 samples, 0.38%)</title><rect x="274.8" y="147.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (61 samples, 0.38%)</title><rect x="274.8" y="131.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.8" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (25 samples, 0.16%)</title><rect x="277.5" y="115.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="280.5" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.06%)</title><rect x="278.1" y="99.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.1" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.06%)</title><rect x="278.1" y="83.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.1" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.06%)</title><rect x="278.1" y="67.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.1" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.06%)</title><rect x="278.1" y="51.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.1" y="62.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="278.8" y="99.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.8" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="278.8" y="83.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.8" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.04%)</title><rect x="278.8" y="67.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.8" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.04%)</title><rect x="278.8" y="51.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.8" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (12 samples, 0.07%)</title><rect x="279.3" y="227.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.3" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (12 samples, 0.07%)</title><rect x="279.3" y="211.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.07%)</title><rect x="279.4" y="195.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.07%)</title><rect x="279.4" y="179.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.4" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.07%)</title><rect x="279.4" y="163.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (42 samples, 0.26%)</title><rect x="280.2" y="387.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.2" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (42 samples, 0.26%)</title><rect x="280.2" y="371.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.2" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.06%)</title><rect x="282.4" y="355.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.4" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.05%)</title><rect x="282.4" y="339.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (160 samples, 1.00%)</title><rect x="283.3" y="387.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (158 samples, 0.98%)</title><rect x="283.4" y="371.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.4" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (153 samples, 0.95%)</title><rect x="283.5" y="355.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (143 samples, 0.89%)</title><rect x="284.2" y="339.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (136 samples, 0.85%)</title><rect x="284.7" y="323.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (135 samples, 0.84%)</title><rect x="284.8" y="307.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.8" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (97 samples, 0.60%)</title><rect x="287.6" y="291.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (89 samples, 0.55%)</title><rect x="288.2" y="275.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (89 samples, 0.55%)</title><rect x="288.2" y="259.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="291.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (78 samples, 0.49%)</title><rect x="289.0" y="243.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.0" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (18 samples, 0.11%)</title><rect x="291.6" y="227.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.6" y="238.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (13 samples, 0.08%)</title><rect x="292.0" y="211.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="295.0" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.07%)</title><rect x="293.0" y="227.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.0" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.05%)</title><rect x="293.3" y="211.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.05%)</title><rect x="293.3" y="195.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.3" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.05%)</title><rect x="293.3" y="179.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.3" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.07%)</title><rect x="293.8" y="227.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.8" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.07%)</title><rect x="293.8" y="211.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.07%)</title><rect x="293.8" y="195.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.8" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 0.07%)</title><rect x="293.8" y="179.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.8" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.02%)</title><rect x="294.7" y="355.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.7" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.02%)</title><rect x="294.7" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="294.7" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="294.7" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.7" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="294.7" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="297.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (4 samples, 0.02%)</title><rect x="295.2" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.2" y="526.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=32104] (3,878 samples, 24.13%)</title><rect x="295.7" y="659.0" width="284.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="298.7" y="670.0">[NIO Selector #1 tid=32104]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (38 samples, 0.24%)</title><rect x="295.9" y="643.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="298.9" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (36 samples, 0.22%)</title><rect x="296.0" y="627.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="299.0" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (36 samples, 0.22%)</title><rect x="296.0" y="611.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="299.0" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (35 samples, 0.22%)</title><rect x="296.0" y="595.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="299.0" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (27 samples, 0.17%)</title><rect x="296.3" y="579.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="299.3" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (23 samples, 0.14%)</title><rect x="296.3" y="563.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="299.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (20 samples, 0.12%)</title><rect x="296.6" y="547.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="299.6" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (10 samples, 0.06%)</title><rect x="296.8" y="531.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="299.8" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (9 samples, 0.06%)</title><rect x="296.9" y="515.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="299.9" y="526.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (4 samples, 0.02%)</title><rect x="297.0" y="499.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="300.0" y="510.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (7 samples, 0.04%)</title><rect x="297.5" y="531.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="300.5" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (7 samples, 0.04%)</title><rect x="297.5" y="515.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="300.5" y="526.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (7 samples, 0.04%)</title><rect x="297.5" y="499.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="300.5" y="510.0"></text>
</g>
<g>
<title>[unknown_Java] (619 samples, 3.85%)</title><rect x="299.0" y="643.0" width="45.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="302.0" y="654.0">[unk..</text>
</g>
<g>
<title>[unknown] (8 samples, 0.05%)</title><rect x="343.8" y="627.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="346.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.05%)</title><rect x="343.8" y="611.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="346.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.05%)</title><rect x="343.8" y="595.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="346.8" y="606.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,213 samples, 19.99%)</title><rect x="344.4" y="643.0" width="235.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.4" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (3,213 samples, 19.99%)</title><rect x="344.4" y="627.0" width="235.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.4" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,213 samples, 19.99%)</title><rect x="344.4" y="611.0" width="235.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.4" y="622.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,212 samples, 19.99%)</title><rect x="344.4" y="595.0" width="235.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.4" y="606.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,212 samples, 19.99%)</title><rect x="344.4" y="579.0" width="235.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.4" y="590.0">one/nio/http/HttpSession.handle..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,212 samples, 19.99%)</title><rect x="344.4" y="563.0" width="235.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.4" y="574.0">one/nio/http/HttpServer.handleR..</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (3,212 samples, 19.99%)</title><rect x="344.4" y="547.0" width="235.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.4" y="558.0">RequestHandler2_entities.handle..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/ShardedService.entities (3,212 samples, 19.99%)</title><rect x="344.4" y="531.0" width="235.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.4" y="542.0">ru/mail/polis/service/igorlo/Sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (3,205 samples, 19.94%)</title><rect x="344.4" y="515.0" width="235.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.4" y="526.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (3,204 samples, 19.94%)</title><rect x="344.4" y="499.0" width="235.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.4" y="510.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (3,204 samples, 19.94%)</title><rect x="344.4" y="483.0" width="235.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="347.4" y="494.0">ru/mail/polis/dao/Iters$UntilIt..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3,204 samples, 19.94%)</title><rect x="344.4" y="467.0" width="235.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.4" y="478.0">com/google/common/collect/Trans..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3,204 samples, 19.94%)</title><rect x="344.4" y="451.0" width="235.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.4" y="462.0">com/google/common/collect/Abstr..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3,204 samples, 19.94%)</title><rect x="344.4" y="435.0" width="235.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.4" y="446.0">com/google/common/collect/Abstr..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3,204 samples, 19.94%)</title><rect x="344.4" y="419.0" width="235.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.4" y="430.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,181 samples, 19.79%)</title><rect x="346.0" y="403.0" width="233.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.0" y="414.0">ru/mail/polis/dao/Iters$Collaps..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,969 samples, 18.47%)</title><rect x="347.9" y="387.0" width="218.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.9" y="398.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (27 samples, 0.17%)</title><rect x="350.6" y="371.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.6" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (25 samples, 0.16%)</title><rect x="352.6" y="371.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.6" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,585 samples, 9.86%)</title><rect x="354.4" y="371.0" width="116.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="357.4" y="382.0">java/util/Abst..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,583 samples, 9.85%)</title><rect x="354.6" y="355.0" width="116.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.6" y="366.0">java/util/Prio..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,527 samples, 9.50%)</title><rect x="358.7" y="339.0" width="112.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.7" y="350.0">java/util/Prio..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,447 samples, 9.00%)</title><rect x="363.7" y="323.0" width="106.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.7" y="334.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,434 samples, 8.92%)</title><rect x="364.7" y="307.0" width="105.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.7" y="318.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (16 samples, 0.10%)</title><rect x="372.5" y="291.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="375.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (1,312 samples, 8.16%)</title><rect x="373.6" y="291.0" width="96.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.6" y="302.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,305 samples, 8.12%)</title><rect x="374.2" y="275.0" width="95.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.2" y="286.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (922 samples, 5.74%)</title><rect x="374.7" y="259.0" width="67.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="377.7" y="270.0">java/ni..</text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.05%)</title><rect x="377.4" y="243.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.4" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (15 samples, 0.09%)</title><rect x="378.0" y="243.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.0" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (823 samples, 5.12%)</title><rect x="379.1" y="243.0" width="60.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="382.1" y="254.0">java/n..</text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="418.3" y="227.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="421.3" y="238.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="418.3" y="211.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="421.3" y="222.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="418.3" y="195.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="421.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (207 samples, 1.29%)</title><rect x="418.7" y="227.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="421.7" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (117 samples, 0.73%)</title><rect x="418.7" y="211.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="421.7" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (90 samples, 0.56%)</title><rect x="427.3" y="211.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="430.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (45 samples, 0.28%)</title><rect x="434.1" y="227.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.1" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.02%)</title><rect x="437.0" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (29 samples, 0.18%)</title><rect x="437.4" y="227.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="440.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (22 samples, 0.14%)</title><rect x="439.5" y="243.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.5" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (16 samples, 0.10%)</title><rect x="439.5" y="227.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="442.5" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (6 samples, 0.04%)</title><rect x="440.7" y="227.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="443.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (18 samples, 0.11%)</title><rect x="441.1" y="243.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="444.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (375 samples, 2.33%)</title><rect x="442.4" y="259.0" width="27.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.4" y="270.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (276 samples, 1.72%)</title><rect x="447.1" y="243.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.1" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (276 samples, 1.72%)</title><rect x="447.1" y="227.0" width="20.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (266 samples, 1.66%)</title><rect x="447.8" y="211.0" width="19.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="450.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (262 samples, 1.63%)</title><rect x="448.1" y="195.0" width="19.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="451.1" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (244 samples, 1.52%)</title><rect x="449.4" y="179.0" width="17.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (240 samples, 1.49%)</title><rect x="449.7" y="163.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="452.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (225 samples, 1.40%)</title><rect x="450.8" y="147.0" width="16.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="453.8" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (175 samples, 1.09%)</title><rect x="454.5" y="131.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="457.5" y="142.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.02%)</title><rect x="455.8" y="115.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="458.8" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (29 samples, 0.18%)</title><rect x="456.1" y="115.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="459.1" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (24 samples, 0.15%)</title><rect x="456.5" y="99.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.5" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (24 samples, 0.15%)</title><rect x="456.5" y="83.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.5" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (24 samples, 0.15%)</title><rect x="456.5" y="67.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="459.5" y="78.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (124 samples, 0.77%)</title><rect x="458.2" y="115.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.2" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (20 samples, 0.12%)</title><rect x="465.9" y="99.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.9" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (20 samples, 0.12%)</title><rect x="465.9" y="83.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="468.9" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (20 samples, 0.12%)</title><rect x="465.9" y="67.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="468.9" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (25 samples, 0.16%)</title><rect x="467.3" y="243.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="470.3" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (21 samples, 0.13%)</title><rect x="467.6" y="227.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (21 samples, 0.13%)</title><rect x="467.6" y="211.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="470.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 0.13%)</title><rect x="467.6" y="195.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (20 samples, 0.12%)</title><rect x="467.7" y="179.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="470.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.04%)</title><rect x="468.7" y="163.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="471.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.04%)</title><rect x="468.7" y="147.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="471.7" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.04%)</title><rect x="468.7" y="131.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="471.7" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (11 samples, 0.07%)</title><rect x="469.2" y="243.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="472.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (11 samples, 0.07%)</title><rect x="470.0" y="323.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.0" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,295 samples, 8.06%)</title><rect x="470.8" y="371.0" width="95.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="473.8" y="382.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,292 samples, 8.04%)</title><rect x="471.0" y="355.0" width="94.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="474.0" y="366.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (18 samples, 0.11%)</title><rect x="471.6" y="339.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.6" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,266 samples, 7.88%)</title><rect x="472.9" y="339.0" width="93.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.9" y="350.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,264 samples, 7.86%)</title><rect x="473.1" y="323.0" width="92.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.1" y="334.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,230 samples, 7.65%)</title><rect x="475.6" y="307.0" width="90.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.6" y="318.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,226 samples, 7.63%)</title><rect x="475.8" y="291.0" width="90.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.8" y="302.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (472 samples, 2.94%)</title><rect x="481.1" y="275.0" width="34.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.1" y="286.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (129 samples, 0.80%)</title><rect x="482.3" y="259.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.3" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (30 samples, 0.19%)</title><rect x="484.3" y="243.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="487.3" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (27 samples, 0.17%)</title><rect x="484.3" y="227.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (25 samples, 0.16%)</title><rect x="484.4" y="211.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="487.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (23 samples, 0.14%)</title><rect x="484.6" y="195.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (21 samples, 0.13%)</title><rect x="484.7" y="179.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (11 samples, 0.07%)</title><rect x="486.5" y="243.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="489.5" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 0.06%)</title><rect x="486.6" y="227.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (61 samples, 0.38%)</title><rect x="487.3" y="243.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (28 samples, 0.17%)</title><rect x="489.7" y="227.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.7" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (14 samples, 0.09%)</title><rect x="489.7" y="211.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="492.7" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (14 samples, 0.09%)</title><rect x="489.7" y="195.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="492.7" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (14 samples, 0.09%)</title><rect x="489.7" y="179.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.7" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (14 samples, 0.09%)</title><rect x="489.7" y="163.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="492.7" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (14 samples, 0.09%)</title><rect x="489.7" y="147.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.09%)</title><rect x="489.7" y="131.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.09%)</title><rect x="489.7" y="115.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.7" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (14 samples, 0.09%)</title><rect x="490.8" y="211.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="493.8" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (6 samples, 0.04%)</title><rect x="491.3" y="195.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="494.3" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="491.3" y="179.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="491.3" y="163.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.3" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.04%)</title><rect x="491.3" y="147.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="494.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (326 samples, 2.03%)</title><rect x="491.8" y="259.0" width="23.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="494.8" y="270.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (326 samples, 2.03%)</title><rect x="491.8" y="243.0" width="23.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="494.8" y="254.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (321 samples, 2.00%)</title><rect x="492.1" y="227.0" width="23.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.1" y="238.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (10 samples, 0.06%)</title><rect x="493.5" y="211.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.5" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (8 samples, 0.05%)</title><rect x="493.6" y="195.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="496.6" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (8 samples, 0.05%)</title><rect x="493.6" y="179.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.6" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (8 samples, 0.05%)</title><rect x="493.6" y="163.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (6 samples, 0.04%)</title><rect x="494.3" y="211.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="497.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (5 samples, 0.03%)</title><rect x="494.3" y="195.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLongUnaligned (5 samples, 0.03%)</title><rect x="494.3" y="179.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="497.3" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (5 samples, 0.03%)</title><rect x="494.3" y="163.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="497.3" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (63 samples, 0.39%)</title><rect x="494.7" y="211.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="497.7" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (15 samples, 0.09%)</title><rect x="495.3" y="195.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="498.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (36 samples, 0.22%)</title><rect x="496.7" y="195.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.7" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="496.7" y="179.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.7" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="496.8" y="163.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="499.8" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="496.8" y="147.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="499.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="496.8" y="131.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.8" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (33 samples, 0.21%)</title><rect x="496.9" y="115.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.9" y="126.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (9 samples, 0.06%)</title><rect x="498.1" y="99.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="501.1" y="110.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (6 samples, 0.04%)</title><rect x="498.3" y="83.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="501.3" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="498.8" y="99.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.8" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.02%)</title><rect x="498.8" y="83.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.8" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.02%)</title><rect x="498.8" y="67.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="501.8" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.02%)</title><rect x="498.8" y="51.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.8" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (37 samples, 0.23%)</title><rect x="499.3" y="211.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="502.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (37 samples, 0.23%)</title><rect x="499.3" y="195.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (37 samples, 0.23%)</title><rect x="499.3" y="179.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="502.3" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (35 samples, 0.22%)</title><rect x="499.5" y="163.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.22%)</title><rect x="499.5" y="147.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.22%)</title><rect x="499.5" y="131.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.5" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="499.6" y="115.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.6" y="126.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (6 samples, 0.04%)</title><rect x="501.2" y="99.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="504.2" y="110.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (5 samples, 0.03%)</title><rect x="501.3" y="83.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="504.3" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.02%)</title><rect x="501.6" y="99.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="504.6" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectIntBufferS.get (27 samples, 0.17%)</title><rect x="502.1" y="211.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="505.1" y="222.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (22 samples, 0.14%)</title><rect x="502.1" y="195.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="505.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getInt (4 samples, 0.02%)</title><rect x="503.7" y="195.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="506.7" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.02%)</title><rect x="504.2" y="211.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="507.2" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.02%)</title><rect x="504.2" y="195.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="507.2" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="504.2" y="179.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="507.2" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="504.2" y="163.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="507.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (151 samples, 0.94%)</title><rect x="504.5" y="211.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="507.5" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (6 samples, 0.04%)</title><rect x="505.2" y="195.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="508.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (84 samples, 0.52%)</title><rect x="505.7" y="195.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="508.7" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (79 samples, 0.49%)</title><rect x="506.0" y="179.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="509.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (79 samples, 0.49%)</title><rect x="506.0" y="163.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="509.0" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (76 samples, 0.47%)</title><rect x="506.2" y="147.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (76 samples, 0.47%)</title><rect x="506.2" y="131.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.2" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (76 samples, 0.47%)</title><rect x="506.2" y="115.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="509.2" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (51 samples, 0.32%)</title><rect x="508.1" y="99.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="511.1" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (22 samples, 0.14%)</title><rect x="508.3" y="83.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.3" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (22 samples, 0.14%)</title><rect x="508.3" y="67.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="511.3" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (22 samples, 0.14%)</title><rect x="508.3" y="51.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.3" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (22 samples, 0.14%)</title><rect x="508.3" y="35.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="511.3" y="46.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (26 samples, 0.16%)</title><rect x="509.9" y="83.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="512.9" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (26 samples, 0.16%)</title><rect x="509.9" y="67.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="512.9" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (26 samples, 0.16%)</title><rect x="509.9" y="51.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.9" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="511.5" y="35.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="514.5" y="46.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (45 samples, 0.28%)</title><rect x="511.8" y="195.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="514.8" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (37 samples, 0.23%)</title><rect x="512.4" y="179.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="515.4" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (37 samples, 0.23%)</title><rect x="512.4" y="163.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="515.4" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (37 samples, 0.23%)</title><rect x="512.4" y="147.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (37 samples, 0.23%)</title><rect x="512.4" y="131.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (37 samples, 0.23%)</title><rect x="512.4" y="115.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="515.4" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (30 samples, 0.19%)</title><rect x="512.9" y="99.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.9" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.06%)</title><rect x="513.1" y="83.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="516.1" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.06%)</title><rect x="513.1" y="67.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="516.1" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.06%)</title><rect x="513.1" y="51.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="516.1" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.06%)</title><rect x="513.1" y="35.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="516.1" y="46.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (19 samples, 0.12%)</title><rect x="513.7" y="83.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="516.7" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (19 samples, 0.12%)</title><rect x="513.7" y="67.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.7" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (19 samples, 0.12%)</title><rect x="513.7" y="51.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="516.7" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="514.8" y="35.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.8" y="46.0"></text>
</g>
<g>
<title>java/nio/DirectIntBufferS.get (4 samples, 0.02%)</title><rect x="515.1" y="195.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getInt (4 samples, 0.02%)</title><rect x="515.1" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="518.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (683 samples, 4.25%)</title><rect x="515.7" y="275.0" width="50.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="518.7" y="286.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (679 samples, 4.22%)</title><rect x="516.0" y="259.0" width="49.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.0" y="270.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (494 samples, 3.07%)</title><rect x="517.5" y="243.0" width="36.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="520.5" y="254.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (5 samples, 0.03%)</title><rect x="519.5" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.5" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (455 samples, 2.83%)</title><rect x="519.8" y="227.0" width="33.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.8" y="238.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (83 samples, 0.52%)</title><rect x="543.4" y="211.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.4" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (50 samples, 0.31%)</title><rect x="543.4" y="195.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="546.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (33 samples, 0.21%)</title><rect x="547.1" y="195.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="550.1" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (13 samples, 0.08%)</title><rect x="549.6" y="211.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="552.6" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (36 samples, 0.22%)</title><rect x="550.6" y="211.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="553.6" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.04%)</title><rect x="553.2" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="556.2" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.02%)</title><rect x="553.2" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="556.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (162 samples, 1.01%)</title><rect x="554.0" y="243.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="557.0" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (139 samples, 0.86%)</title><rect x="555.0" y="227.0" width="10.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="558.0" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (139 samples, 0.86%)</title><rect x="555.0" y="211.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (114 samples, 0.71%)</title><rect x="556.8" y="195.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.8" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (97 samples, 0.60%)</title><rect x="558.1" y="179.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="561.1" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (65 samples, 0.40%)</title><rect x="560.4" y="163.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="563.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (65 samples, 0.40%)</title><rect x="560.4" y="147.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="563.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (65 samples, 0.40%)</title><rect x="560.4" y="131.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="563.4" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (39 samples, 0.24%)</title><rect x="562.3" y="115.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="565.3" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.07%)</title><rect x="563.4" y="99.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="566.4" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.07%)</title><rect x="563.4" y="83.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.4" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.07%)</title><rect x="563.4" y="67.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="566.4" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.07%)</title><rect x="563.4" y="51.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="566.4" y="62.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.07%)</title><rect x="564.3" y="99.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="567.3" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.07%)</title><rect x="564.3" y="83.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.3" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.07%)</title><rect x="564.3" y="67.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="567.3" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 0.07%)</title><rect x="564.3" y="51.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="567.3" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (9 samples, 0.06%)</title><rect x="565.2" y="227.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="568.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (8 samples, 0.05%)</title><rect x="565.3" y="211.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="568.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="565.3" y="195.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="568.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="565.3" y="179.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.3" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="565.3" y="163.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="568.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (29 samples, 0.18%)</title><rect x="565.9" y="387.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="568.9" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (29 samples, 0.18%)</title><rect x="565.9" y="371.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.9" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (9 samples, 0.06%)</title><rect x="566.9" y="355.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="569.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.03%)</title><rect x="566.9" y="339.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="569.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (4 samples, 0.02%)</title><rect x="567.3" y="339.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="570.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (158 samples, 0.98%)</title><rect x="568.0" y="387.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="571.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (157 samples, 0.98%)</title><rect x="568.1" y="371.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="571.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (152 samples, 0.95%)</title><rect x="568.1" y="355.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="571.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (144 samples, 0.90%)</title><rect x="568.7" y="339.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="571.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (143 samples, 0.89%)</title><rect x="568.8" y="323.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (143 samples, 0.89%)</title><rect x="568.8" y="307.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.8" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (110 samples, 0.68%)</title><rect x="571.2" y="291.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="574.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (97 samples, 0.60%)</title><rect x="572.2" y="275.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="575.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (97 samples, 0.60%)</title><rect x="572.2" y="259.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="575.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (78 samples, 0.49%)</title><rect x="573.4" y="243.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="576.4" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (29 samples, 0.18%)</title><rect x="575.8" y="227.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="578.8" y="238.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (21 samples, 0.13%)</title><rect x="576.4" y="211.0" width="1.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="579.4" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.05%)</title><rect x="578.0" y="227.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="581.0" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.04%)</title><rect x="578.0" y="211.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.04%)</title><rect x="578.0" y="195.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="581.0" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.04%)</title><rect x="578.0" y="179.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="581.0" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.05%)</title><rect x="578.6" y="227.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.6" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="578.6" y="211.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.04%)</title><rect x="578.6" y="195.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="581.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.04%)</title><rect x="578.6" y="179.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.6" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.02%)</title><rect x="579.3" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.3" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.02%)</title><rect x="579.3" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.3" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="579.3" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="582.3" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="579.3" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (7 samples, 0.04%)</title><rect x="579.7" y="515.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.04%)</title><rect x="579.7" y="499.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.7" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.04%)</title><rect x="579.8" y="483.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="582.8" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.04%)</title><rect x="579.8" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="582.8" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 0.04%)</title><rect x="579.8" y="451.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.8" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 0.04%)</title><rect x="579.8" y="435.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.8" y="446.0"></text>
</g>
<g>
<title>__send (6 samples, 0.04%)</title><rect x="579.8" y="419.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="582.8" y="430.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="579.8" y="403.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="582.8" y="414.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="579.8" y="387.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="582.8" y="398.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="579.9" y="371.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="582.9" y="382.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="579.9" y="355.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="582.9" y="366.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="579.9" y="339.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="582.9" y="350.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="579.9" y="323.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="582.9" y="334.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="579.9" y="307.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="582.9" y="318.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="579.9" y="291.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="582.9" y="302.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="579.9" y="275.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="582.9" y="286.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="579.9" y="259.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="582.9" y="270.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="580.0" y="243.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="583.0" y="254.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="580.0" y="227.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="583.0" y="238.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=32105] (3,897 samples, 24.25%)</title><rect x="580.5" y="659.0" width="286.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="583.5" y="670.0">[NIO Selector #2 tid=32105]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (44 samples, 0.27%)</title><rect x="580.5" y="643.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="583.5" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (43 samples, 0.27%)</title><rect x="580.6" y="627.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="583.6" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (43 samples, 0.27%)</title><rect x="580.6" y="611.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="583.6" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (41 samples, 0.26%)</title><rect x="580.6" y="595.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="583.6" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (33 samples, 0.21%)</title><rect x="581.1" y="579.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="584.1" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (24 samples, 0.15%)</title><rect x="581.3" y="563.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="584.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (23 samples, 0.14%)</title><rect x="581.4" y="547.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="584.4" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (8 samples, 0.05%)</title><rect x="581.5" y="531.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="584.5" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (8 samples, 0.05%)</title><rect x="581.5" y="515.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="584.5" y="526.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (4 samples, 0.02%)</title><rect x="581.6" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="584.6" y="510.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (11 samples, 0.07%)</title><rect x="582.2" y="531.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="585.2" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (8 samples, 0.05%)</title><rect x="582.2" y="515.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="585.2" y="526.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (5 samples, 0.03%)</title><rect x="582.4" y="499.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="585.4" y="510.0"></text>
</g>
<g>
<title>[unknown_Java] (616 samples, 3.83%)</title><rect x="583.9" y="643.0" width="45.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="586.9" y="654.0">[unk..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="628.9" y="627.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="631.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="628.9" y="611.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="631.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="628.9" y="595.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="631.9" y="606.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,234 samples, 20.12%)</title><rect x="629.1" y="643.0" width="237.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="632.1" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (3,234 samples, 20.12%)</title><rect x="629.1" y="627.0" width="237.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="632.1" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,234 samples, 20.12%)</title><rect x="629.1" y="611.0" width="237.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="632.1" y="622.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,234 samples, 20.12%)</title><rect x="629.1" y="595.0" width="237.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="632.1" y="606.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,234 samples, 20.12%)</title><rect x="629.1" y="579.0" width="237.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.1" y="590.0">one/nio/http/HttpSession.handle..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,234 samples, 20.12%)</title><rect x="629.1" y="563.0" width="237.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="632.1" y="574.0">one/nio/http/HttpServer.handleR..</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (3,234 samples, 20.12%)</title><rect x="629.1" y="547.0" width="237.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="632.1" y="558.0">RequestHandler2_entities.handle..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/ShardedService.entities (3,233 samples, 20.12%)</title><rect x="629.2" y="531.0" width="237.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.2" y="542.0">ru/mail/polis/service/igorlo/Sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (3,226 samples, 20.07%)</title><rect x="629.2" y="515.0" width="236.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="632.2" y="526.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (3,225 samples, 20.07%)</title><rect x="629.2" y="499.0" width="236.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="632.2" y="510.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (3,225 samples, 20.07%)</title><rect x="629.2" y="483.0" width="236.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="632.2" y="494.0">ru/mail/polis/dao/Iters$UntilIt..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3,225 samples, 20.07%)</title><rect x="629.2" y="467.0" width="236.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="632.2" y="478.0">com/google/common/collect/Trans..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3,225 samples, 20.07%)</title><rect x="629.2" y="451.0" width="236.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="632.2" y="462.0">com/google/common/collect/Abstr..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3,225 samples, 20.07%)</title><rect x="629.2" y="435.0" width="236.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="632.2" y="446.0">com/google/common/collect/Abstr..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3,225 samples, 20.07%)</title><rect x="629.2" y="419.0" width="236.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="632.2" y="430.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,213 samples, 19.99%)</title><rect x="630.1" y="403.0" width="235.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="633.1" y="414.0">ru/mail/polis/dao/Iters$Collaps..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,980 samples, 18.54%)</title><rect x="632.2" y="387.0" width="218.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.2" y="398.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (30 samples, 0.19%)</title><rect x="635.2" y="371.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.hasNext (4 samples, 0.02%)</title><rect x="637.1" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.1" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (33 samples, 0.21%)</title><rect x="637.4" y="371.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="640.4" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,527 samples, 9.50%)</title><rect x="639.8" y="371.0" width="112.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.8" y="382.0">java/util/Abst..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,527 samples, 9.50%)</title><rect x="639.8" y="355.0" width="112.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.8" y="366.0">java/util/Prio..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,463 samples, 9.10%)</title><rect x="644.5" y="339.0" width="107.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.5" y="350.0">java/util/Pri..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,392 samples, 8.66%)</title><rect x="649.0" y="323.0" width="102.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="652.0" y="334.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,383 samples, 8.61%)</title><rect x="649.7" y="307.0" width="101.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="652.7" y="318.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (23 samples, 0.14%)</title><rect x="656.0" y="291.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (1,274 samples, 7.93%)</title><rect x="657.7" y="291.0" width="93.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="660.7" y="302.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,267 samples, 7.88%)</title><rect x="658.2" y="275.0" width="93.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="661.2" y="286.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (917 samples, 5.71%)</title><rect x="658.4" y="259.0" width="67.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="661.4" y="270.0">java/ni..</text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.04%)</title><rect x="661.3" y="243.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="664.3" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (10 samples, 0.06%)</title><rect x="661.8" y="243.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.8" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (826 samples, 5.14%)</title><rect x="662.6" y="243.0" width="60.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="665.6" y="254.0">java/n..</text>
</g>
<g>
<title>[unknown] (7 samples, 0.04%)</title><rect x="703.2" y="227.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="706.2" y="238.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="703.2" y="211.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="706.2" y="222.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="703.2" y="195.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="706.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (175 samples, 1.09%)</title><rect x="703.9" y="227.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="706.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (105 samples, 0.65%)</title><rect x="703.9" y="211.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="706.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (70 samples, 0.44%)</title><rect x="711.6" y="211.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="714.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (51 samples, 0.32%)</title><rect x="716.7" y="227.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.7" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.02%)</title><rect x="720.2" y="211.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="723.2" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (36 samples, 0.22%)</title><rect x="720.5" y="227.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (22 samples, 0.14%)</title><rect x="723.2" y="243.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="726.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (11 samples, 0.07%)</title><rect x="723.2" y="227.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="726.2" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (11 samples, 0.07%)</title><rect x="724.0" y="227.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="727.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (13 samples, 0.08%)</title><rect x="724.8" y="243.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (347 samples, 2.16%)</title><rect x="725.8" y="259.0" width="25.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.8" y="270.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (230 samples, 1.43%)</title><rect x="731.2" y="243.0" width="16.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (230 samples, 1.43%)</title><rect x="731.2" y="227.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="734.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (220 samples, 1.37%)</title><rect x="731.9" y="211.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (216 samples, 1.34%)</title><rect x="732.2" y="195.0" width="15.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="735.2" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (206 samples, 1.28%)</title><rect x="733.0" y="179.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="736.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (206 samples, 1.28%)</title><rect x="733.0" y="163.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (183 samples, 1.14%)</title><rect x="734.7" y="147.0" width="13.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.7" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (149 samples, 0.93%)</title><rect x="737.1" y="131.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.1" y="142.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.02%)</title><rect x="738.2" y="115.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="741.2" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (29 samples, 0.18%)</title><rect x="738.5" y="115.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="741.5" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (24 samples, 0.15%)</title><rect x="738.8" y="99.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.8" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (23 samples, 0.14%)</title><rect x="738.9" y="83.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="741.9" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (23 samples, 0.14%)</title><rect x="738.9" y="67.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="741.9" y="78.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (102 samples, 0.63%)</title><rect x="740.6" y="115.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="743.6" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (14 samples, 0.09%)</title><rect x="747.1" y="99.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="750.1" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (14 samples, 0.09%)</title><rect x="747.1" y="83.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.1" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (14 samples, 0.09%)</title><rect x="747.1" y="67.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="750.1" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (30 samples, 0.19%)</title><rect x="748.1" y="243.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="751.1" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (18 samples, 0.11%)</title><rect x="749.0" y="227.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.11%)</title><rect x="749.0" y="211.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="752.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (18 samples, 0.11%)</title><rect x="749.0" y="195.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="752.0" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (17 samples, 0.11%)</title><rect x="749.0" y="179.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="750.0" y="163.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="750.0" y="147.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="753.0" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="750.0" y="131.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="753.0" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.08%)</title><rect x="750.3" y="243.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="753.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (9 samples, 0.06%)</title><rect x="751.2" y="323.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="754.2" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,349 samples, 8.39%)</title><rect x="751.9" y="371.0" width="99.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="754.9" y="382.0">java/util/Pr..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,348 samples, 8.39%)</title><rect x="752.0" y="355.0" width="98.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.0" y="366.0">java/util/Pr..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (23 samples, 0.14%)</title><rect x="752.5" y="339.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.5" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,318 samples, 8.20%)</title><rect x="754.2" y="339.0" width="96.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="757.2" y="350.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,316 samples, 8.19%)</title><rect x="754.3" y="323.0" width="96.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="757.3" y="334.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,287 samples, 8.01%)</title><rect x="756.5" y="307.0" width="94.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="759.5" y="318.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,286 samples, 8.00%)</title><rect x="756.5" y="291.0" width="94.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="759.5" y="302.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (514 samples, 3.20%)</title><rect x="762.2" y="275.0" width="37.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="765.2" y="286.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (140 samples, 0.87%)</title><rect x="763.5" y="259.0" width="10.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="766.5" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (41 samples, 0.26%)</title><rect x="765.8" y="243.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.8" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (32 samples, 0.20%)</title><rect x="766.1" y="227.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="769.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (32 samples, 0.20%)</title><rect x="766.1" y="211.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="769.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (31 samples, 0.19%)</title><rect x="766.2" y="195.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="769.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (28 samples, 0.17%)</title><rect x="766.4" y="179.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="769.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (17 samples, 0.11%)</title><rect x="768.8" y="243.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="771.8" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (15 samples, 0.09%)</title><rect x="768.9" y="227.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="771.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (51 samples, 0.32%)</title><rect x="770.0" y="243.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (21 samples, 0.13%)</title><rect x="772.2" y="227.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="775.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (9 samples, 0.06%)</title><rect x="772.2" y="211.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="775.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.06%)</title><rect x="772.2" y="195.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="775.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.06%)</title><rect x="772.2" y="179.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="775.2" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="772.2" y="163.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="775.2" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="772.2" y="147.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="775.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="772.2" y="131.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="775.2" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="772.2" y="115.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="775.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (12 samples, 0.07%)</title><rect x="772.9" y="211.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (356 samples, 2.22%)</title><rect x="773.8" y="259.0" width="26.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="776.8" y="270.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (356 samples, 2.22%)</title><rect x="773.8" y="243.0" width="26.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="776.8" y="254.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (352 samples, 2.19%)</title><rect x="774.1" y="227.0" width="25.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="777.1" y="238.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (9 samples, 0.06%)</title><rect x="776.3" y="211.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="779.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (8 samples, 0.05%)</title><rect x="776.4" y="195.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (8 samples, 0.05%)</title><rect x="776.4" y="179.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="779.4" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (8 samples, 0.05%)</title><rect x="776.4" y="163.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="779.4" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (12 samples, 0.07%)</title><rect x="776.9" y="211.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (11 samples, 0.07%)</title><rect x="776.9" y="195.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="779.9" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLongUnaligned (11 samples, 0.07%)</title><rect x="776.9" y="179.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="779.9" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (7 samples, 0.04%)</title><rect x="777.2" y="163.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="780.2" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (53 samples, 0.33%)</title><rect x="777.8" y="211.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.8" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (19 samples, 0.12%)</title><rect x="778.3" y="195.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="781.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (24 samples, 0.15%)</title><rect x="780.0" y="195.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="783.0" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (24 samples, 0.15%)</title><rect x="780.0" y="179.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="783.0" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (22 samples, 0.14%)</title><rect x="780.1" y="163.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="783.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.14%)</title><rect x="780.1" y="147.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.14%)</title><rect x="780.1" y="131.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="783.1" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (21 samples, 0.13%)</title><rect x="780.2" y="115.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="783.2" y="126.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.03%)</title><rect x="780.8" y="99.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="783.8" y="110.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (5 samples, 0.03%)</title><rect x="780.8" y="83.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="783.8" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="781.3" y="99.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="784.3" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="781.3" y="83.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="784.3" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="781.3" y="67.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="784.3" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="781.3" y="51.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.3" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (45 samples, 0.28%)</title><rect x="781.7" y="211.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="784.7" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (43 samples, 0.27%)</title><rect x="781.9" y="195.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="784.9" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (43 samples, 0.27%)</title><rect x="781.9" y="179.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.9" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="782.1" y="163.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="785.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="782.1" y="147.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="782.1" y="131.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="785.1" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="782.4" y="115.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="785.4" y="126.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (8 samples, 0.05%)</title><rect x="783.8" y="99.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="786.8" y="110.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (4 samples, 0.02%)</title><rect x="784.1" y="83.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="787.1" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.04%)</title><rect x="784.6" y="99.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="787.6" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.04%)</title><rect x="784.6" y="83.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="787.6" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.04%)</title><rect x="784.6" y="67.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.6" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.04%)</title><rect x="784.6" y="51.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.6" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectIntBufferS.get (18 samples, 0.11%)</title><rect x="785.0" y="211.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="788.0" y="222.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (14 samples, 0.09%)</title><rect x="785.0" y="195.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="788.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (171 samples, 1.06%)</title><rect x="786.5" y="211.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="789.5" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (8 samples, 0.05%)</title><rect x="787.7" y="195.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="790.7" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.02%)</title><rect x="787.7" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.7" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (89 samples, 0.55%)</title><rect x="788.2" y="195.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="791.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (83 samples, 0.52%)</title><rect x="788.7" y="179.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.7" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (83 samples, 0.52%)</title><rect x="788.7" y="163.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.7" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (81 samples, 0.50%)</title><rect x="788.8" y="147.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="791.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (81 samples, 0.50%)</title><rect x="788.8" y="131.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (81 samples, 0.50%)</title><rect x="788.8" y="115.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.8" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (49 samples, 0.30%)</title><rect x="791.2" y="99.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="794.2" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (25 samples, 0.16%)</title><rect x="791.4" y="83.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.4" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (25 samples, 0.16%)</title><rect x="791.4" y="67.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.4" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (25 samples, 0.16%)</title><rect x="791.4" y="51.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.4" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (24 samples, 0.15%)</title><rect x="791.5" y="35.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="794.5" y="46.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.13%)</title><rect x="793.2" y="83.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.2" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.13%)</title><rect x="793.2" y="67.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="796.2" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (21 samples, 0.13%)</title><rect x="793.2" y="51.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.2" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (48 samples, 0.30%)</title><rect x="794.8" y="195.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="797.8" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (40 samples, 0.25%)</title><rect x="795.4" y="179.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.4" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="795.4" y="163.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="798.4" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="795.4" y="147.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="795.4" y="131.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="798.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="795.4" y="115.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="798.4" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (28 samples, 0.17%)</title><rect x="796.3" y="99.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="799.3" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="796.3" y="83.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="799.3" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="796.3" y="67.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="799.3" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.03%)</title><rect x="796.3" y="51.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="799.3" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.02%)</title><rect x="796.3" y="35.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="799.3" y="46.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (23 samples, 0.14%)</title><rect x="796.6" y="83.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="799.6" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (23 samples, 0.14%)</title><rect x="796.6" y="67.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.6" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (23 samples, 0.14%)</title><rect x="796.6" y="51.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="799.6" y="62.0"></text>
</g>
<g>
<title>java/nio/DirectIntBufferS.get (4 samples, 0.02%)</title><rect x="798.3" y="195.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="801.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getInt (4 samples, 0.02%)</title><rect x="798.3" y="179.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (12 samples, 0.07%)</title><rect x="799.0" y="211.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (695 samples, 4.32%)</title><rect x="799.9" y="275.0" width="51.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="802.9" y="286.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (690 samples, 4.29%)</title><rect x="800.3" y="259.0" width="50.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.3" y="270.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (502 samples, 3.12%)</title><rect x="802.3" y="243.0" width="36.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="805.3" y="254.0">jav..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (471 samples, 2.93%)</title><rect x="803.4" y="227.0" width="34.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.4" y="238.0">ja..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="826.8" y="211.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="829.8" y="222.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="826.8" y="195.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="829.8" y="206.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="826.8" y="179.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="829.8" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (79 samples, 0.49%)</title><rect x="827.2" y="211.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="830.2" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (51 samples, 0.32%)</title><rect x="827.2" y="195.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="830.2" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (28 samples, 0.17%)</title><rect x="830.9" y="195.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="833.9" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (4 samples, 0.02%)</title><rect x="833.0" y="211.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="836.0" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (18 samples, 0.11%)</title><rect x="833.3" y="211.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="836.3" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (47 samples, 0.29%)</title><rect x="834.6" y="211.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="837.6" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (14 samples, 0.09%)</title><rect x="838.0" y="227.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.04%)</title><rect x="838.0" y="211.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="841.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (8 samples, 0.05%)</title><rect x="838.5" y="211.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (160 samples, 1.00%)</title><rect x="839.2" y="243.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="842.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (131 samples, 0.82%)</title><rect x="840.0" y="227.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="843.0" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (131 samples, 0.82%)</title><rect x="840.0" y="211.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="843.0" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (4 samples, 0.02%)</title><rect x="840.8" y="195.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="843.8" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="841.3" y="195.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="844.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (110 samples, 0.68%)</title><rect x="841.6" y="195.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="844.6" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (82 samples, 0.51%)</title><rect x="843.6" y="179.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.6" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (51 samples, 0.32%)</title><rect x="845.9" y="163.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="848.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (51 samples, 0.32%)</title><rect x="845.9" y="147.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="848.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (51 samples, 0.32%)</title><rect x="845.9" y="131.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="848.9" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (19 samples, 0.12%)</title><rect x="848.2" y="115.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="851.2" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="848.7" y="99.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="851.7" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="848.7" y="83.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="851.7" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.03%)</title><rect x="848.7" y="67.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="851.7" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.03%)</title><rect x="848.7" y="51.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.7" y="62.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.05%)</title><rect x="849.0" y="99.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.0" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.05%)</title><rect x="849.0" y="83.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.0" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.05%)</title><rect x="849.0" y="67.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="852.0" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.05%)</title><rect x="849.0" y="51.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.0" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (18 samples, 0.11%)</title><rect x="849.6" y="227.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (16 samples, 0.10%)</title><rect x="849.8" y="211.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.8" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.09%)</title><rect x="849.8" y="195.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.8" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.09%)</title><rect x="849.8" y="179.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.8" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.09%)</title><rect x="849.8" y="163.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.8" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.04%)</title><rect x="850.3" y="147.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="853.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (35 samples, 0.22%)</title><rect x="850.9" y="387.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="853.9" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (34 samples, 0.21%)</title><rect x="851.0" y="371.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.05%)</title><rect x="852.5" y="355.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="855.5" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.03%)</title><rect x="852.5" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.5" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.02%)</title><rect x="853.2" y="355.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (170 samples, 1.06%)</title><rect x="853.5" y="387.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="856.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (169 samples, 1.05%)</title><rect x="853.6" y="371.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (163 samples, 1.01%)</title><rect x="853.7" y="355.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="856.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (150 samples, 0.93%)</title><rect x="854.6" y="339.0" width="11.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="857.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (140 samples, 0.87%)</title><rect x="855.4" y="323.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (138 samples, 0.86%)</title><rect x="855.5" y="307.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="858.5" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (98 samples, 0.61%)</title><rect x="858.4" y="291.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="861.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (91 samples, 0.57%)</title><rect x="859.0" y="275.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="862.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (88 samples, 0.55%)</title><rect x="859.2" y="259.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="862.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (69 samples, 0.43%)</title><rect x="860.6" y="243.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="863.6" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (21 samples, 0.13%)</title><rect x="863.0" y="227.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="866.0" y="238.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (18 samples, 0.11%)</title><rect x="863.2" y="211.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="866.2" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.06%)</title><rect x="864.5" y="227.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="867.5" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.04%)</title><rect x="864.8" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="867.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.04%)</title><rect x="864.8" y="195.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="867.8" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.04%)</title><rect x="864.8" y="179.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="867.8" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="865.3" y="227.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.3" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.02%)</title><rect x="865.3" y="211.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="868.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="865.3" y="195.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="868.3" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="865.3" y="179.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="868.3" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.03%)</title><rect x="865.6" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="868.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (5 samples, 0.03%)</title><rect x="865.6" y="339.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="868.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.03%)</title><rect x="865.6" y="323.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="868.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.03%)</title><rect x="865.6" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.03%)</title><rect x="865.6" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="868.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (7 samples, 0.04%)</title><rect x="866.1" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="869.1" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6 samples, 0.04%)</title><rect x="866.1" y="499.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="869.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.04%)</title><rect x="866.1" y="483.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="869.1" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (5 samples, 0.03%)</title><rect x="866.1" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="869.1" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (5 samples, 0.03%)</title><rect x="866.1" y="451.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="869.1" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (5 samples, 0.03%)</title><rect x="866.1" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="869.1" y="446.0"></text>
</g>
<g>
<title>__send (5 samples, 0.03%)</title><rect x="866.1" y="419.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="869.1" y="430.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="403.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="869.1" y="414.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="387.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="869.1" y="398.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="371.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="869.1" y="382.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="355.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="869.1" y="366.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="339.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="869.1" y="350.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="323.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="869.1" y="334.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="307.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="869.1" y="318.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="291.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="869.1" y="302.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="275.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="869.1" y="286.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="866.1" y="259.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="869.1" y="270.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="243.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="869.2" y="254.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="227.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="869.2" y="238.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="211.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="869.2" y="222.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="195.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="869.2" y="206.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="179.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="869.2" y="190.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="163.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="869.2" y="174.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="147.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="869.2" y="158.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="131.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="869.2" y="142.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="115.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="869.2" y="126.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="866.2" y="99.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="869.2" y="110.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=32106] (3,890 samples, 24.20%)</title><rect x="866.6" y="659.0" width="285.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="869.6" y="670.0">[NIO Selector #3 tid=32106]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (35 samples, 0.22%)</title><rect x="866.7" y="643.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="869.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (31 samples, 0.19%)</title><rect x="866.9" y="627.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="869.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (31 samples, 0.19%)</title><rect x="866.9" y="611.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="869.9" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (30 samples, 0.19%)</title><rect x="866.9" y="595.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="869.9" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (24 samples, 0.15%)</title><rect x="867.1" y="579.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="870.1" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (13 samples, 0.08%)</title><rect x="867.4" y="563.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="870.4" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (10 samples, 0.06%)</title><rect x="867.6" y="547.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="870.6" y="558.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (4 samples, 0.02%)</title><rect x="867.9" y="531.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="870.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (4 samples, 0.02%)</title><rect x="867.9" y="515.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="870.9" y="526.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (4 samples, 0.02%)</title><rect x="868.6" y="563.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="871.6" y="574.0"></text>
</g>
<g>
<title>[unknown_Java] (613 samples, 3.81%)</title><rect x="869.4" y="643.0" width="45.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="872.4" y="654.0">[unk..</text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="914.0" y="627.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="917.0" y="638.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="914.0" y="611.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="917.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="914.0" y="595.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="917.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="914.2" y="579.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="917.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="914.2" y="563.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="917.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="914.2" y="547.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="917.2" y="558.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,237 samples, 20.14%)</title><rect x="914.5" y="643.0" width="237.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="917.5" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (3,237 samples, 20.14%)</title><rect x="914.5" y="627.0" width="237.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="917.5" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,237 samples, 20.14%)</title><rect x="914.5" y="611.0" width="237.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="917.5" y="622.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,237 samples, 20.14%)</title><rect x="914.5" y="595.0" width="237.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="917.5" y="606.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,236 samples, 20.13%)</title><rect x="914.5" y="579.0" width="237.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="917.5" y="590.0">one/nio/http/HttpSession.handle..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,236 samples, 20.13%)</title><rect x="914.5" y="563.0" width="237.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="917.5" y="574.0">one/nio/http/HttpServer.handleR..</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (3,236 samples, 20.13%)</title><rect x="914.5" y="547.0" width="237.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="917.5" y="558.0">RequestHandler2_entities.handle..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/ShardedService.entities (3,236 samples, 20.13%)</title><rect x="914.5" y="531.0" width="237.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="917.5" y="542.0">ru/mail/polis/service/igorlo/Sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (3,231 samples, 20.10%)</title><rect x="914.5" y="515.0" width="237.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="917.5" y="526.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (3,228 samples, 20.08%)</title><rect x="914.5" y="499.0" width="237.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="917.5" y="510.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (3,228 samples, 20.08%)</title><rect x="914.5" y="483.0" width="237.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="917.5" y="494.0">ru/mail/polis/dao/Iters$UntilIt..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3,228 samples, 20.08%)</title><rect x="914.5" y="467.0" width="237.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="917.5" y="478.0">com/google/common/collect/Trans..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3,228 samples, 20.08%)</title><rect x="914.5" y="451.0" width="237.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="917.5" y="462.0">com/google/common/collect/Abstr..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3,228 samples, 20.08%)</title><rect x="914.5" y="435.0" width="237.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="917.5" y="446.0">com/google/common/collect/Abstr..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3,227 samples, 20.08%)</title><rect x="914.5" y="419.0" width="237.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="917.5" y="430.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,211 samples, 19.98%)</title><rect x="915.6" y="403.0" width="235.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="918.6" y="414.0">ru/mail/polis/dao/Iters$Collaps..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,984 samples, 18.57%)</title><rect x="918.1" y="387.0" width="219.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="921.1" y="398.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (34 samples, 0.21%)</title><rect x="920.0" y="371.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="923.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.hasNext (6 samples, 0.04%)</title><rect x="922.1" y="355.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="925.1" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (29 samples, 0.18%)</title><rect x="922.5" y="371.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="925.5" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,627 samples, 10.12%)</title><rect x="924.7" y="371.0" width="119.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.7" y="382.0">java/util/Abstr..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,625 samples, 10.11%)</title><rect x="924.8" y="355.0" width="119.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.8" y="366.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,564 samples, 9.73%)</title><rect x="929.3" y="339.0" width="114.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="932.3" y="350.0">java/util/Prio..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,490 samples, 9.27%)</title><rect x="934.0" y="323.0" width="109.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="937.0" y="334.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,474 samples, 9.17%)</title><rect x="935.2" y="307.0" width="108.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="938.2" y="318.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (21 samples, 0.13%)</title><rect x="944.2" y="291.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="947.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (1,330 samples, 8.28%)</title><rect x="945.7" y="291.0" width="97.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="948.7" y="302.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,323 samples, 8.23%)</title><rect x="946.2" y="275.0" width="97.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="949.2" y="286.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (919 samples, 5.72%)</title><rect x="946.5" y="259.0" width="67.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.5" y="270.0">java/ni..</text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.04%)</title><rect x="948.9" y="243.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="951.9" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (13 samples, 0.08%)</title><rect x="949.3" y="243.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="952.3" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (837 samples, 5.21%)</title><rect x="950.3" y="243.0" width="61.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="953.3" y="254.0">java/n..</text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="993.4" y="227.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="996.4" y="238.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="993.4" y="211.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="996.4" y="222.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="993.4" y="195.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="996.4" y="206.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="993.5" y="179.0" width="0.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="996.5" y="190.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="993.5" y="163.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="996.5" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (183 samples, 1.14%)</title><rect x="993.7" y="227.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="996.7" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (103 samples, 0.64%)</title><rect x="993.7" y="211.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="996.7" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (80 samples, 0.50%)</title><rect x="1001.3" y="211.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1004.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (44 samples, 0.27%)</title><rect x="1007.3" y="227.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1010.3" y="238.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (16 samples, 0.10%)</title><rect x="1010.5" y="227.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1013.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (22 samples, 0.14%)</title><rect x="1011.7" y="243.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1014.7" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (17 samples, 0.11%)</title><rect x="1011.7" y="227.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1014.7" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (5 samples, 0.03%)</title><rect x="1013.0" y="227.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1016.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.06%)</title><rect x="1013.4" y="243.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1016.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (400 samples, 2.49%)</title><rect x="1014.0" y="259.0" width="29.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1017.0" y="270.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (300 samples, 1.87%)</title><rect x="1017.8" y="243.0" width="22.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1020.8" y="254.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (300 samples, 1.87%)</title><rect x="1017.8" y="227.0" width="22.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1020.8" y="238.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (284 samples, 1.77%)</title><rect x="1018.9" y="211.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1021.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (279 samples, 1.74%)</title><rect x="1019.3" y="195.0" width="20.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1022.3" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (257 samples, 1.60%)</title><rect x="1020.9" y="179.0" width="18.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1023.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (253 samples, 1.57%)</title><rect x="1021.2" y="163.0" width="18.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1024.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (237 samples, 1.47%)</title><rect x="1022.4" y="147.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1025.4" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (185 samples, 1.15%)</title><rect x="1026.2" y="131.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1029.2" y="142.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1027.6" y="115.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1030.6" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (32 samples, 0.20%)</title><rect x="1028.1" y="115.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1031.1" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (29 samples, 0.18%)</title><rect x="1028.3" y="99.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1031.3" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (25 samples, 0.16%)</title><rect x="1028.6" y="83.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1031.6" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (25 samples, 0.16%)</title><rect x="1028.6" y="67.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1031.6" y="78.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (127 samples, 0.79%)</title><rect x="1030.5" y="115.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1033.5" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (17 samples, 0.11%)</title><rect x="1038.5" y="99.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1041.5" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (17 samples, 0.11%)</title><rect x="1038.5" y="83.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1041.5" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (17 samples, 0.11%)</title><rect x="1038.5" y="67.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1041.5" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (31 samples, 0.19%)</title><rect x="1039.8" y="243.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1042.8" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (23 samples, 0.14%)</title><rect x="1040.4" y="227.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1043.4" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (23 samples, 0.14%)</title><rect x="1040.4" y="211.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1043.4" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (23 samples, 0.14%)</title><rect x="1040.4" y="195.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1043.4" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (19 samples, 0.12%)</title><rect x="1040.7" y="179.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1043.7" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (18 samples, 0.11%)</title><rect x="1042.1" y="243.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1045.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (10 samples, 0.06%)</title><rect x="1043.4" y="323.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1046.4" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,267 samples, 7.88%)</title><rect x="1044.1" y="371.0" width="93.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1047.1" y="382.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,265 samples, 7.87%)</title><rect x="1044.3" y="355.0" width="92.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1047.3" y="366.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (11 samples, 0.07%)</title><rect x="1044.5" y="339.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1047.5" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,251 samples, 7.78%)</title><rect x="1045.3" y="339.0" width="91.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1048.3" y="350.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,248 samples, 7.77%)</title><rect x="1045.5" y="323.0" width="91.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1048.5" y="334.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,228 samples, 7.64%)</title><rect x="1047.0" y="307.0" width="90.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1050.0" y="318.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,223 samples, 7.61%)</title><rect x="1047.3" y="291.0" width="89.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1050.3" y="302.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (474 samples, 2.95%)</title><rect x="1052.8" y="275.0" width="34.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1055.8" y="286.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (143 samples, 0.89%)</title><rect x="1053.5" y="259.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1056.5" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (43 samples, 0.27%)</title><rect x="1055.7" y="243.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1058.7" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (33 samples, 0.21%)</title><rect x="1055.9" y="227.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1058.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (32 samples, 0.20%)</title><rect x="1056.0" y="211.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1059.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (30 samples, 0.19%)</title><rect x="1056.2" y="195.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1059.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (28 samples, 0.17%)</title><rect x="1056.3" y="179.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1059.3" y="190.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5 samples, 0.03%)</title><rect x="1058.5" y="227.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1061.5" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (5 samples, 0.03%)</title><rect x="1058.5" y="211.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1061.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (16 samples, 0.10%)</title><rect x="1058.9" y="243.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.9" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (16 samples, 0.10%)</title><rect x="1058.9" y="227.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1061.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (54 samples, 0.34%)</title><rect x="1060.0" y="243.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1063.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (16 samples, 0.10%)</title><rect x="1062.8" y="227.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1065.8" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.05%)</title><rect x="1062.8" y="211.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1065.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.05%)</title><rect x="1062.8" y="195.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1065.8" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.05%)</title><rect x="1062.8" y="179.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1065.8" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="1062.8" y="163.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1065.8" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="1062.8" y="147.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1065.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="1062.8" y="131.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1065.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="1062.8" y="115.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1065.8" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.05%)</title><rect x="1063.4" y="211.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1066.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (321 samples, 2.00%)</title><rect x="1064.0" y="259.0" width="23.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1067.0" y="270.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$1.next (321 samples, 2.00%)</title><rect x="1064.0" y="243.0" width="23.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1067.0" y="254.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getRowAt (317 samples, 1.97%)</title><rect x="1064.3" y="227.0" width="23.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1067.3" y="238.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (9 samples, 0.06%)</title><rect x="1066.4" y="211.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1069.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (8 samples, 0.05%)</title><rect x="1066.4" y="195.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1069.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (8 samples, 0.05%)</title><rect x="1066.4" y="179.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1069.4" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (7 samples, 0.04%)</title><rect x="1066.5" y="163.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1069.5" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (7 samples, 0.04%)</title><rect x="1067.0" y="211.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (6 samples, 0.04%)</title><rect x="1067.1" y="195.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1070.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLongUnaligned (6 samples, 0.04%)</title><rect x="1067.1" y="179.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.1" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (5 samples, 0.03%)</title><rect x="1067.2" y="163.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1070.2" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (63 samples, 0.39%)</title><rect x="1067.5" y="211.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.5" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (22 samples, 0.14%)</title><rect x="1067.8" y="195.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.8" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (35 samples, 0.22%)</title><rect x="1069.6" y="195.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1072.6" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (35 samples, 0.22%)</title><rect x="1069.6" y="179.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1072.6" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="1069.7" y="163.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1072.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="1069.7" y="147.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1072.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="1069.7" y="131.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1072.7" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (32 samples, 0.20%)</title><rect x="1069.8" y="115.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1072.8" y="126.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (9 samples, 0.06%)</title><rect x="1071.2" y="99.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1074.2" y="110.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (6 samples, 0.04%)</title><rect x="1071.4" y="83.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1074.4" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (43 samples, 0.27%)</title><rect x="1072.2" y="211.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1075.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (43 samples, 0.27%)</title><rect x="1072.2" y="195.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1075.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (43 samples, 0.27%)</title><rect x="1072.2" y="179.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1075.2" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="1072.4" y="163.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1075.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="1072.4" y="147.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1075.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (40 samples, 0.25%)</title><rect x="1072.4" y="131.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1075.4" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="1072.7" y="115.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1075.7" y="126.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.03%)</title><rect x="1074.9" y="99.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1077.9" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectIntBufferS.get (19 samples, 0.12%)</title><rect x="1075.3" y="211.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1078.3" y="222.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (15 samples, 0.09%)</title><rect x="1075.3" y="195.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1078.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.getKeyAt (135 samples, 0.84%)</title><rect x="1077.1" y="211.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1080.1" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (7 samples, 0.04%)</title><rect x="1078.2" y="195.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1081.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (5 samples, 0.03%)</title><rect x="1078.3" y="179.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1081.3" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (5 samples, 0.03%)</title><rect x="1078.3" y="163.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1081.3" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (5 samples, 0.03%)</title><rect x="1078.3" y="147.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1081.3" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (62 samples, 0.39%)</title><rect x="1078.7" y="195.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1081.7" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (56 samples, 0.35%)</title><rect x="1079.1" y="179.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1082.1" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (55 samples, 0.34%)</title><rect x="1079.2" y="163.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1082.2" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (51 samples, 0.32%)</title><rect x="1079.5" y="147.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1082.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (51 samples, 0.32%)</title><rect x="1079.5" y="131.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1082.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (51 samples, 0.32%)</title><rect x="1079.5" y="115.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1082.5" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="1080.8" y="99.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1083.8" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (20 samples, 0.12%)</title><rect x="1080.8" y="83.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1083.8" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (20 samples, 0.12%)</title><rect x="1080.8" y="67.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1083.8" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (20 samples, 0.12%)</title><rect x="1080.8" y="51.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1083.8" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (19 samples, 0.12%)</title><rect x="1080.9" y="35.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1083.9" y="46.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.08%)</title><rect x="1082.3" y="83.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1085.3" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.08%)</title><rect x="1082.3" y="67.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1085.3" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (13 samples, 0.08%)</title><rect x="1082.3" y="51.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1085.3" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="1082.9" y="35.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1085.9" y="46.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (43 samples, 0.27%)</title><rect x="1083.2" y="195.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1086.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (38 samples, 0.24%)</title><rect x="1083.6" y="179.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1086.6" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (38 samples, 0.24%)</title><rect x="1083.6" y="163.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1086.6" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="1083.8" y="147.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1086.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="1083.8" y="131.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1086.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (36 samples, 0.22%)</title><rect x="1083.8" y="115.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1086.8" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (27 samples, 0.17%)</title><rect x="1084.4" y="99.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1087.4" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (22 samples, 0.14%)</title><rect x="1084.8" y="83.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1087.8" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (22 samples, 0.14%)</title><rect x="1084.8" y="67.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1087.8" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (22 samples, 0.14%)</title><rect x="1084.8" y="51.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1087.8" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.04%)</title><rect x="1086.0" y="35.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1089.0" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (8 samples, 0.05%)</title><rect x="1087.0" y="211.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1090.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$64/693383183.compare (675 samples, 4.20%)</title><rect x="1087.6" y="275.0" width="49.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1090.6" y="286.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (671 samples, 4.17%)</title><rect x="1087.9" y="259.0" width="49.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1090.9" y="270.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (459 samples, 2.86%)</title><rect x="1090.1" y="243.0" width="33.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1093.1" y="254.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.04%)</title><rect x="1091.3" y="227.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1094.3" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (12 samples, 0.07%)</title><rect x="1091.7" y="227.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1094.7" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (409 samples, 2.54%)</title><rect x="1092.6" y="227.0" width="30.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1095.6" y="238.0">ja..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="1114.5" y="211.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1117.5" y="222.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="1114.5" y="195.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1117.5" y="206.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="1114.5" y="179.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1117.5" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (68 samples, 0.42%)</title><rect x="1114.8" y="211.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1117.8" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (36 samples, 0.22%)</title><rect x="1114.8" y="195.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1117.8" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (32 samples, 0.20%)</title><rect x="1117.5" y="195.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1120.5" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.06%)</title><rect x="1120.0" y="211.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1123.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (27 samples, 0.17%)</title><rect x="1120.6" y="211.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1123.6" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (15 samples, 0.09%)</title><rect x="1122.6" y="227.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1125.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.06%)</title><rect x="1122.6" y="211.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1125.6" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (6 samples, 0.04%)</title><rect x="1123.3" y="211.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1126.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (181 samples, 1.13%)</title><rect x="1123.8" y="243.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1126.8" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (146 samples, 0.91%)</title><rect x="1125.3" y="227.0" width="10.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1128.3" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (146 samples, 0.91%)</title><rect x="1125.3" y="211.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1128.3" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.02%)</title><rect x="1127.0" y="195.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1130.0" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.04%)</title><rect x="1127.3" y="195.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1130.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (112 samples, 0.70%)</title><rect x="1127.8" y="195.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1130.8" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (85 samples, 0.53%)</title><rect x="1129.8" y="179.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1132.8" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (53 samples, 0.33%)</title><rect x="1132.1" y="163.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1135.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (53 samples, 0.33%)</title><rect x="1132.1" y="147.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1135.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (53 samples, 0.33%)</title><rect x="1132.1" y="131.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1135.1" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (21 samples, 0.13%)</title><rect x="1134.5" y="115.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1137.5" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.04%)</title><rect x="1135.1" y="99.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.1" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.04%)</title><rect x="1135.1" y="83.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1138.1" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.04%)</title><rect x="1135.1" y="67.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1138.1" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.04%)</title><rect x="1135.1" y="51.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1138.1" y="62.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="1135.5" y="99.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1138.5" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="1135.5" y="83.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1138.5" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.04%)</title><rect x="1135.5" y="67.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1138.5" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.04%)</title><rect x="1135.5" y="51.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1138.5" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (15 samples, 0.09%)</title><rect x="1136.0" y="227.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1139.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (11 samples, 0.07%)</title><rect x="1136.3" y="211.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1139.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.07%)</title><rect x="1136.3" y="195.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1139.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.07%)</title><rect x="1136.3" y="179.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1139.3" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.07%)</title><rect x="1136.3" y="163.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1139.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (29 samples, 0.18%)</title><rect x="1137.1" y="387.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1140.1" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (29 samples, 0.18%)</title><rect x="1137.1" y="371.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1140.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.04%)</title><rect x="1138.4" y="355.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1141.4" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.02%)</title><rect x="1138.4" y="339.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1141.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Utilities$$Lambda$66/1069096920.apply (164 samples, 1.02%)</title><rect x="1139.3" y="387.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1142.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (162 samples, 1.01%)</title><rect x="1139.4" y="371.0" width="11.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1142.4" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (156 samples, 0.97%)</title><rect x="1139.5" y="355.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1142.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (145 samples, 0.90%)</title><rect x="1140.3" y="339.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1143.3" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (138 samples, 0.86%)</title><rect x="1140.8" y="323.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1143.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (138 samples, 0.86%)</title><rect x="1140.8" y="307.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1143.8" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (100 samples, 0.62%)</title><rect x="1143.6" y="291.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1146.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (92 samples, 0.57%)</title><rect x="1144.2" y="275.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1147.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (91 samples, 0.57%)</title><rect x="1144.3" y="259.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1147.3" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (75 samples, 0.47%)</title><rect x="1145.4" y="243.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1148.4" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (20 samples, 0.12%)</title><rect x="1148.3" y="227.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1151.3" y="238.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (15 samples, 0.09%)</title><rect x="1148.7" y="211.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1151.7" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.06%)</title><rect x="1149.8" y="227.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1152.8" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.06%)</title><rect x="1149.8" y="211.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1152.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.06%)</title><rect x="1149.8" y="195.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1152.8" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.06%)</title><rect x="1149.8" y="179.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1152.8" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="1150.5" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1153.5" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="1150.5" y="211.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1153.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="1150.5" y="195.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.5" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="1150.5" y="179.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1153.5" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.03%)</title><rect x="1150.9" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1153.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.02%)</title><rect x="1151.0" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1154.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="1151.0" y="323.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1154.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="1151.0" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1154.0" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="1151.0" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1154.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (5 samples, 0.03%)</title><rect x="1151.7" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1154.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (4 samples, 0.02%)</title><rect x="1151.7" y="499.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1154.7" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.02%)</title><rect x="1151.7" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1154.7" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.02%)</title><rect x="1151.7" y="467.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1154.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (4 samples, 0.02%)</title><rect x="1151.7" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1154.7" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (4 samples, 0.02%)</title><rect x="1151.7" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1154.7" y="446.0"></text>
</g>
<g>
<title>[tid=32085] (59 samples, 0.37%)</title><rect x="1152.2" y="659.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1155.2" y="670.0"></text>
</g>
<g>
<title>start_thread (56 samples, 0.35%)</title><rect x="1152.4" y="643.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1155.4" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (56 samples, 0.35%)</title><rect x="1152.4" y="627.0" width="4.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1155.4" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (56 samples, 0.35%)</title><rect x="1152.4" y="611.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.4" y="622.0"></text>
</g>
<g>
<title>GangWorker::loop() (56 samples, 0.35%)</title><rect x="1152.4" y="595.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.4" y="606.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (46 samples, 0.29%)</title><rect x="1152.6" y="579.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="590.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (19 samples, 0.12%)</title><rect x="1152.6" y="563.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="574.0"></text>
</g>
<g>
<title>SpinPause (12 samples, 0.07%)</title><rect x="1153.1" y="547.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1156.1" y="558.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (7 samples, 0.04%)</title><rect x="1154.1" y="563.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.1" y="574.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (7 samples, 0.04%)</title><rect x="1154.1" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.1" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (7 samples, 0.04%)</title><rect x="1154.1" y="531.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.1" y="542.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (7 samples, 0.04%)</title><rect x="1154.1" y="515.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.1" y="526.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.04%)</title><rect x="1154.1" y="499.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.1" y="510.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (5 samples, 0.03%)</title><rect x="1154.1" y="483.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.1" y="494.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (17 samples, 0.11%)</title><rect x="1154.7" y="563.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.7" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (16 samples, 0.10%)</title><rect x="1154.8" y="547.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.8" y="558.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (15 samples, 0.09%)</title><rect x="1154.8" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.8" y="542.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (14 samples, 0.09%)</title><rect x="1154.8" y="515.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.8" y="526.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (6 samples, 0.04%)</title><rect x="1154.9" y="499.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.9" y="510.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (4 samples, 0.02%)</title><rect x="1155.0" y="483.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="494.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (4 samples, 0.02%)</title><rect x="1156.2" y="579.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.2" y="590.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (4 samples, 0.02%)</title><rect x="1156.2" y="563.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.2" y="574.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.67] (4 samples, 0.02%)</title><rect x="1156.2" y="547.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.2" y="558.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.02%)</title><rect x="1156.2" y="531.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="542.0"></text>
</g>
<g>
<title>[tid=32090] (228 samples, 1.42%)</title><rect x="1156.6" y="659.0" width="16.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1159.6" y="670.0"></text>
</g>
<g>
<title>__GI___vsnprintf_chk (9 samples, 0.06%)</title><rect x="1156.8" y="643.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1159.8" y="654.0"></text>
</g>
<g>
<title>vfprintf (6 samples, 0.04%)</title><rect x="1157.0" y="627.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1160.0" y="638.0"></text>
</g>
<g>
<title>start_thread (211 samples, 1.31%)</title><rect x="1157.8" y="643.0" width="15.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1160.8" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (211 samples, 1.31%)</title><rect x="1157.8" y="627.0" width="15.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1160.8" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (211 samples, 1.31%)</title><rect x="1157.8" y="611.0" width="15.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="622.0"></text>
</g>
<g>
<title>VMThread::run() (211 samples, 1.31%)</title><rect x="1157.8" y="595.0" width="15.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.8" y="606.0"></text>
</g>
<g>
<title>VMThread::loop() (211 samples, 1.31%)</title><rect x="1157.8" y="579.0" width="15.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.8" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.03%)</title><rect x="1157.9" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.9" y="574.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.02%)</title><rect x="1158.0" y="547.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.0" y="558.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (105 samples, 0.65%)</title><rect x="1158.3" y="563.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.3" y="574.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (5 samples, 0.03%)</title><rect x="1165.1" y="547.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.1" y="558.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread() (6 samples, 0.04%)</title><rect x="1165.5" y="547.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.5" y="558.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (30 samples, 0.19%)</title><rect x="1166.2" y="563.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="574.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (30 samples, 0.19%)</title><rect x="1166.2" y="547.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="558.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (30 samples, 0.19%)</title><rect x="1166.2" y="531.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.2" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (28 samples, 0.17%)</title><rect x="1166.3" y="515.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.3" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, EvacuationInfo&amp;, unsigned long const*) (4 samples, 0.02%)</title><rect x="1166.4" y="499.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.4" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (8 samples, 0.05%)</title><rect x="1166.7" y="499.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.7" y="510.0"></text>
</g>
<g>
<title>__GI___sched_yield (66 samples, 0.41%)</title><rect x="1168.4" y="563.0" width="4.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1171.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 0.34%)</title><rect x="1169.3" y="547.0" width="4.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1172.3" y="558.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 0.34%)</title><rect x="1169.3" y="531.0" width="4.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1172.3" y="542.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.24%)</title><rect x="1170.4" y="515.0" width="2.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1173.4" y="526.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.24%)</title><rect x="1170.4" y="499.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1173.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.24%)</title><rect x="1170.4" y="483.0" width="2.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1173.4" y="494.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.24%)</title><rect x="1170.4" y="467.0" width="2.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1173.4" y="478.0"></text>
</g>
<g>
<title>[tid=32094] (33 samples, 0.21%)</title><rect x="1173.3" y="659.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1176.3" y="670.0"></text>
</g>
<g>
<title>start_thread (33 samples, 0.21%)</title><rect x="1173.3" y="643.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1176.3" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (33 samples, 0.21%)</title><rect x="1173.3" y="627.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1176.3" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (33 samples, 0.21%)</title><rect x="1173.3" y="611.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.3" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (33 samples, 0.21%)</title><rect x="1173.3" y="595.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (33 samples, 0.21%)</title><rect x="1173.3" y="579.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.3" y="590.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (33 samples, 0.21%)</title><rect x="1173.3" y="563.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.3" y="574.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (33 samples, 0.21%)</title><rect x="1173.3" y="547.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="558.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (32 samples, 0.20%)</title><rect x="1173.3" y="531.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.3" y="542.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (32 samples, 0.20%)</title><rect x="1173.3" y="515.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="526.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 0.11%)</title><rect x="1173.3" y="499.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 0.08%)</title><rect x="1173.7" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 0.05%)</title><rect x="1174.7" y="499.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (8 samples, 0.05%)</title><rect x="1174.7" y="483.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.04%)</title><rect x="1175.2" y="499.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.04%)</title><rect x="1175.2" y="483.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.04%)</title><rect x="1175.2" y="467.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.04%)</title><rect x="1175.2" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.04%)</title><rect x="1175.2" y="435.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.04%)</title><rect x="1175.2" y="419.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="430.0"></text>
</g>
<g>
<title>[tid=32095] (4 samples, 0.02%)</title><rect x="1175.8" y="659.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>start_thread (4 samples, 0.02%)</title><rect x="1175.8" y="643.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1178.8" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.02%)</title><rect x="1175.8" y="627.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1178.8" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.02%)</title><rect x="1175.8" y="611.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.8" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.02%)</title><rect x="1175.8" y="595.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.02%)</title><rect x="1175.8" y="579.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.8" y="590.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (4 samples, 0.02%)</title><rect x="1175.8" y="563.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="574.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (4 samples, 0.02%)</title><rect x="1175.8" y="547.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="558.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.02%)</title><rect x="1175.8" y="531.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="542.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 0.02%)</title><rect x="1175.8" y="515.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="526.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.02%)</title><rect x="1175.8" y="499.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.02%)</title><rect x="1175.8" y="483.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="494.0"></text>
</g>
<g>
<title>[tid=32110] (62 samples, 0.39%)</title><rect x="1176.5" y="659.0" width="4.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1179.5" y="670.0"></text>
</g>
<g>
<title>start_thread (58 samples, 0.36%)</title><rect x="1176.8" y="643.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1179.8" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (58 samples, 0.36%)</title><rect x="1176.8" y="627.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1179.8" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (58 samples, 0.36%)</title><rect x="1176.8" y="611.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="622.0"></text>
</g>
<g>
<title>GangWorker::loop() (58 samples, 0.36%)</title><rect x="1176.8" y="595.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="606.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (47 samples, 0.29%)</title><rect x="1176.8" y="579.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="590.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (19 samples, 0.12%)</title><rect x="1176.9" y="563.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="574.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 0.04%)</title><rect x="1176.9" y="547.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.02%)</title><rect x="1177.1" y="531.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="542.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.06%)</title><rect x="1177.6" y="547.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1180.6" y="558.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.04%)</title><rect x="1178.3" y="563.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="574.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.04%)</title><rect x="1178.3" y="547.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.04%)</title><rect x="1178.3" y="531.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="542.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (6 samples, 0.04%)</title><rect x="1178.3" y="515.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="526.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.03%)</title><rect x="1178.3" y="499.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="510.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (5 samples, 0.03%)</title><rect x="1178.3" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="494.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.02%)</title><rect x="1178.4" y="467.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="478.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (17 samples, 0.11%)</title><rect x="1179.0" y="563.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (14 samples, 0.09%)</title><rect x="1179.1" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="558.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (14 samples, 0.09%)</title><rect x="1179.1" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="542.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (14 samples, 0.09%)</title><rect x="1179.1" y="515.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="526.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (4 samples, 0.02%)</title><rect x="1179.5" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="510.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (4 samples, 0.02%)</title><rect x="1179.5" y="483.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="494.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (9 samples, 0.06%)</title><rect x="1180.4" y="579.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="590.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (9 samples, 0.06%)</title><rect x="1180.4" y="563.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="574.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.67] (7 samples, 0.04%)</title><rect x="1180.5" y="547.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.5" y="558.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (6 samples, 0.04%)</title><rect x="1180.5" y="531.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="542.0"></text>
</g>
<g>
<title>[tid=32111] (61 samples, 0.38%)</title><rect x="1181.0" y="659.0" width="4.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1184.0" y="670.0"></text>
</g>
<g>
<title>start_thread (59 samples, 0.37%)</title><rect x="1181.2" y="643.0" width="4.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1184.2" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (59 samples, 0.37%)</title><rect x="1181.2" y="627.0" width="4.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1184.2" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (59 samples, 0.37%)</title><rect x="1181.2" y="611.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="622.0"></text>
</g>
<g>
<title>GangWorker::loop() (59 samples, 0.37%)</title><rect x="1181.2" y="595.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="606.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (5 samples, 0.03%)</title><rect x="1181.3" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (45 samples, 0.28%)</title><rect x="1181.6" y="579.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 0.09%)</title><rect x="1181.6" y="563.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 0.02%)</title><rect x="1181.6" y="547.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.6" y="558.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.06%)</title><rect x="1182.1" y="547.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1185.1" y="558.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (7 samples, 0.04%)</title><rect x="1182.9" y="563.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="574.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (7 samples, 0.04%)</title><rect x="1182.9" y="547.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 0.02%)</title><rect x="1182.9" y="531.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="542.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (4 samples, 0.02%)</title><rect x="1182.9" y="515.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="526.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.02%)</title><rect x="1182.9" y="499.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="510.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (18 samples, 0.11%)</title><rect x="1183.6" y="563.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (14 samples, 0.09%)</title><rect x="1183.8" y="547.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.8" y="558.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (12 samples, 0.07%)</title><rect x="1183.9" y="531.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.9" y="542.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (12 samples, 0.07%)</title><rect x="1183.9" y="515.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="526.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (5 samples, 0.03%)</title><rect x="1185.2" y="579.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="590.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (5 samples, 0.03%)</title><rect x="1185.2" y="563.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="574.0"></text>
</g>
<g>
<title>[tid=32112] (61 samples, 0.38%)</title><rect x="1185.5" y="659.0" width="4.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.5" y="670.0"></text>
</g>
<g>
<title>start_thread (58 samples, 0.36%)</title><rect x="1185.7" y="643.0" width="4.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1188.7" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (58 samples, 0.36%)</title><rect x="1185.7" y="627.0" width="4.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1188.7" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (58 samples, 0.36%)</title><rect x="1185.7" y="611.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.7" y="622.0"></text>
</g>
<g>
<title>GangWorker::loop() (57 samples, 0.35%)</title><rect x="1185.8" y="595.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="606.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (51 samples, 0.32%)</title><rect x="1185.8" y="579.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.8" y="590.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (22 samples, 0.14%)</title><rect x="1185.8" y="563.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="574.0"></text>
</g>
<g>
<title>SpinPause (18 samples, 0.11%)</title><rect x="1186.1" y="547.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1189.1" y="558.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.04%)</title><rect x="1187.7" y="563.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="574.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (6 samples, 0.04%)</title><rect x="1187.7" y="547.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="558.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (6 samples, 0.04%)</title><rect x="1187.7" y="531.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.7" y="542.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (5 samples, 0.03%)</title><rect x="1187.7" y="515.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (20 samples, 0.12%)</title><rect x="1188.1" y="563.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (17 samples, 0.11%)</title><rect x="1188.1" y="547.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.1" y="558.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (4 samples, 0.02%)</title><rect x="1188.1" y="531.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.1" y="542.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (13 samples, 0.08%)</title><rect x="1188.4" y="531.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.4" y="542.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (13 samples, 0.08%)</title><rect x="1188.4" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.4" y="526.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (4 samples, 0.02%)</title><rect x="1189.7" y="579.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.7" y="590.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (4 samples, 0.02%)</title><rect x="1189.7" y="563.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.7" y="574.0"></text>
</g>
</g>
</svg>
