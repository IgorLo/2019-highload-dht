<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (16,080 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (141 samples, 0.88%)</title><rect x="10.4" y="867.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.4" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (134 samples, 0.83%)</title><rect x="10.9" y="851.0" width="9.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.9" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (128 samples, 0.80%)</title><rect x="11.1" y="835.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.1" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (122 samples, 0.76%)</title><rect x="11.2" y="819.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="830.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (110 samples, 0.68%)</title><rect x="11.6" y="803.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (5 samples, 0.03%)</title><rect x="11.7" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.7" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (102 samples, 0.63%)</title><rect x="12.1" y="787.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.1" y="798.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (4 samples, 0.02%)</title><rect x="12.3" y="771.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (63 samples, 0.39%)</title><rect x="12.9" y="771.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.9" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (58 samples, 0.36%)</title><rect x="12.9" y="755.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.9" y="766.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (22 samples, 0.14%)</title><rect x="12.9" y="739.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.9" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (17 samples, 0.11%)</title><rect x="13.0" y="723.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.0" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (5 samples, 0.03%)</title><rect x="13.0" y="707.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.0" y="718.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (4 samples, 0.02%)</title><rect x="13.7" y="707.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="16.7" y="718.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (22 samples, 0.14%)</title><rect x="15.3" y="739.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.3" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (18 samples, 0.11%)</title><rect x="15.4" y="723.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="18.4" y="734.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (17 samples, 0.11%)</title><rect x="15.5" y="707.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.5" y="718.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (9 samples, 0.06%)</title><rect x="15.7" y="691.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.7" y="702.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (7 samples, 0.04%)</title><rect x="17.8" y="771.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.8" y="782.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (6 samples, 0.04%)</title><rect x="18.3" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (6 samples, 0.04%)</title><rect x="18.3" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="21.3" y="766.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (8 samples, 0.05%)</title><rect x="19.0" y="771.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="22.0" y="782.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (4 samples, 0.02%)</title><rect x="19.7" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="22.7" y="814.0"></text>
</g>
<g>
<title>[not_walkable_Java] (13 samples, 0.08%)</title><rect x="20.9" y="867.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="23.9" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.02%)</title><rect x="21.1" y="851.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="24.1" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (6 samples, 0.04%)</title><rect x="21.4" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="24.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.14%)</title><rect x="21.8" y="867.0" width="1.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="24.8" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 0.03%)</title><rect x="22.0" y="851.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="25.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="22.0" y="835.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="25.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="22.0" y="819.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="25.0" y="830.0"></text>
</g>
<g>
<title>vsnprintf (10 samples, 0.06%)</title><rect x="22.8" y="851.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="25.8" y="862.0"></text>
</g>
<g>
<title>vfprintf (7 samples, 0.04%)</title><rect x="23.0" y="835.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="26.0" y="846.0"></text>
</g>
<g>
<title>[unknown_Java] (384 samples, 2.39%)</title><rect x="23.5" y="867.0" width="28.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="26.5" y="878.0">[u..</text>
</g>
<g>
<title>[unknown] (22 samples, 0.14%)</title><rect x="50.1" y="851.0" width="1.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="53.1" y="862.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (15 samples, 0.09%)</title><rect x="50.1" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="53.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.09%)</title><rect x="50.1" y="819.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="53.1" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (15 samples, 0.09%)</title><rect x="50.1" y="803.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="53.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="51.2" y="835.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="54.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="51.2" y="819.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="54.2" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.03%)</title><rect x="52.4" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.4" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.03%)</title><rect x="52.4" y="851.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.4" y="862.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.03%)</title><rect x="52.4" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.4" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="52.4" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.4" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="52.4" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.4" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.03%)</title><rect x="52.4" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.4" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.03%)</title><rect x="52.4" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.4" y="782.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (15,130 samples, 94.09%)</title><rect x="52.8" y="867.0" width="1110.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.8" y="878.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (15,130 samples, 94.09%)</title><rect x="52.8" y="851.0" width="1110.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.8" y="862.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (15,130 samples, 94.09%)</title><rect x="52.8" y="835.0" width="1110.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.8" y="846.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (15,128 samples, 94.08%)</title><rect x="52.8" y="819.0" width="1110.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.8" y="830.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (15,126 samples, 94.07%)</title><rect x="52.8" y="803.0" width="1110.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="55.8" y="814.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (15,126 samples, 94.07%)</title><rect x="52.8" y="787.0" width="1110.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.8" y="798.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (15,126 samples, 94.07%)</title><rect x="52.8" y="771.0" width="1110.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.8" y="782.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entities (15,126 samples, 94.07%)</title><rect x="52.8" y="755.0" width="1110.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.8" y="766.0">ru/mail/polis/service/igorlo/AsyncService.entities</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (7,271 samples, 45.22%)</title><rect x="52.9" y="739.0" width="533.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.9" y="750.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (6,997 samples, 43.51%)</title><rect x="53.0" y="723.0" width="513.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.0" y="734.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (6,996 samples, 43.51%)</title><rect x="53.1" y="707.0" width="513.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.1" y="718.0">ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt;</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (6,995 samples, 43.50%)</title><rect x="53.1" y="691.0" width="513.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.1" y="702.0">com/google/common/collect/TransformedIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (6,995 samples, 43.50%)</title><rect x="53.1" y="675.0" width="513.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.1" y="686.0">com/google/common/collect/AbstractIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (6,995 samples, 43.50%)</title><rect x="53.1" y="659.0" width="513.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.1" y="670.0">com/google/common/collect/AbstractIterator.tryToComputeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (6,995 samples, 43.50%)</title><rect x="53.1" y="643.0" width="513.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.1" y="654.0">com/google/common/collect/Iterators$5.computeNext</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (6,960 samples, 43.28%)</title><rect x="55.5" y="627.0" width="510.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.5" y="638.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (6,012 samples, 37.39%)</title><rect x="62.6" y="611.0" width="441.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.6" y="622.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (17 samples, 0.11%)</title><rect x="63.9" y="595.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.hasNext (17 samples, 0.11%)</title><rect x="63.9" y="579.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (188 samples, 1.17%)</title><rect x="65.2" y="595.0" width="13.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (187 samples, 1.16%)</title><rect x="65.3" y="579.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (187 samples, 1.16%)</title><rect x="65.3" y="563.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.3" y="574.0"></text>
</g>
<g>
<title>itable stub (57 samples, 0.35%)</title><rect x="67.5" y="547.0" width="4.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="70.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.hasNext (25 samples, 0.16%)</title><rect x="71.6" y="547.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (75 samples, 0.47%)</title><rect x="73.5" y="547.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (62 samples, 0.39%)</title><rect x="74.4" y="531.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="77.4" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (35 samples, 0.22%)</title><rect x="74.9" y="515.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.9" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (35 samples, 0.22%)</title><rect x="74.9" y="499.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.9" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (16 samples, 0.10%)</title><rect x="76.3" y="483.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (12 samples, 0.07%)</title><rect x="76.6" y="467.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.6" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (21 samples, 0.13%)</title><rect x="77.4" y="515.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.4" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,972 samples, 12.26%)</title><rect x="79.0" y="595.0" width="144.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.0" y="606.0">java/util/Abstract..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,972 samples, 12.26%)</title><rect x="79.0" y="579.0" width="144.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.0" y="590.0">java/util/Priority..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,936 samples, 12.04%)</title><rect x="81.6" y="563.0" width="142.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.6" y="574.0">java/util/Priority..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,861 samples, 11.57%)</title><rect x="87.1" y="547.0" width="136.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.1" y="558.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,830 samples, 11.38%)</title><rect x="89.4" y="531.0" width="134.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.4" y="542.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (38 samples, 0.24%)</title><rect x="96.2" y="515.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (15 samples, 0.09%)</title><rect x="97.8" y="499.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (15 samples, 0.09%)</title><rect x="97.8" y="483.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (15 samples, 0.09%)</title><rect x="97.8" y="467.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (15 samples, 0.09%)</title><rect x="97.8" y="451.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="100.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (1,700 samples, 10.57%)</title><rect x="98.9" y="515.0" width="124.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.9" y="526.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,692 samples, 10.52%)</title><rect x="99.5" y="499.0" width="124.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.5" y="510.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (1,692 samples, 10.52%)</title><rect x="99.5" y="483.0" width="124.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.5" y="494.0">java/util/Compa..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,692 samples, 10.52%)</title><rect x="99.5" y="467.0" width="124.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.5" y="478.0">java/util/Compa..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (14 samples, 0.09%)</title><rect x="100.0" y="451.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.0" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (1,672 samples, 10.40%)</title><rect x="101.0" y="451.0" width="122.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.0" y="462.0">java/util/Compa..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,672 samples, 10.40%)</title><rect x="101.0" y="435.0" width="122.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.0" y="446.0">java/util/Compa..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (1,666 samples, 10.36%)</title><rect x="101.4" y="419.0" width="122.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.4" y="430.0">java/util/Compa..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,658 samples, 10.31%)</title><rect x="102.0" y="403.0" width="121.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.0" y="414.0">java/util/Compa..</text>
</g>
<g>
<title>itable stub (37 samples, 0.23%)</title><rect x="104.4" y="387.0" width="2.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="107.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (877 samples, 5.45%)</title><rect x="107.2" y="387.0" width="64.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="110.2" y="398.0">java/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (810 samples, 5.04%)</title><rect x="110.8" y="371.0" width="59.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.8" y="382.0">java/n..</text>
</g>
<g>
<title>java/nio/Buffer.position (20 samples, 0.12%)</title><rect x="114.6" y="355.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.6" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.05%)</title><rect x="115.5" y="339.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="118.5" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (704 samples, 4.38%)</title><rect x="116.1" y="355.0" width="51.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.1" y="366.0">java/..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="135.5" y="339.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="138.5" y="350.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="135.5" y="323.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="138.5" y="334.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="135.5" y="307.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="138.5" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (190 samples, 1.18%)</title><rect x="135.8" y="339.0" width="13.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="138.8" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (70 samples, 0.44%)</title><rect x="143.5" y="323.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (15 samples, 0.09%)</title><rect x="148.6" y="323.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="151.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (20 samples, 0.12%)</title><rect x="149.7" y="339.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (186 samples, 1.16%)</title><rect x="151.2" y="339.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (60 samples, 0.37%)</title><rect x="160.4" y="323.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.4" y="334.0"></text>
</g>
<g>
<title>vtable stub (40 samples, 0.25%)</title><rect x="164.8" y="339.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="167.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (26 samples, 0.16%)</title><rect x="167.8" y="355.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.8" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (17 samples, 0.11%)</title><rect x="168.3" y="339.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.3" y="350.0"></text>
</g>
<g>
<title>vtable stub (7 samples, 0.04%)</title><rect x="169.7" y="355.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="172.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (18 samples, 0.11%)</title><rect x="170.2" y="371.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (704 samples, 4.38%)</title><rect x="171.5" y="387.0" width="51.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.5" y="398.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (697 samples, 4.33%)</title><rect x="172.0" y="371.0" width="51.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="175.0" y="382.0">ru/ma..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (697 samples, 4.33%)</title><rect x="172.0" y="355.0" width="51.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.0" y="366.0">java/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (697 samples, 4.33%)</title><rect x="172.0" y="339.0" width="51.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.0" y="350.0">java/..</text>
</g>
<g>
<title>java/nio/Buffer.capacity (17 samples, 0.11%)</title><rect x="175.3" y="323.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="178.3" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.04%)</title><rect x="176.5" y="323.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="179.5" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.04%)</title><rect x="177.2" y="323.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (619 samples, 3.85%)</title><rect x="177.8" y="323.0" width="45.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.8" y="334.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (610 samples, 3.79%)</title><rect x="178.4" y="307.0" width="44.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.4" y="318.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (600 samples, 3.73%)</title><rect x="179.1" y="291.0" width="44.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.1" y="302.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (600 samples, 3.73%)</title><rect x="179.1" y="275.0" width="44.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.1" y="286.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (600 samples, 3.73%)</title><rect x="179.1" y="259.0" width="44.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.1" y="270.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (417 samples, 2.59%)</title><rect x="190.5" y="243.0" width="30.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.5" y="254.0">ja..</text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="204.4" y="227.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="207.4" y="238.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="204.4" y="211.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="207.4" y="222.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="204.4" y="195.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="207.4" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (78 samples, 0.49%)</title><rect x="204.8" y="227.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.8" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (22 samples, 0.14%)</title><rect x="208.9" y="211.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="211.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (22 samples, 0.14%)</title><rect x="208.9" y="195.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.9" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (22 samples, 0.14%)</title><rect x="208.9" y="179.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.9" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (42 samples, 0.26%)</title><rect x="210.5" y="227.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="213.5" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (24 samples, 0.15%)</title><rect x="211.8" y="211.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (24 samples, 0.15%)</title><rect x="211.8" y="195.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.8" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (24 samples, 0.15%)</title><rect x="211.8" y="179.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.8" y="190.0"></text>
</g>
<g>
<title>vtable stub (103 samples, 0.64%)</title><rect x="213.6" y="227.0" width="7.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="216.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (28 samples, 0.17%)</title><rect x="221.1" y="243.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.compareTo (4 samples, 0.02%)</title><rect x="223.4" y="387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.4" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,803 samples, 23.65%)</title><rect x="223.7" y="595.0" width="279.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.7" y="606.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,803 samples, 23.65%)</title><rect x="223.7" y="579.0" width="279.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.7" y="590.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,803 samples, 23.65%)</title><rect x="223.7" y="563.0" width="279.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.7" y="574.0">java/util/PriorityQueue.siftUp</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,797 samples, 23.61%)</title><rect x="224.1" y="547.0" width="278.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.1" y="558.0">java/util/PriorityQueue.siftUpUsingCo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,780 samples, 23.51%)</title><rect x="225.4" y="531.0" width="277.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.4" y="542.0">com/google/common/collect/Iterators$M..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,765 samples, 23.41%)</title><rect x="226.5" y="515.0" width="276.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.5" y="526.0">com/google/common/collect/Iterators$M..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,379 samples, 14.79%)</title><rect x="234.1" y="499.0" width="174.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.1" y="510.0">com/google/common/coll..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (2,357 samples, 14.66%)</title><rect x="235.7" y="483.0" width="173.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.7" y="494.0">ru/mail/polis/dao/igor..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (2,356 samples, 14.65%)</title><rect x="235.8" y="467.0" width="172.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.8" y="478.0">ru/mail/polis/dao/igor..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (2,347 samples, 14.60%)</title><rect x="236.5" y="451.0" width="172.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.5" y="462.0">ru/mail/polis/dao/igor..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (1,115 samples, 6.93%)</title><rect x="240.2" y="435.0" width="81.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.2" y="446.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (56 samples, 0.35%)</title><rect x="244.4" y="419.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.4" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (6 samples, 0.04%)</title><rect x="246.7" y="403.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.7" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (18 samples, 0.11%)</title><rect x="247.2" y="403.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.2" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (610 samples, 3.79%)</title><rect x="248.5" y="419.0" width="44.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.5" y="430.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (605 samples, 3.76%)</title><rect x="248.9" y="403.0" width="44.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.9" y="414.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.05%)</title><rect x="261.9" y="387.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (417 samples, 2.59%)</title><rect x="262.7" y="387.0" width="30.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.7" y="398.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (415 samples, 2.58%)</title><rect x="262.8" y="371.0" width="30.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.8" y="382.0">ja..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="273.4" y="355.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="276.4" y="366.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="273.4" y="339.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="276.4" y="350.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="273.4" y="323.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="276.4" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (267 samples, 1.66%)</title><rect x="273.7" y="355.0" width="19.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.7" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.06%)</title><rect x="275.9" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (227 samples, 1.41%)</title><rect x="276.6" y="339.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (197 samples, 1.23%)</title><rect x="278.8" y="323.0" width="14.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.8" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (197 samples, 1.23%)</title><rect x="278.8" y="307.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.8" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (39 samples, 0.24%)</title><rect x="286.1" y="291.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.1" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.09%)</title><rect x="288.0" y="275.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (14 samples, 0.09%)</title><rect x="288.0" y="259.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.0" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (14 samples, 0.09%)</title><rect x="288.0" y="243.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.0" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (23 samples, 0.14%)</title><rect x="289.0" y="291.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.0" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (16 samples, 0.10%)</title><rect x="289.5" y="275.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (16 samples, 0.10%)</title><rect x="289.5" y="259.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.5" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (16 samples, 0.10%)</title><rect x="289.5" y="243.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.5" y="254.0"></text>
</g>
<g>
<title>vtable stub (35 samples, 0.22%)</title><rect x="290.7" y="291.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="293.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (260 samples, 1.62%)</title><rect x="293.3" y="419.0" width="19.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.3" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (257 samples, 1.60%)</title><rect x="293.5" y="403.0" width="18.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.5" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (253 samples, 1.57%)</title><rect x="293.8" y="387.0" width="18.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (20 samples, 0.12%)</title><rect x="295.2" y="371.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.2" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (214 samples, 1.33%)</title><rect x="296.6" y="371.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (213 samples, 1.32%)</title><rect x="296.7" y="355.0" width="15.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="299.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (213 samples, 1.32%)</title><rect x="296.7" y="339.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.7" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (197 samples, 1.23%)</title><rect x="297.8" y="323.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.8" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (39 samples, 0.24%)</title><rect x="305.9" y="307.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.9" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (21 samples, 0.13%)</title><rect x="307.2" y="291.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (21 samples, 0.13%)</title><rect x="307.2" y="275.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.2" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (21 samples, 0.13%)</title><rect x="307.2" y="259.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="310.2" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (20 samples, 0.12%)</title><rect x="308.7" y="307.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.7" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.07%)</title><rect x="309.3" y="291.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="312.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.07%)</title><rect x="309.3" y="275.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.3" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 0.07%)</title><rect x="309.3" y="259.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.3" y="270.0"></text>
</g>
<g>
<title>vtable stub (28 samples, 0.17%)</title><rect x="310.2" y="307.0" width="2.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="313.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (132 samples, 0.82%)</title><rect x="312.3" y="419.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.3" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (132 samples, 0.82%)</title><rect x="312.3" y="403.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (132 samples, 0.82%)</title><rect x="312.3" y="387.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="315.3" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (132 samples, 0.82%)</title><rect x="312.3" y="371.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="315.3" y="382.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="321.4" y="355.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="324.4" y="366.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="321.4" y="339.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="324.4" y="350.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="321.4" y="323.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="324.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (613 samples, 3.81%)</title><rect x="322.0" y="435.0" width="45.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.0" y="446.0">ru/m..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (236 samples, 1.47%)</title><rect x="329.7" y="419.0" width="17.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.7" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (236 samples, 1.47%)</title><rect x="329.7" y="403.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.7" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (215 samples, 1.34%)</title><rect x="331.3" y="387.0" width="15.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.3" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (215 samples, 1.34%)</title><rect x="331.3" y="371.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="334.3" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (209 samples, 1.30%)</title><rect x="331.7" y="355.0" width="15.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (209 samples, 1.30%)</title><rect x="331.7" y="339.0" width="15.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (209 samples, 1.30%)</title><rect x="331.7" y="323.0" width="15.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.7" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (127 samples, 0.79%)</title><rect x="336.7" y="307.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.7" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (39 samples, 0.24%)</title><rect x="337.4" y="291.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.4" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (39 samples, 0.24%)</title><rect x="337.4" y="275.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (37 samples, 0.23%)</title><rect x="337.6" y="259.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.6" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (37 samples, 0.23%)</title><rect x="337.6" y="243.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.6" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (78 samples, 0.49%)</title><rect x="340.3" y="291.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="343.3" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (78 samples, 0.49%)</title><rect x="340.3" y="275.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="343.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (14 samples, 0.09%)</title><rect x="344.0" y="259.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="347.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.07%)</title><rect x="345.1" y="259.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="348.1" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 0.07%)</title><rect x="345.1" y="243.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (14 samples, 0.09%)</title><rect x="346.0" y="307.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (210 samples, 1.31%)</title><rect x="347.0" y="419.0" width="15.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="350.0" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (181 samples, 1.13%)</title><rect x="349.2" y="403.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="352.2" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (180 samples, 1.12%)</title><rect x="349.2" y="387.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.2" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (178 samples, 1.11%)</title><rect x="349.4" y="371.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="352.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (178 samples, 1.11%)</title><rect x="349.4" y="355.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (178 samples, 1.11%)</title><rect x="349.4" y="339.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.4" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (131 samples, 0.81%)</title><rect x="351.3" y="323.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="354.3" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (48 samples, 0.30%)</title><rect x="351.7" y="307.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.7" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (48 samples, 0.30%)</title><rect x="351.7" y="291.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (48 samples, 0.30%)</title><rect x="351.7" y="275.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.7" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (38 samples, 0.24%)</title><rect x="352.4" y="259.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.4" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (78 samples, 0.49%)</title><rect x="355.2" y="307.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (78 samples, 0.49%)</title><rect x="355.2" y="291.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (78 samples, 0.49%)</title><rect x="355.2" y="275.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.2" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (21 samples, 0.13%)</title><rect x="358.1" y="259.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="361.1" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (17 samples, 0.11%)</title><rect x="359.7" y="259.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.7" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (21 samples, 0.13%)</title><rect x="360.9" y="323.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="363.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (44 samples, 0.27%)</title><rect x="362.5" y="419.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.5" y="430.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (26 samples, 0.16%)</title><rect x="362.5" y="403.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.5" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.05%)</title><rect x="364.4" y="403.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLong (10 samples, 0.06%)</title><rect x="365.0" y="403.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.0" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.07%)</title><rect x="365.7" y="419.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="368.7" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.07%)</title><rect x="365.7" y="403.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="368.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.07%)</title><rect x="365.7" y="387.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (11 samples, 0.07%)</title><rect x="365.7" y="371.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.7" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="366.5" y="419.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.5" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="366.5" y="403.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.04%)</title><rect x="366.5" y="387.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.04%)</title><rect x="366.5" y="371.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (360 samples, 2.24%)</title><rect x="367.0" y="435.0" width="26.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.0" y="446.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (45 samples, 0.28%)</title><rect x="367.4" y="419.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.4" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (10 samples, 0.06%)</title><rect x="367.6" y="403.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.6" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (23 samples, 0.14%)</title><rect x="368.3" y="403.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="371.3" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (9 samples, 0.06%)</title><rect x="370.0" y="403.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.0" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (296 samples, 1.84%)</title><rect x="370.7" y="419.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="373.7" y="430.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (295 samples, 1.83%)</title><rect x="370.8" y="403.0" width="21.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="373.8" y="414.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (287 samples, 1.78%)</title><rect x="371.3" y="387.0" width="21.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.3" y="398.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (287 samples, 1.78%)</title><rect x="371.3" y="371.0" width="21.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.3" y="382.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (262 samples, 1.63%)</title><rect x="373.2" y="355.0" width="19.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (262 samples, 1.63%)</title><rect x="373.2" y="339.0" width="19.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (249 samples, 1.55%)</title><rect x="374.1" y="323.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.1" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (249 samples, 1.55%)</title><rect x="374.1" y="307.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.1" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (50 samples, 0.31%)</title><rect x="383.1" y="291.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.1" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (17 samples, 0.11%)</title><rect x="385.5" y="275.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (17 samples, 0.11%)</title><rect x="385.5" y="259.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.5" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (15 samples, 0.09%)</title><rect x="385.6" y="243.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.6" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (20 samples, 0.12%)</title><rect x="386.7" y="291.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="389.7" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (10 samples, 0.06%)</title><rect x="387.5" y="275.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.06%)</title><rect x="387.5" y="259.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.5" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.06%)</title><rect x="387.5" y="243.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.5" y="254.0"></text>
</g>
<g>
<title>vtable stub (57 samples, 0.35%)</title><rect x="388.2" y="291.0" width="4.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="391.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (14 samples, 0.09%)</title><rect x="392.4" y="419.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="395.4" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (14 samples, 0.09%)</title><rect x="392.4" y="403.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.04%)</title><rect x="393.0" y="387.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="396.0" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="393.1" y="371.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="396.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (207 samples, 1.29%)</title><rect x="393.4" y="435.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (111 samples, 0.69%)</title><rect x="393.6" y="419.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="396.6" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (111 samples, 0.69%)</title><rect x="393.6" y="403.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.6" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (111 samples, 0.69%)</title><rect x="393.6" y="387.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="396.6" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (111 samples, 0.69%)</title><rect x="393.6" y="371.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.6" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (111 samples, 0.69%)</title><rect x="393.6" y="355.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (111 samples, 0.69%)</title><rect x="393.6" y="339.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="396.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (107 samples, 0.67%)</title><rect x="393.9" y="323.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.9" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (107 samples, 0.67%)</title><rect x="393.9" y="307.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.9" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (27 samples, 0.17%)</title><rect x="398.0" y="291.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="401.0" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.07%)</title><rect x="399.2" y="275.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="402.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.07%)</title><rect x="399.2" y="259.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="402.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.06%)</title><rect x="399.4" y="243.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.4" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.04%)</title><rect x="400.0" y="291.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.0" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.02%)</title><rect x="400.2" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="400.2" y="259.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="403.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="400.2" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="403.2" y="254.0"></text>
</g>
<g>
<title>vtable stub (17 samples, 0.11%)</title><rect x="400.5" y="291.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="403.5" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (94 samples, 0.58%)</title><rect x="401.7" y="419.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.7" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (93 samples, 0.58%)</title><rect x="401.8" y="403.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.8" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (93 samples, 0.58%)</title><rect x="401.8" y="387.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.8" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (93 samples, 0.58%)</title><rect x="401.8" y="371.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (93 samples, 0.58%)</title><rect x="401.8" y="355.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (93 samples, 0.58%)</title><rect x="401.8" y="339.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.8" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (88 samples, 0.55%)</title><rect x="402.2" y="323.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="405.2" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.09%)</title><rect x="405.2" y="307.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.04%)</title><rect x="406.2" y="307.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="406.3" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="409.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="406.3" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.3" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="406.3" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.3" y="270.0"></text>
</g>
<g>
<title>vtable stub (27 samples, 0.17%)</title><rect x="406.6" y="307.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="409.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (1,279 samples, 7.95%)</title><rect x="408.9" y="499.0" width="93.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.9" y="510.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,271 samples, 7.90%)</title><rect x="409.5" y="483.0" width="93.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.5" y="494.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (1,271 samples, 7.90%)</title><rect x="409.5" y="467.0" width="93.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="412.5" y="478.0">java/util/C..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,271 samples, 7.90%)</title><rect x="409.5" y="451.0" width="93.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.5" y="462.0">java/util/C..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (43 samples, 0.27%)</title><rect x="409.6" y="435.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.6" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (43 samples, 0.27%)</title><rect x="409.6" y="419.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="412.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (43 samples, 0.27%)</title><rect x="409.6" y="403.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="412.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.07%)</title><rect x="411.9" y="387.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.compareTo (5 samples, 0.03%)</title><rect x="412.4" y="371.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.4" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (1,226 samples, 7.62%)</title><rect x="412.8" y="435.0" width="90.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="415.8" y="446.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,226 samples, 7.62%)</title><rect x="412.8" y="419.0" width="90.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.8" y="430.0">java/util/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.06%)</title><rect x="413.1" y="403.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.1" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (1,213 samples, 7.54%)</title><rect x="413.8" y="403.0" width="89.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.8" y="414.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,213 samples, 7.54%)</title><rect x="413.8" y="387.0" width="89.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="416.8" y="398.0">java/util/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (602 samples, 3.74%)</title><rect x="419.6" y="371.0" width="44.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="422.6" y="382.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (569 samples, 3.54%)</title><rect x="421.2" y="355.0" width="41.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.2" y="366.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.position (18 samples, 0.11%)</title><rect x="423.9" y="339.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="426.9" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.07%)</title><rect x="424.4" y="323.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="427.4" y="334.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (492 samples, 3.06%)</title><rect x="425.2" y="339.0" width="36.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="428.2" y="350.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (97 samples, 0.60%)</title><rect x="439.8" y="323.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="442.8" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (47 samples, 0.29%)</title><rect x="442.6" y="307.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (12 samples, 0.07%)</title><rect x="446.0" y="307.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (56 samples, 0.35%)</title><rect x="446.9" y="323.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="449.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (86 samples, 0.53%)</title><rect x="451.2" y="323.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="454.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (22 samples, 0.14%)</title><rect x="455.9" y="307.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="458.9" y="318.0"></text>
</g>
<g>
<title>vtable stub (52 samples, 0.32%)</title><rect x="457.5" y="323.0" width="3.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="460.5" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (18 samples, 0.11%)</title><rect x="461.3" y="339.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="464.3" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (14 samples, 0.09%)</title><rect x="461.6" y="323.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.6" y="334.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.02%)</title><rect x="462.6" y="339.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="465.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (11 samples, 0.07%)</title><rect x="462.9" y="355.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (497 samples, 3.09%)</title><rect x="463.7" y="371.0" width="36.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="466.7" y="382.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (473 samples, 2.94%)</title><rect x="465.5" y="355.0" width="34.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="468.5" y="366.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (457 samples, 2.84%)</title><rect x="466.7" y="339.0" width="33.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.7" y="350.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (457 samples, 2.84%)</title><rect x="466.7" y="323.0" width="33.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="469.7" y="334.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.04%)</title><rect x="469.7" y="307.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.7" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (410 samples, 2.55%)</title><rect x="470.1" y="307.0" width="30.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="473.1" y="318.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (405 samples, 2.52%)</title><rect x="470.5" y="291.0" width="29.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="473.5" y="302.0">ja..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (391 samples, 2.43%)</title><rect x="471.5" y="275.0" width="28.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="474.5" y="286.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (391 samples, 2.43%)</title><rect x="471.5" y="259.0" width="28.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.5" y="270.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (391 samples, 2.43%)</title><rect x="471.5" y="243.0" width="28.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.5" y="254.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (261 samples, 1.62%)</title><rect x="479.1" y="227.0" width="19.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.1" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (56 samples, 0.35%)</title><rect x="480.3" y="211.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="483.3" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (52 samples, 0.32%)</title><rect x="480.6" y="195.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (45 samples, 0.28%)</title><rect x="481.1" y="179.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="484.1" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (45 samples, 0.28%)</title><rect x="481.1" y="163.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.1" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (189 samples, 1.18%)</title><rect x="484.4" y="211.0" width="13.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.4" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (34 samples, 0.21%)</title><rect x="493.3" y="195.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.3" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (34 samples, 0.21%)</title><rect x="495.8" y="195.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="498.8" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (33 samples, 0.21%)</title><rect x="495.9" y="179.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="498.9" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (33 samples, 0.21%)</title><rect x="495.9" y="163.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.9" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.16%)</title><rect x="498.3" y="227.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/180500287.apply (23 samples, 0.14%)</title><rect x="500.2" y="371.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getValue (5 samples, 0.03%)</title><rect x="501.5" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="504.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.compareTo (12 samples, 0.07%)</title><rect x="501.9" y="371.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="504.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.compareTo (10 samples, 0.06%)</title><rect x="502.0" y="355.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.compare (7 samples, 0.04%)</title><rect x="502.0" y="339.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.0" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (14 samples, 0.09%)</title><rect x="502.8" y="595.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="505.8" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (77 samples, 0.48%)</title><rect x="503.8" y="611.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="506.8" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (77 samples, 0.48%)</title><rect x="503.8" y="595.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="506.8" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (26 samples, 0.16%)</title><rect x="507.0" y="579.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.0" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (18 samples, 0.11%)</title><rect x="507.0" y="563.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="510.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (8 samples, 0.05%)</title><rect x="508.3" y="563.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.3" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (5 samples, 0.03%)</title><rect x="508.9" y="579.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="511.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (774 samples, 4.81%)</title><rect x="509.4" y="611.0" width="56.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="512.4" y="622.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (697 samples, 4.33%)</title><rect x="515.1" y="595.0" width="51.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="518.1" y="606.0">ru/ma..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (522 samples, 3.25%)</title><rect x="516.0" y="579.0" width="38.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.0" y="590.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (518 samples, 3.22%)</title><rect x="516.3" y="563.0" width="38.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.3" y="574.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (384 samples, 2.39%)</title><rect x="526.2" y="547.0" width="28.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.2" y="558.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (382 samples, 2.38%)</title><rect x="526.3" y="531.0" width="28.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="529.3" y="542.0">ja..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (309 samples, 1.92%)</title><rect x="531.7" y="515.0" width="22.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="534.7" y="526.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (292 samples, 1.82%)</title><rect x="532.9" y="499.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.9" y="510.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (292 samples, 1.82%)</title><rect x="532.9" y="483.0" width="21.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="535.9" y="494.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (264 samples, 1.64%)</title><rect x="535.0" y="467.0" width="19.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="538.0" y="478.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="544.5" y="451.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="547.5" y="462.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="544.5" y="435.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="547.5" y="446.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="544.5" y="419.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="547.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (10 samples, 0.06%)</title><rect x="544.9" y="451.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="547.9" y="462.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (62 samples, 0.39%)</title><rect x="545.6" y="451.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="548.6" y="462.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (37 samples, 0.23%)</title><rect x="547.5" y="435.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="550.5" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (36 samples, 0.22%)</title><rect x="550.2" y="451.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.2" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (26 samples, 0.16%)</title><rect x="550.9" y="435.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (26 samples, 0.16%)</title><rect x="550.9" y="419.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="553.9" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (26 samples, 0.16%)</title><rect x="550.9" y="403.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="553.9" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.13%)</title><rect x="552.8" y="451.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.8" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (20 samples, 0.12%)</title><rect x="552.9" y="435.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="555.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (20 samples, 0.12%)</title><rect x="552.9" y="419.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="555.9" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (20 samples, 0.12%)</title><rect x="552.9" y="403.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="555.9" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (162 samples, 1.01%)</title><rect x="554.4" y="579.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.4" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (11 samples, 0.07%)</title><rect x="564.5" y="563.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="567.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (13 samples, 0.08%)</title><rect x="565.3" y="563.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="568.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.07%)</title><rect x="565.4" y="547.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="568.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.07%)</title><rect x="565.4" y="531.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="568.4" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="565.7" y="515.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="568.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (273 samples, 1.70%)</title><rect x="566.5" y="723.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="569.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (273 samples, 1.70%)</title><rect x="566.5" y="707.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="569.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (270 samples, 1.68%)</title><rect x="566.7" y="691.0" width="19.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.7" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (270 samples, 1.68%)</title><rect x="566.7" y="675.0" width="19.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="569.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (270 samples, 1.68%)</title><rect x="566.7" y="659.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="569.7" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (270 samples, 1.68%)</title><rect x="566.7" y="643.0" width="19.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.7" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (270 samples, 1.68%)</title><rect x="566.7" y="627.0" width="19.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.7" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (269 samples, 1.67%)</title><rect x="566.8" y="611.0" width="19.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="569.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (257 samples, 1.60%)</title><rect x="567.4" y="595.0" width="18.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (107 samples, 0.67%)</title><rect x="569.3" y="579.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="572.3" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (96 samples, 0.60%)</title><rect x="569.6" y="563.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="572.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (72 samples, 0.45%)</title><rect x="569.6" y="547.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="572.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (70 samples, 0.44%)</title><rect x="569.8" y="531.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="572.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (61 samples, 0.38%)</title><rect x="570.4" y="515.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="573.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (24 samples, 0.15%)</title><rect x="574.9" y="547.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="577.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (24 samples, 0.15%)</title><rect x="574.9" y="531.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="577.9" y="542.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.03%)</title><rect x="575.0" y="515.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="578.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.hasNext (4 samples, 0.02%)</title><rect x="575.3" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="578.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (14 samples, 0.09%)</title><rect x="575.6" y="515.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (13 samples, 0.08%)</title><rect x="575.7" y="499.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="578.7" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.02%)</title><rect x="576.0" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="579.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.02%)</title><rect x="576.0" y="467.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="579.0" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (5 samples, 0.03%)</title><rect x="576.7" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="579.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (5 samples, 0.03%)</title><rect x="576.7" y="547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="579.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (25 samples, 0.16%)</title><rect x="577.2" y="579.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="580.2" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (24 samples, 0.15%)</title><rect x="577.3" y="563.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="580.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (11 samples, 0.07%)</title><rect x="578.1" y="547.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.1" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (11 samples, 0.07%)</title><rect x="578.1" y="531.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="581.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (99 samples, 0.62%)</title><rect x="579.0" y="579.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (82 samples, 0.51%)</title><rect x="580.3" y="563.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="583.3" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (60 samples, 0.37%)</title><rect x="580.3" y="547.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="583.3" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (59 samples, 0.37%)</title><rect x="580.4" y="531.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="583.4" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="583.0" y="515.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="586.0" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (19 samples, 0.12%)</title><rect x="583.3" y="515.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="586.3" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (19 samples, 0.12%)</title><rect x="583.3" y="499.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="586.3" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="584.1" y="483.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="587.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="584.2" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="587.2" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="584.2" y="451.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="587.2" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="584.4" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="587.4" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (21 samples, 0.13%)</title><rect x="584.7" y="547.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="587.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (7,853 samples, 48.84%)</title><rect x="586.5" y="739.0" width="576.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="589.5" y="750.0">ru/mail/polis/service/igorlo/StorageSession.stream</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 0.09%)</title><rect x="586.6" y="723.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="589.6" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.09%)</title><rect x="586.6" y="707.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="589.6" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.09%)</title><rect x="586.6" y="691.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="589.6" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 0.09%)</title><rect x="586.6" y="675.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="589.6" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (14 samples, 0.09%)</title><rect x="586.6" y="659.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="589.6" y="670.0"></text>
</g>
<g>
<title>__send (12 samples, 0.07%)</title><rect x="586.8" y="643.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="589.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.07%)</title><rect x="586.8" y="627.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="589.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.07%)</title><rect x="586.8" y="611.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="589.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.07%)</title><rect x="586.8" y="595.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="589.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.07%)</title><rect x="586.8" y="579.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="589.8" y="590.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.07%)</title><rect x="586.8" y="563.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="589.8" y="574.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.07%)</title><rect x="586.8" y="547.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="589.8" y="558.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.07%)</title><rect x="586.8" y="531.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="589.8" y="542.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.07%)</title><rect x="586.8" y="515.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="589.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.07%)</title><rect x="586.9" y="499.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="589.9" y="510.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.06%)</title><rect x="587.0" y="483.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="590.0" y="494.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.05%)</title><rect x="587.1" y="467.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="590.1" y="478.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.04%)</title><rect x="587.2" y="451.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="590.2" y="462.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.04%)</title><rect x="587.2" y="435.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="590.2" y="446.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.04%)</title><rect x="587.2" y="419.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="590.2" y="430.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="587.2" y="403.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="590.2" y="414.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="587.2" y="387.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="590.2" y="398.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.04%)</title><rect x="587.2" y="371.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="590.2" y="382.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="587.3" y="355.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="590.3" y="366.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="587.3" y="339.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="590.3" y="350.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="587.3" y="323.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="590.3" y="334.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.03%)</title><rect x="587.3" y="307.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="590.3" y="318.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="587.4" y="291.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="590.4" y="302.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.02%)</title><rect x="587.4" y="275.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="590.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.next (7,836 samples, 48.73%)</title><rect x="587.7" y="723.0" width="575.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="590.7" y="734.0">ru/mail/polis/service/igorlo/StorageSession.next</text>
</g>
<g>
<title>one/nio/net/Session.write (4,749 samples, 29.53%)</title><rect x="589.4" y="707.0" width="348.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="592.4" y="718.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (4,732 samples, 29.43%)</title><rect x="590.6" y="691.0" width="347.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="593.6" y="702.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (29 samples, 0.18%)</title><rect x="593.1" y="675.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="596.1" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (4,615 samples, 28.70%)</title><rect x="595.2" y="675.0" width="338.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="598.2" y="686.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (4,576 samples, 28.46%)</title><rect x="597.8" y="659.0" width="335.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.8" y="670.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (207 samples, 1.29%)</title><rect x="602.0" y="643.0" width="15.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="605.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (206 samples, 1.28%)</title><rect x="602.0" y="627.0" width="15.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="605.0" y="638.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (171 samples, 1.06%)</title><rect x="602.0" y="611.0" width="12.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="605.0" y="622.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.04%)</title><rect x="603.7" y="595.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="606.7" y="606.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (9 samples, 0.06%)</title><rect x="604.3" y="595.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="607.3" y="606.0"></text>
</g>
<g>
<title>__memmove_ssse3 (35 samples, 0.22%)</title><rect x="605.4" y="595.0" width="2.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="608.4" y="606.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (84 samples, 0.52%)</title><rect x="608.0" y="595.0" width="6.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="611.0" y="606.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.03%)</title><rect x="609.8" y="579.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="612.8" y="590.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (6 samples, 0.04%)</title><rect x="610.1" y="579.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="613.1" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (9 samples, 0.06%)</title><rect x="610.6" y="579.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.6" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (19 samples, 0.12%)</title><rect x="611.2" y="579.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="614.2" y="590.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (21 samples, 0.13%)</title><rect x="612.6" y="579.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="615.6" y="590.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (5 samples, 0.03%)</title><rect x="614.2" y="595.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="617.2" y="606.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (7 samples, 0.04%)</title><rect x="614.5" y="611.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="617.5" y="622.0"></text>
</g>
<g>
<title>__send (17 samples, 0.11%)</title><rect x="615.0" y="611.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="618.0" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11 samples, 0.07%)</title><rect x="616.3" y="611.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="619.3" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (10 samples, 0.06%)</title><rect x="617.2" y="643.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="620.2" y="654.0"></text>
</g>
<g>
<title>__send (4,302 samples, 26.75%)</title><rect x="617.9" y="643.0" width="315.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="620.9" y="654.0">__send</text>
</g>
<g>
<title>[unknown] (4,242 samples, 26.38%)</title><rect x="622.3" y="627.0" width="311.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="625.3" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4,242 samples, 26.38%)</title><rect x="622.3" y="611.0" width="311.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="625.3" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4,160 samples, 25.87%)</title><rect x="628.3" y="595.0" width="305.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="631.3" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4,150 samples, 25.81%)</title><rect x="629.1" y="579.0" width="304.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="632.1" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4,118 samples, 25.61%)</title><rect x="631.4" y="563.0" width="302.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="634.4" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4,072 samples, 25.32%)</title><rect x="634.8" y="547.0" width="298.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="637.8" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4,021 samples, 25.01%)</title><rect x="638.5" y="531.0" width="295.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="641.5" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,986 samples, 24.79%)</title><rect x="641.1" y="515.0" width="292.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="644.1" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,804 samples, 23.66%)</title><rect x="654.5" y="499.0" width="279.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="657.5" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,642 samples, 22.65%)</title><rect x="666.3" y="483.0" width="267.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="669.3" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,398 samples, 21.13%)</title><rect x="684.2" y="467.0" width="249.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="687.2" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,189 samples, 19.83%)</title><rect x="699.6" y="451.0" width="234.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="702.6" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,945 samples, 18.31%)</title><rect x="717.5" y="435.0" width="216.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="720.5" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,807 samples, 17.46%)</title><rect x="727.6" y="419.0" width="206.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="730.6" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,691 samples, 16.74%)</title><rect x="736.1" y="403.0" width="197.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="739.1" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,580 samples, 16.04%)</title><rect x="744.3" y="387.0" width="189.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="747.3" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,468 samples, 15.35%)</title><rect x="752.5" y="371.0" width="181.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="755.5" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,315 samples, 14.40%)</title><rect x="763.7" y="355.0" width="169.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="766.7" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,186 samples, 13.59%)</title><rect x="773.2" y="339.0" width="160.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="776.2" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,019 samples, 12.56%)</title><rect x="785.4" y="323.0" width="148.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="788.4" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,738 samples, 10.81%)</title><rect x="806.1" y="307.0" width="127.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="809.1" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,584 samples, 9.85%)</title><rect x="817.4" y="291.0" width="116.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="820.4" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,498 samples, 9.32%)</title><rect x="823.7" y="275.0" width="109.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="826.7" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,423 samples, 8.85%)</title><rect x="829.2" y="259.0" width="104.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="832.2" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,374 samples, 8.54%)</title><rect x="832.8" y="243.0" width="100.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="835.8" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,334 samples, 8.30%)</title><rect x="835.7" y="227.0" width="97.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="838.7" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,319 samples, 8.20%)</title><rect x="836.8" y="211.0" width="96.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="839.8" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,246 samples, 7.75%)</title><rect x="842.2" y="195.0" width="91.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="845.2" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,184 samples, 7.36%)</title><rect x="846.7" y="179.0" width="86.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="849.7" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,142 samples, 7.10%)</title><rect x="849.8" y="163.0" width="83.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="852.8" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,109 samples, 6.90%)</title><rect x="852.2" y="147.0" width="81.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="855.2" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,080 samples, 6.72%)</title><rect x="854.3" y="131.0" width="79.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="857.3" y="142.0">[unknown]</text>
</g>
<g>
<title>[unknown] (963 samples, 5.99%)</title><rect x="862.9" y="115.0" width="70.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="865.9" y="126.0">[unknown]</text>
</g>
<g>
<title>[unknown] (845 samples, 5.25%)</title><rect x="871.6" y="99.0" width="62.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="874.6" y="110.0">[unkno..</text>
</g>
<g>
<title>[unknown] (761 samples, 4.73%)</title><rect x="877.8" y="83.0" width="55.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="880.8" y="94.0">[unkn..</text>
</g>
<g>
<title>[unknown] (684 samples, 4.25%)</title><rect x="883.4" y="67.0" width="50.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="886.4" y="78.0">[unkn..</text>
</g>
<g>
<title>[unknown] (664 samples, 4.13%)</title><rect x="884.9" y="51.0" width="48.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="887.9" y="62.0">[unk..</text>
</g>
<g>
<title>[unknown] (645 samples, 4.01%)</title><rect x="886.3" y="35.0" width="47.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="889.3" y="46.0">[unk..</text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.02%)</title><rect x="933.6" y="659.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="936.6" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (54 samples, 0.34%)</title><rect x="933.9" y="675.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.9" y="686.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.05%)</title><rect x="933.9" y="659.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="936.9" y="670.0"></text>
</g>
<g>
<title>gettimeofday (46 samples, 0.29%)</title><rect x="934.5" y="659.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="937.5" y="670.0"></text>
</g>
<g>
<title>[vdso] (37 samples, 0.23%)</title><rect x="935.1" y="643.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="938.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession$Chunks.hasNext (70 samples, 0.44%)</title><rect x="937.9" y="707.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="940.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.hasNext (49 samples, 0.30%)</title><rect x="939.4" y="691.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="942.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.compareTo (46 samples, 0.29%)</title><rect x="939.6" y="675.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="942.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.compareTo (44 samples, 0.27%)</title><rect x="939.8" y="659.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="942.8" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (42 samples, 0.26%)</title><rect x="939.9" y="643.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="942.9" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (31 samples, 0.19%)</title><rect x="940.4" y="627.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="943.4" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.02%)</title><rect x="941.7" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="944.7" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.04%)</title><rect x="942.0" y="611.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="945.0" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.03%)</title><rect x="942.6" y="627.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="945.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession$Chunks.next (2,995 samples, 18.63%)</title><rect x="943.0" y="707.0" width="219.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="946.0" y="718.0">ru/mail/polis/service/igorlo/..</text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (112 samples, 0.70%)</title><rect x="943.5" y="691.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="946.5" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (48 samples, 0.30%)</title><rect x="944.0" y="675.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="947.0" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (47 samples, 0.29%)</title><rect x="944.1" y="659.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="947.1" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (32 samples, 0.20%)</title><rect x="945.2" y="643.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="948.2" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (32 samples, 0.20%)</title><rect x="945.2" y="627.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="948.2" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (13 samples, 0.08%)</title><rect x="946.6" y="611.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="949.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.07%)</title><rect x="946.7" y="595.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="949.7" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.07%)</title><rect x="946.7" y="579.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.7" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.07%)</title><rect x="946.7" y="563.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="949.7" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.04%)</title><rect x="946.7" y="547.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="949.7" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.04%)</title><rect x="947.1" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="950.1" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (57 samples, 0.35%)</title><rect x="947.5" y="675.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="950.5" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (57 samples, 0.35%)</title><rect x="947.5" y="659.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="950.5" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (57 samples, 0.35%)</title><rect x="947.5" y="643.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="950.5" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (57 samples, 0.35%)</title><rect x="947.5" y="627.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="950.5" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (54 samples, 0.34%)</title><rect x="947.8" y="611.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="950.8" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (43 samples, 0.27%)</title><rect x="948.1" y="595.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="951.1" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (34 samples, 0.21%)</title><rect x="948.5" y="579.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="951.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.06%)</title><rect x="948.5" y="563.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="951.5" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.04%)</title><rect x="948.7" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="951.7" y="558.0"></text>
</g>
<g>
<title>jbyte_arraycopy (8 samples, 0.05%)</title><rect x="949.2" y="563.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="952.2" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.03%)</title><rect x="949.7" y="563.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="952.7" y="574.0"></text>
</g>
<g>
<title>unsafe_arraycopy (12 samples, 0.07%)</title><rect x="950.1" y="563.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="953.1" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="951.0" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="954.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (6 samples, 0.04%)</title><rect x="951.3" y="595.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="954.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (58 samples, 0.36%)</title><rect x="951.7" y="691.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="954.7" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (19 samples, 0.12%)</title><rect x="951.9" y="675.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="954.9" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (17 samples, 0.11%)</title><rect x="952.0" y="659.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="955.0" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (13 samples, 0.08%)</title><rect x="952.3" y="643.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="955.3" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (12 samples, 0.07%)</title><rect x="952.4" y="627.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="955.4" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="953.0" y="611.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.0" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="953.0" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="956.0" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (37 samples, 0.23%)</title><rect x="953.3" y="675.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="956.3" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (37 samples, 0.23%)</title><rect x="953.3" y="659.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="956.3" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (34 samples, 0.21%)</title><rect x="953.5" y="643.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="956.5" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="953.5" y="627.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.5" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (34 samples, 0.21%)</title><rect x="953.5" y="611.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.5" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (23 samples, 0.14%)</title><rect x="954.3" y="595.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="957.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.03%)</title><rect x="954.4" y="579.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="957.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.03%)</title><rect x="954.4" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="957.4" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.02%)</title><rect x="954.4" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.04%)</title><rect x="954.7" y="579.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="957.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.04%)</title><rect x="954.7" y="563.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="957.7" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.04%)</title><rect x="954.8" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="957.8" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.02%)</title><rect x="955.0" y="531.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="958.0" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.04%)</title><rect x="955.5" y="579.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="958.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (2,762 samples, 17.18%)</title><rect x="956.0" y="691.0" width="202.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="959.0" y="702.0">ru/mail/polis/dao/Iters$Un..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (2,762 samples, 17.18%)</title><rect x="956.0" y="675.0" width="202.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="959.0" y="686.0">ru/mail/polis/dao/Iters$Un..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (2,648 samples, 16.47%)</title><rect x="957.1" y="659.0" width="194.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="960.1" y="670.0">com/google/common/collect..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2,647 samples, 16.46%)</title><rect x="957.2" y="643.0" width="194.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="960.2" y="654.0">com/google/common/collect..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2,643 samples, 16.44%)</title><rect x="957.4" y="627.0" width="194.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="960.4" y="638.0">com/google/common/collect..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (2,627 samples, 16.34%)</title><rect x="958.6" y="611.0" width="192.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="961.6" y="622.0">com/google/common/collect..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2,606 samples, 16.21%)</title><rect x="960.0" y="595.0" width="191.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="963.0" y="606.0">ru/mail/polis/dao/Iters$C..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,186 samples, 13.59%)</title><rect x="964.1" y="579.0" width="160.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="967.1" y="590.0">com/google/common/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (11 samples, 0.07%)</title><rect x="964.4" y="563.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="967.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.hasNext (11 samples, 0.07%)</title><rect x="964.4" y="547.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="967.4" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (96 samples, 0.60%)</title><rect x="965.2" y="563.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="968.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (96 samples, 0.60%)</title><rect x="965.2" y="547.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="968.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (96 samples, 0.60%)</title><rect x="965.2" y="531.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="968.2" y="542.0"></text>
</g>
<g>
<title>itable stub (33 samples, 0.21%)</title><rect x="966.0" y="515.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="969.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.hasNext (18 samples, 0.11%)</title><rect x="968.4" y="515.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (35 samples, 0.22%)</title><rect x="969.7" y="515.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="972.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (22 samples, 0.14%)</title><rect x="970.7" y="499.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.7" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.04%)</title><rect x="971.0" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="974.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.04%)</title><rect x="971.0" y="467.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="974.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.02%)</title><rect x="971.2" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="974.2" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="971.2" y="435.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="974.2" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (11 samples, 0.07%)</title><rect x="971.5" y="483.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="974.5" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (740 samples, 4.60%)</title><rect x="972.3" y="563.0" width="54.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="975.3" y="574.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (739 samples, 4.60%)</title><rect x="972.3" y="547.0" width="54.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="975.3" y="558.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (723 samples, 4.50%)</title><rect x="973.5" y="531.0" width="53.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="976.5" y="542.0">java/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (693 samples, 4.31%)</title><rect x="975.7" y="515.0" width="50.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="978.7" y="526.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (678 samples, 4.22%)</title><rect x="976.8" y="499.0" width="49.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="979.8" y="510.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (19 samples, 0.12%)</title><rect x="978.7" y="483.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="981.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (5 samples, 0.03%)</title><rect x="979.8" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="982.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (5 samples, 0.03%)</title><rect x="979.8" y="451.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="982.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (5 samples, 0.03%)</title><rect x="979.8" y="435.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="982.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (5 samples, 0.03%)</title><rect x="979.8" y="419.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="982.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (633 samples, 3.94%)</title><rect x="980.1" y="483.0" width="46.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="983.1" y="494.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (625 samples, 3.89%)</title><rect x="980.7" y="467.0" width="45.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="983.7" y="478.0">ru/m..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (625 samples, 3.89%)</title><rect x="980.7" y="451.0" width="45.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="983.7" y="462.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (625 samples, 3.89%)</title><rect x="980.7" y="435.0" width="45.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="983.7" y="446.0">java..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (16 samples, 0.10%)</title><rect x="981.1" y="419.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="984.1" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (604 samples, 3.76%)</title><rect x="982.3" y="419.0" width="44.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="985.3" y="430.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (604 samples, 3.76%)</title><rect x="982.3" y="403.0" width="44.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="985.3" y="414.0">java..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (603 samples, 3.75%)</title><rect x="982.3" y="387.0" width="44.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="985.3" y="398.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (591 samples, 3.68%)</title><rect x="983.2" y="371.0" width="43.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="986.2" y="382.0">java..</text>
</g>
<g>
<title>itable stub (26 samples, 0.16%)</title><rect x="984.6" y="355.0" width="1.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="987.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (283 samples, 1.76%)</title><rect x="986.5" y="355.0" width="20.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="989.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (248 samples, 1.54%)</title><rect x="988.5" y="339.0" width="18.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="991.5" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (16 samples, 0.10%)</title><rect x="989.3" y="323.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="992.3" y="334.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.09%)</title><rect x="989.4" y="307.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="992.4" y="318.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (206 samples, 1.28%)</title><rect x="990.5" y="323.0" width="15.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="993.5" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (46 samples, 0.29%)</title><rect x="996.1" y="307.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="999.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (24 samples, 0.15%)</title><rect x="997.6" y="291.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1000.6" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (23 samples, 0.14%)</title><rect x="999.5" y="307.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1002.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (33 samples, 0.21%)</title><rect x="1001.2" y="307.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1004.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (9 samples, 0.06%)</title><rect x="1002.9" y="291.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1005.9" y="302.0"></text>
</g>
<g>
<title>vtable stub (27 samples, 0.17%)</title><rect x="1003.6" y="307.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1006.6" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (11 samples, 0.07%)</title><rect x="1005.6" y="323.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1008.6" y="334.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.02%)</title><rect x="1006.4" y="323.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1009.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.05%)</title><rect x="1006.7" y="339.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1009.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (252 samples, 1.57%)</title><rect x="1007.3" y="355.0" width="18.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1010.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (250 samples, 1.55%)</title><rect x="1007.4" y="339.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1010.4" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (249 samples, 1.55%)</title><rect x="1007.5" y="323.0" width="18.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1010.5" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (249 samples, 1.55%)</title><rect x="1007.5" y="307.0" width="18.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1010.5" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (5 samples, 0.03%)</title><rect x="1009.3" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1012.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (216 samples, 1.34%)</title><rect x="1009.9" y="291.0" width="15.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1012.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (213 samples, 1.32%)</title><rect x="1010.1" y="275.0" width="15.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1013.1" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (209 samples, 1.30%)</title><rect x="1010.4" y="259.0" width="15.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1013.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (209 samples, 1.30%)</title><rect x="1010.4" y="243.0" width="15.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1013.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (209 samples, 1.30%)</title><rect x="1010.4" y="227.0" width="15.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1013.4" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (139 samples, 0.86%)</title><rect x="1014.3" y="211.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1017.3" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (42 samples, 0.26%)</title><rect x="1018.5" y="195.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1021.5" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.06%)</title><rect x="1020.9" y="179.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1023.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.06%)</title><rect x="1020.9" y="163.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1023.9" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.06%)</title><rect x="1020.9" y="147.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1023.9" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.08%)</title><rect x="1021.6" y="195.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1024.6" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.04%)</title><rect x="1022.1" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1025.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.04%)</title><rect x="1022.1" y="163.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1025.1" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.04%)</title><rect x="1022.1" y="147.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1025.1" y="158.0"></text>
</g>
<g>
<title>vtable stub (27 samples, 0.17%)</title><rect x="1022.5" y="195.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1025.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (17 samples, 0.11%)</title><rect x="1024.5" y="211.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1027.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$79/180500287.apply (7 samples, 0.04%)</title><rect x="1025.8" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1028.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.compareTo (4 samples, 0.02%)</title><rect x="1026.3" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.3" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,323 samples, 8.23%)</title><rect x="1026.6" y="563.0" width="97.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.6" y="574.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,323 samples, 8.23%)</title><rect x="1026.6" y="547.0" width="97.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1029.6" y="558.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,323 samples, 8.23%)</title><rect x="1026.6" y="531.0" width="97.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1029.6" y="542.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,320 samples, 8.21%)</title><rect x="1026.8" y="515.0" width="96.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1029.8" y="526.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,314 samples, 8.17%)</title><rect x="1027.2" y="499.0" width="96.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1030.2" y="510.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,307 samples, 8.13%)</title><rect x="1027.8" y="483.0" width="95.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1030.8" y="494.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (878 samples, 5.46%)</title><rect x="1029.2" y="467.0" width="64.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.2" y="478.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (870 samples, 5.41%)</title><rect x="1029.8" y="451.0" width="63.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.8" y="462.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (870 samples, 5.41%)</title><rect x="1029.8" y="435.0" width="63.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1032.8" y="446.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (870 samples, 5.41%)</title><rect x="1029.8" y="419.0" width="63.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.8" y="430.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (459 samples, 2.85%)</title><rect x="1030.5" y="403.0" width="33.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1033.5" y="414.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (21 samples, 0.13%)</title><rect x="1031.5" y="387.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (4 samples, 0.02%)</title><rect x="1032.3" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1035.3" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (6 samples, 0.04%)</title><rect x="1032.6" y="371.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1035.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (280 samples, 1.74%)</title><rect x="1033.0" y="387.0" width="20.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1036.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (279 samples, 1.74%)</title><rect x="1033.1" y="371.0" width="20.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1036.1" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.02%)</title><rect x="1037.6" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1040.6" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="1037.9" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1040.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (210 samples, 1.31%)</title><rect x="1038.2" y="355.0" width="15.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1041.2" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (121 samples, 0.75%)</title><rect x="1044.7" y="339.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1047.7" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (69 samples, 0.43%)</title><rect x="1048.5" y="323.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1051.5" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="1049.4" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1052.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (53 samples, 0.33%)</title><rect x="1049.7" y="307.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1052.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (50 samples, 0.31%)</title><rect x="1049.9" y="291.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.9" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (50 samples, 0.31%)</title><rect x="1049.9" y="275.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1052.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.07%)</title><rect x="1051.7" y="259.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1054.7" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="1052.2" y="243.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1055.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.03%)</title><rect x="1052.2" y="227.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1055.2" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.03%)</title><rect x="1052.2" y="211.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1055.2" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.02%)</title><rect x="1052.6" y="259.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1055.6" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.02%)</title><rect x="1052.6" y="243.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1055.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="1052.6" y="227.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1055.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="1052.6" y="211.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1055.6" y="222.0"></text>
</g>
<g>
<title>vtable stub (10 samples, 0.06%)</title><rect x="1052.8" y="259.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1055.8" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (84 samples, 0.52%)</title><rect x="1053.6" y="387.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1056.6" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (84 samples, 0.52%)</title><rect x="1053.6" y="371.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1056.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (84 samples, 0.52%)</title><rect x="1053.6" y="355.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1056.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.06%)</title><rect x="1053.6" y="339.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1056.6" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (75 samples, 0.47%)</title><rect x="1054.2" y="339.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1057.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (72 samples, 0.45%)</title><rect x="1054.5" y="323.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1057.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (72 samples, 0.45%)</title><rect x="1054.5" y="307.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.5" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (67 samples, 0.42%)</title><rect x="1054.6" y="291.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1057.6" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.07%)</title><rect x="1057.1" y="275.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1060.1" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.04%)</title><rect x="1057.4" y="259.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1060.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.04%)</title><rect x="1057.4" y="243.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1060.4" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.04%)</title><rect x="1057.4" y="227.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1060.4" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.05%)</title><rect x="1057.9" y="275.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1060.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="1058.0" y="259.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1061.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.04%)</title><rect x="1058.0" y="243.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1061.0" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.04%)</title><rect x="1058.0" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1061.0" y="238.0"></text>
</g>
<g>
<title>vtable stub (14 samples, 0.09%)</title><rect x="1058.5" y="275.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1061.5" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (59 samples, 0.37%)</title><rect x="1059.7" y="387.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1062.7" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (59 samples, 0.37%)</title><rect x="1059.7" y="371.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1062.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (57 samples, 0.35%)</title><rect x="1059.9" y="355.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1062.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (57 samples, 0.35%)</title><rect x="1059.9" y="339.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1062.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (219 samples, 1.36%)</title><rect x="1064.1" y="403.0" width="16.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1067.1" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (93 samples, 0.58%)</title><rect x="1066.7" y="387.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1069.7" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (93 samples, 0.58%)</title><rect x="1066.7" y="371.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1069.7" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (84 samples, 0.52%)</title><rect x="1067.4" y="355.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1070.4" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (84 samples, 0.52%)</title><rect x="1067.4" y="339.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.4" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (78 samples, 0.49%)</title><rect x="1067.8" y="323.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (78 samples, 0.49%)</title><rect x="1067.8" y="307.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1070.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (78 samples, 0.49%)</title><rect x="1067.8" y="291.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1070.8" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (46 samples, 0.29%)</title><rect x="1069.8" y="275.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1072.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.09%)</title><rect x="1069.9" y="259.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1072.9" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.09%)</title><rect x="1069.9" y="243.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1072.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.08%)</title><rect x="1070.0" y="227.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1073.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.08%)</title><rect x="1070.0" y="211.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1073.0" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (30 samples, 0.19%)</title><rect x="1071.0" y="259.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1074.0" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (30 samples, 0.19%)</title><rect x="1071.0" y="243.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1074.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.04%)</title><rect x="1072.3" y="227.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1075.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="1072.8" y="227.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1075.8" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="1072.8" y="211.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1075.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="1073.2" y="275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1076.2" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (69 samples, 0.43%)</title><rect x="1073.5" y="387.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1076.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="1074.1" y="371.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1077.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (58 samples, 0.36%)</title><rect x="1074.3" y="371.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1077.3" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (57 samples, 0.35%)</title><rect x="1074.4" y="355.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1077.4" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (57 samples, 0.35%)</title><rect x="1074.4" y="339.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1077.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (57 samples, 0.35%)</title><rect x="1074.4" y="323.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1077.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (57 samples, 0.35%)</title><rect x="1074.4" y="307.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1077.4" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (44 samples, 0.27%)</title><rect x="1074.7" y="291.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1077.7" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.06%)</title><rect x="1074.9" y="275.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.06%)</title><rect x="1074.9" y="259.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1077.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.06%)</title><rect x="1074.9" y="243.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1077.9" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.03%)</title><rect x="1075.2" y="227.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1078.2" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (33 samples, 0.21%)</title><rect x="1075.5" y="275.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1078.5" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (33 samples, 0.21%)</title><rect x="1075.5" y="259.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1078.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (33 samples, 0.21%)</title><rect x="1075.5" y="243.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.5" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (17 samples, 0.11%)</title><rect x="1076.4" y="227.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1079.4" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="1077.7" y="227.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1080.7" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.06%)</title><rect x="1077.9" y="291.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1080.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (18 samples, 0.11%)</title><rect x="1078.6" y="387.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1081.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (11 samples, 0.07%)</title><rect x="1078.6" y="371.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.6" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLong (6 samples, 0.04%)</title><rect x="1079.5" y="371.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1082.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (104 samples, 0.65%)</title><rect x="1080.2" y="403.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1083.2" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (15 samples, 0.09%)</title><rect x="1080.4" y="387.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1083.4" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (9 samples, 0.06%)</title><rect x="1080.6" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1083.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (4 samples, 0.02%)</title><rect x="1081.2" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1084.2" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (83 samples, 0.52%)</title><rect x="1081.5" y="387.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1084.5" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (83 samples, 0.52%)</title><rect x="1081.5" y="371.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1084.5" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (78 samples, 0.49%)</title><rect x="1081.9" y="355.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1084.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (74 samples, 0.46%)</title><rect x="1082.2" y="339.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1085.2" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (64 samples, 0.40%)</title><rect x="1082.9" y="323.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1085.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (64 samples, 0.40%)</title><rect x="1082.9" y="307.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1085.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (59 samples, 0.37%)</title><rect x="1083.3" y="291.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1086.3" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (59 samples, 0.37%)</title><rect x="1083.3" y="275.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1086.3" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.05%)</title><rect x="1085.6" y="259.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1088.6" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="1086.2" y="259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1089.2" y="270.0"></text>
</g>
<g>
<title>vtable stub (15 samples, 0.09%)</title><rect x="1086.5" y="259.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1089.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (79 samples, 0.49%)</title><rect x="1087.9" y="403.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1090.9" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (43 samples, 0.27%)</title><rect x="1087.9" y="387.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1090.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (43 samples, 0.27%)</title><rect x="1087.9" y="371.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1090.9" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (43 samples, 0.27%)</title><rect x="1087.9" y="355.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1090.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (43 samples, 0.27%)</title><rect x="1087.9" y="339.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1090.9" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (43 samples, 0.27%)</title><rect x="1087.9" y="323.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1090.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (43 samples, 0.27%)</title><rect x="1087.9" y="307.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1090.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (41 samples, 0.25%)</title><rect x="1088.0" y="291.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1091.0" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (41 samples, 0.25%)</title><rect x="1088.0" y="275.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1091.0" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.04%)</title><rect x="1089.8" y="259.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1092.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="1090.3" y="259.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1093.3" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.02%)</title><rect x="1090.5" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1093.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="1090.5" y="227.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1093.5" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="1090.5" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1093.5" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (36 samples, 0.22%)</title><rect x="1091.0" y="387.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1094.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (35 samples, 0.22%)</title><rect x="1091.1" y="371.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1094.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (35 samples, 0.22%)</title><rect x="1091.1" y="355.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1094.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (35 samples, 0.22%)</title><rect x="1091.1" y="339.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1094.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.22%)</title><rect x="1091.1" y="323.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1094.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.22%)</title><rect x="1091.1" y="307.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1094.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (33 samples, 0.21%)</title><rect x="1091.2" y="291.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1094.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.03%)</title><rect x="1092.5" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1095.5" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="1092.8" y="275.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1095.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.02%)</title><rect x="1092.9" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1095.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.02%)</title><rect x="1092.9" y="243.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.9" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.02%)</title><rect x="1092.9" y="227.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1095.9" y="238.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.04%)</title><rect x="1093.2" y="275.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1096.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (407 samples, 2.53%)</title><rect x="1093.8" y="467.0" width="29.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1096.8" y="478.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (406 samples, 2.52%)</title><rect x="1093.9" y="451.0" width="29.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1096.9" y="462.0">ru..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (406 samples, 2.52%)</title><rect x="1093.9" y="435.0" width="29.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1096.9" y="446.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (406 samples, 2.52%)</title><rect x="1093.9" y="419.0" width="29.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1096.9" y="430.0">ja..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (20 samples, 0.12%)</title><rect x="1093.9" y="403.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1096.9" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (20 samples, 0.12%)</title><rect x="1093.9" y="387.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1096.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (20 samples, 0.12%)</title><rect x="1093.9" y="371.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1096.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.02%)</title><rect x="1095.1" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1098.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (385 samples, 2.39%)</title><rect x="1095.4" y="403.0" width="28.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1098.4" y="414.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (385 samples, 2.39%)</title><rect x="1095.4" y="387.0" width="28.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1098.4" y="398.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.02%)</title><rect x="1095.4" y="371.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1098.4" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (381 samples, 2.37%)</title><rect x="1095.7" y="371.0" width="28.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1098.7" y="382.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (381 samples, 2.37%)</title><rect x="1095.7" y="355.0" width="28.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1098.7" y="366.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (168 samples, 1.04%)</title><rect x="1097.4" y="339.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1100.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (152 samples, 0.95%)</title><rect x="1098.2" y="323.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1101.2" y="334.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (132 samples, 0.82%)</title><rect x="1099.1" y="307.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1102.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (35 samples, 0.22%)</title><rect x="1103.0" y="291.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1106.0" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (19 samples, 0.12%)</title><rect x="1103.9" y="275.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1106.9" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (8 samples, 0.05%)</title><rect x="1105.5" y="291.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1108.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (27 samples, 0.17%)</title><rect x="1106.1" y="291.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1109.1" y="302.0"></text>
</g>
<g>
<title>vtable stub (9 samples, 0.06%)</title><rect x="1108.1" y="291.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1111.1" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.04%)</title><rect x="1108.8" y="307.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1111.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.03%)</title><rect x="1109.4" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1112.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (186 samples, 1.16%)</title><rect x="1109.7" y="339.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1112.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (168 samples, 1.04%)</title><rect x="1111.0" y="323.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1114.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (159 samples, 0.99%)</title><rect x="1111.7" y="307.0" width="11.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1114.7" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (159 samples, 0.99%)</title><rect x="1111.7" y="291.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1114.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (136 samples, 0.85%)</title><rect x="1113.4" y="275.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1116.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (134 samples, 0.83%)</title><rect x="1113.5" y="259.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1116.5" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (129 samples, 0.80%)</title><rect x="1113.9" y="243.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1116.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (129 samples, 0.80%)</title><rect x="1113.9" y="227.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (129 samples, 0.80%)</title><rect x="1113.9" y="211.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1116.9" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (80 samples, 0.50%)</title><rect x="1117.0" y="195.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1120.0" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (15 samples, 0.09%)</title><rect x="1117.6" y="179.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.6" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (15 samples, 0.09%)</title><rect x="1117.6" y="163.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1120.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.08%)</title><rect x="1117.7" y="147.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1120.7" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.08%)</title><rect x="1117.7" y="131.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1120.7" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (57 samples, 0.35%)</title><rect x="1118.7" y="179.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1121.7" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (17 samples, 0.11%)</title><rect x="1121.2" y="163.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1124.2" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="1122.5" y="163.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1125.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="1122.5" y="147.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.5" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="1122.5" y="131.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1125.5" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.04%)</title><rect x="1122.9" y="195.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1125.9" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (11 samples, 0.07%)</title><rect x="1123.7" y="563.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1126.7" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (23 samples, 0.14%)</title><rect x="1124.5" y="579.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.5" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (23 samples, 0.14%)</title><rect x="1124.5" y="563.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.5" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (13 samples, 0.08%)</title><rect x="1125.1" y="547.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1128.1" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.02%)</title><rect x="1125.1" y="531.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1128.1" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (9 samples, 0.06%)</title><rect x="1125.3" y="531.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1128.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (342 samples, 2.13%)</title><rect x="1126.2" y="579.0" width="25.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1129.2" y="590.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (316 samples, 1.97%)</title><rect x="1128.1" y="563.0" width="23.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1131.1" y="574.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (229 samples, 1.42%)</title><rect x="1128.7" y="547.0" width="16.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1131.7" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (227 samples, 1.41%)</title><rect x="1128.9" y="531.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1131.9" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="1132.0" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1135.0" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (179 samples, 1.11%)</title><rect x="1132.3" y="515.0" width="13.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1135.3" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (179 samples, 1.11%)</title><rect x="1132.3" y="499.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1135.3" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (136 samples, 0.85%)</title><rect x="1135.5" y="483.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1138.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (122 samples, 0.76%)</title><rect x="1136.5" y="467.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1139.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (122 samples, 0.76%)</title><rect x="1136.5" y="451.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1139.5" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (103 samples, 0.64%)</title><rect x="1137.9" y="435.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1140.9" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (17 samples, 0.11%)</title><rect x="1141.3" y="419.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1144.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (26 samples, 0.16%)</title><rect x="1142.5" y="419.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1145.5" y="430.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (19 samples, 0.12%)</title><rect x="1143.0" y="403.0" width="1.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1146.0" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.06%)</title><rect x="1144.4" y="419.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1147.4" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.05%)</title><rect x="1144.5" y="403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1147.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.05%)</title><rect x="1144.5" y="387.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1147.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.05%)</title><rect x="1144.5" y="371.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1147.5" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="1145.1" y="419.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1148.1" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="1145.1" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1148.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="1145.1" y="387.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1148.1" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="1145.1" y="371.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1148.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (78 samples, 0.49%)</title><rect x="1145.5" y="547.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1148.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (11 samples, 0.07%)</title><rect x="1150.4" y="531.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1153.4" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.06%)</title><rect x="1150.5" y="515.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1153.5" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.06%)</title><rect x="1150.5" y="499.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1153.5" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1150.7" y="483.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1153.7" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (86 samples, 0.53%)</title><rect x="1151.4" y="659.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1154.4" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (18 samples, 0.11%)</title><rect x="1151.5" y="643.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1154.5" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (13 samples, 0.08%)</title><rect x="1151.8" y="627.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1154.8" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (9 samples, 0.06%)</title><rect x="1152.1" y="611.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1155.1" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (67 samples, 0.42%)</title><rect x="1152.8" y="643.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1155.8" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (15 samples, 0.09%)</title><rect x="1152.8" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1155.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$75/540352630.apply (52 samples, 0.32%)</title><rect x="1153.9" y="627.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1156.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (52 samples, 0.32%)</title><rect x="1153.9" y="611.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1156.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (5 samples, 0.03%)</title><rect x="1153.9" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1156.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (31 samples, 0.19%)</title><rect x="1154.3" y="595.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1157.3" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (31 samples, 0.19%)</title><rect x="1154.3" y="579.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1157.3" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (31 samples, 0.19%)</title><rect x="1154.3" y="563.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1157.3" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (24 samples, 0.15%)</title><rect x="1154.8" y="547.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1157.8" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (24 samples, 0.15%)</title><rect x="1154.8" y="531.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1157.8" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (24 samples, 0.15%)</title><rect x="1154.8" y="515.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1157.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (24 samples, 0.15%)</title><rect x="1154.8" y="499.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1157.8" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (24 samples, 0.15%)</title><rect x="1154.8" y="483.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1157.8" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="1156.2" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1159.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (16 samples, 0.10%)</title><rect x="1156.5" y="595.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1159.5" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (16 samples, 0.10%)</title><rect x="1156.5" y="579.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1159.5" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (16 samples, 0.10%)</title><rect x="1156.5" y="563.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1159.5" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1157.2" y="547.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1160.2" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1157.2" y="531.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1160.2" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1157.2" y="515.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1160.2" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1157.2" y="499.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1160.2" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1157.2" y="483.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1160.2" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1157.2" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1160.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$75/540352630.apply (13 samples, 0.08%)</title><rect x="1157.7" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1160.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.bufferToArray (56 samples, 0.35%)</title><rect x="1158.7" y="691.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1161.7" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (53 samples, 0.33%)</title><rect x="1158.9" y="675.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1161.9" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (43 samples, 0.27%)</title><rect x="1159.6" y="659.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1162.6" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (42 samples, 0.26%)</title><rect x="1159.7" y="643.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1162.7" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (37 samples, 0.23%)</title><rect x="1160.1" y="627.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1163.1" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (37 samples, 0.23%)</title><rect x="1160.1" y="611.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1163.1" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (37 samples, 0.23%)</title><rect x="1160.1" y="595.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1163.1" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (14 samples, 0.09%)</title><rect x="1161.7" y="579.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1164.7" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.04%)</title><rect x="1162.0" y="563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1165.0" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.04%)</title><rect x="1162.0" y="547.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1165.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.04%)</title><rect x="1162.1" y="531.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1165.1" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.04%)</title><rect x="1162.1" y="515.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1165.1" y="526.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (9 samples, 0.06%)</title><rect x="1163.1" y="867.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1166.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.06%)</title><rect x="1163.1" y="851.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1166.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.06%)</title><rect x="1163.1" y="835.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1166.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.06%)</title><rect x="1163.1" y="819.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1166.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.06%)</title><rect x="1163.1" y="803.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1166.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.06%)</title><rect x="1163.1" y="787.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1166.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.05%)</title><rect x="1163.2" y="771.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1166.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.04%)</title><rect x="1163.3" y="755.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1166.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.04%)</title><rect x="1163.3" y="739.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1166.3" y="750.0"></text>
</g>
<g>
<title>start_thread (355 samples, 2.21%)</title><rect x="1163.9" y="867.0" width="26.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1166.9" y="878.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (355 samples, 2.21%)</title><rect x="1163.9" y="851.0" width="26.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1166.9" y="862.0">t..</text>
</g>
<g>
<title>Thread::call_run() (355 samples, 2.21%)</title><rect x="1163.9" y="835.0" width="26.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.9" y="846.0">T..</text>
</g>
<g>
<title>GangWorker::loop() (178 samples, 1.11%)</title><rect x="1163.9" y="819.0" width="13.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.9" y="830.0"></text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (5 samples, 0.03%)</title><rect x="1163.9" y="803.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.9" y="814.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (5 samples, 0.03%)</title><rect x="1163.9" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="798.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (9 samples, 0.06%)</title><rect x="1164.3" y="803.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="814.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (4 samples, 0.02%)</title><rect x="1164.4" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.4" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (130 samples, 0.81%)</title><rect x="1165.0" y="803.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (58 samples, 0.36%)</title><rect x="1165.0" y="787.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 0.05%)</title><rect x="1165.0" y="771.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.0" y="782.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (6 samples, 0.04%)</title><rect x="1165.1" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.1" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.02%)</title><rect x="1165.2" y="739.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.2" y="750.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (11 samples, 0.07%)</title><rect x="1165.6" y="771.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.6" y="782.0"></text>
</g>
<g>
<title>SpinPause (37 samples, 0.23%)</title><rect x="1166.5" y="771.0" width="2.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1169.5" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.04%)</title><rect x="1169.4" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.4" y="798.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.04%)</title><rect x="1169.4" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.4" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.04%)</title><rect x="1169.4" y="755.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.4" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (6 samples, 0.04%)</title><rect x="1169.4" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.4" y="750.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.04%)</title><rect x="1169.4" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.4" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (6 samples, 0.04%)</title><rect x="1169.4" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (4 samples, 0.02%)</title><rect x="1169.5" y="691.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="702.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (17 samples, 0.11%)</title><rect x="1169.8" y="787.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.8" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (17 samples, 0.11%)</title><rect x="1169.8" y="771.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.8" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (17 samples, 0.11%)</title><rect x="1169.8" y="755.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.8" y="766.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (15 samples, 0.09%)</title><rect x="1170.0" y="739.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.0" y="750.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (4 samples, 0.02%)</title><rect x="1170.8" y="723.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.8" y="734.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (4 samples, 0.02%)</title><rect x="1170.8" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.8" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (47 samples, 0.29%)</title><rect x="1171.1" y="787.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.1" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (33 samples, 0.21%)</title><rect x="1171.1" y="771.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.1" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (29 samples, 0.18%)</title><rect x="1171.4" y="755.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.4" y="766.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (29 samples, 0.18%)</title><rect x="1171.4" y="739.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="750.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (27 samples, 0.17%)</title><rect x="1171.6" y="723.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.6" y="734.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (4 samples, 0.02%)</title><rect x="1171.6" y="707.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.6" y="718.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (4 samples, 0.02%)</title><rect x="1171.6" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="702.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (5 samples, 0.03%)</title><rect x="1172.0" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.0" y="718.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (4 samples, 0.02%)</title><rect x="1172.0" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.0" y="702.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (7 samples, 0.04%)</title><rect x="1172.4" y="707.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.4" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.03%)</title><rect x="1172.9" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.9" y="718.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (4 samples, 0.02%)</title><rect x="1173.3" y="707.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="718.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (11 samples, 0.07%)</title><rect x="1173.7" y="771.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="782.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (6 samples, 0.04%)</title><rect x="1173.9" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (9 samples, 0.06%)</title><rect x="1174.7" y="803.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="814.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (8 samples, 0.05%)</title><rect x="1174.8" y="787.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.8" y="798.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (8 samples, 0.05%)</title><rect x="1174.8" y="771.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1177.8" y="782.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (19 samples, 0.12%)</title><rect x="1175.5" y="803.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="814.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (17 samples, 0.11%)</title><rect x="1175.6" y="787.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.6" y="798.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (12 samples, 0.07%)</title><rect x="1175.7" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (11 samples, 0.07%)</title><rect x="1175.8" y="755.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (78 samples, 0.49%)</title><rect x="1177.0" y="819.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="830.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (78 samples, 0.49%)</title><rect x="1177.0" y="803.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="814.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (76 samples, 0.47%)</title><rect x="1177.0" y="787.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="798.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (76 samples, 0.47%)</title><rect x="1177.0" y="771.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="782.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (73 samples, 0.45%)</title><rect x="1177.0" y="755.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.0" y="766.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (73 samples, 0.45%)</title><rect x="1177.0" y="739.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="750.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (46 samples, 0.29%)</title><rect x="1177.0" y="723.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.0" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.05%)</title><rect x="1177.3" y="707.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.3" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.04%)</title><rect x="1177.4" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.03%)</title><rect x="1178.0" y="707.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.03%)</title><rect x="1178.0" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 0.17%)</title><rect x="1178.3" y="707.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.04%)</title><rect x="1178.6" y="691.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.6" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 0.12%)</title><rect x="1180.4" y="723.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (13 samples, 0.08%)</title><rect x="1180.5" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.02%)</title><rect x="1180.8" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.04%)</title><rect x="1181.8" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.04%)</title><rect x="1181.8" y="707.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.04%)</title><rect x="1181.8" y="691.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.04%)</title><rect x="1181.8" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.04%)</title><rect x="1181.8" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.04%)</title><rect x="1181.8" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.03%)</title><rect x="1181.8" y="627.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.03%)</title><rect x="1181.8" y="611.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.03%)</title><rect x="1181.8" y="595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.03%)</title><rect x="1181.8" y="579.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.03%)</title><rect x="1181.8" y="563.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.03%)</title><rect x="1181.8" y="547.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>VMThread::run() (96 samples, 0.60%)</title><rect x="1182.7" y="819.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>VMThread::loop() (96 samples, 0.60%)</title><rect x="1182.7" y="803.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (39 samples, 0.24%)</title><rect x="1182.8" y="787.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (4 samples, 0.02%)</title><rect x="1185.4" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.4" y="782.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (24 samples, 0.15%)</title><rect x="1185.7" y="787.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="798.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (24 samples, 0.15%)</title><rect x="1185.7" y="771.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.7" y="782.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (24 samples, 0.15%)</title><rect x="1185.7" y="755.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (24 samples, 0.15%)</title><rect x="1185.7" y="739.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.7" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (7 samples, 0.04%)</title><rect x="1186.2" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.2" y="734.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(CollectedHeap*, bool) [clone .part.127] (4 samples, 0.02%)</title><rect x="1187.1" y="723.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="734.0"></text>
</g>
<g>
<title>__GI___sched_yield (30 samples, 0.19%)</title><rect x="1187.4" y="787.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1190.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.14%)</title><rect x="1187.9" y="771.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1190.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.14%)</title><rect x="1187.9" y="755.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1190.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.09%)</title><rect x="1188.5" y="739.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1191.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.09%)</title><rect x="1188.5" y="723.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1191.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.09%)</title><rect x="1188.5" y="707.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1191.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.09%)</title><rect x="1188.5" y="691.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1191.5" y="702.0"></text>
</g>
</g>
</svg>
