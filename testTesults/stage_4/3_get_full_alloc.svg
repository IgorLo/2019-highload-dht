<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="613"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="613"> </text>
<g id="frames">
<g>
<title>all (105,128 samples, 100.00%)</title><rect x="10.0" y="579.0" width="1180.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.0" y="590.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (62,164 samples, 59.13%)</title><rect x="10.0" y="563.0" width="697.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="574.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (62,164 samples, 59.13%)</title><rect x="10.0" y="547.0" width="697.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="558.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (62,164 samples, 59.13%)</title><rect x="10.0" y="531.0" width="697.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (211 samples, 0.20%)</title><rect x="10.0" y="515.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (211 samples, 0.20%)</title><rect x="10.0" y="499.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (203 samples, 0.19%)</title><rect x="10.0" y="483.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (203 samples, 0.19%)</title><rect x="10.0" y="467.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (203 samples, 0.19%)</title><rect x="10.0" y="451.0" width="2.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run (61,953 samples, 58.93%)</title><rect x="12.4" y="515.0" width="695.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.4" y="526.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4 (61,953 samples, 58.93%)</title><rect x="12.4" y="499.0" width="695.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.4" y="510.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (312 samples, 0.30%)</title><rect x="12.4" y="483.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (312 samples, 0.30%)</title><rect x="12.4" y="467.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (233 samples, 0.22%)</title><rect x="12.4" y="451.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.4" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (233 samples, 0.22%)</title><rect x="12.4" y="435.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.4" y="446.0"></text>
</g>
<g>
<title>byte[] (233 samples, 0.22%)</title><rect x="12.4" y="419.0" width="2.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="15.4" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (79 samples, 0.08%)</title><rect x="15.0" y="451.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.0" y="462.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (79 samples, 0.08%)</title><rect x="15.0" y="435.0" width="0.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="18.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/454019155.action (61,641 samples, 58.63%)</title><rect x="15.9" y="483.0" width="691.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.9" y="494.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/454019155.action</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$1 (61,641 samples, 58.63%)</title><rect x="15.9" y="467.0" width="691.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.9" y="478.0">ru/mail/polis/service/igorlo/AsyncService.lambda$entity$1</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (61,641 samples, 58.63%)</title><rect x="15.9" y="451.0" width="691.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="462.0">ru/mail/polis/service/igorlo/AsyncService.get</text>
</g>
<g>
<title>byte[] (56 samples, 0.05%)</title><rect x="15.9" y="435.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="18.9" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (105 samples, 0.10%)</title><rect x="16.5" y="435.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.5" y="446.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (105 samples, 0.10%)</title><rect x="16.5" y="419.0" width="1.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="19.5" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (33 samples, 0.03%)</title><rect x="17.7" y="435.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (33 samples, 0.03%)</title><rect x="17.7" y="419.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="20.7" y="430.0"></text>
</g>
<g>
<title>one.nio.http.Response (49 samples, 0.05%)</title><rect x="18.0" y="435.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="21.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (192 samples, 0.18%)</title><rect x="18.6" y="435.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.6" y="446.0"></text>
</g>
<g>
<title>byte[] (88 samples, 0.08%)</title><rect x="18.6" y="419.0" width="1.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="21.6" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (55 samples, 0.05%)</title><rect x="19.6" y="419.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="22.6" y="430.0"></text>
</g>
<g>
<title>java.lang.String (49 samples, 0.05%)</title><rect x="20.2" y="419.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="23.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (61,206 samples, 58.22%)</title><rect x="20.8" y="435.0" width="687.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.8" y="446.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (6,685 samples, 6.36%)</title><rect x="20.8" y="419.0" width="75.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.8" y="430.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (6,685 samples, 6.36%)</title><rect x="20.8" y="403.0" width="75.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.8" y="414.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (6,685 samples, 6.36%)</title><rect x="20.8" y="387.0" width="75.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.8" y="398.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (6,685 samples, 6.36%)</title><rect x="20.8" y="371.0" width="75.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.8" y="382.0">com/goog..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (6,685 samples, 6.36%)</title><rect x="20.8" y="355.0" width="75.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.8" y="366.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5,907 samples, 5.62%)</title><rect x="20.8" y="339.0" width="66.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.8" y="350.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (63 samples, 0.06%)</title><rect x="20.8" y="323.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.8" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (63 samples, 0.06%)</title><rect x="20.8" y="307.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.8" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (63 samples, 0.06%)</title><rect x="20.8" y="291.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.8" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (63 samples, 0.06%)</title><rect x="20.8" y="275.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (63 samples, 0.06%)</title><rect x="20.8" y="259.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (63 samples, 0.06%)</title><rect x="20.8" y="243.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (63 samples, 0.06%)</title><rect x="20.8" y="227.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.8" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (63 samples, 0.06%)</title><rect x="20.8" y="211.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.8" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (63 samples, 0.06%)</title><rect x="20.8" y="195.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="23.8" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2,295 samples, 2.18%)</title><rect x="21.5" y="323.0" width="25.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.5" y="334.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2,295 samples, 2.18%)</title><rect x="21.5" y="307.0" width="25.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.5" y="318.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (2,295 samples, 2.18%)</title><rect x="21.5" y="291.0" width="25.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.5" y="302.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,295 samples, 2.18%)</title><rect x="21.5" y="275.0" width="25.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.5" y="286.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,295 samples, 2.18%)</title><rect x="21.5" y="259.0" width="25.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.5" y="270.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (2,295 samples, 2.18%)</title><rect x="21.5" y="243.0" width="25.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.5" y="254.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (2,295 samples, 2.18%)</title><rect x="21.5" y="227.0" width="25.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="238.0">r..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (2,295 samples, 2.18%)</title><rect x="21.5" y="211.0" width="25.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.5" y="222.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,295 samples, 2.18%)</title><rect x="21.5" y="195.0" width="25.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.5" y="206.0">j..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (2,295 samples, 2.18%)</title><rect x="21.5" y="179.0" width="25.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="190.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,295 samples, 2.18%)</title><rect x="21.5" y="163.0" width="25.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.5" y="174.0">j..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (2,295 samples, 2.18%)</title><rect x="21.5" y="147.0" width="25.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.5" y="158.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,295 samples, 2.18%)</title><rect x="21.5" y="131.0" width="25.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.5" y="142.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (2,295 samples, 2.18%)</title><rect x="21.5" y="115.0" width="25.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.5" y="126.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2,295 samples, 2.18%)</title><rect x="21.5" y="99.0" width="25.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="110.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2,196 samples, 2.09%)</title><rect x="21.5" y="83.0" width="24.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.5" y="94.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,196 samples, 2.09%)</title><rect x="21.5" y="67.0" width="24.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="24.5" y="78.0">j..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,196 samples, 2.09%)</title><rect x="21.5" y="51.0" width="24.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="24.5" y="62.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (99 samples, 0.09%)</title><rect x="46.1" y="83.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (99 samples, 0.09%)</title><rect x="46.1" y="67.0" width="1.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="49.1" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,549 samples, 3.38%)</title><rect x="47.2" y="323.0" width="39.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.2" y="334.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,549 samples, 3.38%)</title><rect x="47.2" y="307.0" width="39.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.2" y="318.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,549 samples, 3.38%)</title><rect x="47.2" y="291.0" width="39.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.2" y="302.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,549 samples, 3.38%)</title><rect x="47.2" y="275.0" width="39.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.2" y="286.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,549 samples, 3.38%)</title><rect x="47.2" y="259.0" width="39.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.2" y="270.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,549 samples, 3.38%)</title><rect x="47.2" y="243.0" width="39.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.2" y="254.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,705 samples, 2.57%)</title><rect x="47.2" y="227.0" width="30.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.2" y="238.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (2,705 samples, 2.57%)</title><rect x="47.2" y="211.0" width="30.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.2" y="222.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (2,705 samples, 2.57%)</title><rect x="47.2" y="195.0" width="30.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.2" y="206.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (2,705 samples, 2.57%)</title><rect x="47.2" y="179.0" width="30.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.2" y="190.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (760 samples, 0.72%)</title><rect x="47.2" y="163.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.2" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (374 samples, 0.36%)</title><rect x="47.2" y="147.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.2" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (374 samples, 0.36%)</title><rect x="47.2" y="131.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.2" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (374 samples, 0.36%)</title><rect x="47.2" y="115.0" width="4.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="50.2" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (386 samples, 0.37%)</title><rect x="51.4" y="147.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.4" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (386 samples, 0.37%)</title><rect x="51.4" y="131.0" width="4.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="54.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (755 samples, 0.72%)</title><rect x="55.8" y="163.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.8" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (378 samples, 0.36%)</title><rect x="55.8" y="147.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.8" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (378 samples, 0.36%)</title><rect x="55.8" y="131.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.8" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (378 samples, 0.36%)</title><rect x="55.8" y="115.0" width="4.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="58.8" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (377 samples, 0.36%)</title><rect x="60.0" y="147.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.0" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (377 samples, 0.36%)</title><rect x="60.0" y="131.0" width="4.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="63.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (385 samples, 0.37%)</title><rect x="64.2" y="163.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.2" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (385 samples, 0.37%)</title><rect x="64.2" y="147.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.2" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (385 samples, 0.37%)</title><rect x="64.2" y="131.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.2" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (385 samples, 0.37%)</title><rect x="64.2" y="115.0" width="4.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="67.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (475 samples, 0.45%)</title><rect x="68.5" y="163.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.5" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (247 samples, 0.23%)</title><rect x="68.5" y="147.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.5" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (247 samples, 0.23%)</title><rect x="68.5" y="131.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.5" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (247 samples, 0.23%)</title><rect x="68.5" y="115.0" width="2.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="71.5" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (228 samples, 0.22%)</title><rect x="71.3" y="147.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.3" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (228 samples, 0.22%)</title><rect x="71.3" y="131.0" width="2.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="74.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (188 samples, 0.18%)</title><rect x="73.9" y="163.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.9" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (188 samples, 0.18%)</title><rect x="73.9" y="147.0" width="2.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="76.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (90 samples, 0.09%)</title><rect x="76.0" y="163.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.0" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (90 samples, 0.09%)</title><rect x="76.0" y="147.0" width="1.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="79.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (52 samples, 0.05%)</title><rect x="77.0" y="163.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.0" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (52 samples, 0.05%)</title><rect x="77.0" y="147.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="80.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (844 samples, 0.80%)</title><rect x="77.6" y="227.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (844 samples, 0.80%)</title><rect x="77.6" y="211.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.6" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (844 samples, 0.80%)</title><rect x="77.6" y="195.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.6" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (844 samples, 0.80%)</title><rect x="77.6" y="179.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.6" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (844 samples, 0.80%)</title><rect x="77.6" y="163.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.6" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (844 samples, 0.80%)</title><rect x="77.6" y="147.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.6" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (844 samples, 0.80%)</title><rect x="77.6" y="131.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.6" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (844 samples, 0.80%)</title><rect x="77.6" y="115.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (844 samples, 0.80%)</title><rect x="77.6" y="99.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (844 samples, 0.80%)</title><rect x="77.6" y="83.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.6" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (802 samples, 0.76%)</title><rect x="77.6" y="67.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.6" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (802 samples, 0.76%)</title><rect x="77.6" y="51.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.6" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (802 samples, 0.76%)</title><rect x="77.6" y="35.0" width="9.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="80.6" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (42 samples, 0.04%)</title><rect x="86.6" y="67.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.6" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (42 samples, 0.04%)</title><rect x="86.6" y="51.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="89.6" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (778 samples, 0.74%)</title><rect x="87.1" y="339.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (778 samples, 0.74%)</title><rect x="87.1" y="323.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (683 samples, 0.65%)</title><rect x="87.1" y="307.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (683 samples, 0.65%)</title><rect x="87.1" y="291.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.1" y="302.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (683 samples, 0.65%)</title><rect x="87.1" y="275.0" width="7.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="90.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (95 samples, 0.09%)</title><rect x="94.7" y="307.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.7" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (95 samples, 0.09%)</title><rect x="94.7" y="291.0" width="1.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="97.7" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (332 samples, 0.32%)</title><rect x="95.8" y="419.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.8" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (332 samples, 0.32%)</title><rect x="95.8" y="403.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$75/540352630.apply (332 samples, 0.32%)</title><rect x="95.8" y="387.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (332 samples, 0.32%)</title><rect x="95.8" y="371.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (79 samples, 0.08%)</title><rect x="95.8" y="355.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.8" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (79 samples, 0.08%)</title><rect x="95.8" y="339.0" width="0.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="98.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (115 samples, 0.11%)</title><rect x="96.7" y="355.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (91 samples, 0.09%)</title><rect x="96.7" y="339.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (91 samples, 0.09%)</title><rect x="96.7" y="323.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.7" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (91 samples, 0.09%)</title><rect x="96.7" y="307.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="99.7" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (24 samples, 0.02%)</title><rect x="97.7" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.7" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.02%)</title><rect x="97.7" y="323.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="100.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (138 samples, 0.13%)</title><rect x="98.0" y="355.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (113 samples, 0.11%)</title><rect x="98.0" y="339.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="101.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (113 samples, 0.11%)</title><rect x="98.0" y="323.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.0" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (113 samples, 0.11%)</title><rect x="98.0" y="307.0" width="1.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="101.0" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (25 samples, 0.02%)</title><rect x="99.2" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.2" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (25 samples, 0.02%)</title><rect x="99.2" y="323.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="102.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (133 samples, 0.13%)</title><rect x="99.5" y="419.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.5" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (112 samples, 0.11%)</title><rect x="99.5" y="403.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.5" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (112 samples, 0.11%)</title><rect x="99.5" y="387.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.5" y="398.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (112 samples, 0.11%)</title><rect x="99.5" y="371.0" width="1.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="102.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (108 samples, 0.10%)</title><rect x="101.0" y="419.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.0" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (87 samples, 0.08%)</title><rect x="101.0" y="403.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="104.0" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (87 samples, 0.08%)</title><rect x="101.0" y="387.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.0" y="398.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (87 samples, 0.08%)</title><rect x="101.0" y="371.0" width="1.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="104.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (53,948 samples, 51.32%)</title><rect x="102.2" y="419.0" width="605.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.2" y="430.0">ru/mail/polis/dao/igorlo/PersistentDAO.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (53,948 samples, 51.32%)</title><rect x="102.2" y="403.0" width="605.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.2" y="414.0">ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (44,827 samples, 42.64%)</title><rect x="102.2" y="387.0" width="503.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.2" y="398.0">ru/mail/polis/dao/igorlo/Table.combineTables</text>
</g>
<g>
<title>java.util.ArrayList (65 samples, 0.06%)</title><rect x="102.2" y="371.0" width="0.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="105.2" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (84 samples, 0.08%)</title><rect x="102.9" y="371.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.9" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (84 samples, 0.08%)</title><rect x="102.9" y="355.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.9" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (84 samples, 0.08%)</title><rect x="102.9" y="339.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.9" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (84 samples, 0.08%)</title><rect x="102.9" y="323.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.9" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (84 samples, 0.08%)</title><rect x="102.9" y="307.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.9" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (84 samples, 0.08%)</title><rect x="102.9" y="291.0" width="1.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="105.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (66 samples, 0.06%)</title><rect x="103.9" y="371.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.9" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (66 samples, 0.06%)</title><rect x="103.9" y="355.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="106.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.iterator (1,324 samples, 1.26%)</title><rect x="104.6" y="371.0" width="14.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (194 samples, 0.18%)</title><rect x="104.6" y="355.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (194 samples, 0.18%)</title><rect x="104.6" y="339.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (194 samples, 0.18%)</title><rect x="104.6" y="323.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="107.6" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (140 samples, 0.13%)</title><rect x="104.6" y="307.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.6" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (140 samples, 0.13%)</title><rect x="104.6" y="291.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (140 samples, 0.13%)</title><rect x="104.6" y="275.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (140 samples, 0.13%)</title><rect x="104.6" y="259.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.6" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (140 samples, 0.13%)</title><rect x="104.6" y="243.0" width="1.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="107.6" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (54 samples, 0.05%)</title><rect x="106.2" y="307.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.2" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (54 samples, 0.05%)</title><rect x="106.2" y="291.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.2" y="302.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (54 samples, 0.05%)</title><rect x="106.2" y="275.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="109.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (811 samples, 0.77%)</title><rect x="106.8" y="355.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.8" y="366.0"></text>
</g>
<g>
<title>java.util.ArrayList (56 samples, 0.05%)</title><rect x="106.8" y="339.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="109.8" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (129 samples, 0.12%)</title><rect x="107.4" y="339.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.4" y="350.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (41 samples, 0.04%)</title><rect x="107.4" y="323.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="110.4" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (88 samples, 0.08%)</title><rect x="107.9" y="323.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.9" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (88 samples, 0.08%)</title><rect x="107.9" y="307.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.9" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (88 samples, 0.08%)</title><rect x="107.9" y="291.0" width="1.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="110.9" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (112 samples, 0.11%)</title><rect x="108.9" y="339.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.9" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (112 samples, 0.11%)</title><rect x="108.9" y="323.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.9" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (112 samples, 0.11%)</title><rect x="108.9" y="307.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.9" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (112 samples, 0.11%)</title><rect x="108.9" y="291.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="111.9" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (112 samples, 0.11%)</title><rect x="108.9" y="275.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.9" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (112 samples, 0.11%)</title><rect x="108.9" y="259.0" width="1.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="111.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (514 samples, 0.49%)</title><rect x="110.1" y="339.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (33 samples, 0.03%)</title><rect x="110.1" y="323.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.1" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Values (33 samples, 0.03%)</title><rect x="110.1" y="307.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="113.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (75 samples, 0.07%)</title><rect x="110.5" y="323.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.5" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (75 samples, 0.07%)</title><rect x="110.5" y="307.0" width="0.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="113.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (406 samples, 0.39%)</title><rect x="111.4" y="323.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (406 samples, 0.39%)</title><rect x="111.4" y="307.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (406 samples, 0.39%)</title><rect x="111.4" y="291.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.4" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (406 samples, 0.39%)</title><rect x="111.4" y="275.0" width="4.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="114.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (319 samples, 0.30%)</title><rect x="115.9" y="355.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.9" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (59 samples, 0.06%)</title><rect x="115.9" y="339.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="118.9" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (59 samples, 0.06%)</title><rect x="115.9" y="323.0" width="0.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="118.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (208 samples, 0.20%)</title><rect x="116.6" y="339.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.6" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (31 samples, 0.03%)</title><rect x="116.6" y="323.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="119.6" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (177 samples, 0.17%)</title><rect x="116.9" y="323.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.9" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (47 samples, 0.04%)</title><rect x="116.9" y="307.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="119.9" y="318.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (70 samples, 0.07%)</title><rect x="117.7" y="307.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="120.7" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (41 samples, 0.04%)</title><rect x="118.5" y="307.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="121.5" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (41 samples, 0.04%)</title><rect x="118.5" y="291.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="121.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (52 samples, 0.05%)</title><rect x="118.9" y="339.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="121.9" y="350.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (52 samples, 0.05%)</title><rect x="118.9" y="323.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="121.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.iterator (43,288 samples, 41.18%)</title><rect x="119.5" y="371.0" width="485.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.5" y="382.0">ru/mail/polis/dao/igorlo/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.SSTable$SSTableIterator (310 samples, 0.29%)</title><rect x="119.5" y="355.0" width="3.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="122.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt; (42,978 samples, 40.88%)</title><rect x="123.0" y="355.0" width="482.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.0" y="366.0">ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.position (42,978 samples, 40.88%)</title><rect x="123.0" y="339.0" width="482.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.0" y="350.0">ru/mail/polis/dao/igorlo/SSTable.position</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (21,219 samples, 20.18%)</title><rect x="123.0" y="323.0" width="238.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.0" y="334.0">ru/mail/polis/dao/igorlo/SSTable..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10,539 samples, 10.02%)</title><rect x="123.0" y="307.0" width="118.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.0" y="318.0">java/nio/Direc..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10,539 samples, 10.02%)</title><rect x="123.0" y="291.0" width="118.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.0" y="302.0">java/nio/Direc..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (10,539 samples, 10.02%)</title><rect x="123.0" y="275.0" width="118.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="126.0" y="286.0">java.nio.Direc..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (10,680 samples, 10.16%)</title><rect x="241.3" y="307.0" width="119.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.3" y="318.0">java/nio/Direct..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (10,680 samples, 10.16%)</title><rect x="241.3" y="291.0" width="119.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="244.3" y="302.0">java.nio.Direct..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (21,759 samples, 20.70%)</title><rect x="361.1" y="323.0" width="244.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.1" y="334.0">ru/mail/polis/dao/igorlo/SSTable..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10,842 samples, 10.31%)</title><rect x="361.1" y="307.0" width="121.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.1" y="318.0">java/nio/Direct..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10,842 samples, 10.31%)</title><rect x="361.1" y="291.0" width="121.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.1" y="302.0">java/nio/Direct..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (10,842 samples, 10.31%)</title><rect x="361.1" y="275.0" width="121.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="364.1" y="286.0">java.nio.Direct..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (10,917 samples, 10.38%)</title><rect x="482.8" y="307.0" width="122.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="485.8" y="318.0">java/nio/Direct..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (10,917 samples, 10.38%)</title><rect x="482.8" y="291.0" width="122.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="485.8" y="302.0">java.nio.Direct..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (9,121 samples, 8.68%)</title><rect x="605.4" y="387.0" width="102.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="608.4" y="398.0">ru/mail/poli..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (46 samples, 0.04%)</title><rect x="605.4" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="608.4" y="382.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (46 samples, 0.04%)</title><rect x="605.4" y="355.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="608.4" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (7,247 samples, 6.89%)</title><rect x="605.9" y="371.0" width="81.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="608.9" y="382.0">com/googl..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (56 samples, 0.05%)</title><rect x="605.9" y="355.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="608.9" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (7,191 samples, 6.84%)</title><rect x="606.5" y="355.0" width="80.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.5" y="366.0">com/googl..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (41 samples, 0.04%)</title><rect x="606.5" y="339.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="609.5" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (72 samples, 0.07%)</title><rect x="607.0" y="339.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="610.0" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (72 samples, 0.07%)</title><rect x="607.0" y="323.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="610.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (72 samples, 0.07%)</title><rect x="607.0" y="307.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="610.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (72 samples, 0.07%)</title><rect x="607.0" y="291.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="610.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (72 samples, 0.07%)</title><rect x="607.0" y="275.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (72 samples, 0.07%)</title><rect x="607.0" y="259.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="610.0" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (72 samples, 0.07%)</title><rect x="607.0" y="243.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="610.0" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (72 samples, 0.07%)</title><rect x="607.0" y="227.0" width="0.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="610.0" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (305 samples, 0.29%)</title><rect x="607.8" y="339.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="610.8" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (305 samples, 0.29%)</title><rect x="607.8" y="323.0" width="3.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="610.8" y="334.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (70 samples, 0.07%)</title><rect x="611.2" y="339.0" width="0.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="614.2" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (41 samples, 0.04%)</title><rect x="612.0" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="615.0" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (41 samples, 0.04%)</title><rect x="612.0" y="323.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="615.0" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (6,662 samples, 6.34%)</title><rect x="612.5" y="339.0" width="74.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="615.5" y="350.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (6,662 samples, 6.34%)</title><rect x="612.5" y="323.0" width="74.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.5" y="334.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (82 samples, 0.08%)</title><rect x="612.5" y="307.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="615.5" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (82 samples, 0.08%)</title><rect x="612.5" y="291.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.5" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (82 samples, 0.08%)</title><rect x="612.5" y="275.0" width="0.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="615.5" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (6,580 samples, 6.26%)</title><rect x="613.4" y="307.0" width="73.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.4" y="318.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (6,580 samples, 6.26%)</title><rect x="613.4" y="291.0" width="73.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="616.4" y="302.0">java/uti..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6,580 samples, 6.26%)</title><rect x="613.4" y="275.0" width="73.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.4" y="286.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6,580 samples, 6.26%)</title><rect x="613.4" y="259.0" width="73.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.4" y="270.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (5,125 samples, 4.88%)</title><rect x="613.4" y="243.0" width="57.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="616.4" y="254.0">com/go..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (5,125 samples, 4.88%)</title><rect x="613.4" y="227.0" width="57.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="616.4" y="238.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (5,125 samples, 4.88%)</title><rect x="613.4" y="211.0" width="57.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="616.4" y="222.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (5,125 samples, 4.88%)</title><rect x="613.4" y="195.0" width="57.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="616.4" y="206.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (1,401 samples, 1.33%)</title><rect x="613.4" y="179.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="616.4" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (732 samples, 0.70%)</title><rect x="613.4" y="163.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.4" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (732 samples, 0.70%)</title><rect x="613.4" y="147.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="616.4" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (732 samples, 0.70%)</title><rect x="613.4" y="131.0" width="8.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="616.4" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (669 samples, 0.64%)</title><rect x="621.6" y="163.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.6" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (669 samples, 0.64%)</title><rect x="621.6" y="147.0" width="7.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="624.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (1,311 samples, 1.25%)</title><rect x="629.1" y="179.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.1" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (644 samples, 0.61%)</title><rect x="629.1" y="163.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="632.1" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (644 samples, 0.61%)</title><rect x="629.1" y="147.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.1" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (644 samples, 0.61%)</title><rect x="629.1" y="131.0" width="7.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="632.1" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (667 samples, 0.63%)</title><rect x="636.3" y="163.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.3" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (667 samples, 0.63%)</title><rect x="636.3" y="147.0" width="7.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="639.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (692 samples, 0.66%)</title><rect x="643.8" y="179.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.8" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (692 samples, 0.66%)</title><rect x="643.8" y="163.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.8" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (692 samples, 0.66%)</title><rect x="643.8" y="147.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="646.8" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (692 samples, 0.66%)</title><rect x="643.8" y="131.0" width="7.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="646.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (1,093 samples, 1.04%)</title><rect x="651.6" y="179.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="654.6" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (542 samples, 0.52%)</title><rect x="651.6" y="163.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="654.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (542 samples, 0.52%)</title><rect x="651.6" y="147.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="654.6" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (542 samples, 0.52%)</title><rect x="651.6" y="131.0" width="6.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="654.6" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (551 samples, 0.52%)</title><rect x="657.7" y="163.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.7" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (551 samples, 0.52%)</title><rect x="657.7" y="147.0" width="6.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="660.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (373 samples, 0.35%)</title><rect x="663.9" y="179.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.9" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (373 samples, 0.35%)</title><rect x="663.9" y="163.0" width="4.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="666.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (177 samples, 0.17%)</title><rect x="668.0" y="179.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="671.0" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (177 samples, 0.17%)</title><rect x="668.0" y="163.0" width="2.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="671.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (78 samples, 0.07%)</title><rect x="670.0" y="179.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="673.0" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (78 samples, 0.07%)</title><rect x="670.0" y="163.0" width="0.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="673.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (1,455 samples, 1.38%)</title><rect x="670.9" y="243.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="673.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,455 samples, 1.38%)</title><rect x="670.9" y="227.0" width="16.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.9" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (1,455 samples, 1.38%)</title><rect x="670.9" y="211.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="673.9" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,455 samples, 1.38%)</title><rect x="670.9" y="195.0" width="16.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="673.9" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (1,455 samples, 1.38%)</title><rect x="670.9" y="179.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="673.9" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,455 samples, 1.38%)</title><rect x="670.9" y="163.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="673.9" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (1,455 samples, 1.38%)</title><rect x="670.9" y="147.0" width="16.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.9" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,455 samples, 1.38%)</title><rect x="670.9" y="131.0" width="16.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (1,455 samples, 1.38%)</title><rect x="670.9" y="115.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="673.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (1,455 samples, 1.38%)</title><rect x="670.9" y="99.0" width="16.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="673.9" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,366 samples, 1.30%)</title><rect x="670.9" y="83.0" width="15.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.9" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,366 samples, 1.30%)</title><rect x="670.9" y="67.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="673.9" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,366 samples, 1.30%)</title><rect x="670.9" y="51.0" width="15.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="673.9" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (89 samples, 0.08%)</title><rect x="686.2" y="83.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="689.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (89 samples, 0.08%)</title><rect x="686.2" y="67.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="689.2" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,828 samples, 1.74%)</title><rect x="687.2" y="371.0" width="20.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="690.2" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (38 samples, 0.04%)</title><rect x="687.2" y="355.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="690.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1,790 samples, 1.70%)</title><rect x="687.7" y="355.0" width="20.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.7" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,790 samples, 1.70%)</title><rect x="687.7" y="339.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="690.7" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (57 samples, 0.05%)</title><rect x="687.7" y="323.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.7" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (57 samples, 0.05%)</title><rect x="687.7" y="307.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.7" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (57 samples, 0.05%)</title><rect x="687.7" y="291.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="690.7" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (57 samples, 0.05%)</title><rect x="687.7" y="275.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="690.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (57 samples, 0.05%)</title><rect x="687.7" y="259.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="690.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (57 samples, 0.05%)</title><rect x="687.7" y="243.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (57 samples, 0.05%)</title><rect x="687.7" y="227.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (57 samples, 0.05%)</title><rect x="687.7" y="211.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.7" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (57 samples, 0.05%)</title><rect x="687.7" y="195.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="690.7" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (602 samples, 0.57%)</title><rect x="688.3" y="323.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="691.3" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (602 samples, 0.57%)</title><rect x="688.3" y="307.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="691.3" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (602 samples, 0.57%)</title><rect x="688.3" y="291.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="691.3" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (602 samples, 0.57%)</title><rect x="688.3" y="275.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="691.3" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (602 samples, 0.57%)</title><rect x="688.3" y="259.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="691.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (602 samples, 0.57%)</title><rect x="688.3" y="243.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (602 samples, 0.57%)</title><rect x="688.3" y="227.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="691.3" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (602 samples, 0.57%)</title><rect x="688.3" y="211.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="691.3" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (602 samples, 0.57%)</title><rect x="688.3" y="195.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="691.3" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (602 samples, 0.57%)</title><rect x="688.3" y="179.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.3" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (602 samples, 0.57%)</title><rect x="688.3" y="163.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="691.3" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (602 samples, 0.57%)</title><rect x="688.3" y="147.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="691.3" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (602 samples, 0.57%)</title><rect x="688.3" y="131.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="691.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (602 samples, 0.57%)</title><rect x="688.3" y="115.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="691.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (602 samples, 0.57%)</title><rect x="688.3" y="99.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="691.3" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (588 samples, 0.56%)</title><rect x="688.3" y="83.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.3" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (588 samples, 0.56%)</title><rect x="688.3" y="67.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="691.3" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (588 samples, 0.56%)</title><rect x="688.3" y="51.0" width="6.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="691.3" y="62.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,131 samples, 1.08%)</title><rect x="695.1" y="323.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="698.1" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,131 samples, 1.08%)</title><rect x="695.1" y="307.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.1" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,131 samples, 1.08%)</title><rect x="695.1" y="291.0" width="12.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.1" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,131 samples, 1.08%)</title><rect x="695.1" y="275.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="698.1" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,131 samples, 1.08%)</title><rect x="695.1" y="259.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="698.1" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,131 samples, 1.08%)</title><rect x="695.1" y="243.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="698.1" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (792 samples, 0.75%)</title><rect x="695.1" y="227.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="698.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (792 samples, 0.75%)</title><rect x="695.1" y="211.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="698.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (792 samples, 0.75%)</title><rect x="695.1" y="195.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="698.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (792 samples, 0.75%)</title><rect x="695.1" y="179.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (201 samples, 0.19%)</title><rect x="695.1" y="163.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="698.1" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (120 samples, 0.11%)</title><rect x="695.1" y="147.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="698.1" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (120 samples, 0.11%)</title><rect x="695.1" y="131.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.1" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (120 samples, 0.11%)</title><rect x="695.1" y="115.0" width="1.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="698.1" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (81 samples, 0.08%)</title><rect x="696.4" y="147.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="699.4" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (81 samples, 0.08%)</title><rect x="696.4" y="131.0" width="0.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="699.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (200 samples, 0.19%)</title><rect x="697.3" y="163.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="700.3" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (107 samples, 0.10%)</title><rect x="697.3" y="147.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="700.3" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (107 samples, 0.10%)</title><rect x="697.3" y="131.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="700.3" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (107 samples, 0.10%)</title><rect x="697.3" y="115.0" width="1.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="700.3" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (93 samples, 0.09%)</title><rect x="698.5" y="147.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="701.5" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (93 samples, 0.09%)</title><rect x="698.5" y="131.0" width="1.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="701.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (95 samples, 0.09%)</title><rect x="699.6" y="163.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="702.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (95 samples, 0.09%)</title><rect x="699.6" y="147.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="702.6" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (95 samples, 0.09%)</title><rect x="699.6" y="131.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="702.6" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (95 samples, 0.09%)</title><rect x="699.6" y="115.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="702.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (209 samples, 0.20%)</title><rect x="700.6" y="163.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="703.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (98 samples, 0.09%)</title><rect x="700.6" y="147.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="703.6" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (98 samples, 0.09%)</title><rect x="700.6" y="131.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="703.6" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (98 samples, 0.09%)</title><rect x="700.6" y="115.0" width="1.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="703.6" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (111 samples, 0.11%)</title><rect x="701.7" y="147.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="704.7" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (111 samples, 0.11%)</title><rect x="701.7" y="131.0" width="1.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="704.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (56 samples, 0.05%)</title><rect x="703.0" y="163.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="706.0" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (56 samples, 0.05%)</title><rect x="703.0" y="147.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="706.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (29 samples, 0.03%)</title><rect x="703.6" y="163.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="706.6" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (29 samples, 0.03%)</title><rect x="703.6" y="147.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="706.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (339 samples, 0.32%)</title><rect x="703.9" y="227.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="706.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (339 samples, 0.32%)</title><rect x="703.9" y="211.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="706.9" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (339 samples, 0.32%)</title><rect x="703.9" y="195.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="706.9" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (339 samples, 0.32%)</title><rect x="703.9" y="179.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="706.9" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (339 samples, 0.32%)</title><rect x="703.9" y="163.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="706.9" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (339 samples, 0.32%)</title><rect x="703.9" y="147.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.9" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (339 samples, 0.32%)</title><rect x="703.9" y="131.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="706.9" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (339 samples, 0.32%)</title><rect x="703.9" y="115.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="706.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (339 samples, 0.32%)</title><rect x="703.9" y="99.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="706.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (339 samples, 0.32%)</title><rect x="703.9" y="83.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="706.9" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (296 samples, 0.28%)</title><rect x="703.9" y="67.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="706.9" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (296 samples, 0.28%)</title><rect x="703.9" y="51.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="706.9" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (296 samples, 0.28%)</title><rect x="703.9" y="35.0" width="3.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="706.9" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (43 samples, 0.04%)</title><rect x="707.3" y="67.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="710.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (43 samples, 0.04%)</title><rect x="707.3" y="51.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="710.3" y="62.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (42,963 samples, 40.87%)</title><rect x="707.8" y="563.0" width="482.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="710.8" y="574.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,808 samples, 1.72%)</title><rect x="707.8" y="547.0" width="20.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="710.8" y="558.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,808 samples, 1.72%)</title><rect x="707.8" y="531.0" width="20.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="710.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (41,155 samples, 39.15%)</title><rect x="728.1" y="547.0" width="461.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.1" y="558.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (41,155 samples, 39.15%)</title><rect x="728.1" y="531.0" width="461.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.1" y="542.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (41,154 samples, 39.15%)</title><rect x="728.1" y="515.0" width="461.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.1" y="526.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (17,269 samples, 16.43%)</title><rect x="728.1" y="499.0" width="193.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.1" y="510.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (17,269 samples, 16.43%)</title><rect x="728.1" y="483.0" width="193.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="731.1" y="494.0">one/nio/http/HttpServer.h..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (13,668 samples, 13.00%)</title><rect x="728.1" y="467.0" width="153.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.1" y="478.0">RequestHandler0_ent..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3,307 samples, 3.15%)</title><rect x="728.1" y="451.0" width="37.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.1" y="462.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (3,307 samples, 3.15%)</title><rect x="728.1" y="435.0" width="37.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.1" y="446.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,307 samples, 3.15%)</title><rect x="728.1" y="419.0" width="37.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.1" y="430.0">jav..</text>
</g>
<g>
<title>java.lang.String (1,565 samples, 1.49%)</title><rect x="728.1" y="403.0" width="17.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="731.1" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,742 samples, 1.66%)</title><rect x="745.6" y="403.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="748.6" y="414.0"></text>
</g>
<g>
<title>byte[] (1,742 samples, 1.66%)</title><rect x="745.6" y="387.0" width="19.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="748.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (10,361 samples, 9.86%)</title><rect x="765.2" y="451.0" width="116.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.2" y="462.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/String.getBytes (1,727 samples, 1.64%)</title><rect x="765.2" y="435.0" width="19.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="768.2" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,727 samples, 1.64%)</title><rect x="765.2" y="419.0" width="19.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="768.2" y="430.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,727 samples, 1.64%)</title><rect x="765.2" y="403.0" width="19.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.2" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,727 samples, 1.64%)</title><rect x="765.2" y="387.0" width="19.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="768.2" y="398.0"></text>
</g>
<g>
<title>byte[] (1,727 samples, 1.64%)</title><rect x="765.2" y="371.0" width="19.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="768.2" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,491 samples, 1.42%)</title><rect x="784.6" y="435.0" width="16.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="787.6" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,491 samples, 1.42%)</title><rect x="784.6" y="419.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/454019155.get$Lambda (1,491 samples, 1.42%)</title><rect x="784.6" y="403.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="787.6" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.service.igorlo.AsyncService$$Lambda$62 (1,491 samples, 1.42%)</title><rect x="784.6" y="387.0" width="16.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="787.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,150 samples, 3.00%)</title><rect x="801.3" y="435.0" width="35.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.3" y="446.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,150 samples, 3.00%)</title><rect x="801.3" y="419.0" width="35.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.3" y="430.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,150 samples, 3.00%)</title><rect x="801.3" y="403.0" width="35.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="804.3" y="414.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (3,105 samples, 2.95%)</title><rect x="836.7" y="435.0" width="34.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.7" y="446.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,536 samples, 1.46%)</title><rect x="836.7" y="419.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="839.7" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,536 samples, 1.46%)</title><rect x="836.7" y="403.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="839.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.get$Lambda (1,536 samples, 1.46%)</title><rect x="836.7" y="387.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="839.7" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.service.igorlo.AsyncService$$Lambda$64 (1,536 samples, 1.46%)</title><rect x="836.7" y="371.0" width="17.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="839.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1,569 samples, 1.49%)</title><rect x="853.9" y="419.0" width="17.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="856.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1,569 samples, 1.49%)</title><rect x="853.9" y="403.0" width="17.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="856.9" y="414.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (1,551 samples, 1.48%)</title><rect x="853.9" y="387.0" width="17.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="856.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.primaryFor (888 samples, 0.84%)</title><rect x="871.5" y="435.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="874.5" y="446.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (888 samples, 0.84%)</title><rect x="871.5" y="419.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="874.5" y="430.0"></text>
</g>
<g>
<title>java.lang.Integer (888 samples, 0.84%)</title><rect x="871.5" y="403.0" width="10.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="874.5" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3,601 samples, 3.43%)</title><rect x="881.5" y="467.0" width="40.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="884.5" y="478.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (3,601 samples, 3.43%)</title><rect x="881.5" y="451.0" width="40.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="884.5" y="462.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,601 samples, 3.43%)</title><rect x="881.5" y="435.0" width="40.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="884.5" y="446.0">jav..</text>
</g>
<g>
<title>java.lang.String (1,628 samples, 1.55%)</title><rect x="881.5" y="419.0" width="18.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="884.5" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,973 samples, 1.88%)</title><rect x="899.7" y="419.0" width="22.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="902.7" y="430.0">j..</text>
</g>
<g>
<title>byte[] (1,973 samples, 1.88%)</title><rect x="899.7" y="403.0" width="22.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="902.7" y="414.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (15,870 samples, 15.10%)</title><rect x="921.9" y="499.0" width="178.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="924.9" y="510.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one.nio.http.Request (2,681 samples, 2.55%)</title><rect x="921.9" y="483.0" width="30.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="924.9" y="494.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4,855 samples, 4.62%)</title><rect x="952.0" y="483.0" width="54.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="955.0" y="494.0">one/n..</text>
</g>
<g>
<title>java.lang.String[] (4,832 samples, 4.60%)</title><rect x="952.0" y="467.0" width="54.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="955.0" y="478.0">java...</text>
</g>
<g>
<title>java.lang.String[] (23 samples, 0.02%)</title><rect x="1006.2" y="467.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1009.2" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8,334 samples, 7.93%)</title><rect x="1006.5" y="483.0" width="93.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.5" y="494.0">one/nio/uti..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (8,334 samples, 7.93%)</title><rect x="1006.5" y="467.0" width="93.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1009.5" y="478.0">one/nio/uti..</text>
</g>
<g>
<title>char[] (4,205 samples, 4.00%)</title><rect x="1006.5" y="451.0" width="47.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1009.5" y="462.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,486 samples, 1.41%)</title><rect x="1053.7" y="451.0" width="16.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1056.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,639 samples, 2.51%)</title><rect x="1070.4" y="451.0" width="29.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1073.4" y="462.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,639 samples, 2.51%)</title><rect x="1070.4" y="435.0" width="29.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1073.4" y="446.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,639 samples, 2.51%)</title><rect x="1070.4" y="419.0" width="29.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1073.4" y="430.0">ja..</text>
</g>
<g>
<title>byte[] (2,639 samples, 2.51%)</title><rect x="1070.4" y="403.0" width="29.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1073.4" y="414.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (8,015 samples, 7.62%)</title><rect x="1100.0" y="499.0" width="90.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1103.0" y="510.0">one/nio/ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (8,015 samples, 7.62%)</title><rect x="1100.0" y="483.0" width="90.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1103.0" y="494.0">one/nio/ut..</text>
</g>
<g>
<title>char[] (3,777 samples, 3.59%)</title><rect x="1100.0" y="467.0" width="42.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1103.0" y="478.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,600 samples, 1.52%)</title><rect x="1142.4" y="467.0" width="18.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1145.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,638 samples, 2.51%)</title><rect x="1160.4" y="467.0" width="29.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1163.4" y="478.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,638 samples, 2.51%)</title><rect x="1160.4" y="451.0" width="29.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1163.4" y="462.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,638 samples, 2.51%)</title><rect x="1160.4" y="435.0" width="29.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1163.4" y="446.0">ja..</text>
</g>
<g>
<title>byte[] (2,638 samples, 2.51%)</title><rect x="1160.4" y="419.0" width="29.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1163.4" y="430.0">by..</text>
</g>
</g>
</svg>
