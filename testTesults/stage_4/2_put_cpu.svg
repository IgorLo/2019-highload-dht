<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (4,123 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.02%)</title><rect x="10.0" y="1235.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.10%)</title><rect x="10.3" y="1235.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.3" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.10%)</title><rect x="10.3" y="1219.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.3" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.10%)</title><rect x="10.3" y="1203.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.3" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.10%)</title><rect x="10.3" y="1187.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.3" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.10%)</title><rect x="10.3" y="1171.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.3" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.10%)</title><rect x="10.3" y="1155.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.3" y="1166.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="10.6" y="1139.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.6" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="10.9" y="1139.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.9" y="1150.0"></text>
</g>
<g>
<title>G1AllocRegion::par_allocate(HeapRegion*, unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="10.9" y="1123.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.9" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned (1 samples, 0.02%)</title><rect x="11.1" y="1139.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="14.1" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="11.4" y="1235.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.4" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="11.4" y="1219.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.4" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="11.4" y="1203.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.4" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="11.4" y="1187.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.4" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="11.4" y="1171.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.4" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="11.4" y="1155.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.4" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned (1 samples, 0.02%)</title><rect x="11.4" y="1139.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="14.4" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="11.7" y="1235.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.7" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="11.7" y="1219.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.7" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="11.7" y="1203.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.7" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="11.7" y="1187.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.7" y="1198.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="11.7" y="1171.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.7" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="12.0" y="1171.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.0" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="12.0" y="1155.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.0" y="1166.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="12.0" y="1139.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.0" y="1150.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="12.0" y="1123.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.0" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (27 samples, 0.65%)</title><rect x="12.3" y="1235.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.3" y="1246.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.02%)</title><rect x="12.3" y="1219.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.3" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (24 samples, 0.58%)</title><rect x="12.6" y="1219.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.6" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (13 samples, 0.32%)</title><rect x="13.4" y="1203.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.4" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.07%)</title><rect x="14.0" y="1187.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.0" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.17%)</title><rect x="14.9" y="1187.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="17.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="15.2" y="1171.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="18.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="15.2" y="1155.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="18.2" y="1166.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="16.9" y="1187.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="19.9" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.17%)</title><rect x="17.2" y="1203.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="20.2" y="1214.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="19.2" y="1203.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="22.2" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="19.4" y="1219.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="22.4" y="1230.0"></text>
</g>
<g>
<title>jfr_is_event_enabled(JfrEventId) (1 samples, 0.02%)</title><rect x="19.7" y="1219.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="22.7" y="1230.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.02%)</title><rect x="20.0" y="1235.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="23.0" y="1246.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int, int) (1 samples, 0.02%)</title><rect x="20.0" y="1219.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="23.0" y="1230.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 0.02%)</title><rect x="20.0" y="1203.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.0" y="1214.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.02%)</title><rect x="20.0" y="1187.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="23.0" y="1198.0"></text>
</g>
<g>
<title>compiledVFrame::compiledVFrame(frame const*, RegisterMap const*, JavaThread*, CompiledMethod*) (1 samples, 0.02%)</title><rect x="20.0" y="1171.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="23.0" y="1182.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.02%)</title><rect x="20.0" y="1155.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="23.0" y="1166.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.02%)</title><rect x="20.0" y="1139.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="23.0" y="1150.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.05%)</title><rect x="20.3" y="1235.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="23.3" y="1246.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.10%)</title><rect x="20.9" y="1235.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="23.9" y="1246.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.02%)</title><rect x="20.9" y="1219.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="23.9" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="21.2" y="1219.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.2" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.02%)</title><rect x="21.2" y="1203.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="24.2" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="21.2" y="1187.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="24.2" y="1198.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="21.2" y="1171.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="24.2" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="21.4" y="1219.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.4" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.02%)</title><rect x="21.7" y="1219.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.7" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="21.7" y="1203.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="24.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="21.7" y="1187.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="24.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="21.7" y="1171.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="24.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="22.0" y="1235.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="25.0" y="1246.0"></text>
</g>
<g>
<title>__close_nocancel (2 samples, 0.05%)</title><rect x="22.0" y="1219.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="25.0" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="22.0" y="1203.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="25.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="22.0" y="1187.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="25.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="22.0" y="1171.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="25.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="22.0" y="1155.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="25.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.3" y="1139.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="25.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.3" y="1123.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="25.3" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="22.6" y="1219.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="25.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.6" y="1203.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="25.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.6" y="1187.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="25.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.6" y="1171.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="25.6" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.6" y="1155.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="25.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.6" y="1139.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="25.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.6" y="1123.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="25.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.6" y="1107.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="25.6" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.6" y="1091.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="25.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="22.6" y="1075.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="25.6" y="1086.0"></text>
</g>
<g>
<title>[unknown_Java] (42 samples, 1.02%)</title><rect x="22.9" y="1235.0" width="12.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="25.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="27.7" y="1219.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="30.7" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="27.7" y="1203.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="30.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.7" y="1187.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="30.7" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.7" y="1171.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="30.7" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.7" y="1155.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="30.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.7" y="1139.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="30.7" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.7" y="1123.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="30.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.7" y="1107.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="30.7" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="27.7" y="1091.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="30.7" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.0" y="1203.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="31.0" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.0" y="1187.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="31.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.0" y="1171.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="31.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.0" y="1155.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="31.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.0" y="1139.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="31.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="28.0" y="1123.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="31.0" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="28.3" y="1203.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="31.3" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.12%)</title><rect x="28.9" y="1219.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="31.9" y="1230.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (16 samples, 0.39%)</title><rect x="30.3" y="1219.0" width="4.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="33.3" y="1230.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.36%)</title><rect x="30.6" y="1203.0" width="4.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="33.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.36%)</title><rect x="30.6" y="1187.0" width="4.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="33.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.34%)</title><rect x="30.9" y="1171.0" width="4.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="33.9" y="1182.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.34%)</title><rect x="30.9" y="1155.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="33.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.34%)</title><rect x="30.9" y="1139.0" width="4.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="33.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.32%)</title><rect x="31.2" y="1123.0" width="3.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="34.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.24%)</title><rect x="32.0" y="1107.0" width="2.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="35.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.22%)</title><rect x="32.3" y="1091.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="35.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="34.6" y="1075.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="37.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="34.6" y="1059.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="37.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="34.6" y="1043.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="37.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="34.6" y="1027.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="37.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="34.6" y="1011.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="37.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="34.6" y="995.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="37.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="34.6" y="979.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="37.6" y="990.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.02%)</title><rect x="34.9" y="1235.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="37.9" y="1246.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 0.34%)</title><rect x="35.2" y="1235.0" width="4.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="38.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.29%)</title><rect x="35.8" y="1219.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="38.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.29%)</title><rect x="35.8" y="1203.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="38.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.29%)</title><rect x="35.8" y="1187.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="38.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.29%)</title><rect x="35.8" y="1171.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="38.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.27%)</title><rect x="36.0" y="1155.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="39.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.22%)</title><rect x="36.6" y="1139.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="39.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.17%)</title><rect x="37.2" y="1123.0" width="2.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="40.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="37.5" y="1107.0" width="1.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="40.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="38.6" y="1091.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="41.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="38.9" y="1075.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="41.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="38.9" y="1059.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="41.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="38.9" y="1043.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="41.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="38.9" y="1027.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="41.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="38.9" y="1011.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="41.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="38.9" y="995.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="41.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="38.9" y="979.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="41.9" y="990.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="39.2" y="1235.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="42.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,313 samples, 56.10%)</title><rect x="39.5" y="1235.0" width="662.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.5" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,313 samples, 56.10%)</title><rect x="39.5" y="1219.0" width="662.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.5" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,313 samples, 56.10%)</title><rect x="39.5" y="1203.0" width="662.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.5" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.02%)</title><rect x="40.9" y="1187.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.19%)</title><rect x="41.2" y="1187.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.19%)</title><rect x="41.2" y="1171.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.19%)</title><rect x="41.2" y="1155.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.2" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run (1 samples, 0.02%)</title><rect x="43.2" y="1139.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (476 samples, 11.54%)</title><rect x="43.5" y="1187.0" width="136.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.5" y="1198.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (474 samples, 11.50%)</title><rect x="44.1" y="1171.0" width="135.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.1" y="1182.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (348 samples, 8.44%)</title><rect x="44.6" y="1155.0" width="99.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.6" y="1166.0">java/util/co..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.07%)</title><rect x="47.5" y="1139.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (24 samples, 0.58%)</title><rect x="48.4" y="1139.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="54.9" y="1123.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="54.9" y="1107.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.9" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="54.9" y="1091.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.9" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="54.9" y="1075.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="57.9" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="54.9" y="1059.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="57.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (37 samples, 0.90%)</title><rect x="55.2" y="1139.0" width="10.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (37 samples, 0.90%)</title><rect x="55.2" y="1123.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="58.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 0.68%)</title><rect x="57.5" y="1107.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 0.68%)</title><rect x="57.5" y="1091.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="60.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.05%)</title><rect x="57.8" y="1075.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.8" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (25 samples, 0.61%)</title><rect x="58.4" y="1075.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.4" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.10%)</title><rect x="58.7" y="1059.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="61.7" y="1070.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="58.7" y="1043.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="61.7" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.02%)</title><rect x="58.9" y="1043.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="61.9" y="1054.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="59.2" y="1043.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="62.2" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="59.5" y="1043.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="62.5" y="1054.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (20 samples, 0.49%)</title><rect x="59.8" y="1059.0" width="5.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="62.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.41%)</title><rect x="60.7" y="1043.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="63.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.41%)</title><rect x="60.7" y="1027.0" width="4.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="63.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.41%)</title><rect x="60.7" y="1011.0" width="4.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="63.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.41%)</title><rect x="60.7" y="995.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="63.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.41%)</title><rect x="60.7" y="979.0" width="4.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="63.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.36%)</title><rect x="61.2" y="963.0" width="4.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="64.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.34%)</title><rect x="61.5" y="947.0" width="4.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="64.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.34%)</title><rect x="61.5" y="931.0" width="4.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="64.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.02%)</title><rect x="65.5" y="1107.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (274 samples, 6.65%)</title><rect x="65.8" y="1139.0" width="78.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.8" y="1150.0">java/util..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="66.4" y="1123.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="69.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="66.4" y="1107.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="69.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="66.4" y="1091.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="69.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="66.4" y="1075.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="69.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="66.4" y="1059.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="69.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="66.4" y="1043.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="69.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="66.4" y="1027.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="69.4" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (271 samples, 6.57%)</title><rect x="66.7" y="1123.0" width="77.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.7" y="1134.0">jdk/inter..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="69.0" y="1107.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="72.0" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.02%)</title><rect x="69.2" y="1107.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="72.2" y="1118.0"></text>
</g>
<g>
<title>Unsafe_Park (129 samples, 3.13%)</title><rect x="69.5" y="1107.0" width="36.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="72.5" y="1118.0">Uns..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="71.2" y="1091.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="74.2" y="1102.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.07%)</title><rect x="71.5" y="1091.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="74.5" y="1102.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="72.4" y="1091.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="75.4" y="1102.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="72.7" y="1091.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="75.7" y="1102.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (40 samples, 0.97%)</title><rect x="73.0" y="1091.0" width="11.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="76.0" y="1102.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.07%)</title><rect x="79.8" y="1075.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="82.8" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.17%)</title><rect x="80.7" y="1075.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="83.7" y="1086.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (5 samples, 0.12%)</title><rect x="81.3" y="1059.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="84.3" y="1070.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.05%)</title><rect x="82.7" y="1075.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="85.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.3" y="1075.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="86.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.3" y="1059.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="86.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.3" y="1043.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="86.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.3" y="1027.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="86.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.3" y="1011.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="86.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.3" y="995.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="86.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.3" y="979.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="86.3" y="990.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.07%)</title><rect x="83.6" y="1075.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="86.6" y="1086.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="84.4" y="1091.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="87.4" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.02%)</title><rect x="84.7" y="1091.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="87.7" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (4 samples, 0.10%)</title><rect x="85.0" y="1091.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="88.0" y="1102.0"></text>
</g>
<g>
<title>__lll_unlock_wake (55 samples, 1.33%)</title><rect x="86.1" y="1091.0" width="15.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="89.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.16%)</title><rect x="88.1" y="1075.0" width="13.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="91.1" y="1086.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.16%)</title><rect x="88.1" y="1059.0" width="13.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="91.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.56%)</title><rect x="95.3" y="1043.0" width="6.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="98.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.51%)</title><rect x="95.9" y="1027.0" width="6.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="98.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.49%)</title><rect x="96.1" y="1011.0" width="5.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="99.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.32%)</title><rect x="98.1" y="995.0" width="3.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="101.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.17%)</title><rect x="99.9" y="979.0" width="2.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="102.9" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.05%)</title><rect x="101.9" y="1091.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="104.9" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.05%)</title><rect x="102.4" y="1091.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="105.4" y="1102.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.05%)</title><rect x="103.0" y="1091.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="106.0" y="1102.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="103.6" y="1091.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="106.6" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="103.9" y="1091.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="106.9" y="1102.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="104.2" y="1091.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="107.2" y="1102.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (7 samples, 0.17%)</title><rect x="104.4" y="1091.0" width="2.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="107.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (131 samples, 3.18%)</title><rect x="106.4" y="1107.0" width="37.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="109.4" y="1118.0">[un..</text>
</g>
<g>
<title>__pthread_cleanup_pop (2 samples, 0.05%)</title><rect x="106.4" y="1091.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="109.4" y="1102.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.02%)</title><rect x="107.0" y="1091.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="110.0" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_wait (102 samples, 2.47%)</title><rect x="107.3" y="1091.0" width="29.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="110.3" y="1102.0">__..</text>
</g>
<g>
<title>[unknown] (65 samples, 1.58%)</title><rect x="117.9" y="1075.0" width="18.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="120.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.58%)</title><rect x="117.9" y="1059.0" width="18.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="120.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.24%)</title><rect x="121.9" y="1043.0" width="14.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="124.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 1.12%)</title><rect x="123.3" y="1027.0" width="13.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="126.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.09%)</title><rect x="123.6" y="1011.0" width="12.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="126.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.99%)</title><rect x="124.8" y="995.0" width="11.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="127.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.75%)</title><rect x="127.6" y="979.0" width="8.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="130.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.61%)</title><rect x="129.3" y="963.0" width="7.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="132.3" y="974.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.56%)</title><rect x="129.9" y="947.0" width="6.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="132.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="135.1" y="931.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="138.1" y="942.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="135.1" y="915.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="138.1" y="926.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="135.1" y="899.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="138.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="135.1" y="883.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="138.1" y="894.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="135.1" y="867.0" width="1.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="138.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="135.1" y="851.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="138.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="135.1" y="835.0" width="1.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="138.1" y="846.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.12%)</title><rect x="136.5" y="1091.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="139.5" y="1102.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="137.9" y="1091.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="140.9" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (12 samples, 0.29%)</title><rect x="138.5" y="1091.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="141.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="141.7" y="1075.0" width="0.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="144.7" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="141.7" y="1059.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="144.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="141.7" y="1043.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="144.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="141.7" y="1027.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="144.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="141.7" y="1011.0" width="0.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="144.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="141.7" y="995.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="144.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="141.7" y="979.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="144.7" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.12%)</title><rect x="141.9" y="1091.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="144.9" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.05%)</title><rect x="143.4" y="1091.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="146.4" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="143.9" y="1107.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="146.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="143.9" y="1091.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="146.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="143.9" y="1075.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="146.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="143.9" y="1059.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="146.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="143.9" y="1043.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="146.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="143.9" y="1027.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="146.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="143.9" y="1011.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="146.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="143.9" y="995.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="146.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="144.2" y="1155.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.02%)</title><rect x="144.2" y="1139.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="147.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.02%)</title><rect x="144.2" y="1123.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="147.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.02%)</title><rect x="144.2" y="1107.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.07%)</title><rect x="144.5" y="1155.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (10 samples, 0.24%)</title><rect x="145.4" y="1155.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (10 samples, 0.24%)</title><rect x="145.4" y="1139.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (10 samples, 0.24%)</title><rect x="145.4" y="1123.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="147.4" y="1107.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="150.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="147.4" y="1091.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.4" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="147.4" y="1075.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.4" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.05%)</title><rect x="147.4" y="1059.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="150.4" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="147.4" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="150.4" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="147.4" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="150.4" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="147.4" y="1011.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="150.4" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.02%)</title><rect x="147.7" y="1043.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="150.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="147.7" y="1027.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="150.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="147.7" y="1011.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="150.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="147.7" y="995.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="150.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="147.7" y="979.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="150.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="147.7" y="963.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="150.7" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="147.7" y="947.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="150.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.02%)</title><rect x="147.9" y="1107.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="150.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (110 samples, 2.67%)</title><rect x="148.2" y="1155.0" width="31.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="151.2" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (110 samples, 2.67%)</title><rect x="148.2" y="1139.0" width="31.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="151.2" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (110 samples, 2.67%)</title><rect x="148.2" y="1123.0" width="31.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.2" y="1134.0">ja..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="156.0" y="1107.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="159.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="156.0" y="1091.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="159.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="156.0" y="1075.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="159.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="156.0" y="1059.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="159.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="156.0" y="1043.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="159.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="156.0" y="1027.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="159.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="156.0" y="1011.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="159.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 1.99%)</title><rect x="156.2" y="1107.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.2" y="1118.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (82 samples, 1.99%)</title><rect x="156.2" y="1091.0" width="23.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.2" y="1102.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.02%)</title><rect x="157.1" y="1075.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="160.1" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Unpark (16 samples, 0.39%)</title><rect x="157.4" y="1075.0" width="4.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="160.4" y="1086.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="157.4" y="1059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="160.4" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.05%)</title><rect x="157.7" y="1059.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="160.7" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.02%)</title><rect x="158.3" y="1059.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="161.3" y="1070.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="158.5" y="1059.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="161.5" y="1070.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.12%)</title><rect x="158.8" y="1059.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="161.8" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.12%)</title><rect x="160.3" y="1059.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="163.3" y="1070.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="161.7" y="1059.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="164.7" y="1070.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (62 samples, 1.50%)</title><rect x="162.0" y="1075.0" width="17.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="165.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.33%)</title><rect x="164.0" y="1059.0" width="15.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="167.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.33%)</title><rect x="164.0" y="1043.0" width="15.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="167.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 1.29%)</title><rect x="164.5" y="1027.0" width="15.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="167.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 1.29%)</title><rect x="164.5" y="1011.0" width="15.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="167.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 1.29%)</title><rect x="164.5" y="995.0" width="15.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="167.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.21%)</title><rect x="165.4" y="979.0" width="14.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="168.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 1.04%)</title><rect x="167.4" y="963.0" width="12.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="170.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 1.02%)</title><rect x="167.7" y="947.0" width="12.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="170.7" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$FlushingTask.run (112 samples, 2.72%)</title><rect x="179.7" y="1187.0" width="32.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="182.7" y="1198.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.flushAndLoad (112 samples, 2.72%)</title><rect x="179.7" y="1171.0" width="32.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.7" y="1182.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.flush (112 samples, 2.72%)</title><rect x="179.7" y="1155.0" width="32.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.7" y="1166.0">ru..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.02%)</title><rect x="184.3" y="1139.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.3" y="1150.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.07%)</title><rect x="184.6" y="1139.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="187.6" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="184.6" y="1123.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="184.9" y="1107.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="187.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="185.2" y="1091.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="185.2" y="1075.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.05%)</title><rect x="185.4" y="1139.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="188.4" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (3 samples, 0.07%)</title><rect x="186.0" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="189.0" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putIntUnaligned (1 samples, 0.02%)</title><rect x="186.6" y="1123.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="189.6" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (1 samples, 0.02%)</title><rect x="186.6" y="1107.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.6" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3 samples, 0.07%)</title><rect x="186.9" y="1139.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="189.9" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.05%)</title><rect x="187.7" y="1139.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.7" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.05%)</title><rect x="187.7" y="1123.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.7" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="188.0" y="1107.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.0" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="188.0" y="1091.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="188.0" y="1075.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="191.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (3 samples, 0.07%)</title><rect x="188.3" y="1139.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.05%)</title><rect x="188.6" y="1123.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.02%)</title><rect x="188.9" y="1107.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.9" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.05%)</title><rect x="189.2" y="1139.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="189.2" y="1123.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="189.4" y="1107.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="189.4" y="1091.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="192.4" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="189.4" y="1075.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.4" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (2 samples, 0.05%)</title><rect x="189.7" y="1139.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.7" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="189.7" y="1123.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.7" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="189.7" y="1107.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.7" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="189.7" y="1091.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="192.7" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="189.7" y="1075.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="190.0" y="1059.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.0" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="190.0" y="1043.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="193.0" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (75 samples, 1.82%)</title><rect x="190.3" y="1139.0" width="21.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.3" y="1150.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (8 samples, 0.19%)</title><rect x="190.6" y="1123.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (8 samples, 0.19%)</title><rect x="190.6" y="1107.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (7 samples, 0.17%)</title><rect x="190.9" y="1091.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="193.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (7 samples, 0.17%)</title><rect x="190.9" y="1075.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.9" y="1086.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (5 samples, 0.12%)</title><rect x="191.2" y="1059.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="194.2" y="1070.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="191.5" y="1043.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="194.5" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.296] (1 samples, 0.02%)</title><rect x="191.7" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="194.7" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.05%)</title><rect x="192.0" y="1043.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="195.0" y="1054.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="192.6" y="1059.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="195.6" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.02%)</title><rect x="192.9" y="1123.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.02%)</title><rect x="192.9" y="1107.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="195.9" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (64 samples, 1.55%)</title><rect x="193.2" y="1123.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.10%)</title><rect x="193.7" y="1107.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.7" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.10%)</title><rect x="193.7" y="1091.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="196.7" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (1 samples, 0.02%)</title><rect x="193.7" y="1075.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.7" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.07%)</title><rect x="194.0" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.0" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.07%)</title><rect x="194.0" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.0" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.07%)</title><rect x="194.0" y="1043.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.0" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.02%)</title><rect x="194.3" y="1027.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.3" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.02%)</title><rect x="194.6" y="1027.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.02%)</title><rect x="194.6" y="1011.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (1 samples, 0.02%)</title><rect x="194.6" y="995.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.6" y="1006.0"></text>
</g>
<g>
<title>java_lang_Class::as_Klass(oopDesc*) (1 samples, 0.02%)</title><rect x="194.6" y="979.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="197.6" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.02%)</title><rect x="194.9" y="1107.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.9" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (55 samples, 1.33%)</title><rect x="195.2" y="1107.0" width="15.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.2" y="1118.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="195.5" y="1091.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.5" y="1102.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="195.5" y="1075.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="198.5" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="195.5" y="1059.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="198.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="195.5" y="1043.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.5" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (53 samples, 1.29%)</title><rect x="195.7" y="1091.0" width="15.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.7" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (53 samples, 1.29%)</title><rect x="195.7" y="1075.0" width="15.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.7" y="1086.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.02%)</title><rect x="195.7" y="1059.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="198.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.21%)</title><rect x="196.0" y="1059.0" width="14.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="199.0" y="1070.0"></text>
</g>
<g>
<title>__write (50 samples, 1.21%)</title><rect x="196.0" y="1043.0" width="14.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="199.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.16%)</title><rect x="196.6" y="1027.0" width="13.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="199.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.16%)</title><rect x="196.6" y="1011.0" width="13.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="199.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 1.07%)</title><rect x="197.7" y="995.0" width="12.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="200.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 1.07%)</title><rect x="197.7" y="979.0" width="12.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="200.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 1.04%)</title><rect x="198.0" y="963.0" width="12.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="201.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 1.04%)</title><rect x="198.0" y="947.0" width="12.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="201.0" y="958.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 1.02%)</title><rect x="198.3" y="931.0" width="12.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="201.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.92%)</title><rect x="199.5" y="915.0" width="10.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="202.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.85%)</title><rect x="200.3" y="899.0" width="10.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="203.3" y="910.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.82%)</title><rect x="200.6" y="883.0" width="9.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="203.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.78%)</title><rect x="201.2" y="867.0" width="9.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="204.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.68%)</title><rect x="202.3" y="851.0" width="8.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="205.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.58%)</title><rect x="203.5" y="835.0" width="6.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="206.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.51%)</title><rect x="204.3" y="819.0" width="6.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="207.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.44%)</title><rect x="205.2" y="803.0" width="5.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="208.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.44%)</title><rect x="205.2" y="787.0" width="5.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="208.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.44%)</title><rect x="205.2" y="771.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="208.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.44%)</title><rect x="205.2" y="755.0" width="5.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="208.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.36%)</title><rect x="206.0" y="739.0" width="4.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="209.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.29%)</title><rect x="206.9" y="723.0" width="3.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="209.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.29%)</title><rect x="206.9" y="707.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="209.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.22%)</title><rect x="207.8" y="691.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="210.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="208.6" y="675.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="211.6" y="686.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.05%)</title><rect x="210.3" y="1059.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="213.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="210.9" y="1107.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="213.9" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.02%)</title><rect x="211.2" y="1091.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.2" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.02%)</title><rect x="211.2" y="1075.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.2" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.02%)</title><rect x="211.5" y="1123.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.5" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title><rect x="211.5" y="1107.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.5" y="1118.0"></text>
</g>
<g>
<title>pthread_self@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="211.5" y="1091.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="214.5" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run (1,711 samples, 41.50%)</title><rect x="211.8" y="1187.0" width="489.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.8" y="1198.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4 (1,711 samples, 41.50%)</title><rect x="211.8" y="1171.0" width="489.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.8" y="1182.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,435 samples, 34.80%)</title><rect x="211.8" y="1155.0" width="410.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.8" y="1166.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (11 samples, 0.27%)</title><rect x="214.9" y="1139.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="217.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="216.6" y="1123.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.10%)</title><rect x="216.9" y="1123.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.07%)</title><rect x="217.2" y="1107.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,326 samples, 32.16%)</title><rect x="218.1" y="1139.0" width="379.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.1" y="1150.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (41 samples, 0.99%)</title><rect x="218.1" y="1123.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.1" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (22 samples, 0.53%)</title><rect x="223.5" y="1107.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (22 samples, 0.53%)</title><rect x="223.5" y="1091.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.charAt (22 samples, 0.53%)</title><rect x="223.5" y="1075.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.5" y="1086.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="228.9" y="1059.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="231.9" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,285 samples, 31.17%)</title><rect x="229.8" y="1123.0" width="367.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.8" y="1134.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,285 samples, 31.17%)</title><rect x="229.8" y="1107.0" width="367.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.8" y="1118.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,285 samples, 31.17%)</title><rect x="229.8" y="1091.0" width="367.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.8" y="1102.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,285 samples, 31.17%)</title><rect x="229.8" y="1075.0" width="367.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.8" y="1086.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (62 samples, 1.50%)</title><rect x="232.1" y="1059.0" width="17.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="235.1" y="1070.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 1.50%)</title><rect x="232.1" y="1043.0" width="17.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="235.1" y="1054.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (57 samples, 1.38%)</title><rect x="232.1" y="1027.0" width="16.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="235.1" y="1038.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.17%)</title><rect x="235.0" y="1011.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="238.0" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (3 samples, 0.07%)</title><rect x="237.0" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="240.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="237.8" y="1011.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="240.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="237.8" y="995.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="240.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="237.8" y="979.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="240.8" y="990.0"></text>
</g>
<g>
<title>__memmove_ssse3 (11 samples, 0.27%)</title><rect x="238.1" y="1011.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="241.1" y="1022.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (21 samples, 0.51%)</title><rect x="241.2" y="1011.0" width="6.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="244.2" y="1022.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.12%)</title><rect x="242.7" y="995.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="245.7" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (5 samples, 0.12%)</title><rect x="244.1" y="995.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="247.1" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.02%)</title><rect x="245.5" y="995.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="248.5" y="1006.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.12%)</title><rect x="245.8" y="995.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="248.8" y="1006.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.10%)</title><rect x="247.3" y="1011.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="250.3" y="1022.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="248.4" y="1027.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="251.4" y="1038.0"></text>
</g>
<g>
<title>__send (3 samples, 0.07%)</title><rect x="248.7" y="1027.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="251.7" y="1038.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.02%)</title><rect x="249.5" y="1027.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="252.5" y="1038.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.07%)</title><rect x="249.8" y="1059.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="252.8" y="1070.0"></text>
</g>
<g>
<title>__send (1,212 samples, 29.40%)</title><rect x="250.7" y="1059.0" width="346.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="253.7" y="1070.0">__send</text>
</g>
<g>
<title>[unknown] (1,194 samples, 28.96%)</title><rect x="255.8" y="1043.0" width="341.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="258.8" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,194 samples, 28.96%)</title><rect x="255.8" y="1027.0" width="341.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="258.8" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,177 samples, 28.55%)</title><rect x="260.7" y="1011.0" width="336.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="263.7" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,176 samples, 28.52%)</title><rect x="261.0" y="995.0" width="336.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="264.0" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,169 samples, 28.35%)</title><rect x="263.0" y="979.0" width="334.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="266.0" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,159 samples, 28.11%)</title><rect x="265.9" y="963.0" width="331.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="268.9" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,148 samples, 27.84%)</title><rect x="269.0" y="947.0" width="328.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="272.0" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,140 samples, 27.65%)</title><rect x="271.3" y="931.0" width="326.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="274.3" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,083 samples, 26.27%)</title><rect x="287.6" y="915.0" width="310.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="290.6" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,020 samples, 24.74%)</title><rect x="305.6" y="899.0" width="292.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="308.6" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (977 samples, 23.70%)</title><rect x="318.0" y="883.0" width="279.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="321.0" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (928 samples, 22.51%)</title><rect x="332.0" y="867.0" width="265.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="335.0" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (841 samples, 20.40%)</title><rect x="356.9" y="851.0" width="240.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="359.9" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (809 samples, 19.62%)</title><rect x="366.0" y="835.0" width="231.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="369.0" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (799 samples, 19.38%)</title><rect x="368.9" y="819.0" width="228.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="371.9" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (788 samples, 19.11%)</title><rect x="372.0" y="803.0" width="225.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="375.0" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (772 samples, 18.72%)</title><rect x="376.6" y="787.0" width="221.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="379.6" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (731 samples, 17.73%)</title><rect x="388.4" y="771.0" width="209.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="391.4" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (693 samples, 16.81%)</title><rect x="399.2" y="755.0" width="198.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="402.2" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (648 samples, 15.72%)</title><rect x="412.1" y="739.0" width="185.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="415.1" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (566 samples, 13.73%)</title><rect x="435.6" y="723.0" width="162.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="438.6" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (534 samples, 12.95%)</title><rect x="444.7" y="707.0" width="152.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="447.7" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (509 samples, 12.35%)</title><rect x="451.9" y="691.0" width="145.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="454.9" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (495 samples, 12.01%)</title><rect x="455.9" y="675.0" width="141.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="458.9" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (484 samples, 11.74%)</title><rect x="459.0" y="659.0" width="138.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="462.0" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (470 samples, 11.40%)</title><rect x="463.1" y="643.0" width="134.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="466.1" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (465 samples, 11.28%)</title><rect x="464.5" y="627.0" width="133.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="467.5" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (452 samples, 10.96%)</title><rect x="468.2" y="611.0" width="129.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="471.2" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (432 samples, 10.48%)</title><rect x="473.9" y="595.0" width="123.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="476.9" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (421 samples, 10.21%)</title><rect x="477.1" y="579.0" width="120.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="480.1" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (412 samples, 9.99%)</title><rect x="479.7" y="563.0" width="117.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="482.7" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (402 samples, 9.75%)</title><rect x="482.5" y="547.0" width="115.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="485.5" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (374 samples, 9.07%)</title><rect x="490.5" y="531.0" width="107.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="493.5" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (340 samples, 8.25%)</title><rect x="500.3" y="515.0" width="97.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="503.3" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (318 samples, 7.71%)</title><rect x="506.6" y="499.0" width="91.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="509.6" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (264 samples, 6.40%)</title><rect x="522.0" y="483.0" width="75.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="525.0" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (211 samples, 5.12%)</title><rect x="537.2" y="467.0" width="60.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="540.2" y="478.0">[unkno..</text>
</g>
<g>
<title>[unknown] (194 samples, 4.71%)</title><rect x="542.0" y="451.0" width="55.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="545.0" y="462.0">[unkn..</text>
</g>
<g>
<title>[unknown] (186 samples, 4.51%)</title><rect x="544.3" y="435.0" width="53.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="547.3" y="446.0">[unkn..</text>
</g>
<g>
<title>[unknown] (23 samples, 0.56%)</title><rect x="591.0" y="419.0" width="6.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="594.0" y="430.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.36%)</title><rect x="593.3" y="403.0" width="4.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="596.3" y="414.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.29%)</title><rect x="594.1" y="387.0" width="3.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="597.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (61 samples, 1.48%)</title><rect x="597.6" y="1139.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="600.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.07%)</title><rect x="598.4" y="1123.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="601.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="598.7" y="1107.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="601.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (55 samples, 1.33%)</title><rect x="599.3" y="1123.0" width="15.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="602.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (42 samples, 1.02%)</title><rect x="602.4" y="1107.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="605.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="603.6" y="1091.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="606.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="603.6" y="1075.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="606.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="603.6" y="1059.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="606.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="603.6" y="1043.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="606.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="603.6" y="1027.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="606.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="603.6" y="1011.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="606.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="603.6" y="995.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="606.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (32 samples, 0.78%)</title><rect x="603.9" y="1091.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="606.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (32 samples, 0.78%)</title><rect x="603.9" y="1075.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="606.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.05%)</title><rect x="603.9" y="1059.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="606.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (30 samples, 0.73%)</title><rect x="604.4" y="1059.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="607.4" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.02%)</title><rect x="606.7" y="1043.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="609.7" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="606.7" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="609.7" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="606.7" y="1011.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="609.7" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.02%)</title><rect x="606.7" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="609.7" y="1006.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.02%)</title><rect x="606.7" y="979.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="609.7" y="990.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.02%)</title><rect x="606.7" y="963.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="609.7" y="974.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.10%)</title><rect x="607.0" y="1043.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="610.0" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.05%)</title><rect x="608.2" y="1043.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.2" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.22%)</title><rect x="608.7" y="1043.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="611.7" y="1054.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="609.0" y="1027.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="612.0" y="1038.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.15%)</title><rect x="609.6" y="1027.0" width="1.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="612.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.15%)</title><rect x="609.6" y="1011.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="612.6" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$76/369077687.action (6 samples, 0.15%)</title><rect x="611.3" y="1043.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.12%)</title><rect x="613.0" y="1091.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.12%)</title><rect x="613.0" y="1075.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="616.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.10%)</title><rect x="613.3" y="1059.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="616.3" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.05%)</title><rect x="614.5" y="1107.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="617.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (26 samples, 0.63%)</title><rect x="615.0" y="1139.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="618.0" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="621.6" y="1123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="624.6" y="1134.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.02%)</title><rect x="621.6" y="1107.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="624.6" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.02%)</title><rect x="621.6" y="1091.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="624.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="621.9" y="1123.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="624.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="621.9" y="1107.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="624.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="621.9" y="1091.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="624.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="621.9" y="1075.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="624.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="621.9" y="1059.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="624.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="621.9" y="1043.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="624.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="621.9" y="1027.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="624.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="622.2" y="1011.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="625.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="622.2" y="995.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="625.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="622.2" y="979.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="625.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="622.2" y="963.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="625.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="622.2" y="947.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="625.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="622.2" y="931.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="625.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="622.2" y="915.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="625.2" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="622.2" y="899.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="625.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="622.2" y="883.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="625.2" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$76/369077687.action (276 samples, 6.69%)</title><rect x="622.5" y="1155.0" width="79.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.5" y="1166.0">ru/mail/p..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="622.5" y="1139.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="625.5" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="622.5" y="1123.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="625.5" y="1134.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="622.5" y="1107.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="625.5" y="1118.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)</title><rect x="622.5" y="1091.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="625.5" y="1102.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle const&amp;, int, CompLevel, JavaThread*) [clone .part.147] (1 samples, 0.02%)</title><rect x="622.5" y="1075.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="625.5" y="1086.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="622.5" y="1059.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="625.5" y="1070.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.02%)</title><rect x="622.5" y="1043.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="625.5" y="1054.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.02%)</title><rect x="622.5" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="625.5" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="622.5" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="625.5" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$2 (275 samples, 6.67%)</title><rect x="622.8" y="1139.0" width="78.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="625.8" y="1150.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (275 samples, 6.67%)</title><rect x="622.8" y="1123.0" width="78.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="625.8" y="1134.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.19%)</title><rect x="624.8" y="1107.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="627.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.19%)</title><rect x="624.8" y="1091.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="627.8" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="625.3" y="1075.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="628.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="625.3" y="1059.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="628.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.10%)</title><rect x="625.9" y="1043.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="628.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="625.9" y="1027.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="628.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="625.9" y="1011.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="628.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.05%)</title><rect x="625.9" y="995.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="628.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="626.5" y="1027.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="629.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="626.5" y="1011.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="626.8" y="995.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="629.8" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.02%)</title><rect x="627.0" y="1107.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="630.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.02%)</title><rect x="627.0" y="1091.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="630.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="627.0" y="1075.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="630.0" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="627.0" y="1059.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="630.0" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.upsert (259 samples, 6.28%)</title><rect x="627.3" y="1107.0" width="74.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="630.3" y="1118.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.upsert (259 samples, 6.28%)</title><rect x="627.3" y="1091.0" width="74.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="630.3" y="1102.0">ru/mail/..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="628.5" y="1075.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="631.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (8 samples, 0.19%)</title><rect x="628.8" y="1075.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="631.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (8 samples, 0.19%)</title><rect x="628.8" y="1059.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="631.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (8 samples, 0.19%)</title><rect x="628.8" y="1043.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="631.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.05%)</title><rect x="629.6" y="1027.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.02%)</title><rect x="629.6" y="1011.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.02%)</title><rect x="629.9" y="1011.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="632.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.05%)</title><rect x="630.2" y="1027.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="633.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.05%)</title><rect x="630.2" y="1011.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="633.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.02%)</title><rect x="630.5" y="995.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="630.8" y="1027.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="630.8" y="1011.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="633.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.02%)</title><rect x="630.8" y="995.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (3 samples, 0.07%)</title><rect x="631.1" y="1075.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (3 samples, 0.07%)</title><rect x="631.1" y="1059.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (3 samples, 0.07%)</title><rect x="631.1" y="1043.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (2 samples, 0.05%)</title><rect x="631.3" y="1027.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="634.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.readLock (1 samples, 0.02%)</title><rect x="631.9" y="1075.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="634.9" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.upsert (212 samples, 5.14%)</title><rect x="632.2" y="1075.0" width="60.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.2" y="1086.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (208 samples, 5.04%)</title><rect x="632.5" y="1059.0" width="59.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="635.5" y="1070.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (207 samples, 5.02%)</title><rect x="632.8" y="1043.0" width="59.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="635.8" y="1054.0">java/u..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="641.4" y="1027.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="644.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="641.4" y="1011.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="644.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="641.4" y="995.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="644.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="641.4" y="979.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="644.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="641.4" y="963.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="644.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="641.4" y="947.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="644.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="641.4" y="931.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="644.4" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (41 samples, 0.99%)</title><rect x="641.6" y="1027.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (15 samples, 0.36%)</title><rect x="649.1" y="1011.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="652.1" y="1022.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="653.1" y="995.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="656.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="653.4" y="1027.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (6 samples, 0.15%)</title><rect x="653.7" y="1027.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (4 samples, 0.10%)</title><rect x="655.4" y="1027.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (2 samples, 0.05%)</title><rect x="656.5" y="1027.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (10 samples, 0.24%)</title><rect x="657.1" y="1027.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.02%)</title><rect x="658.2" y="1011.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="661.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.02%)</title><rect x="658.2" y="995.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="661.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.02%)</title><rect x="658.2" y="979.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="661.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.02%)</title><rect x="658.2" y="963.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.2" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="658.2" y="947.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.2" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="658.2" y="931.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="661.2" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="658.2" y="915.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="661.2" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.02%)</title><rect x="658.2" y="899.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="661.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (5 samples, 0.12%)</title><rect x="658.5" y="1011.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="661.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.12%)</title><rect x="658.5" y="995.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="661.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.12%)</title><rect x="658.5" y="979.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.5" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="658.8" y="963.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="661.8" y="974.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="659.1" y="963.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.1" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.05%)</title><rect x="659.4" y="963.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="662.4" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="659.7" y="947.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (112 samples, 2.72%)</title><rect x="660.0" y="1027.0" width="32.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.0" y="1038.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (110 samples, 2.67%)</title><rect x="660.5" y="1011.0" width="31.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="663.5" y="1022.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (100 samples, 2.43%)</title><rect x="663.4" y="995.0" width="28.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.4" y="1006.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="666.5" y="979.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="669.5" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.02%)</title><rect x="667.1" y="979.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.1" y="990.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (58 samples, 1.41%)</title><rect x="667.4" y="979.0" width="16.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="670.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="963.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="676.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="947.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="676.1" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="931.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="676.1" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="915.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="676.1" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="899.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="676.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="883.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="676.1" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="867.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="676.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="851.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="676.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="835.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="676.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="819.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="676.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="803.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="676.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="787.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="676.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="771.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="676.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="755.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="676.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="739.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="676.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="723.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="676.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="707.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="676.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="691.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="676.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="675.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="676.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="659.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="676.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="643.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="676.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="627.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="676.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="611.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="676.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="595.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="676.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="579.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="676.1" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="563.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="676.1" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="547.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="676.1" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="531.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="676.1" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="515.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="676.1" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="499.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="676.1" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="483.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="676.1" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="467.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="676.1" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="451.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="676.1" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="435.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="676.1" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="419.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="676.1" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="673.1" y="403.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="676.1" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (29 samples, 0.70%)</title><rect x="673.4" y="963.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="676.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="678.3" y="947.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="681.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="678.3" y="931.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="681.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="678.3" y="915.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="681.3" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.22%)</title><rect x="678.6" y="947.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.6" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.05%)</title><rect x="681.1" y="947.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.1" y="958.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (8 samples, 0.19%)</title><rect x="681.7" y="963.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="684.7" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (28 samples, 0.68%)</title><rect x="684.0" y="979.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="687.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.0" y="963.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="693.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.0" y="947.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="693.0" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.0" y="931.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="693.0" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.0" y="915.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="693.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.0" y="899.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="693.0" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.0" y="883.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="693.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="690.0" y="867.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="693.0" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.05%)</title><rect x="690.3" y="963.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.3" y="974.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.10%)</title><rect x="690.9" y="963.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="693.9" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (3 samples, 0.07%)</title><rect x="692.0" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="695.0" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="692.0" y="1043.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="695.0" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (30 samples, 0.73%)</title><rect x="692.9" y="1075.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="695.9" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (30 samples, 0.73%)</title><rect x="692.9" y="1059.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="695.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (12 samples, 0.29%)</title><rect x="692.9" y="1043.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="695.9" y="1054.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="694.9" y="1027.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="697.9" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.07%)</title><rect x="695.4" y="1027.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="698.4" y="1038.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="695.7" y="1011.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="698.7" y="1022.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="695.7" y="995.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="698.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (16 samples, 0.39%)</title><rect x="696.3" y="1043.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (16 samples, 0.39%)</title><rect x="696.3" y="1027.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="699.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (16 samples, 0.39%)</title><rect x="696.3" y="1011.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="699.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (16 samples, 0.39%)</title><rect x="696.3" y="995.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="699.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (16 samples, 0.39%)</title><rect x="696.3" y="979.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="699.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (16 samples, 0.39%)</title><rect x="696.3" y="963.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="699.3" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="700.0" y="947.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="703.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.05%)</title><rect x="700.9" y="1043.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="703.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.02%)</title><rect x="701.2" y="1027.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.02%)</title><rect x="701.2" y="1011.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (1 samples, 0.02%)</title><rect x="701.2" y="995.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="704.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,285 samples, 31.17%)</title><rect x="701.5" y="1235.0" width="367.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.5" y="1246.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="702.6" y="1219.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="705.6" y="1230.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="702.6" y="1203.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="705.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="702.6" y="1187.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="705.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="702.6" y="1171.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="705.6" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="702.6" y="1155.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="705.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="702.6" y="1139.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="705.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="702.6" y="1123.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="705.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="702.6" y="1107.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="705.6" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="702.6" y="1091.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="705.6" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (300 samples, 7.28%)</title><rect x="702.9" y="1219.0" width="85.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.9" y="1230.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (10 samples, 0.24%)</title><rect x="703.7" y="1203.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="706.7" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (6 samples, 0.15%)</title><rect x="704.9" y="1187.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.9" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (287 samples, 6.96%)</title><rect x="706.6" y="1203.0" width="82.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.6" y="1214.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.07%)</title><rect x="708.9" y="1187.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="711.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (259 samples, 6.28%)</title><rect x="709.8" y="1187.0" width="74.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="712.8" y="1198.0">[unknown]</text>
</g>
<g>
<title>Klass::is_klass() const volatile (13 samples, 0.32%)</title><rect x="709.8" y="1171.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="712.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.32%)</title><rect x="709.8" y="1155.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="712.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.32%)</title><rect x="709.8" y="1139.0" width="3.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="712.8" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="709.8" y="1123.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="712.8" y="1134.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (4 samples, 0.10%)</title><rect x="710.0" y="1123.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="713.0" y="1134.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.19%)</title><rect x="711.2" y="1123.0" width="2.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="714.2" y="1134.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.15%)</title><rect x="711.5" y="1107.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="714.5" y="1118.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="713.2" y="1107.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="716.2" y="1118.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (6 samples, 0.15%)</title><rect x="713.5" y="1171.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="716.5" y="1182.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.07%)</title><rect x="715.2" y="1171.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="718.2" y="1182.0"></text>
</g>
<g>
<title>epoll_wait (237 samples, 5.75%)</title><rect x="716.1" y="1171.0" width="67.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="719.1" y="1182.0">epoll_w..</text>
</g>
<g>
<title>[unknown] (223 samples, 5.41%)</title><rect x="720.1" y="1155.0" width="63.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="723.1" y="1166.0">[unknown]</text>
</g>
<g>
<title>[unknown] (223 samples, 5.41%)</title><rect x="720.1" y="1139.0" width="63.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="723.1" y="1150.0">[unknown]</text>
</g>
<g>
<title>[unknown] (207 samples, 5.02%)</title><rect x="724.6" y="1123.0" width="59.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="727.6" y="1134.0">[unkno..</text>
</g>
<g>
<title>[unknown] (206 samples, 5.00%)</title><rect x="724.9" y="1107.0" width="59.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="727.9" y="1118.0">[unkno..</text>
</g>
<g>
<title>[unknown] (199 samples, 4.83%)</title><rect x="726.9" y="1091.0" width="57.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="729.9" y="1102.0">[unkno..</text>
</g>
<g>
<title>[unknown] (171 samples, 4.15%)</title><rect x="734.9" y="1075.0" width="49.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="737.9" y="1086.0">[unk..</text>
</g>
<g>
<title>[unknown] (130 samples, 3.15%)</title><rect x="746.7" y="1059.0" width="37.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="749.7" y="1070.0">[un..</text>
</g>
<g>
<title>[unknown] (103 samples, 2.50%)</title><rect x="754.4" y="1043.0" width="29.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="757.4" y="1054.0">[u..</text>
</g>
<g>
<title>[unknown] (80 samples, 1.94%)</title><rect x="761.0" y="1027.0" width="22.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="764.0" y="1038.0">[..</text>
</g>
<g>
<title>[unknown] (55 samples, 1.33%)</title><rect x="768.1" y="1011.0" width="15.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="771.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="782.2" y="995.0" width="1.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="785.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="782.2" y="979.0" width="1.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="785.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="782.5" y="963.0" width="1.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="785.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="782.5" y="947.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="785.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="782.7" y="931.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="785.7" y="942.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="782.7" y="915.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="785.7" y="926.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="782.7" y="899.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="785.7" y="910.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="783.9" y="1187.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="786.9" y="1198.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.15%)</title><rect x="784.2" y="1187.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="787.2" y="1198.0"></text>
</g>
<g>
<title>epoll_wait (10 samples, 0.24%)</title><rect x="785.9" y="1187.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="788.9" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (980 samples, 23.77%)</title><rect x="788.7" y="1219.0" width="280.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.7" y="1230.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (5 samples, 0.12%)</title><rect x="792.2" y="1203.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="795.2" y="1214.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (957 samples, 23.21%)</title><rect x="793.6" y="1203.0" width="273.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="796.6" y="1214.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (679 samples, 16.47%)</title><rect x="794.5" y="1187.0" width="194.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.5" y="1198.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (469 samples, 11.38%)</title><rect x="801.6" y="1171.0" width="134.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="804.6" y="1182.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (465 samples, 11.28%)</title><rect x="802.8" y="1155.0" width="133.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="805.8" y="1166.0">one/nio/http/Http..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (434 samples, 10.53%)</title><rect x="804.2" y="1139.0" width="124.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="807.2" y="1150.0">RequestHandler0..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (34 samples, 0.82%)</title><rect x="804.5" y="1123.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.17%)</title><rect x="805.9" y="1107.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="808.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.17%)</title><rect x="805.9" y="1091.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="808.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (5 samples, 0.12%)</title><rect x="807.9" y="1107.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="810.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="808.5" y="1091.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="811.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="809.1" y="1091.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="812.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.substring (11 samples, 0.27%)</title><rect x="809.4" y="1107.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="812.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.07%)</title><rect x="809.4" y="1091.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.19%)</title><rect x="810.2" y="1091.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="813.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.12%)</title><rect x="810.2" y="1075.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="813.2" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.07%)</title><rect x="811.6" y="1075.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="814.6" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.15%)</title><rect x="812.5" y="1107.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.15%)</title><rect x="812.5" y="1091.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="815.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.15%)</title><rect x="812.5" y="1075.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="815.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.15%)</title><rect x="812.5" y="1059.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.5" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (399 samples, 9.68%)</title><rect x="814.2" y="1123.0" width="114.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="817.2" y="1134.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.05%)</title><rect x="814.5" y="1107.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.05%)</title><rect x="814.5" y="1091.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.05%)</title><rect x="814.5" y="1075.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="814.8" y="1059.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.34%)</title><rect x="815.1" y="1107.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="818.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.32%)</title><rect x="815.4" y="1091.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="818.4" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.32%)</title><rect x="815.4" y="1075.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.4" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.32%)</title><rect x="815.4" y="1059.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="818.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="816.5" y="1043.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="819.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="816.5" y="1027.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="819.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="816.5" y="1011.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="819.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="816.5" y="995.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="819.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="816.5" y="979.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="819.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="816.5" y="963.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="819.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="816.5" y="947.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="819.5" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.19%)</title><rect x="816.8" y="1043.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="819.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="817.4" y="1027.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="820.4" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="817.4" y="1011.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="820.4" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.05%)</title><rect x="817.4" y="995.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="820.4" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.10%)</title><rect x="817.9" y="1027.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="820.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.07%)</title><rect x="818.2" y="1011.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.2" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (369 samples, 8.95%)</title><rect x="819.1" y="1107.0" width="105.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.1" y="1118.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (369 samples, 8.95%)</title><rect x="819.1" y="1091.0" width="105.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.1" y="1102.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (366 samples, 8.88%)</title><rect x="819.9" y="1075.0" width="104.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.9" y="1086.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (340 samples, 8.25%)</title><rect x="820.2" y="1059.0" width="97.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="823.2" y="1070.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (11 samples, 0.27%)</title><rect x="820.2" y="1043.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="823.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (11 samples, 0.27%)</title><rect x="820.2" y="1027.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.27%)</title><rect x="820.2" y="1011.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.02%)</title><rect x="822.8" y="995.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="825.8" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="823.1" y="995.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="823.4" y="1043.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="826.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="823.4" y="1027.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="826.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="823.4" y="1011.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="823.4" y="995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="826.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="823.4" y="979.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="826.4" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="823.4" y="963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="823.4" y="947.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="826.4" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="823.4" y="931.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="826.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (328 samples, 7.96%)</title><rect x="823.7" y="1043.0" width="93.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="826.7" y="1054.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (328 samples, 7.96%)</title><rect x="823.7" y="1027.0" width="93.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="826.7" y="1038.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (328 samples, 7.96%)</title><rect x="823.7" y="1011.0" width="93.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="826.7" y="1022.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (295 samples, 7.15%)</title><rect x="833.1" y="995.0" width="84.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="836.1" y="1006.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (295 samples, 7.15%)</title><rect x="833.1" y="979.0" width="84.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="836.1" y="990.0">jdk/intern..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.05%)</title><rect x="833.7" y="963.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="836.7" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.02%)</title><rect x="834.3" y="963.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="837.3" y="974.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.07%)</title><rect x="834.5" y="963.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="837.5" y="974.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.05%)</title><rect x="835.4" y="963.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="838.4" y="974.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (3 samples, 0.07%)</title><rect x="836.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.0" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark (47 samples, 1.14%)</title><rect x="836.8" y="963.0" width="13.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="839.8" y="974.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.05%)</title><rect x="837.7" y="947.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="840.7" y="958.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.07%)</title><rect x="838.3" y="947.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="841.3" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (4 samples, 0.10%)</title><rect x="839.1" y="947.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="842.1" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (4 samples, 0.10%)</title><rect x="840.3" y="947.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="843.3" y="958.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.10%)</title><rect x="841.4" y="947.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="844.4" y="958.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples, 0.17%)</title><rect x="842.6" y="947.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="845.6" y="958.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.05%)</title><rect x="844.6" y="947.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="847.6" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (12 samples, 0.29%)</title><rect x="845.1" y="947.0" width="3.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="848.1" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="848.3" y="931.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="851.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="848.3" y="915.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="851.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="848.3" y="899.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="851.3" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="848.3" y="883.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="851.3" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="848.3" y="867.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="851.3" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="848.3" y="851.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="851.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="848.3" y="835.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="851.3" y="846.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="848.6" y="947.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="851.6" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="848.9" y="947.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="851.9" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="849.1" y="947.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="852.1" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="849.4" y="947.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="852.4" y="958.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.12%)</title><rect x="850.3" y="963.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="853.3" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="851.7" y="963.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="854.7" y="974.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (229 samples, 5.55%)</title><rect x="852.0" y="963.0" width="65.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="855.0" y="974.0">pthread..</text>
</g>
<g>
<title>[unknown] (209 samples, 5.07%)</title><rect x="857.7" y="947.0" width="59.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="860.7" y="958.0">[unkno..</text>
</g>
<g>
<title>[unknown] (209 samples, 5.07%)</title><rect x="857.7" y="931.0" width="59.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="860.7" y="942.0">[unkno..</text>
</g>
<g>
<title>[unknown] (197 samples, 4.78%)</title><rect x="861.2" y="915.0" width="56.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="864.2" y="926.0">[unkno..</text>
</g>
<g>
<title>[unknown] (194 samples, 4.71%)</title><rect x="862.0" y="899.0" width="55.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="865.0" y="910.0">[unkn..</text>
</g>
<g>
<title>[unknown] (192 samples, 4.66%)</title><rect x="862.6" y="883.0" width="54.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="865.6" y="894.0">[unkn..</text>
</g>
<g>
<title>[unknown] (172 samples, 4.17%)</title><rect x="868.3" y="867.0" width="49.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="871.3" y="878.0">[unkn..</text>
</g>
<g>
<title>[unknown] (149 samples, 3.61%)</title><rect x="874.9" y="851.0" width="42.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="877.9" y="862.0">[unk..</text>
</g>
<g>
<title>[unknown] (136 samples, 3.30%)</title><rect x="878.6" y="835.0" width="38.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="881.6" y="846.0">[un..</text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="915.8" y="819.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="918.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="915.8" y="803.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="918.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="915.8" y="787.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="918.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="915.8" y="771.0" width="1.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="918.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="916.1" y="755.0" width="1.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="919.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="916.1" y="739.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="919.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="916.4" y="723.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="919.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="917.0" y="707.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="920.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="917.0" y="691.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="920.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="917.3" y="675.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="920.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.05%)</title><rect x="917.5" y="1059.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.02%)</title><rect x="917.8" y="1043.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 0.34%)</title><rect x="918.1" y="1059.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="921.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.24%)</title><rect x="919.3" y="1043.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.10%)</title><rect x="919.8" y="1027.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.02%)</title><rect x="919.8" y="1011.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="922.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="919.8" y="995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="919.8" y="979.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.8" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="919.8" y="963.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (3 samples, 0.07%)</title><rect x="920.1" y="1011.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.07%)</title><rect x="920.1" y="995.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.10%)</title><rect x="921.0" y="1027.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="924.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.10%)</title><rect x="921.0" y="1011.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="924.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.07%)</title><rect x="921.3" y="995.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.07%)</title><rect x="921.3" y="979.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="924.3" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.05%)</title><rect x="921.5" y="963.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="924.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="921.8" y="947.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="924.8" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="921.8" y="931.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="924.8" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="921.8" y="915.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="924.8" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="921.8" y="899.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="924.8" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="921.8" y="883.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="924.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="921.8" y="867.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="924.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="921.8" y="851.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="924.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.22%)</title><rect x="922.1" y="1059.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="925.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.22%)</title><rect x="922.1" y="1043.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="925.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.22%)</title><rect x="922.1" y="1027.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="925.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.22%)</title><rect x="922.1" y="1011.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="925.1" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="924.4" y="995.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="927.4" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.primaryFor (13 samples, 0.32%)</title><rect x="924.7" y="1107.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="927.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (3 samples, 0.07%)</title><rect x="925.6" y="1091.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="928.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="925.8" y="1075.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="928.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/Number.&lt;init&gt; (2 samples, 0.05%)</title><rect x="925.8" y="1059.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="928.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.10%)</title><rect x="926.4" y="1091.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="929.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.10%)</title><rect x="926.4" y="1075.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="929.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (1 samples, 0.02%)</title><rect x="927.3" y="1059.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.3" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.hashCode (3 samples, 0.07%)</title><rect x="927.6" y="1091.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (3 samples, 0.07%)</title><rect x="927.6" y="1075.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="930.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="928.1" y="1059.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="931.1" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (22 samples, 0.53%)</title><rect x="928.4" y="1139.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="931.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (15 samples, 0.36%)</title><rect x="930.4" y="1123.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="933.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.24%)</title><rect x="931.3" y="1107.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="934.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.equals (9 samples, 0.22%)</title><rect x="931.6" y="1091.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="934.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="933.6" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="936.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.05%)</title><rect x="934.1" y="1107.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="937.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.05%)</title><rect x="934.1" y="1091.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="937.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.05%)</title><rect x="934.1" y="1075.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="937.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.10%)</title><rect x="934.7" y="1139.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="937.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.10%)</title><rect x="934.7" y="1123.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="937.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="934.7" y="1107.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="937.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.07%)</title><rect x="935.0" y="1107.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="938.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="935.0" y="1091.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="938.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="935.3" y="1091.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.3" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (63 samples, 1.53%)</title><rect x="935.9" y="1171.0" width="18.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="938.9" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (27 samples, 0.65%)</title><rect x="937.6" y="1155.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="940.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (24 samples, 0.58%)</title><rect x="938.4" y="1139.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (24 samples, 0.58%)</title><rect x="938.4" y="1123.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="940.7" y="1107.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (15 samples, 0.36%)</title><rect x="941.0" y="1107.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="944.0" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (30 samples, 0.73%)</title><rect x="945.3" y="1155.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="948.3" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (30 samples, 0.73%)</title><rect x="945.3" y="1139.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="948.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (30 samples, 0.73%)</title><rect x="945.3" y="1123.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="948.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.39%)</title><rect x="948.2" y="1107.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="951.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="949.6" y="1091.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="952.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (10 samples, 0.24%)</title><rect x="949.9" y="1091.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="952.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.5" y="1075.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="955.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.5" y="1059.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="955.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.5" y="1043.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="955.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.5" y="1027.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="955.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.5" y="1011.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="955.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.5" y="995.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="955.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="952.5" y="979.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="955.5" y="990.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (4 samples, 0.10%)</title><rect x="952.7" y="1107.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="955.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (4 samples, 0.10%)</title><rect x="952.7" y="1091.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (20 samples, 0.49%)</title><rect x="953.9" y="1171.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="956.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (18 samples, 0.44%)</title><rect x="954.2" y="1155.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="957.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (17 samples, 0.41%)</title><rect x="954.2" y="1139.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="957.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="955.0" y="1123.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="958.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="955.0" y="1107.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="958.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.02%)</title><rect x="955.0" y="1091.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="958.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.15%)</title><rect x="955.3" y="1123.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="958.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (4 samples, 0.10%)</title><rect x="955.3" y="1107.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="958.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.05%)</title><rect x="956.5" y="1107.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="959.5" y="1118.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.17%)</title><rect x="957.0" y="1123.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="960.0" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="959.0" y="1139.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="962.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (1 samples, 0.02%)</title><rect x="959.3" y="1155.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="962.3" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (4 samples, 0.10%)</title><rect x="959.6" y="1171.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="962.6" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="960.5" y="1155.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="963.5" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (65 samples, 1.58%)</title><rect x="960.8" y="1171.0" width="18.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="963.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="965.0" y="1155.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="968.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="965.0" y="1139.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="968.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (34 samples, 0.82%)</title><rect x="965.3" y="1155.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="968.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="965.9" y="1139.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="968.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (30 samples, 0.73%)</title><rect x="966.5" y="1139.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="969.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (27 samples, 0.65%)</title><rect x="966.8" y="1123.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="969.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="973.9" y="1107.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="976.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="973.9" y="1091.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="976.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="973.9" y="1075.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="976.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="973.9" y="1059.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="976.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="973.9" y="1043.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="976.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="973.9" y="1027.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="976.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="973.9" y="1011.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="976.9" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="974.2" y="1107.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="977.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="974.5" y="1123.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.substring (15 samples, 0.36%)</title><rect x="975.1" y="1155.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="978.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="975.1" y="1139.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="978.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="975.1" y="1123.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="978.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (11 samples, 0.27%)</title><rect x="975.6" y="1139.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="978.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="975.6" y="1123.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="978.6" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.22%)</title><rect x="976.2" y="1123.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="979.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="978.2" y="1107.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="981.2" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="978.8" y="1139.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="981.8" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (33 samples, 0.80%)</title><rect x="979.4" y="1171.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="982.4" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (33 samples, 0.80%)</title><rect x="979.4" y="1155.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="982.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (20 samples, 0.49%)</title><rect x="981.6" y="1139.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (18 samples, 0.44%)</title><rect x="981.9" y="1123.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="984.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.02%)</title><rect x="987.1" y="1123.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="990.1" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.12%)</title><rect x="987.4" y="1139.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="990.4" y="1150.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (275 samples, 6.67%)</title><rect x="988.8" y="1187.0" width="78.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="991.8" y="1198.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (271 samples, 6.57%)</title><rect x="989.9" y="1171.0" width="77.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="992.9" y="1182.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 0.12%)</title><rect x="993.7" y="1155.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="996.7" y="1166.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 1.72%)</title><rect x="995.1" y="1155.0" width="20.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="998.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 1.72%)</title><rect x="995.1" y="1139.0" width="20.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="998.1" y="1150.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (65 samples, 1.58%)</title><rect x="995.1" y="1123.0" width="18.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="998.1" y="1134.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.15%)</title><rect x="997.4" y="1107.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.4" y="1118.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="999.1" y="1107.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1002.1" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.05%)</title><rect x="999.7" y="1107.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1002.7" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1000.0" y="1091.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1003.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1000.0" y="1075.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1003.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1000.0" y="1059.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1003.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1000.0" y="1043.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1003.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1000.0" y="1027.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1003.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1000.0" y="1011.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1003.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1000.0" y="995.0" width="0.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1003.0" y="1006.0"></text>
</g>
<g>
<title>__memmove_ssse3 (19 samples, 0.46%)</title><rect x="1000.2" y="1107.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1003.2" y="1118.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="1005.7" y="1107.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1008.7" y="1118.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (25 samples, 0.61%)</title><rect x="1006.0" y="1107.0" width="7.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1009.0" y="1118.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="1007.1" y="1091.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.1" y="1102.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.10%)</title><rect x="1007.4" y="1091.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.4" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (3 samples, 0.07%)</title><rect x="1008.5" y="1091.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.5" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (4 samples, 0.10%)</title><rect x="1009.4" y="1091.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.4" y="1102.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (9 samples, 0.22%)</title><rect x="1010.6" y="1091.0" width="2.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1013.6" y="1102.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.05%)</title><rect x="1013.1" y="1107.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.1" y="1118.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="1013.7" y="1123.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1016.7" y="1134.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="1014.0" y="1123.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1017.0" y="1134.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.05%)</title><rect x="1014.3" y="1123.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1017.3" y="1134.0"></text>
</g>
<g>
<title>recv (2 samples, 0.05%)</title><rect x="1014.8" y="1123.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1017.8" y="1134.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="1015.4" y="1155.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1018.4" y="1166.0"></text>
</g>
<g>
<title>recv (181 samples, 4.39%)</title><rect x="1015.7" y="1155.0" width="51.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1018.7" y="1166.0">recv</text>
</g>
<g>
<title>[unknown] (164 samples, 3.98%)</title><rect x="1020.6" y="1139.0" width="46.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1023.6" y="1150.0">[unk..</text>
</g>
<g>
<title>[unknown] (164 samples, 3.98%)</title><rect x="1020.6" y="1123.0" width="46.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1023.6" y="1134.0">[unk..</text>
</g>
<g>
<title>[unknown] (146 samples, 3.54%)</title><rect x="1025.7" y="1107.0" width="41.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1028.7" y="1118.0">[un..</text>
</g>
<g>
<title>[unknown] (146 samples, 3.54%)</title><rect x="1025.7" y="1091.0" width="41.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1028.7" y="1102.0">[un..</text>
</g>
<g>
<title>[unknown] (136 samples, 3.30%)</title><rect x="1028.6" y="1075.0" width="38.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1031.6" y="1086.0">[un..</text>
</g>
<g>
<title>[unknown] (131 samples, 3.18%)</title><rect x="1030.0" y="1059.0" width="37.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1033.0" y="1070.0">[un..</text>
</g>
<g>
<title>[unknown] (128 samples, 3.10%)</title><rect x="1030.9" y="1043.0" width="36.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1033.9" y="1054.0">[un..</text>
</g>
<g>
<title>[unknown] (97 samples, 2.35%)</title><rect x="1039.7" y="1027.0" width="27.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1042.7" y="1038.0">[..</text>
</g>
<g>
<title>[unknown] (75 samples, 1.82%)</title><rect x="1046.0" y="1011.0" width="21.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1049.0" y="1022.0">[..</text>
</g>
<g>
<title>[unknown] (46 samples, 1.12%)</title><rect x="1054.3" y="995.0" width="13.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1057.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.73%)</title><rect x="1058.9" y="979.0" width="8.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1061.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.39%)</title><rect x="1062.9" y="963.0" width="4.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1065.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1066.6" y="947.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1069.6" y="958.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1066.6" y="931.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1069.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1067.2" y="915.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1070.2" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1067.2" y="899.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1070.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1067.2" y="883.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1070.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1067.2" y="867.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1070.2" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.15%)</title><rect x="1067.5" y="1203.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.5" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="1067.8" y="1187.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1070.8" y="1198.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.10%)</title><rect x="1068.1" y="1187.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1071.1" y="1198.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.07%)</title><rect x="1068.4" y="1171.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1071.4" y="1182.0"></text>
</g>
<g>
<title>start_thread (422 samples, 10.24%)</title><rect x="1069.2" y="1235.0" width="120.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1072.2" y="1246.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (422 samples, 10.24%)</title><rect x="1069.2" y="1219.0" width="120.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1072.2" y="1230.0">thread_native_e..</text>
</g>
<g>
<title>Thread::call_run() (422 samples, 10.24%)</title><rect x="1069.2" y="1203.0" width="120.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.2" y="1214.0">Thread::call_ru..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (3 samples, 0.07%)</title><rect x="1069.2" y="1187.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.2" y="1198.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (3 samples, 0.07%)</title><rect x="1069.2" y="1171.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.2" y="1182.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (3 samples, 0.07%)</title><rect x="1069.2" y="1155.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1072.2" y="1166.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (3 samples, 0.07%)</title><rect x="1069.2" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.2" y="1150.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="1069.5" y="1123.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.5" y="1134.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.02%)</title><rect x="1069.5" y="1107.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.5" y="1118.0"></text>
</g>
<g>
<title>G1Analytics::predict_object_copy_time_ms(unsigned long, bool) const (1 samples, 0.02%)</title><rect x="1069.5" y="1091.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.5" y="1102.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1069.8" y="1123.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.8" y="1134.0"></text>
</g>
<g>
<title>GangWorker::loop() (62 samples, 1.50%)</title><rect x="1070.1" y="1187.0" width="17.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.1" y="1198.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (62 samples, 1.50%)</title><rect x="1070.1" y="1171.0" width="17.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.1" y="1182.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (43 samples, 1.04%)</title><rect x="1070.1" y="1155.0" width="12.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.1" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (43 samples, 1.04%)</title><rect x="1070.1" y="1139.0" width="12.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.1" y="1150.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (27 samples, 0.65%)</title><rect x="1074.7" y="1123.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.7" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (23 samples, 0.56%)</title><rect x="1075.5" y="1107.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="1079.0" y="1091.0" width="1.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1082.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="1079.0" y="1075.0" width="1.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1082.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.12%)</title><rect x="1079.0" y="1059.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1082.0" y="1070.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="1079.2" y="1043.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1082.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1079.5" y="1027.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1082.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1079.5" y="1011.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1082.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1079.8" y="995.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1082.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1079.8" y="979.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1082.8" y="990.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (6 samples, 0.15%)</title><rect x="1080.4" y="1091.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.4" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::start_of_nonstatic_oop_maps() const (2 samples, 0.05%)</title><rect x="1080.7" y="1075.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.7" y="1086.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (2 samples, 0.05%)</title><rect x="1080.7" y="1059.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.7" y="1070.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.07%)</title><rect x="1081.2" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.2" y="1086.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1082.1" y="1107.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.1" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (19 samples, 0.46%)</title><rect x="1082.4" y="1155.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.4" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (19 samples, 0.46%)</title><rect x="1082.4" y="1139.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.4" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (19 samples, 0.46%)</title><rect x="1082.4" y="1123.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.4" y="1134.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (19 samples, 0.46%)</title><rect x="1082.4" y="1107.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.4" y="1118.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (19 samples, 0.46%)</title><rect x="1082.4" y="1091.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.4" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (18 samples, 0.44%)</title><rect x="1082.4" y="1075.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.4" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (11 samples, 0.27%)</title><rect x="1084.4" y="1059.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.4" y="1070.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.12%)</title><rect x="1086.1" y="1043.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.1" y="1054.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.10%)</title><rect x="1086.4" y="1027.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.4" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.02%)</title><rect x="1087.5" y="1075.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.5" y="1086.0"></text>
</g>
<g>
<title>JavaThread::run() (350 samples, 8.49%)</title><rect x="1087.8" y="1187.0" width="100.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.8" y="1198.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (350 samples, 8.49%)</title><rect x="1087.8" y="1171.0" width="100.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.8" y="1182.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (347 samples, 8.42%)</title><rect x="1087.8" y="1155.0" width="99.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.8" y="1166.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (347 samples, 8.42%)</title><rect x="1087.8" y="1139.0" width="99.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.8" y="1150.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (330 samples, 8.00%)</title><rect x="1087.8" y="1123.0" width="94.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.8" y="1134.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (330 samples, 8.00%)</title><rect x="1087.8" y="1107.0" width="94.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1090.8" y="1118.0">Compile::Co..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.02%)</title><rect x="1087.8" y="1091.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.8" y="1102.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.02%)</title><rect x="1087.8" y="1075.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.8" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1087.8" y="1059.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.8" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1087.8" y="1043.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.8" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1087.8" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.8" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1087.8" y="1011.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.8" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1087.8" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.8" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1087.8" y="979.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.8" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.02%)</title><rect x="1087.8" y="963.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.8" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1087.8" y="947.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.8" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1087.8" y="931.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.8" y="942.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1087.8" y="915.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.8" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1087.8" y="899.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.8" y="910.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1087.8" y="883.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.8" y="894.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (162 samples, 3.93%)</title><rect x="1088.1" y="1091.0" width="46.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.1" y="1102.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.15%)</title><rect x="1088.1" y="1075.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.1" y="1086.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.02%)</title><rect x="1088.1" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.1" y="1070.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.05%)</title><rect x="1088.4" y="1059.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.4" y="1070.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.05%)</title><rect x="1088.4" y="1043.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.4" y="1054.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.02%)</title><rect x="1088.4" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.4" y="1038.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.02%)</title><rect x="1088.7" y="1027.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.7" y="1038.0"></text>
</g>
<g>
<title>Assembler::testl(RegisterImpl*, RegisterImpl*) (1 samples, 0.02%)</title><rect x="1088.7" y="1011.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.7" y="1022.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (3 samples, 0.07%)</title><rect x="1089.0" y="1059.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1092.0" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.10%)</title><rect x="1089.8" y="1075.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.8" y="1086.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.02%)</title><rect x="1089.8" y="1059.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.8" y="1070.0"></text>
</g>
<g>
<title>MachUEPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.02%)</title><rect x="1090.1" y="1059.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.1" y="1070.0"></text>
</g>
<g>
<title>MacroAssembler::load_klass(RegisterImpl*, RegisterImpl*) (1 samples, 0.02%)</title><rect x="1090.1" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.1" y="1054.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.02%)</title><rect x="1090.1" y="1027.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.1" y="1038.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.05%)</title><rect x="1090.4" y="1059.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.4" y="1070.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.02%)</title><rect x="1091.0" y="1075.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.0" y="1086.0"></text>
</g>
<g>
<title>MachNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;) (1 samples, 0.02%)</title><rect x="1091.3" y="1075.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.3" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.22%)</title><rect x="1091.5" y="1075.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.5" y="1086.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.02%)</title><rect x="1091.5" y="1059.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.5" y="1070.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.02%)</title><rect x="1091.5" y="1043.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.5" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.02%)</title><rect x="1091.8" y="1059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.8" y="1070.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.17%)</title><rect x="1092.1" y="1059.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.1" y="1070.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.05%)</title><rect x="1092.7" y="1043.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.7" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.05%)</title><rect x="1093.3" y="1043.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.3" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.02%)</title><rect x="1093.6" y="1027.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.6" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.02%)</title><rect x="1093.6" y="1011.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.6" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.02%)</title><rect x="1093.6" y="995.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.02%)</title><rect x="1093.6" y="979.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.6" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.02%)</title><rect x="1093.6" y="963.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.6" y="974.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.02%)</title><rect x="1093.8" y="1043.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.8" y="1054.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.02%)</title><rect x="1094.1" y="1075.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.1" y="1086.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.02%)</title><rect x="1094.1" y="1059.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.1" y="1070.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.02%)</title><rect x="1094.1" y="1043.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.02%)</title><rect x="1094.4" y="1075.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.4" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.02%)</title><rect x="1094.4" y="1059.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.4" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (16 samples, 0.39%)</title><rect x="1094.7" y="1075.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (16 samples, 0.39%)</title><rect x="1094.7" y="1059.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.7" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.07%)</title><rect x="1094.7" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.02%)</title><rect x="1095.0" y="1027.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.0" y="1038.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.02%)</title><rect x="1095.0" y="1011.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.0" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1095.0" y="995.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.0" y="1006.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1095.0" y="979.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1098.0" y="990.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.02%)</title><rect x="1095.3" y="1027.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1098.3" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 0.10%)</title><rect x="1095.6" y="1043.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.02%)</title><rect x="1096.1" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (1 samples, 0.02%)</title><rect x="1096.4" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1096.4" y="1011.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.07%)</title><rect x="1096.7" y="1043.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.7" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1097.3" y="1027.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (1 samples, 0.02%)</title><rect x="1097.6" y="1043.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.07%)</title><rect x="1097.8" y="1043.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1100.8" y="1054.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.02%)</title><rect x="1098.4" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1098.4" y="1011.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1101.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1098.4" y="995.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1101.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1098.4" y="979.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1101.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1098.4" y="963.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1101.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1098.4" y="947.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1101.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1098.4" y="931.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1101.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1098.4" y="915.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1101.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1098.4" y="899.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1101.4" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.02%)</title><rect x="1098.7" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.7" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.02%)</title><rect x="1098.7" y="1027.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.7" y="1038.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1099.0" y="1043.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1102.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (121 samples, 2.93%)</title><rect x="1099.3" y="1075.0" width="34.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.3" y="1086.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.05%)</title><rect x="1099.6" y="1059.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.6" y="1070.0"></text>
</g>
<g>
<title>MachProjNode::ideal_reg() const (1 samples, 0.02%)</title><rect x="1100.1" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.1" y="1070.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.02%)</title><rect x="1100.4" y="1059.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.4" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.07%)</title><rect x="1100.7" y="1059.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.7" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="1101.0" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.02%)</title><rect x="1101.3" y="1043.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.15%)</title><rect x="1101.6" y="1059.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.6" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1101.6" y="1043.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.12%)</title><rect x="1101.9" y="1043.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.9" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1102.4" y="1027.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.4" y="1038.0"></text>
</g>
<g>
<title>_init (1 samples, 0.02%)</title><rect x="1103.0" y="1027.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1106.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (14 samples, 0.34%)</title><rect x="1103.3" y="1059.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.02%)</title><rect x="1106.4" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.4" y="1054.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.02%)</title><rect x="1106.4" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.02%)</title><rect x="1106.7" y="1043.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.7" y="1054.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="1107.0" y="1043.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (33 samples, 0.80%)</title><rect x="1107.3" y="1059.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.3" y="1070.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.02%)</title><rect x="1107.6" y="1043.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.6" y="1054.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1107.9" y="1043.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (4 samples, 0.10%)</title><rect x="1108.1" y="1043.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1109.0" y="1027.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (5 samples, 0.12%)</title><rect x="1109.3" y="1043.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.3" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1110.4" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (13 samples, 0.32%)</title><rect x="1110.7" y="1043.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.7" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="1113.6" y="1027.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.6" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1113.9" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1114.4" y="1043.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.10%)</title><rect x="1114.7" y="1043.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.7" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1114.7" y="1027.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.7" y="1038.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.05%)</title><rect x="1115.3" y="1027.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.02%)</title><rect x="1115.9" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.9" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.05%)</title><rect x="1116.2" y="1043.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.02%)</title><rect x="1116.7" y="1059.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.02%)</title><rect x="1117.0" y="1059.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (3 samples, 0.07%)</title><rect x="1117.3" y="1059.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.3" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.02%)</title><rect x="1117.9" y="1043.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (13 samples, 0.32%)</title><rect x="1118.2" y="1059.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.2" y="1070.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.02%)</title><rect x="1120.5" y="1043.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.5" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1120.7" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.7" y="1054.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 0.05%)</title><rect x="1121.0" y="1043.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.0" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.02%)</title><rect x="1121.6" y="1043.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.05%)</title><rect x="1121.9" y="1059.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (15 samples, 0.36%)</title><rect x="1122.5" y="1059.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.5" y="1070.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.05%)</title><rect x="1124.5" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.5" y="1054.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1125.0" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.0" y="1054.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1125.0" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.0" y="1038.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1125.0" y="1011.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.0" y="1022.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1125.0" y="995.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.12%)</title><rect x="1125.3" y="1043.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.3" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.05%)</title><rect x="1126.7" y="1059.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.7" y="1070.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.02%)</title><rect x="1126.7" y="1043.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.02%)</title><rect x="1126.7" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.02%)</title><rect x="1126.7" y="1011.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.7" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.02%)</title><rect x="1127.0" y="1043.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.0" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.02%)</title><rect x="1127.0" y="1027.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.0" y="1038.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.02%)</title><rect x="1127.0" y="1011.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.05%)</title><rect x="1127.3" y="1059.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 0.12%)</title><rect x="1127.9" y="1059.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.9" y="1070.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1128.2" y="1043.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.2" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.07%)</title><rect x="1128.5" y="1043.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.05%)</title><rect x="1129.3" y="1059.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.3" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 0.24%)</title><rect x="1129.9" y="1059.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.9" y="1070.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1131.0" y="1043.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.0" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.12%)</title><rect x="1131.3" y="1043.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.3" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1132.5" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.5" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.05%)</title><rect x="1132.8" y="1059.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1135.8" y="1070.0"></text>
</g>
<g>
<title>loadPNode::out_RegMask() const (1 samples, 0.02%)</title><rect x="1133.3" y="1059.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.3" y="1070.0"></text>
</g>
<g>
<title>tlsLoadPNode::ideal_Opcode() const (1 samples, 0.02%)</title><rect x="1133.6" y="1059.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.6" y="1070.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.02%)</title><rect x="1133.9" y="1075.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.9" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.02%)</title><rect x="1134.2" y="1075.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1137.2" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (144 samples, 3.49%)</title><rect x="1134.5" y="1091.0" width="41.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.5" y="1102.0">Com..</text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.02%)</title><rect x="1134.5" y="1075.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.5" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.02%)</title><rect x="1134.8" y="1075.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.8" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.02%)</title><rect x="1134.8" y="1059.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.15%)</title><rect x="1135.0" y="1075.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.15%)</title><rect x="1135.0" y="1059.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.0" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.02%)</title><rect x="1135.0" y="1027.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.02%)</title><rect x="1135.0" y="1011.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (5 samples, 0.12%)</title><rect x="1135.3" y="1043.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.10%)</title><rect x="1135.3" y="1027.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.10%)</title><rect x="1135.3" y="1011.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1135.3" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.3" y="1006.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1135.3" y="979.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.07%)</title><rect x="1135.6" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="979.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="963.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="947.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="931.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="915.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="899.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="883.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="803.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="739.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="723.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="691.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="675.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="659.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="643.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="627.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="611.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="595.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="579.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="563.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1135.6" y="547.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.6" y="558.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.02%)</title><rect x="1135.6" y="531.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.05%)</title><rect x="1135.9" y="979.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.05%)</title><rect x="1135.9" y="963.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.05%)</title><rect x="1135.9" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.9" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.02%)</title><rect x="1135.9" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1136.2" y="931.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.2" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.02%)</title><rect x="1136.5" y="1027.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.02%)</title><rect x="1136.5" y="1011.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.5" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.02%)</title><rect x="1136.8" y="1075.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.02%)</title><rect x="1137.1" y="1075.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.02%)</title><rect x="1137.1" y="1059.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (107 samples, 2.60%)</title><rect x="1137.3" y="1075.0" width="30.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.3" y="1086.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="1059.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.3" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="1043.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.3" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="1027.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.3" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="1011.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.3" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="995.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.3" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="979.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.3" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="963.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.3" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="947.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.3" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="931.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.3" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="915.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.3" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="899.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.3" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="883.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.3" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="867.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.3" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="851.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.3" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.3" y="835.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&amp;) (1 samples, 0.02%)</title><rect x="1137.3" y="819.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.3" y="830.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.02%)</title><rect x="1137.3" y="803.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1140.3" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1137.6" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.02%)</title><rect x="1137.6" y="1043.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1137.6" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.02%)</title><rect x="1137.6" y="1011.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.6" y="1022.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (2 samples, 0.05%)</title><rect x="1137.9" y="1059.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.9" y="1070.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.02%)</title><rect x="1138.5" y="1059.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.12%)</title><rect x="1138.8" y="1059.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.8" y="1070.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.02%)</title><rect x="1139.6" y="1043.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.6" y="1054.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.02%)</title><rect x="1139.9" y="1043.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.07%)</title><rect x="1140.2" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1140.8" y="1043.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1140.8" y="1027.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.02%)</title><rect x="1140.8" y="1011.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (83 samples, 2.01%)</title><rect x="1141.1" y="1059.0" width="23.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.1" y="1070.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (82 samples, 1.99%)</title><rect x="1141.3" y="1043.0" width="23.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.3" y="1054.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (76 samples, 1.84%)</title><rect x="1142.2" y="1027.0" width="21.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.2" y="1038.0">P..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.02%)</title><rect x="1143.9" y="1011.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.9" y="1022.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.02%)</title><rect x="1143.9" y="995.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1146.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1143.9" y="979.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1146.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1143.9" y="963.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1146.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1143.9" y="947.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1146.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.02%)</title><rect x="1144.2" y="1011.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1144.2" y="995.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1144.5" y="1011.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.02%)</title><rect x="1144.5" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (67 samples, 1.63%)</title><rect x="1144.8" y="1011.0" width="19.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.02%)</title><rect x="1164.0" y="1027.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.0" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.05%)</title><rect x="1164.2" y="1027.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1167.2" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1164.5" y="1011.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1167.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1164.5" y="995.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1167.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1164.5" y="979.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1167.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.10%)</title><rect x="1164.8" y="1059.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.02%)</title><rect x="1165.1" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.05%)</title><rect x="1165.4" y="1043.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.02%)</title><rect x="1165.7" y="1027.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.02%)</title><rect x="1166.0" y="1059.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.15%)</title><rect x="1166.2" y="1059.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.15%)</title><rect x="1166.2" y="1043.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.2" y="1054.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1166.5" y="1027.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.5" y="1038.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1166.5" y="1011.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="1022.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1166.8" y="1027.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.8" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1166.8" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="1022.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1166.8" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.8" y="1006.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1167.1" y="1027.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.1" y="1038.0"></text>
</g>
<g>
<title>IfNode::fold_compares(PhaseIterGVN*) (1 samples, 0.02%)</title><rect x="1167.1" y="1011.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.1" y="1022.0"></text>
</g>
<g>
<title>IfNode::has_only_uncommon_traps(ProjNode*, ProjNode*&amp;, ProjNode*&amp;, PhaseIterGVN*) (1 samples, 0.02%)</title><rect x="1167.1" y="995.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.1" y="1006.0"></text>
</g>
<g>
<title>Node::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1167.4" y="1027.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.4" y="1038.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1167.7" y="1027.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.7" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1167.7" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.7" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="995.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.7" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="963.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.7" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="947.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.7" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="915.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.7" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="899.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.7" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="867.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.7" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="851.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.7" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.7" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="803.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.7" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="787.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.7" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="771.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.7" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.7" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="723.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.7" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1167.7" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1167.7" y="691.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.7" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 0.39%)</title><rect x="1168.0" y="1075.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1168.0" y="1059.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.0" y="1070.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.02%)</title><rect x="1168.0" y="1043.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (15 samples, 0.36%)</title><rect x="1168.2" y="1059.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.2" y="1070.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.05%)</title><rect x="1168.5" y="1043.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="1054.0"></text>
</g>
<g>
<title>IfNode::search_identical(int) (1 samples, 0.02%)</title><rect x="1168.5" y="1027.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1168.8" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1168.8" y="1011.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.8" y="1022.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.02%)</title><rect x="1168.8" y="995.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.8" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1169.1" y="1043.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="1054.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1169.1" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.1" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1169.1" y="1011.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.1" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1169.1" y="995.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="1006.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.02%)</title><rect x="1169.4" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.07%)</title><rect x="1169.7" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.10%)</title><rect x="1170.5" y="1043.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.5" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1171.7" y="1043.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.7" y="1054.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.02%)</title><rect x="1171.7" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.7" y="1038.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1172.0" y="1043.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="1054.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.02%)</title><rect x="1172.0" y="1027.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.0" y="1038.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1172.0" y="1011.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.0" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.02%)</title><rect x="1172.0" y="995.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.0" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1172.0" y="979.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1172.0" y="963.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.0" y="974.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1172.0" y="947.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.02%)</title><rect x="1172.0" y="931.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const [clone .part.150] (1 samples, 0.02%)</title><rect x="1172.0" y="915.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="926.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1172.3" y="1043.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.3" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.02%)</title><rect x="1172.3" y="1027.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.3" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1172.3" y="1011.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.02%)</title><rect x="1172.3" y="995.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.3" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.02%)</title><rect x="1172.3" y="979.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="990.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.02%)</title><rect x="1172.3" y="963.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.3" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.02%)</title><rect x="1172.5" y="1075.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.02%)</title><rect x="1172.5" y="1059.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.02%)</title><rect x="1172.5" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1172.5" y="1027.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (4 samples, 0.10%)</title><rect x="1172.8" y="1075.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.8" y="1086.0"></text>
</g>
<g>
<title>OuterStripMinedLoopNode::adjust_strip_mined_loop(PhaseIterGVN*) (1 samples, 0.02%)</title><rect x="1172.8" y="1059.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.8" y="1070.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.02%)</title><rect x="1172.8" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.8" y="1054.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.02%)</title><rect x="1172.8" y="1027.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.07%)</title><rect x="1173.1" y="1059.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.05%)</title><rect x="1173.1" y="1043.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="1054.0"></text>
</g>
<g>
<title>LoadNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1173.1" y="1027.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.1" y="1038.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1173.4" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.4" y="1038.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1173.4" y="1011.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="1022.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.02%)</title><rect x="1173.4" y="995.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.4" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1173.4" y="979.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="990.0"></text>
</g>
<g>
<title>RegionNode::hash() const (1 samples, 0.02%)</title><rect x="1173.7" y="1043.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="1054.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (5 samples, 0.12%)</title><rect x="1174.0" y="1075.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.0" y="1086.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.05%)</title><rect x="1174.5" y="1059.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="1070.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1174.5" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1174.8" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="1054.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.02%)</title><rect x="1174.8" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="1038.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.02%)</title><rect x="1174.8" y="1011.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="1022.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.02%)</title><rect x="1175.1" y="1059.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1178.1" y="1070.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1175.4" y="1075.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.4" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (22 samples, 0.53%)</title><rect x="1175.7" y="1091.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (22 samples, 0.53%)</title><rect x="1175.7" y="1075.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (21 samples, 0.51%)</title><rect x="1175.7" y="1059.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (21 samples, 0.51%)</title><rect x="1175.7" y="1043.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (21 samples, 0.51%)</title><rect x="1175.7" y="1027.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (20 samples, 0.49%)</title><rect x="1175.7" y="1011.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1022.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.05%)</title><rect x="1175.7" y="995.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="1006.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.05%)</title><rect x="1175.7" y="979.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.05%)</title><rect x="1175.7" y="963.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.02%)</title><rect x="1175.7" y="947.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.7" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.02%)</title><rect x="1175.7" y="931.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="942.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.02%)</title><rect x="1175.7" y="915.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="926.0"></text>
</g>
<g>
<title>ciMethod::load_code() (1 samples, 0.02%)</title><rect x="1175.7" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1176.0" y="947.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1176.0" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1176.0" y="915.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1176.0" y="899.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.0" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1176.0" y="883.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.02%)</title><rect x="1176.0" y="867.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1176.0" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.29%)</title><rect x="1176.3" y="995.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.29%)</title><rect x="1176.3" y="979.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.29%)</title><rect x="1176.3" y="963.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.29%)</title><rect x="1176.3" y="947.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.29%)</title><rect x="1176.3" y="931.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.3" y="942.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.02%)</title><rect x="1176.3" y="915.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="926.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.02%)</title><rect x="1176.3" y="899.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="910.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1176.3" y="883.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="894.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1176.3" y="867.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1176.3" y="851.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="862.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1176.3" y="835.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.24%)</title><rect x="1176.5" y="915.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1176.5" y="899.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="910.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1176.5" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="894.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1176.5" y="867.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="878.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.02%)</title><rect x="1176.5" y="851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="862.0"></text>
</g>
<g>
<title>ciMethod::interpreter_call_site_count(int) (1 samples, 0.02%)</title><rect x="1176.5" y="835.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.22%)</title><rect x="1176.8" y="899.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.22%)</title><rect x="1176.8" y="883.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.22%)</title><rect x="1176.8" y="867.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.22%)</title><rect x="1176.8" y="851.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.22%)</title><rect x="1176.8" y="835.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.22%)</title><rect x="1176.8" y="819.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.15%)</title><rect x="1176.8" y="803.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.15%)</title><rect x="1176.8" y="787.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.15%)</title><rect x="1176.8" y="771.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.15%)</title><rect x="1176.8" y="755.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.15%)</title><rect x="1176.8" y="739.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.12%)</title><rect x="1176.8" y="723.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="734.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1176.8" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="718.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.02%)</title><rect x="1176.8" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="702.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1176.8" y="675.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="686.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.02%)</title><rect x="1176.8" y="659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="670.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.02%)</title><rect x="1176.8" y="643.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="654.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1176.8" y="627.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.10%)</title><rect x="1177.1" y="707.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.10%)</title><rect x="1177.1" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.10%)</title><rect x="1177.1" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.10%)</title><rect x="1177.1" y="659.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.10%)</title><rect x="1177.1" y="643.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.02%)</title><rect x="1177.1" y="627.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.02%)</title><rect x="1177.1" y="611.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1177.1" y="595.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1177.1" y="579.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.02%)</title><rect x="1177.1" y="563.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>TypePtr::xmeet_speculative(TypePtr const*) const (1 samples, 0.02%)</title><rect x="1177.1" y="547.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1177.4" y="627.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1177.4" y="611.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1177.4" y="595.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="606.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.02%)</title><rect x="1177.4" y="579.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1177.4" y="563.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1177.4" y="547.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1177.4" y="531.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1177.4" y="515.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1177.7" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1177.7" y="563.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1177.7" y="547.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1177.7" y="531.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.02%)</title><rect x="1177.7" y="515.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.02%)</title><rect x="1177.7" y="499.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_method_entry() (1 samples, 0.02%)</title><rect x="1178.0" y="579.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="590.0"></text>
</g>
<g>
<title>GraphKit::shared_lock(Node*) (1 samples, 0.02%)</title><rect x="1178.0" y="563.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.0" y="574.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.02%)</title><rect x="1178.0" y="547.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.02%)</title><rect x="1178.3" y="723.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.02%)</title><rect x="1178.3" y="707.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.02%)</title><rect x="1178.3" y="691.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.02%)</title><rect x="1178.3" y="675.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1178.3" y="659.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1178.3" y="643.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.02%)</title><rect x="1178.3" y="627.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1178.6" y="803.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1178.6" y="787.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1178.6" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1178.6" y="755.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1178.6" y="739.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1178.6" y="723.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1178.6" y="707.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1178.6" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1178.6" y="675.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1178.6" y="659.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1178.6" y="643.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1178.6" y="627.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1178.6" y="611.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1178.6" y="595.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1178.6" y="579.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="590.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.02%)</title><rect x="1178.6" y="563.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="574.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1178.6" y="547.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.6" y="558.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1178.6" y="531.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="542.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1178.6" y="515.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.6" y="526.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.02%)</title><rect x="1178.6" y="499.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1178.6" y="483.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="494.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1178.6" y="467.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1178.8" y="563.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1178.8" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1178.8" y="531.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1178.8" y="515.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1178.8" y="499.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1178.8" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1178.8" y="467.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1178.8" y="451.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1178.8" y="435.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1178.8" y="419.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1178.8" y="403.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1178.8" y="387.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1178.8" y="371.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1178.8" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1178.8" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1178.8" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1178.8" y="307.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1178.8" y="291.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1178.8" y="275.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1178.8" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1178.8" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1178.8" y="227.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1178.8" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1178.8" y="195.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1178.8" y="179.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1178.8" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1178.8" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1178.8" y="131.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1178.8" y="115.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1178.8" y="99.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="110.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.02%)</title><rect x="1178.8" y="83.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="94.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1178.8" y="67.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1178.8" y="51.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1178.8" y="35.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="595.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="579.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="563.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="547.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="531.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="515.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="499.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="483.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="467.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="451.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="419.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="403.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1179.1" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1179.1" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1179.1" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1179.1" y="323.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1179.1" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="318.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1179.1" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="302.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.02%)</title><rect x="1179.1" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="286.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1179.1" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1179.1" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="254.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1179.1" y="227.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="238.0"></text>
</g>
<g>
<title>CatchProjNode::hash() const (1 samples, 0.02%)</title><rect x="1179.1" y="211.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="222.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.02%)</title><rect x="1179.1" y="195.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1179.4" y="915.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.02%)</title><rect x="1179.4" y="899.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="910.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1179.4" y="883.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="894.0"></text>
</g>
<g>
<title>C2Access::fixup_decorators() (1 samples, 0.02%)</title><rect x="1179.4" y="867.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.12%)</title><rect x="1179.7" y="995.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="1006.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.02%)</title><rect x="1179.7" y="979.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="990.0"></text>
</g>
<g>
<title>PhaseTransform::zerocon(BasicType) (1 samples, 0.02%)</title><rect x="1179.7" y="963.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="974.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.02%)</title><rect x="1179.7" y="947.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="958.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.02%)</title><rect x="1179.7" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.10%)</title><rect x="1180.0" y="979.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.10%)</title><rect x="1180.0" y="963.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.10%)</title><rect x="1180.0" y="947.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1180.0" y="931.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1180.0" y="915.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1180.0" y="899.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1180.0" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1180.0" y="867.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1180.0" y="851.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1180.0" y="835.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1180.0" y="819.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1180.0" y="803.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1180.0" y="787.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1180.0" y="771.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1180.0" y="755.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1180.0" y="739.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1180.0" y="723.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1180.0" y="707.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.0" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1180.0" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1180.0" y="675.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1180.0" y="659.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.0" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1180.0" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1180.0" y="627.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::get_start_state() (1 samples, 0.02%)</title><rect x="1180.0" y="611.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.3" y="691.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.3" y="675.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.3" y="659.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.3" y="643.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.3" y="627.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1180.3" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1180.3" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1180.3" y="579.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1180.3" y="563.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1180.3" y="547.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1180.3" y="531.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1180.3" y="515.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1180.3" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="510.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.02%)</title><rect x="1180.3" y="483.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="494.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.02%)</title><rect x="1180.3" y="467.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="478.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1180.3" y="451.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.02%)</title><rect x="1180.3" y="435.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1180.3" y="419.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="430.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1180.3" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.02%)</title><rect x="1180.3" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1180.6" y="515.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1180.6" y="499.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="510.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1180.6" y="483.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.02%)</title><rect x="1180.6" y="467.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.02%)</title><rect x="1180.6" y="451.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.6" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.02%)</title><rect x="1180.6" y="435.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="446.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.02%)</title><rect x="1180.8" y="931.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.8" y="942.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1180.8" y="915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="926.0"></text>
</g>
<g>
<title>Type::cleanup_speculative() const (1 samples, 0.02%)</title><rect x="1180.8" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1181.1" y="995.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1181.1" y="979.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="990.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1181.1" y="963.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="974.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1181.1" y="947.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="958.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1181.1" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.02%)</title><rect x="1181.1" y="915.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.02%)</title><rect x="1181.1" y="899.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.02%)</title><rect x="1181.4" y="1011.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="1022.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.02%)</title><rect x="1181.4" y="995.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="1006.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1181.4" y="979.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="990.0"></text>
</g>
<g>
<title>LinkResolver::check_field_accessability(Klass*, Klass*, Klass*, fieldDescriptor const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1181.4" y="963.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="974.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1181.7" y="1059.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="1070.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.02%)</title><rect x="1182.0" y="1091.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="1102.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.02%)</title><rect x="1182.0" y="1075.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="1086.0"></text>
</g>
<g>
<title>CompileTask::print(outputStream*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1182.3" y="1123.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="1134.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.02%)</title><rect x="1182.3" y="1107.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="1118.0"></text>
</g>
<g>
<title>Symbol::print_symbol_on(outputStream*) const (1 samples, 0.02%)</title><rect x="1182.3" y="1091.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="1102.0"></text>
</g>
<g>
<title>__strcpy_ssse3 (1 samples, 0.02%)</title><rect x="1182.3" y="1075.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1185.3" y="1086.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (13 samples, 0.32%)</title><rect x="1182.6" y="1123.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="1134.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (13 samples, 0.32%)</title><rect x="1182.6" y="1107.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.6" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_method() (13 samples, 0.32%)</title><rect x="1182.6" y="1091.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (13 samples, 0.32%)</title><rect x="1182.6" y="1075.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="1086.0"></text>
</g>
<g>
<title>Compilation::build_hir() (9 samples, 0.22%)</title><rect x="1182.6" y="1059.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="1070.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (9 samples, 0.22%)</title><rect x="1182.6" y="1043.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="1054.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (9 samples, 0.22%)</title><rect x="1182.6" y="1027.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (9 samples, 0.22%)</title><rect x="1182.6" y="1011.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (9 samples, 0.22%)</title><rect x="1182.6" y="995.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (9 samples, 0.22%)</title><rect x="1182.6" y="979.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1182.6" y="963.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1182.6" y="947.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1185.6" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1182.6" y="931.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1185.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1182.6" y="915.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1185.6" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1182.6" y="899.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1185.6" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1182.6" y="883.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1185.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1182.6" y="867.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1185.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1182.6" y="851.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1185.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1182.6" y="835.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1185.6" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::if_zero(ValueType*, Instruction::Condition) (1 samples, 0.02%)</title><rect x="1182.8" y="963.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="974.0"></text>
</g>
<g>
<title>Constant::visit(InstructionVisitor*) (1 samples, 0.02%)</title><rect x="1182.8" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 0.15%)</title><rect x="1183.1" y="963.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.10%)</title><rect x="1183.1" y="947.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.10%)</title><rect x="1183.1" y="931.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.05%)</title><rect x="1183.4" y="915.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.05%)</title><rect x="1183.4" y="899.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.02%)</title><rect x="1183.4" y="883.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="894.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.02%)</title><rect x="1183.4" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1183.7" y="883.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1183.7" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.7" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1183.7" y="851.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.7" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.02%)</title><rect x="1183.7" y="835.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="846.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.02%)</title><rect x="1183.7" y="819.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="830.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.02%)</title><rect x="1183.7" y="803.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="814.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.02%)</title><rect x="1183.7" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.02%)</title><rect x="1183.7" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.02%)</title><rect x="1183.7" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="766.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.02%)</title><rect x="1183.7" y="739.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="750.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.02%)</title><rect x="1183.7" y="723.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.02%)</title><rect x="1184.0" y="915.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="926.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.02%)</title><rect x="1184.0" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1184.3" y="947.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1184.3" y="931.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.3" y="942.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.02%)</title><rect x="1184.3" y="915.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.02%)</title><rect x="1184.3" y="899.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.02%)</title><rect x="1184.3" y="883.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.3" y="894.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="1184.3" y="867.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="878.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle const&amp;, int) (1 samples, 0.02%)</title><rect x="1184.3" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="862.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.02%)</title><rect x="1184.3" y="835.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1184.6" y="947.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="958.0"></text>
</g>
<g>
<title>ciSignature::return_type() const (1 samples, 0.02%)</title><rect x="1184.8" y="963.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.8" y="974.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.05%)</title><rect x="1185.1" y="1059.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.1" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (2 samples, 0.05%)</title><rect x="1185.1" y="1043.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="1054.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (2 samples, 0.05%)</title><rect x="1185.1" y="1027.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.1" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.02%)</title><rect x="1185.1" y="1011.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="1022.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.02%)</title><rect x="1185.1" y="995.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.1" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.02%)</title><rect x="1185.1" y="979.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1185.1" y="963.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="974.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 0.02%)</title><rect x="1185.4" y="1011.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="1022.0"></text>
</g>
<g>
<title>Assembler::call_literal(unsigned char*, RelocationHolder const&amp;) (1 samples, 0.02%)</title><rect x="1185.4" y="995.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="1006.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.05%)</title><rect x="1185.7" y="1059.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="1070.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.02%)</title><rect x="1185.7" y="1043.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.02%)</title><rect x="1185.7" y="1027.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.7" y="1038.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.02%)</title><rect x="1185.7" y="1011.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.7" y="1022.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.02%)</title><rect x="1185.7" y="995.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="1006.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.02%)</title><rect x="1185.7" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="990.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.02%)</title><rect x="1186.0" y="1043.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="1054.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.02%)</title><rect x="1186.0" y="1027.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="1038.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.02%)</title><rect x="1186.0" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="1022.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.02%)</title><rect x="1186.0" y="995.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.0" y="1006.0"></text>
</g>
<g>
<title>ciEnv::cache_jvmti_state() (1 samples, 0.02%)</title><rect x="1186.3" y="1123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.02%)</title><rect x="1186.6" y="1123.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="1134.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1186.6" y="1107.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.6" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1186.6" y="1091.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1186.6" y="1075.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.6" y="1086.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1186.6" y="1059.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="1070.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.02%)</title><rect x="1186.6" y="1043.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="1054.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="1186.6" y="1027.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="1038.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.02%)</title><rect x="1186.9" y="1123.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="1134.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.02%)</title><rect x="1186.9" y="1107.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1118.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.07%)</title><rect x="1187.1" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="1166.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.07%)</title><rect x="1187.1" y="1139.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="1150.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (3 samples, 0.07%)</title><rect x="1187.1" y="1123.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="1134.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (3 samples, 0.07%)</title><rect x="1187.1" y="1107.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1190.1" y="1118.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.02%)</title><rect x="1187.4" y="1091.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="1102.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.02%)</title><rect x="1187.7" y="1091.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.7" y="1102.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.02%)</title><rect x="1187.7" y="1075.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.7" y="1086.0"></text>
</g>
<g>
<title>nmethod::metadata_addr_at(int) const (1 samples, 0.02%)</title><rect x="1187.7" y="1059.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="1070.0"></text>
</g>
<g>
<title>VMError::is_error_reported() (1 samples, 0.02%)</title><rect x="1188.0" y="1187.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="1198.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.02%)</title><rect x="1188.3" y="1187.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="1198.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.02%)</title><rect x="1188.3" y="1171.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.3" y="1182.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.02%)</title><rect x="1188.3" y="1155.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.3" y="1166.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.02%)</title><rect x="1188.3" y="1139.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.3" y="1150.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.02%)</title><rect x="1188.3" y="1123.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.02%)</title><rect x="1188.3" y="1107.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.3" y="1118.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(CollectedHeap*, bool) [clone .part.127] (1 samples, 0.02%)</title><rect x="1188.3" y="1091.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.3" y="1102.0"></text>
</g>
<g>
<title>MetaspaceUtils::print_on(outputStream*) (1 samples, 0.02%)</title><rect x="1188.3" y="1075.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="1086.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.02%)</title><rect x="1188.3" y="1059.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.3" y="1070.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (1 samples, 0.02%)</title><rect x="1188.3" y="1043.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="1054.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.02%)</title><rect x="1188.3" y="1027.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1191.3" y="1038.0"></text>
</g>
<g>
<title>WatcherThread::run() (5 samples, 0.12%)</title><rect x="1188.6" y="1187.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.6" y="1198.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (5 samples, 0.12%)</title><rect x="1188.6" y="1171.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.6" y="1182.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.12%)</title><rect x="1188.6" y="1155.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.6" y="1166.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.10%)</title><rect x="1188.6" y="1139.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.6" y="1150.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.02%)</title><rect x="1188.9" y="1123.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1191.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1188.9" y="1107.0" width="0.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1191.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1188.9" y="1091.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1191.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1188.9" y="1075.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1191.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1188.9" y="1059.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1191.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1188.9" y="1043.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1191.9" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.05%)</title><rect x="1189.1" y="1123.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1192.1" y="1134.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.02%)</title><rect x="1189.7" y="1139.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.7" y="1150.0"></text>
</g>
</g>
</svg>
