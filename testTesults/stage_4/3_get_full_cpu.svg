<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (4,797 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (2 samples, 0.04%)</title><rect x="10.0" y="883.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.04%)</title><rect x="10.7" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.7" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.10%)</title><rect x="11.5" y="883.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.04%)</title><rect x="11.7" y="867.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.04%)</title><rect x="11.7" y="851.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.7" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.04%)</title><rect x="11.7" y="835.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.7" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.04%)</title><rect x="12.2" y="867.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.10%)</title><rect x="12.7" y="883.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.7" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.10%)</title><rect x="12.7" y="867.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.10%)</title><rect x="12.7" y="851.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.7" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.10%)</title><rect x="12.7" y="835.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.7" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.08%)</title><rect x="13.0" y="819.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.0" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.08%)</title><rect x="13.0" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.0" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (3 samples, 0.06%)</title><rect x="13.2" y="787.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.04%)</title><rect x="13.4" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.4" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (23 samples, 0.48%)</title><rect x="13.9" y="883.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.9" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (21 samples, 0.44%)</title><rect x="14.4" y="867.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (19 samples, 0.40%)</title><rect x="14.7" y="851.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.7" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (19 samples, 0.40%)</title><rect x="14.7" y="835.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="17.7" y="846.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.04%)</title><rect x="14.7" y="819.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.7" y="830.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (16 samples, 0.33%)</title><rect x="15.2" y="819.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.2" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (14 samples, 0.29%)</title><rect x="15.2" y="803.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.2" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::par_allocate(HeapRegion*, unsigned long, unsigned long, unsigned long*) (2 samples, 0.04%)</title><rect x="15.4" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.4" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (6 samples, 0.13%)</title><rect x="15.9" y="787.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (6 samples, 0.13%)</title><rect x="15.9" y="771.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.9" y="782.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (4 samples, 0.08%)</title><rect x="16.1" y="755.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.1" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (3 samples, 0.06%)</title><rect x="16.4" y="739.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="19.4" y="750.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (3 samples, 0.06%)</title><rect x="16.4" y="723.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.4" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.04%)</title><rect x="17.6" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="20.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.04%)</title><rect x="17.6" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="20.6" y="782.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.04%)</title><rect x="17.6" y="755.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="20.6" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (2 samples, 0.04%)</title><rect x="18.1" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.1" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (32 samples, 0.67%)</title><rect x="19.8" y="883.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="22.8" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (30 samples, 0.63%)</title><rect x="20.1" y="867.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.1" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (16 samples, 0.33%)</title><rect x="20.6" y="851.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="23.6" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (13 samples, 0.27%)</title><rect x="20.6" y="835.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.6" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="24.0" y="835.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="27.0" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (11 samples, 0.23%)</title><rect x="24.5" y="851.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.5" y="862.0"></text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.10%)</title><rect x="28.0" y="883.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="31.0" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (27 samples, 0.56%)</title><rect x="29.4" y="883.0" width="6.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="32.4" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="34.4" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="37.4" y="878.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (5 samples, 0.10%)</title><rect x="34.8" y="867.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="37.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.08%)</title><rect x="35.1" y="851.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="38.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.08%)</title><rect x="35.1" y="835.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="38.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.08%)</title><rect x="35.1" y="819.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="38.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="35.6" y="803.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="38.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="35.6" y="787.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="38.6" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="35.6" y="771.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="38.6" y="782.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.04%)</title><rect x="36.1" y="883.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="39.1" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 0.19%)</title><rect x="36.6" y="883.0" width="2.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="39.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="36.6" y="867.0" width="2.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="39.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="36.6" y="851.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="39.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.19%)</title><rect x="36.6" y="835.0" width="2.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="39.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.17%)</title><rect x="36.8" y="819.0" width="2.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="39.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="37.1" y="803.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="40.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="37.1" y="787.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="40.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="37.3" y="771.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="40.3" y="782.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.13%)</title><rect x="37.3" y="755.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="40.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="38.0" y="739.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="41.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,223 samples, 67.19%)</title><rect x="39.3" y="883.0" width="792.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.3" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,223 samples, 67.19%)</title><rect x="39.3" y="867.0" width="792.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.3" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,223 samples, 67.19%)</title><rect x="39.3" y="851.0" width="792.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.3" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 0.10%)</title><rect x="42.5" y="835.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (13 samples, 0.27%)</title><rect x="43.7" y="835.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.27%)</title><rect x="43.7" y="819.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="46.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.27%)</title><rect x="43.7" y="803.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.7" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run (4 samples, 0.08%)</title><rect x="45.9" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (478 samples, 9.96%)</title><rect x="46.9" y="835.0" width="117.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.9" y="846.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (475 samples, 9.90%)</title><rect x="47.6" y="819.0" width="116.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="50.6" y="830.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (341 samples, 7.11%)</title><rect x="47.6" y="803.0" width="83.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.6" y="814.0">java/util..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (7 samples, 0.15%)</title><rect x="49.4" y="787.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (12 samples, 0.25%)</title><rect x="51.1" y="787.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (35 samples, 0.73%)</title><rect x="54.0" y="787.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (35 samples, 0.73%)</title><rect x="54.0" y="771.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 0.42%)</title><rect x="57.0" y="755.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 0.42%)</title><rect x="57.0" y="739.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.0" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 0.38%)</title><rect x="57.5" y="723.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.5" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.08%)</title><rect x="57.5" y="707.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="60.5" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (14 samples, 0.29%)</title><rect x="58.5" y="707.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="61.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.27%)</title><rect x="58.7" y="691.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="61.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.27%)</title><rect x="58.7" y="675.0" width="3.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="61.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.25%)</title><rect x="59.0" y="659.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="62.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.25%)</title><rect x="59.0" y="643.0" width="2.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="62.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.25%)</title><rect x="59.0" y="627.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="62.0" y="638.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.25%)</title><rect x="59.0" y="611.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="62.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="59.4" y="595.0" width="2.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="62.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.21%)</title><rect x="59.4" y="579.0" width="2.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="62.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.04%)</title><rect x="61.9" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (279 samples, 5.82%)</title><rect x="62.6" y="787.0" width="68.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.6" y="798.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (277 samples, 5.77%)</title><rect x="63.1" y="771.0" width="68.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.1" y="782.0">jdk/int..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.06%)</title><rect x="65.3" y="755.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="68.3" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (115 samples, 2.40%)</title><rect x="66.3" y="755.0" width="28.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="69.3" y="766.0">Un..</text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 0.58%)</title><rect x="67.8" y="739.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="70.8" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.13%)</title><rect x="71.7" y="723.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="74.7" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.04%)</title><rect x="72.7" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="75.7" y="718.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.10%)</title><rect x="73.5" y="723.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="76.5" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.04%)</title><rect x="74.7" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="77.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (4 samples, 0.08%)</title><rect x="75.2" y="739.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="78.2" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.06%)</title><rect x="76.2" y="739.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="79.2" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (58 samples, 1.21%)</title><rect x="76.9" y="739.0" width="14.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="79.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 0.98%)</title><rect x="79.6" y="723.0" width="11.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="82.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 0.98%)</title><rect x="79.6" y="707.0" width="11.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="82.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.54%)</title><rect x="84.8" y="691.0" width="6.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="87.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.50%)</title><rect x="85.3" y="675.0" width="5.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="88.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.42%)</title><rect x="86.3" y="659.0" width="4.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="89.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.15%)</title><rect x="89.5" y="643.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="92.5" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="91.4" y="739.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="94.4" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.06%)</title><rect x="91.9" y="739.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="94.9" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (6 samples, 0.13%)</title><rect x="93.1" y="739.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="96.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (145 samples, 3.02%)</title><rect x="94.6" y="755.0" width="35.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="97.6" y="766.0">[un..</text>
</g>
<g>
<title>__pthread_cleanup_pop (3 samples, 0.06%)</title><rect x="94.6" y="739.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="97.6" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (106 samples, 2.21%)</title><rect x="95.6" y="739.0" width="26.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="98.6" y="750.0">_..</text>
</g>
<g>
<title>[unknown] (66 samples, 1.38%)</title><rect x="105.4" y="723.0" width="16.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="108.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 1.38%)</title><rect x="105.4" y="707.0" width="16.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="108.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 1.08%)</title><rect x="108.9" y="691.0" width="12.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="111.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.04%)</title><rect x="109.4" y="675.0" width="12.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="112.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.02%)</title><rect x="109.6" y="659.0" width="12.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="112.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 0.92%)</title><rect x="110.9" y="643.0" width="10.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="113.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.63%)</title><rect x="114.3" y="627.0" width="7.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="117.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.46%)</title><rect x="116.3" y="611.0" width="5.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="119.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.42%)</title><rect x="116.8" y="595.0" width="4.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="119.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="121.2" y="579.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="124.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="121.2" y="563.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="124.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="121.2" y="547.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="124.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="121.2" y="531.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="124.2" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="121.2" y="515.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="124.2" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="121.2" y="499.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="124.2" y="510.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.15%)</title><rect x="121.7" y="739.0" width="1.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="124.7" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (6 samples, 0.13%)</title><rect x="123.4" y="739.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="126.4" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (15 samples, 0.31%)</title><rect x="124.9" y="739.0" width="3.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="127.9" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.10%)</title><rect x="128.6" y="739.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="131.6" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.04%)</title><rect x="129.8" y="739.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="132.8" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.06%)</title><rect x="130.5" y="755.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="133.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.08%)</title><rect x="131.5" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (16 samples, 0.33%)</title><rect x="132.5" y="803.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="135.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (16 samples, 0.33%)</title><rect x="132.5" y="787.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (16 samples, 0.33%)</title><rect x="132.5" y="771.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="135.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (114 samples, 2.38%)</title><rect x="136.4" y="803.0" width="28.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="139.4" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (114 samples, 2.38%)</title><rect x="136.4" y="787.0" width="28.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.4" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (114 samples, 2.38%)</title><rect x="136.4" y="771.0" width="28.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.4" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (91 samples, 1.90%)</title><rect x="142.1" y="755.0" width="22.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="145.1" y="766.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (91 samples, 1.90%)</title><rect x="142.1" y="739.0" width="22.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="145.1" y="750.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (17 samples, 0.35%)</title><rect x="143.1" y="723.0" width="4.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="146.1" y="734.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.04%)</title><rect x="143.6" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="146.6" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.04%)</title><rect x="144.1" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="147.1" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.06%)</title><rect x="145.0" y="707.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="148.0" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.06%)</title><rect x="146.0" y="707.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="149.0" y="718.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.04%)</title><rect x="146.8" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="149.8" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (70 samples, 1.46%)</title><rect x="147.3" y="723.0" width="17.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="150.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.36%)</title><rect x="148.5" y="707.0" width="16.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="151.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.36%)</title><rect x="148.5" y="691.0" width="16.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="151.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.36%)</title><rect x="148.5" y="675.0" width="16.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="151.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 1.33%)</title><rect x="148.7" y="659.0" width="15.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="151.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 1.29%)</title><rect x="149.2" y="643.0" width="15.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="152.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 1.21%)</title><rect x="150.2" y="627.0" width="14.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="153.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.06%)</title><rect x="151.9" y="611.0" width="12.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="154.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.02%)</title><rect x="152.4" y="595.0" width="12.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="155.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run (2,714 samples, 56.58%)</title><rect x="164.5" y="835.0" width="667.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.5" y="846.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4 (2,714 samples, 56.58%)</title><rect x="164.5" y="819.0" width="667.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.5" y="830.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,315 samples, 27.41%)</title><rect x="164.7" y="803.0" width="323.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="167.7" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.06%)</title><rect x="166.0" y="787.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,248 samples, 26.02%)</title><rect x="166.7" y="787.0" width="307.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="169.7" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (49 samples, 1.02%)</title><rect x="166.7" y="771.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="169.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (26 samples, 0.54%)</title><rect x="172.4" y="755.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (26 samples, 0.54%)</title><rect x="172.4" y="739.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (26 samples, 0.54%)</title><rect x="172.4" y="723.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="175.4" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.08%)</title><rect x="177.8" y="707.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="180.8" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,199 samples, 24.99%)</title><rect x="178.7" y="771.0" width="295.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.7" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,199 samples, 24.99%)</title><rect x="178.7" y="755.0" width="295.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.7" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,199 samples, 24.99%)</title><rect x="178.7" y="739.0" width="295.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.7" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,199 samples, 24.99%)</title><rect x="178.7" y="723.0" width="295.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.7" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (62 samples, 1.29%)</title><rect x="181.9" y="707.0" width="15.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="184.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 1.29%)</title><rect x="181.9" y="691.0" width="15.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="184.9" y="702.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (49 samples, 1.02%)</title><rect x="181.9" y="675.0" width="12.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="184.9" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.08%)</title><rect x="183.2" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="186.2" y="670.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="184.2" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="187.2" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.10%)</title><rect x="184.9" y="659.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="187.9" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3 (11 samples, 0.23%)</title><rect x="186.1" y="659.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="189.1" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (18 samples, 0.38%)</title><rect x="188.8" y="659.0" width="4.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="191.8" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (4 samples, 0.08%)</title><rect x="190.1" y="643.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="193.1" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.10%)</title><rect x="191.0" y="643.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="194.0" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.08%)</title><rect x="192.3" y="643.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="195.3" y="654.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.06%)</title><rect x="193.3" y="659.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="196.3" y="670.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.04%)</title><rect x="194.2" y="675.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="197.2" y="686.0"></text>
</g>
<g>
<title>__send (8 samples, 0.17%)</title><rect x="194.7" y="675.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="197.7" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="196.7" y="675.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="199.7" y="686.0"></text>
</g>
<g>
<title>__send (1,123 samples, 23.41%)</title><rect x="197.4" y="707.0" width="276.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="200.4" y="718.0">__send</text>
</g>
<g>
<title>[unknown] (1,114 samples, 23.22%)</title><rect x="199.7" y="691.0" width="274.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="202.7" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,114 samples, 23.22%)</title><rect x="199.7" y="675.0" width="274.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="202.7" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,097 samples, 22.87%)</title><rect x="203.8" y="659.0" width="269.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="206.8" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,095 samples, 22.83%)</title><rect x="204.3" y="643.0" width="269.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="207.3" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,089 samples, 22.70%)</title><rect x="205.8" y="627.0" width="267.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="208.8" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,077 samples, 22.45%)</title><rect x="208.8" y="611.0" width="264.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="211.8" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,067 samples, 22.24%)</title><rect x="211.2" y="595.0" width="262.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="214.2" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,062 samples, 22.14%)</title><rect x="212.4" y="579.0" width="261.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="215.4" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,014 samples, 21.14%)</title><rect x="224.3" y="563.0" width="249.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="227.3" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (975 samples, 20.33%)</title><rect x="233.8" y="547.0" width="239.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="236.8" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (927 samples, 19.32%)</title><rect x="245.7" y="531.0" width="228.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="248.7" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (878 samples, 18.30%)</title><rect x="257.7" y="515.0" width="216.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="260.7" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (805 samples, 16.78%)</title><rect x="275.7" y="499.0" width="198.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="278.7" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (783 samples, 16.32%)</title><rect x="281.1" y="483.0" width="192.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="284.1" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (766 samples, 15.97%)</title><rect x="285.3" y="467.0" width="188.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="288.3" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (753 samples, 15.70%)</title><rect x="288.5" y="451.0" width="185.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="291.5" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (744 samples, 15.51%)</title><rect x="290.7" y="435.0" width="183.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="293.7" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (713 samples, 14.86%)</title><rect x="298.3" y="419.0" width="175.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="301.3" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (688 samples, 14.34%)</title><rect x="304.4" y="403.0" width="169.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="307.4" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (650 samples, 13.55%)</title><rect x="313.8" y="387.0" width="159.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="316.8" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (578 samples, 12.05%)</title><rect x="331.5" y="371.0" width="142.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="334.5" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (542 samples, 11.30%)</title><rect x="340.4" y="355.0" width="133.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="343.4" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (521 samples, 10.86%)</title><rect x="345.5" y="339.0" width="128.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="348.5" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (499 samples, 10.40%)</title><rect x="350.9" y="323.0" width="122.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="353.9" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (488 samples, 10.17%)</title><rect x="353.6" y="307.0" width="120.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="356.6" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (471 samples, 9.82%)</title><rect x="357.8" y="291.0" width="115.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="360.8" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (469 samples, 9.78%)</title><rect x="358.3" y="275.0" width="115.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="361.3" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (458 samples, 9.55%)</title><rect x="361.0" y="259.0" width="112.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="364.0" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (439 samples, 9.15%)</title><rect x="365.7" y="243.0" width="108.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="368.7" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (429 samples, 8.94%)</title><rect x="368.2" y="227.0" width="105.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="371.2" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (426 samples, 8.88%)</title><rect x="368.9" y="211.0" width="104.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="371.9" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (419 samples, 8.73%)</title><rect x="370.6" y="195.0" width="103.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="373.6" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (384 samples, 8.01%)</title><rect x="379.2" y="179.0" width="94.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="382.2" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (351 samples, 7.32%)</title><rect x="387.3" y="163.0" width="86.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="390.3" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (339 samples, 7.07%)</title><rect x="390.3" y="147.0" width="83.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="393.3" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (299 samples, 6.23%)</title><rect x="400.1" y="131.0" width="73.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="403.1" y="142.0">[unknown]</text>
</g>
<g>
<title>[unknown] (240 samples, 5.00%)</title><rect x="414.6" y="115.0" width="59.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="417.6" y="126.0">[unkno..</text>
</g>
<g>
<title>[unknown] (222 samples, 4.63%)</title><rect x="419.1" y="99.0" width="54.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="422.1" y="110.0">[unkn..</text>
</g>
<g>
<title>[unknown] (215 samples, 4.48%)</title><rect x="420.8" y="83.0" width="52.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="423.8" y="94.0">[unkn..</text>
</g>
<g>
<title>[unknown] (27 samples, 0.56%)</title><rect x="467.0" y="67.0" width="6.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="470.0" y="78.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.44%)</title><rect x="468.5" y="51.0" width="5.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="471.5" y="62.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.23%)</title><rect x="471.0" y="35.0" width="2.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="474.0" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (37 samples, 0.77%)</title><rect x="473.7" y="787.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="475.2" y="771.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="478.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (29 samples, 0.60%)</title><rect x="475.7" y="771.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="478.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (13 samples, 0.27%)</title><rect x="478.4" y="755.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="481.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.21%)</title><rect x="478.9" y="739.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="481.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.21%)</title><rect x="478.9" y="723.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="481.9" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (9 samples, 0.19%)</title><rect x="479.1" y="707.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.1" y="718.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.10%)</title><rect x="479.3" y="691.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="482.3" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="480.6" y="691.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="483.6" y="702.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="480.8" y="675.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="483.8" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="480.8" y="659.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="483.8" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (5 samples, 0.10%)</title><rect x="481.6" y="755.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="484.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (22 samples, 0.46%)</title><rect x="482.8" y="787.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="485.8" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="487.7" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="490.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$62/454019155.action (1,398 samples, 29.14%)</title><rect x="488.2" y="803.0" width="343.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.2" y="814.0">ru/mail/polis/service/igorlo/AsyncService$$Lamb..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$1 (1,396 samples, 29.10%)</title><rect x="488.7" y="787.0" width="343.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.7" y="798.0">ru/mail/polis/service/igorlo/AsyncService.lambd..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (1,396 samples, 29.10%)</title><rect x="488.7" y="771.0" width="343.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="491.7" y="782.0">ru/mail/polis/service/igorlo/AsyncService.get</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.08%)</title><rect x="488.7" y="755.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.7" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.06%)</title><rect x="488.9" y="739.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="491.9" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.19%)</title><rect x="489.7" y="755.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.7" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.15%)</title><rect x="490.2" y="739.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="493.2" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.15%)</title><rect x="490.2" y="723.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.2" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="490.4" y="707.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.4" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="490.7" y="691.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.7" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="490.7" y="675.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="493.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="490.7" y="659.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.7" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="491.2" y="659.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.2" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.04%)</title><rect x="491.9" y="755.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="494.9" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="491.9" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="494.9" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="491.9" y="723.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="494.9" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="491.9" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="494.9" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="491.9" y="691.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="494.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,381 samples, 28.79%)</title><rect x="492.4" y="755.0" width="339.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.4" y="766.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (57 samples, 1.19%)</title><rect x="492.4" y="739.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="495.4" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (57 samples, 1.19%)</title><rect x="492.4" y="723.0" width="14.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="495.4" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (57 samples, 1.19%)</title><rect x="492.4" y="707.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="495.4" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (57 samples, 1.19%)</title><rect x="492.4" y="691.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="495.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (57 samples, 1.19%)</title><rect x="492.4" y="675.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="495.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (43 samples, 0.90%)</title><rect x="492.9" y="659.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.9" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (4 samples, 0.08%)</title><rect x="493.1" y="643.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="496.1" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (4 samples, 0.08%)</title><rect x="493.1" y="627.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.1" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (4 samples, 0.08%)</title><rect x="493.1" y="611.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.1" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (4 samples, 0.08%)</title><rect x="493.1" y="595.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.08%)</title><rect x="493.1" y="579.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.1" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.04%)</title><rect x="493.1" y="563.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.1" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.04%)</title><rect x="493.6" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="496.6" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.04%)</title><rect x="493.6" y="547.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="496.6" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (4 samples, 0.08%)</title><rect x="494.3" y="643.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="497.3" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (4 samples, 0.08%)</title><rect x="494.3" y="627.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="497.3" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (2 samples, 0.04%)</title><rect x="494.8" y="611.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.8" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2 samples, 0.04%)</title><rect x="494.8" y="595.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="497.8" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2 samples, 0.04%)</title><rect x="494.8" y="579.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="497.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (2 samples, 0.04%)</title><rect x="494.8" y="563.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="497.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (2 samples, 0.04%)</title><rect x="494.8" y="547.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.8" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (2 samples, 0.04%)</title><rect x="494.8" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="497.8" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.04%)</title><rect x="494.8" y="515.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="497.8" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (2 samples, 0.04%)</title><rect x="494.8" y="499.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="497.8" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.04%)</title><rect x="494.8" y="483.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.8" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (2 samples, 0.04%)</title><rect x="494.8" y="467.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="497.8" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.04%)</title><rect x="494.8" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.04%)</title><rect x="494.8" y="435.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.04%)</title><rect x="494.8" y="419.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.8" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (33 samples, 0.69%)</title><rect x="495.3" y="643.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.3" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (33 samples, 0.69%)</title><rect x="495.3" y="627.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="498.3" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (33 samples, 0.69%)</title><rect x="495.3" y="611.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="498.3" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (33 samples, 0.69%)</title><rect x="495.3" y="595.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.3" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (33 samples, 0.69%)</title><rect x="495.3" y="579.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.3" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (33 samples, 0.69%)</title><rect x="495.3" y="563.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="498.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (16 samples, 0.33%)</title><rect x="495.3" y="547.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (15 samples, 0.31%)</title><rect x="495.6" y="531.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="498.6" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (15 samples, 0.31%)</title><rect x="495.6" y="515.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="498.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (13 samples, 0.27%)</title><rect x="496.1" y="499.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="499.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (2 samples, 0.04%)</title><rect x="496.1" y="483.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="499.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (3 samples, 0.06%)</title><rect x="496.6" y="483.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.06%)</title><rect x="496.6" y="467.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.6" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.06%)</title><rect x="496.6" y="451.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.6" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="496.6" y="435.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="499.6" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="496.6" y="419.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="496.6" y="403.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="499.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="496.6" y="387.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="496.6" y="371.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="499.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (5 samples, 0.10%)</title><rect x="497.3" y="483.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.08%)</title><rect x="497.5" y="467.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="500.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.08%)</title><rect x="497.5" y="451.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.5" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.08%)</title><rect x="497.5" y="435.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="500.5" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="497.5" y="419.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.5" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="497.8" y="403.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="498.0" y="387.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="498.0" y="371.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.0" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="498.0" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="501.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (3 samples, 0.06%)</title><rect x="498.5" y="483.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.04%)</title><rect x="498.8" y="467.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.8" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="498.8" y="451.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.8" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="498.8" y="435.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="501.8" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="498.8" y="419.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.8" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="498.8" y="403.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="501.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="498.8" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="501.8" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="498.8" y="371.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (17 samples, 0.35%)</title><rect x="499.3" y="547.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="502.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (17 samples, 0.35%)</title><rect x="499.3" y="531.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.3" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (17 samples, 0.35%)</title><rect x="499.3" y="515.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.3" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (17 samples, 0.35%)</title><rect x="499.3" y="499.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="502.3" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (16 samples, 0.33%)</title><rect x="499.5" y="483.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.5" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (16 samples, 0.33%)</title><rect x="499.5" y="467.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="502.5" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (16 samples, 0.33%)</title><rect x="499.5" y="451.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="502.5" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (16 samples, 0.33%)</title><rect x="499.5" y="435.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="502.5" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.19%)</title><rect x="499.5" y="419.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.19%)</title><rect x="499.5" y="403.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.5" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.17%)</title><rect x="499.8" y="387.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="502.8" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.04%)</title><rect x="500.7" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="503.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (7 samples, 0.15%)</title><rect x="501.7" y="419.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (6 samples, 0.13%)</title><rect x="502.0" y="403.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="505.0" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.08%)</title><rect x="502.5" y="387.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="505.5" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.08%)</title><rect x="502.5" y="371.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.5" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.08%)</title><rect x="502.5" y="355.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="505.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="502.5" y="339.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="505.5" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="502.5" y="323.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="505.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="502.5" y="307.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="502.5" y="291.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="502.5" y="275.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (9 samples, 0.19%)</title><rect x="503.5" y="659.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="506.5" y="670.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.17%)</title><rect x="503.7" y="643.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="506.7" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.04%)</title><rect x="504.7" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="507.7" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (2 samples, 0.04%)</title><rect x="505.2" y="627.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="508.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (3 samples, 0.06%)</title><rect x="505.7" y="659.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.04%)</title><rect x="505.9" y="643.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.9" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="505.9" y="627.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.9" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.04%)</title><rect x="505.9" y="611.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.9" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="505.9" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.9" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="505.9" y="579.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.9" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="505.9" y="563.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="505.9" y="547.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="508.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="505.9" y="531.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.9" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (22 samples, 0.46%)</title><rect x="506.4" y="739.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.4" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (4 samples, 0.08%)</title><rect x="506.4" y="723.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="509.4" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 0.04%)</title><rect x="506.6" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.6" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2 samples, 0.04%)</title><rect x="506.6" y="691.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="509.6" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (2 samples, 0.04%)</title><rect x="506.6" y="675.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="509.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$71/1509180629.apply (2 samples, 0.04%)</title><rect x="506.6" y="659.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="509.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.lambda$transformRows$0 (2 samples, 0.04%)</title><rect x="506.6" y="643.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="509.6" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (18 samples, 0.38%)</title><rect x="507.4" y="723.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="510.4" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$75/540352630.apply (17 samples, 0.35%)</title><rect x="507.6" y="707.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="510.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (17 samples, 0.35%)</title><rect x="507.6" y="691.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (15 samples, 0.31%)</title><rect x="507.9" y="675.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.9" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (15 samples, 0.31%)</title><rect x="507.9" y="659.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.9" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (15 samples, 0.31%)</title><rect x="507.9" y="643.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="510.9" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (15 samples, 0.31%)</title><rect x="507.9" y="627.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="510.9" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (15 samples, 0.31%)</title><rect x="507.9" y="611.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="510.9" y="622.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (15 samples, 0.31%)</title><rect x="507.9" y="595.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="510.9" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.31%)</title><rect x="507.9" y="579.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="510.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.31%)</title><rect x="507.9" y="563.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.9" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.19%)</title><rect x="509.1" y="547.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.1" y="558.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.08%)</title><rect x="509.6" y="531.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.6" y="542.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (3 samples, 0.06%)</title><rect x="509.8" y="515.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="512.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="510.8" y="531.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="513.8" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="510.8" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="513.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="510.8" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="513.8" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="510.8" y="483.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="513.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.04%)</title><rect x="511.8" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="514.8" y="750.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.04%)</title><rect x="511.8" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="514.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (6 samples, 0.13%)</title><rect x="512.3" y="739.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.3" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.06%)</title><rect x="512.6" y="723.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.6" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.06%)</title><rect x="512.6" y="707.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="515.6" y="718.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="512.6" y="691.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="515.6" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="512.6" y="675.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.6" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="512.6" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="515.6" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="512.6" y="643.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="512.6" y="627.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.6" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="513.3" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="516.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.04%)</title><rect x="513.3" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="516.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (14 samples, 0.29%)</title><rect x="513.8" y="739.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.8" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12 samples, 0.25%)</title><rect x="513.8" y="723.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="516.8" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12 samples, 0.25%)</title><rect x="513.8" y="707.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="516.8" y="718.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.23%)</title><rect x="514.0" y="691.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.0" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.23%)</title><rect x="514.0" y="675.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.0" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="516.7" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.7" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.04%)</title><rect x="516.7" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.7" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="516.7" y="691.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="519.7" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="516.7" y="675.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="516.7" y="659.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.7" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="516.7" y="643.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.7" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="516.7" y="627.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="516.7" y="611.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (1,280 samples, 26.68%)</title><rect x="517.2" y="739.0" width="314.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.2" y="750.0">ru/mail/polis/dao/igorlo/PersistentDAO.ite..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (1,280 samples, 26.68%)</title><rect x="517.2" y="723.0" width="314.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.2" y="734.0">ru/mail/polis/dao/igorlo/PersistentDAO.row..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (1,021 samples, 21.28%)</title><rect x="517.5" y="707.0" width="251.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="520.5" y="718.0">ru/mail/polis/dao/igorlo/Table.co..</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.hasNext (3 samples, 0.06%)</title><rect x="519.2" y="691.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.2" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (16 samples, 0.33%)</title><rect x="519.9" y="691.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="522.9" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (14 samples, 0.29%)</title><rect x="520.4" y="675.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.4" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (10 samples, 0.21%)</title><rect x="521.4" y="659.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="524.4" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (7 samples, 0.15%)</title><rect x="521.7" y="643.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.7" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (4 samples, 0.08%)</title><rect x="522.1" y="627.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.1" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absHighest (2 samples, 0.04%)</title><rect x="523.4" y="643.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.4" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (28 samples, 0.58%)</title><rect x="523.9" y="691.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.9" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (26 samples, 0.54%)</title><rect x="524.4" y="675.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="527.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (5 samples, 0.10%)</title><rect x="525.3" y="659.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="528.3" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (9 samples, 0.19%)</title><rect x="526.6" y="659.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="529.6" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (8 samples, 0.17%)</title><rect x="526.8" y="643.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="529.8" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (2 samples, 0.04%)</title><rect x="528.0" y="627.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="531.0" y="638.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.04%)</title><rect x="528.8" y="659.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="531.8" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="529.3" y="659.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="532.3" y="670.0"></text>
</g>
<g>
<title>unsafe_arraycopy (4 samples, 0.08%)</title><rect x="529.8" y="659.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="532.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (26 samples, 0.54%)</title><rect x="531.0" y="691.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="534.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (24 samples, 0.50%)</title><rect x="531.5" y="675.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="534.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (19 samples, 0.40%)</title><rect x="532.2" y="659.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="535.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (15 samples, 0.31%)</title><rect x="533.2" y="643.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="536.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.17%)</title><rect x="533.7" y="627.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (5 samples, 0.10%)</title><rect x="535.7" y="627.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="538.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (2 samples, 0.04%)</title><rect x="536.9" y="659.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (2 samples, 0.04%)</title><rect x="537.4" y="691.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="540.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (12 samples, 0.25%)</title><rect x="537.9" y="691.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="540.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (12 samples, 0.25%)</title><rect x="537.9" y="675.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="540.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (11 samples, 0.23%)</title><rect x="538.1" y="659.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="541.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (10 samples, 0.21%)</title><rect x="538.4" y="643.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="541.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (8 samples, 0.17%)</title><rect x="538.9" y="627.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="541.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.08%)</title><rect x="539.1" y="611.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="542.1" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="539.4" y="595.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="539.4" y="579.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="542.4" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.06%)</title><rect x="539.4" y="563.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="542.4" y="574.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.06%)</title><rect x="539.4" y="547.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="542.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (3 samples, 0.06%)</title><rect x="540.1" y="611.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="543.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.06%)</title><rect x="540.1" y="595.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.1" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="540.1" y="579.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="540.1" y="563.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.1" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.04%)</title><rect x="540.1" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.iterator (255 samples, 5.32%)</title><rect x="541.1" y="691.0" width="62.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="544.1" y="702.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (23 samples, 0.48%)</title><rect x="541.1" y="675.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="544.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (23 samples, 0.48%)</title><rect x="541.1" y="659.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (22 samples, 0.46%)</title><rect x="541.3" y="643.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (10 samples, 0.21%)</title><rect x="543.3" y="627.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="546.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (10 samples, 0.21%)</title><rect x="543.3" y="611.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="546.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (10 samples, 0.21%)</title><rect x="543.3" y="595.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="546.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (3 samples, 0.06%)</title><rect x="545.8" y="627.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="548.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (3 samples, 0.06%)</title><rect x="545.8" y="611.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (205 samples, 4.27%)</title><rect x="547.2" y="675.0" width="50.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="550.2" y="686.0">ru/ma..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (4 samples, 0.08%)</title><rect x="550.4" y="659.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.4" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (4 samples, 0.08%)</title><rect x="550.4" y="643.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.4" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (4 samples, 0.08%)</title><rect x="550.4" y="627.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.4" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="550.7" y="611.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="553.7" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="550.7" y="595.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.7" y="606.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (3 samples, 0.06%)</title><rect x="551.4" y="659.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="554.4" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (13 samples, 0.27%)</title><rect x="552.4" y="659.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="555.4" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (12 samples, 0.25%)</title><rect x="552.6" y="643.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="555.6" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (8 samples, 0.17%)</title><rect x="553.6" y="627.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="556.6" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (8 samples, 0.17%)</title><rect x="553.6" y="611.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="556.6" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.10%)</title><rect x="554.4" y="595.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (168 samples, 3.50%)</title><rect x="556.1" y="659.0" width="41.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="559.1" y="670.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (145 samples, 3.02%)</title><rect x="556.6" y="643.0" width="35.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="559.6" y="654.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (145 samples, 3.02%)</title><rect x="556.6" y="627.0" width="35.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.6" y="638.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (6 samples, 0.13%)</title><rect x="559.3" y="611.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (127 samples, 2.65%)</title><rect x="560.8" y="611.0" width="31.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.8" y="622.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (6 samples, 0.13%)</title><rect x="563.5" y="595.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="566.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (3 samples, 0.06%)</title><rect x="564.2" y="579.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="567.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (4 samples, 0.08%)</title><rect x="564.9" y="595.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="567.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (4 samples, 0.08%)</title><rect x="564.9" y="579.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.06%)</title><rect x="565.2" y="563.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="568.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="565.2" y="547.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="565.2" y="531.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="568.2" y="542.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.06%)</title><rect x="565.2" y="515.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="568.2" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="565.2" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="568.2" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.04%)</title><rect x="565.2" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="568.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (106 samples, 2.21%)</title><rect x="565.9" y="595.0" width="26.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="568.9" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (102 samples, 2.13%)</title><rect x="566.9" y="579.0" width="25.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="569.9" y="590.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.06%)</title><rect x="570.9" y="563.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="573.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (15 samples, 0.31%)</title><rect x="571.6" y="563.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="574.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.27%)</title><rect x="572.1" y="547.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="575.1" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.21%)</title><rect x="572.8" y="531.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="575.8" y="542.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.17%)</title><rect x="573.1" y="515.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="576.1" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="574.3" y="499.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="577.3" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.04%)</title><rect x="574.3" y="483.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="577.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (68 samples, 1.42%)</title><rect x="575.3" y="563.0" width="16.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="578.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (60 samples, 1.25%)</title><rect x="577.2" y="547.0" width="14.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="580.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (56 samples, 1.17%)</title><rect x="578.0" y="531.0" width="13.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="581.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (47 samples, 0.98%)</title><rect x="580.2" y="515.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="583.2" y="526.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (38 samples, 0.79%)</title><rect x="580.7" y="499.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.06%)</title><rect x="583.9" y="483.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="586.9" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 0.42%)</title><rect x="584.6" y="483.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="587.6" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.17%)</title><rect x="587.3" y="467.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="590.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.04%)</title><rect x="589.5" y="483.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="592.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (2 samples, 0.04%)</title><rect x="589.5" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (7 samples, 0.15%)</title><rect x="590.0" y="499.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (16 samples, 0.33%)</title><rect x="592.3" y="643.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="595.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (14 samples, 0.29%)</title><rect x="592.7" y="627.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="595.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (13 samples, 0.27%)</title><rect x="593.0" y="611.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="596.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (11 samples, 0.23%)</title><rect x="593.5" y="595.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="596.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.10%)</title><rect x="596.2" y="643.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="599.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (25 samples, 0.52%)</title><rect x="597.7" y="675.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="600.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (19 samples, 0.40%)</title><rect x="597.7" y="659.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.7" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (19 samples, 0.40%)</title><rect x="597.7" y="643.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.7" y="654.0"></text>
</g>
<g>
<title>itable stub (7 samples, 0.15%)</title><rect x="598.2" y="627.0" width="1.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="601.2" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.06%)</title><rect x="600.1" y="627.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="603.1" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3 samples, 0.06%)</title><rect x="600.9" y="627.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="603.9" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3 samples, 0.06%)</title><rect x="600.9" y="611.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.9" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3 samples, 0.06%)</title><rect x="600.9" y="595.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.9" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2 samples, 0.04%)</title><rect x="601.1" y="579.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="604.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.hasNext (3 samples, 0.06%)</title><rect x="601.6" y="627.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="604.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (6 samples, 0.13%)</title><rect x="602.3" y="659.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="605.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (5 samples, 0.10%)</title><rect x="602.6" y="643.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.6" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5 samples, 0.10%)</title><rect x="602.6" y="627.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="605.6" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.08%)</title><rect x="602.6" y="611.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="605.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (4 samples, 0.08%)</title><rect x="602.6" y="595.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="605.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (4 samples, 0.08%)</title><rect x="602.6" y="579.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="605.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.iterator (669 samples, 13.95%)</title><rect x="603.8" y="691.0" width="164.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.8" y="702.0">ru/mail/polis/dao/igo..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt; (668 samples, 13.93%)</title><rect x="604.1" y="675.0" width="164.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="607.1" y="686.0">ru/mail/polis/dao/igo..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.position (668 samples, 13.93%)</title><rect x="604.1" y="659.0" width="164.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="607.1" y="670.0">ru/mail/polis/dao/igo..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (191 samples, 3.98%)</title><rect x="608.5" y="643.0" width="47.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="611.5" y="654.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="613.2" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.2" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (3 samples, 0.06%)</title><rect x="613.7" y="627.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.7" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (158 samples, 3.29%)</title><rect x="614.4" y="627.0" width="38.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.4" y="638.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (30 samples, 0.63%)</title><rect x="625.2" y="611.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="628.2" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (13 samples, 0.27%)</title><rect x="628.7" y="595.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="631.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (3 samples, 0.06%)</title><rect x="631.9" y="595.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.9" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (5 samples, 0.10%)</title><rect x="632.6" y="611.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="635.6" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (41 samples, 0.85%)</title><rect x="633.8" y="611.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.8" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.19%)</title><rect x="640.2" y="595.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="643.2" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.06%)</title><rect x="642.4" y="595.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.4" y="606.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.06%)</title><rect x="643.2" y="595.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="646.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (29 samples, 0.60%)</title><rect x="643.9" y="611.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="646.9" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (4 samples, 0.08%)</title><rect x="648.6" y="595.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="651.6" y="606.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.13%)</title><rect x="649.6" y="595.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="652.6" y="606.0"></text>
</g>
<g>
<title>vtable stub (9 samples, 0.19%)</title><rect x="651.0" y="611.0" width="2.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="654.0" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.08%)</title><rect x="653.3" y="627.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.3" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.04%)</title><rect x="653.7" y="611.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="656.7" y="622.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.10%)</title><rect x="654.2" y="627.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="657.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (211 samples, 4.40%)</title><rect x="655.5" y="643.0" width="51.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.5" y="654.0">ru/ma..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (27 samples, 0.56%)</title><rect x="656.0" y="627.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="659.0" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (27 samples, 0.56%)</title><rect x="656.0" y="611.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="659.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (27 samples, 0.56%)</title><rect x="656.0" y="595.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="659.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (27 samples, 0.56%)</title><rect x="656.0" y="579.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.0" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (106 samples, 2.21%)</title><rect x="662.6" y="627.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.6" y="638.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (106 samples, 2.21%)</title><rect x="662.6" y="611.0" width="26.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.6" y="622.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (97 samples, 2.02%)</title><rect x="664.8" y="595.0" width="23.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="667.8" y="606.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (96 samples, 2.00%)</title><rect x="665.1" y="579.0" width="23.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="668.1" y="590.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (90 samples, 1.88%)</title><rect x="666.5" y="563.0" width="22.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="669.5" y="574.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (90 samples, 1.88%)</title><rect x="666.5" y="547.0" width="22.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="669.5" y="558.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (90 samples, 1.88%)</title><rect x="666.5" y="531.0" width="22.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="669.5" y="542.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (51 samples, 1.06%)</title><rect x="672.2" y="515.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="675.2" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.13%)</title><rect x="673.9" y="499.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.9" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.10%)</title><rect x="674.2" y="483.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="677.2" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.10%)</title><rect x="674.2" y="467.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.2" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.10%)</title><rect x="674.2" y="451.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.2" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (38 samples, 0.79%)</title><rect x="675.4" y="499.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="678.4" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.21%)</title><rect x="680.6" y="483.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.6" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.15%)</title><rect x="683.0" y="483.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.0" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.15%)</title><rect x="683.0" y="467.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.0" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.13%)</title><rect x="683.3" y="451.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="686.3" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.15%)</title><rect x="684.7" y="515.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="687.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (9 samples, 0.19%)</title><rect x="686.5" y="515.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="689.5" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (64 samples, 1.33%)</title><rect x="688.7" y="627.0" width="15.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.7" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (53 samples, 1.10%)</title><rect x="691.4" y="611.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.4" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (52 samples, 1.08%)</title><rect x="691.6" y="595.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.6" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (51 samples, 1.06%)</title><rect x="691.9" y="579.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (51 samples, 1.06%)</title><rect x="691.9" y="563.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="694.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (51 samples, 1.06%)</title><rect x="691.9" y="547.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="694.9" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (37 samples, 0.77%)</title><rect x="694.8" y="531.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.8" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.19%)</title><rect x="695.6" y="515.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="698.6" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.19%)</title><rect x="695.6" y="499.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.6" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.13%)</title><rect x="696.3" y="483.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="699.3" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.13%)</title><rect x="696.3" y="467.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="699.3" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.52%)</title><rect x="697.8" y="515.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="700.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.52%)</title><rect x="697.8" y="499.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="700.8" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="701.2" y="483.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.2" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.17%)</title><rect x="702.0" y="483.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="705.0" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.17%)</title><rect x="702.0" y="467.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="703.9" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="706.9" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.25%)</title><rect x="704.4" y="627.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="707.4" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.25%)</title><rect x="704.4" y="611.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="707.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.25%)</title><rect x="704.4" y="595.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="707.4" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.25%)</title><rect x="704.4" y="579.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (248 samples, 5.17%)</title><rect x="707.4" y="643.0" width="61.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="710.4" y="654.0">ru/mai..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (111 samples, 2.31%)</title><rect x="713.3" y="627.0" width="27.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="716.3" y="638.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (111 samples, 2.31%)</title><rect x="713.3" y="611.0" width="27.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="716.3" y="622.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (102 samples, 2.13%)</title><rect x="715.5" y="595.0" width="25.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="718.5" y="606.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (101 samples, 2.11%)</title><rect x="715.7" y="579.0" width="24.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="718.7" y="590.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (98 samples, 2.04%)</title><rect x="716.5" y="563.0" width="24.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="719.5" y="574.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (98 samples, 2.04%)</title><rect x="716.5" y="547.0" width="24.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.5" y="558.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (98 samples, 2.04%)</title><rect x="716.5" y="531.0" width="24.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.5" y="542.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (53 samples, 1.10%)</title><rect x="726.1" y="515.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="729.1" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.19%)</title><rect x="727.8" y="499.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.8" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.19%)</title><rect x="727.8" y="483.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.17%)</title><rect x="728.0" y="467.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.0" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.17%)</title><rect x="728.0" y="451.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="731.0" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (37 samples, 0.77%)</title><rect x="730.0" y="499.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="733.0" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (37 samples, 0.77%)</title><rect x="730.0" y="483.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="733.0" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.21%)</title><rect x="734.4" y="467.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="737.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.19%)</title><rect x="736.9" y="467.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.9" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.19%)</title><rect x="736.9" y="451.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="739.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.13%)</title><rect x="739.1" y="515.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="742.1" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (63 samples, 1.31%)</title><rect x="740.6" y="627.0" width="15.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="743.6" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (57 samples, 1.19%)</title><rect x="742.1" y="611.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="745.1" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (57 samples, 1.19%)</title><rect x="742.1" y="595.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="745.1" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (54 samples, 1.13%)</title><rect x="742.8" y="579.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="745.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (54 samples, 1.13%)</title><rect x="742.8" y="563.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (53 samples, 1.10%)</title><rect x="743.0" y="547.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="746.0" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (38 samples, 0.79%)</title><rect x="745.3" y="531.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="748.3" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.23%)</title><rect x="745.7" y="515.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="748.7" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.23%)</title><rect x="745.7" y="499.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="748.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.23%)</title><rect x="745.7" y="483.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="748.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.13%)</title><rect x="747.0" y="467.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="750.0" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.52%)</title><rect x="748.5" y="515.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="751.5" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.52%)</title><rect x="748.5" y="499.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="751.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (25 samples, 0.52%)</title><rect x="748.5" y="483.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="751.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.13%)</title><rect x="751.7" y="467.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="754.7" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.13%)</title><rect x="753.1" y="467.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.1" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.13%)</title><rect x="754.6" y="531.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (47 samples, 0.98%)</title><rect x="756.1" y="627.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="759.1" y="638.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (35 samples, 0.73%)</title><rect x="756.1" y="611.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="759.1" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.10%)</title><rect x="764.7" y="611.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="767.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLong (7 samples, 0.15%)</title><rect x="765.9" y="611.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="768.9" y="622.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="767.6" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="770.6" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.04%)</title><rect x="767.6" y="611.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="767.6" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="770.6" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.04%)</title><rect x="767.6" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (258 samples, 5.38%)</title><rect x="768.6" y="707.0" width="63.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="771.6" y="718.0">ru/mail..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (171 samples, 3.56%)</title><rect x="771.6" y="691.0" width="42.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="774.6" y="702.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (170 samples, 3.54%)</title><rect x="771.8" y="675.0" width="41.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="774.8" y="686.0">com..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (26 samples, 0.54%)</title><rect x="774.3" y="659.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="777.3" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (22 samples, 0.46%)</title><rect x="775.3" y="643.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="778.3" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (19 samples, 0.40%)</title><rect x="776.0" y="627.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="779.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (18 samples, 0.38%)</title><rect x="776.2" y="611.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="779.2" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.04%)</title><rect x="776.7" y="595.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="779.7" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (6 samples, 0.13%)</title><rect x="777.2" y="595.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.2" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.08%)</title><rect x="777.7" y="579.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="780.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (8 samples, 0.17%)</title><rect x="778.7" y="595.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (5 samples, 0.10%)</title><rect x="779.4" y="579.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.10%)</title><rect x="779.4" y="563.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="782.4" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="780.2" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.2" y="558.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.08%)</title><rect x="780.7" y="659.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="783.7" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (2 samples, 0.04%)</title><rect x="781.7" y="659.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="784.7" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (4 samples, 0.08%)</title><rect x="782.2" y="659.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="785.2" y="670.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="782.6" y="643.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="785.6" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (116 samples, 2.42%)</title><rect x="783.1" y="659.0" width="28.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="786.1" y="670.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (116 samples, 2.42%)</title><rect x="783.1" y="643.0" width="28.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="786.1" y="654.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (2 samples, 0.04%)</title><rect x="783.4" y="627.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="786.4" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (111 samples, 2.31%)</title><rect x="783.9" y="627.0" width="27.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="786.9" y="638.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (111 samples, 2.31%)</title><rect x="783.9" y="611.0" width="27.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="786.9" y="622.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (110 samples, 2.29%)</title><rect x="784.1" y="595.0" width="27.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="787.1" y="606.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (109 samples, 2.27%)</title><rect x="784.4" y="579.0" width="26.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="787.4" y="590.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (82 samples, 1.71%)</title><rect x="785.1" y="563.0" width="20.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="788.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (7 samples, 0.15%)</title><rect x="786.3" y="547.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="789.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (70 samples, 1.46%)</title><rect x="788.1" y="547.0" width="17.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="791.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (69 samples, 1.44%)</title><rect x="788.3" y="531.0" width="17.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.3" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (3 samples, 0.06%)</title><rect x="789.8" y="515.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (60 samples, 1.25%)</title><rect x="790.5" y="515.0" width="14.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="793.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (26 samples, 0.54%)</title><rect x="790.5" y="499.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="793.5" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="790.8" y="483.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.8" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (15 samples, 0.31%)</title><rect x="792.2" y="483.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (15 samples, 0.31%)</title><rect x="792.2" y="467.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (14 samples, 0.29%)</title><rect x="792.5" y="451.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="795.5" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (14 samples, 0.29%)</title><rect x="792.5" y="435.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="795.5" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (12 samples, 0.25%)</title><rect x="793.0" y="419.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.25%)</title><rect x="793.0" y="403.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="796.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.21%)</title><rect x="793.5" y="387.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.21%)</title><rect x="793.5" y="371.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.5" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.17%)</title><rect x="793.7" y="355.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.08%)</title><rect x="795.9" y="483.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="798.9" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.06%)</title><rect x="796.2" y="467.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="799.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="796.2" y="451.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.2" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="796.2" y="435.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="796.2" y="419.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="799.2" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="796.2" y="403.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.2" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="796.4" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="799.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (12 samples, 0.25%)</title><rect x="796.9" y="499.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="799.9" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.17%)</title><rect x="797.2" y="483.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="800.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.17%)</title><rect x="797.2" y="467.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="800.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.15%)</title><rect x="797.4" y="451.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="800.4" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.15%)</title><rect x="797.4" y="435.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.4" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="797.7" y="419.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="800.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="797.7" y="403.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="800.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="797.7" y="387.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="800.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="798.4" y="371.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="801.4" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="798.6" y="355.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="801.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="798.6" y="339.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.06%)</title><rect x="799.1" y="483.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.1" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="799.4" y="467.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="799.4" y="451.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="802.4" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="799.4" y="435.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="802.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="799.4" y="419.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="802.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="799.4" y="403.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="802.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (9 samples, 0.19%)</title><rect x="799.9" y="499.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.9" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (9 samples, 0.19%)</title><rect x="799.9" y="483.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.9" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.19%)</title><rect x="799.9" y="467.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.9" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.19%)</title><rect x="799.9" y="451.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.9" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.19%)</title><rect x="799.9" y="435.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="802.9" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="801.1" y="419.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="801.3" y="403.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="804.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="801.3" y="387.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.3" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="801.3" y="371.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="804.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (13 samples, 0.27%)</title><rect x="802.1" y="499.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.1" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.15%)</title><rect x="802.1" y="483.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.1" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.15%)</title><rect x="802.1" y="467.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="805.1" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.15%)</title><rect x="802.1" y="451.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.15%)</title><rect x="802.1" y="435.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.1" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.15%)</title><rect x="802.1" y="419.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="805.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.15%)</title><rect x="802.1" y="403.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="805.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="802.6" y="387.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="802.6" y="371.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (6 samples, 0.13%)</title><rect x="803.8" y="483.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="806.8" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.13%)</title><rect x="803.8" y="467.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.8" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="803.8" y="451.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.8" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="803.8" y="435.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="806.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="803.8" y="419.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.8" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="803.8" y="403.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.8" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="803.8" y="387.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.8" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.06%)</title><rect x="804.3" y="371.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="807.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (24 samples, 0.50%)</title><rect x="805.3" y="563.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="808.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (24 samples, 0.50%)</title><rect x="805.3" y="547.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="808.3" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (24 samples, 0.50%)</title><rect x="805.3" y="531.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.3" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (24 samples, 0.50%)</title><rect x="805.3" y="515.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="808.3" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (22 samples, 0.46%)</title><rect x="805.8" y="499.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.8" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (22 samples, 0.46%)</title><rect x="805.8" y="483.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="808.8" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (22 samples, 0.46%)</title><rect x="805.8" y="467.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.8" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (22 samples, 0.46%)</title><rect x="805.8" y="451.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="808.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.29%)</title><rect x="805.8" y="435.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="808.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.27%)</title><rect x="806.0" y="419.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="809.0" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="806.0" y="403.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.0" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.04%)</title><rect x="806.0" y="387.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="809.0" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.23%)</title><rect x="806.5" y="403.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="809.5" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (2 samples, 0.04%)</title><rect x="807.7" y="387.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="810.7" y="398.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.04%)</title><rect x="808.5" y="387.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="811.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (8 samples, 0.17%)</title><rect x="809.2" y="435.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (6 samples, 0.13%)</title><rect x="809.7" y="419.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="812.7" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.08%)</title><rect x="809.9" y="403.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="812.9" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.08%)</title><rect x="809.9" y="387.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.08%)</title><rect x="809.9" y="371.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.9" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="809.9" y="355.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="812.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="809.9" y="339.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="809.9" y="323.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="812.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="809.9" y="307.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="812.9" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="809.9" y="291.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="812.9" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2 samples, 0.04%)</title><rect x="811.2" y="627.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="814.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.hasNext (8 samples, 0.17%)</title><rect x="811.7" y="659.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="814.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (71 samples, 1.48%)</title><rect x="814.1" y="691.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (70 samples, 1.46%)</title><rect x="814.4" y="675.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (2 samples, 0.04%)</title><rect x="814.4" y="659.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="817.4" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (68 samples, 1.42%)</title><rect x="814.9" y="659.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="817.9" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (4 samples, 0.08%)</title><rect x="815.1" y="643.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.1" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (4 samples, 0.08%)</title><rect x="815.1" y="627.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="818.1" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (4 samples, 0.08%)</title><rect x="815.1" y="611.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="818.1" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.06%)</title><rect x="815.4" y="595.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="818.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.06%)</title><rect x="815.4" y="579.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.04%)</title><rect x="815.6" y="563.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="818.6" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.04%)</title><rect x="815.6" y="547.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="818.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.04%)</title><rect x="815.6" y="531.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="818.6" y="542.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.04%)</title><rect x="816.1" y="643.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="819.1" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (23 samples, 0.48%)</title><rect x="816.6" y="643.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="819.6" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (23 samples, 0.48%)</title><rect x="816.6" y="627.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="819.6" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (21 samples, 0.44%)</title><rect x="817.1" y="611.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.1" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.42%)</title><rect x="817.3" y="595.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="820.3" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.40%)</title><rect x="817.6" y="579.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="820.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (19 samples, 0.40%)</title><rect x="817.6" y="563.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="820.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (18 samples, 0.38%)</title><rect x="817.8" y="547.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="820.8" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (18 samples, 0.38%)</title><rect x="817.8" y="531.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="820.8" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (18 samples, 0.38%)</title><rect x="817.8" y="515.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="820.8" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (17 samples, 0.35%)</title><rect x="818.1" y="499.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="821.1" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (17 samples, 0.35%)</title><rect x="818.1" y="483.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.1" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (17 samples, 0.35%)</title><rect x="818.1" y="467.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.1" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (17 samples, 0.35%)</title><rect x="818.1" y="451.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="821.1" y="462.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.04%)</title><rect x="818.6" y="435.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="821.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.13%)</title><rect x="819.1" y="435.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="822.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.06%)</title><rect x="819.8" y="419.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="822.8" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.06%)</title><rect x="819.8" y="403.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="822.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (7 samples, 0.15%)</title><rect x="820.5" y="435.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="823.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (7 samples, 0.15%)</title><rect x="820.5" y="419.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.5" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.10%)</title><rect x="820.5" y="403.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="823.5" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.10%)</title><rect x="820.5" y="387.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.5" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.06%)</title><rect x="821.0" y="371.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="824.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="821.0" y="355.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="824.0" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="821.0" y="339.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="824.0" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="821.0" y="323.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="824.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="821.0" y="307.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="824.0" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="821.0" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="824.0" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="821.8" y="403.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="824.8" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="821.8" y="387.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="824.8" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="821.8" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="821.8" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="824.8" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="821.8" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="824.8" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (38 samples, 0.79%)</title><rect x="822.2" y="643.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.2" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (38 samples, 0.79%)</title><rect x="822.2" y="627.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="825.2" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (38 samples, 0.79%)</title><rect x="822.2" y="611.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="825.2" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (38 samples, 0.79%)</title><rect x="822.2" y="595.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="825.2" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (38 samples, 0.79%)</title><rect x="822.2" y="579.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="825.2" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (38 samples, 0.79%)</title><rect x="822.2" y="563.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="825.2" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (22 samples, 0.46%)</title><rect x="822.7" y="547.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="825.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (19 samples, 0.40%)</title><rect x="823.5" y="531.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="826.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (19 samples, 0.40%)</title><rect x="823.5" y="515.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (19 samples, 0.40%)</title><rect x="823.5" y="499.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="826.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (5 samples, 0.10%)</title><rect x="823.5" y="483.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="826.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.06%)</title><rect x="823.7" y="467.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.06%)</title><rect x="823.7" y="451.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="826.7" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="823.7" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="826.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (7 samples, 0.15%)</title><rect x="824.7" y="483.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="827.7" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.06%)</title><rect x="824.7" y="467.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="827.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.06%)</title><rect x="824.7" y="451.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="827.7" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="825.0" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="828.0" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="825.0" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="828.0" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="825.0" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="828.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="825.0" y="387.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="825.0" y="371.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="828.0" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="825.0" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="828.0" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="825.0" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="828.0" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="825.0" y="323.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="828.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.06%)</title><rect x="825.4" y="467.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="828.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="825.7" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="828.7" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="825.7" y="435.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="828.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (2 samples, 0.04%)</title><rect x="826.4" y="483.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="829.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.04%)</title><rect x="826.4" y="467.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="829.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.04%)</title><rect x="826.4" y="451.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="829.4" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="826.4" y="435.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="829.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="826.4" y="419.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.4" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="826.4" y="403.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="829.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="826.4" y="387.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="829.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="826.4" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="829.4" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="826.4" y="355.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="829.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (5 samples, 0.10%)</title><rect x="826.9" y="483.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="829.9" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.06%)</title><rect x="826.9" y="467.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="829.9" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.06%)</title><rect x="826.9" y="451.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="829.9" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.06%)</title><rect x="826.9" y="435.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="829.9" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="826.9" y="419.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="829.9" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="826.9" y="403.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="829.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="826.9" y="387.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="829.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="826.9" y="371.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="829.9" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="826.9" y="355.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="829.9" y="366.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.04%)</title><rect x="827.2" y="339.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="830.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.04%)</title><rect x="827.7" y="467.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="830.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.04%)</title><rect x="827.7" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="830.7" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="827.7" y="435.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="830.7" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="827.7" y="419.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="830.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="827.7" y="403.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="827.7" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="830.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="827.7" y="371.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="830.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (14 samples, 0.29%)</title><rect x="828.2" y="547.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="831.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (14 samples, 0.29%)</title><rect x="828.2" y="531.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.2" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (14 samples, 0.29%)</title><rect x="828.2" y="515.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.2" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (14 samples, 0.29%)</title><rect x="828.2" y="499.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="831.2" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (14 samples, 0.29%)</title><rect x="828.2" y="483.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="831.2" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (14 samples, 0.29%)</title><rect x="828.2" y="467.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.2" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (14 samples, 0.29%)</title><rect x="828.2" y="451.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="831.2" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (14 samples, 0.29%)</title><rect x="828.2" y="435.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.17%)</title><rect x="828.2" y="419.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="831.2" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.17%)</title><rect x="828.2" y="403.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="831.2" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.13%)</title><rect x="828.4" y="387.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="831.4" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.04%)</title><rect x="829.4" y="371.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="832.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (6 samples, 0.13%)</title><rect x="830.1" y="419.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (6 samples, 0.13%)</title><rect x="830.1" y="403.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="833.1" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.13%)</title><rect x="830.1" y="387.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="833.1" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.13%)</title><rect x="830.1" y="371.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="833.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.10%)</title><rect x="830.4" y="355.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="833.4" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="830.4" y="339.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="833.4" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="830.6" y="323.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="833.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="830.6" y="307.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="833.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="830.6" y="291.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="833.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.iterator (2 samples, 0.04%)</title><rect x="831.6" y="691.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="834.6" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,137 samples, 23.70%)</title><rect x="832.1" y="883.0" width="279.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="835.1" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (300 samples, 6.25%)</title><rect x="834.1" y="867.0" width="73.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.1" y="878.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (12 samples, 0.25%)</title><rect x="835.8" y="851.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.8" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.06%)</title><rect x="838.0" y="835.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="841.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (281 samples, 5.86%)</title><rect x="838.7" y="851.0" width="69.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="841.7" y="862.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (7 samples, 0.15%)</title><rect x="842.2" y="835.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="845.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (249 samples, 5.19%)</title><rect x="843.9" y="835.0" width="61.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="846.9" y="846.0">[unkno..</text>
</g>
<g>
<title>Klass::is_klass() const volatile (5 samples, 0.10%)</title><rect x="843.9" y="819.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="846.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="843.9" y="803.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="846.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.10%)</title><rect x="843.9" y="787.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="846.9" y="798.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.06%)</title><rect x="844.1" y="771.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="847.1" y="782.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.06%)</title><rect x="845.1" y="819.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="848.1" y="830.0"></text>
</g>
<g>
<title>epoll_wait (240 samples, 5.00%)</title><rect x="846.1" y="819.0" width="59.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="849.1" y="830.0">epoll_..</text>
</g>
<g>
<title>[unknown] (220 samples, 4.59%)</title><rect x="851.0" y="803.0" width="54.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="854.0" y="814.0">[unkn..</text>
</g>
<g>
<title>[unknown] (220 samples, 4.59%)</title><rect x="851.0" y="787.0" width="54.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="854.0" y="798.0">[unkn..</text>
</g>
<g>
<title>[unknown] (206 samples, 4.29%)</title><rect x="854.5" y="771.0" width="50.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="857.5" y="782.0">[unkn..</text>
</g>
<g>
<title>[unknown] (206 samples, 4.29%)</title><rect x="854.5" y="755.0" width="50.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="857.5" y="766.0">[unkn..</text>
</g>
<g>
<title>[unknown] (201 samples, 4.19%)</title><rect x="855.7" y="739.0" width="49.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="858.7" y="750.0">[unkn..</text>
</g>
<g>
<title>[unknown] (177 samples, 3.69%)</title><rect x="861.6" y="723.0" width="43.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="864.6" y="734.0">[unk..</text>
</g>
<g>
<title>[unknown] (115 samples, 2.40%)</title><rect x="876.9" y="707.0" width="28.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="879.9" y="718.0">[u..</text>
</g>
<g>
<title>[unknown] (82 samples, 1.71%)</title><rect x="885.0" y="691.0" width="20.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="888.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.44%)</title><rect x="888.2" y="675.0" width="16.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="891.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.06%)</title><rect x="892.6" y="659.0" width="12.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="895.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.06%)</title><rect x="904.4" y="643.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="907.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="904.7" y="627.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="907.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="904.7" y="611.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="907.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="904.7" y="595.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="907.7" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="904.7" y="579.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="907.7" y="590.0"></text>
</g>
<g>
<title>epoll_wait (11 samples, 0.23%)</title><rect x="905.1" y="835.0" width="2.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="908.1" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (829 samples, 17.28%)</title><rect x="907.9" y="867.0" width="203.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="910.9" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (810 samples, 16.89%)</title><rect x="910.3" y="851.0" width="199.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="913.3" y="862.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (546 samples, 11.38%)</title><rect x="913.0" y="835.0" width="134.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="916.0" y="846.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (386 samples, 8.05%)</title><rect x="916.7" y="819.0" width="95.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="919.7" y="830.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (384 samples, 8.01%)</title><rect x="917.2" y="803.0" width="94.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.2" y="814.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (366 samples, 7.63%)</title><rect x="917.2" y="787.0" width="90.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.2" y="798.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (23 samples, 0.48%)</title><rect x="917.4" y="771.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="917.9" y="755.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="920.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.06%)</title><rect x="917.9" y="739.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.06%)</title><rect x="918.9" y="755.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="919.2" y="739.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.17%)</title><rect x="919.7" y="755.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="922.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.04%)</title><rect x="919.9" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.10%)</title><rect x="920.4" y="739.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="923.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.08%)</title><rect x="920.4" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="923.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.13%)</title><rect x="921.6" y="755.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="924.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.08%)</title><rect x="922.1" y="739.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="925.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.08%)</title><rect x="922.1" y="723.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="925.1" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.08%)</title><rect x="922.1" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="925.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (342 samples, 7.13%)</title><rect x="923.1" y="771.0" width="84.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="926.1" y="782.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.15%)</title><rect x="923.4" y="755.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.4" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.15%)</title><rect x="923.4" y="739.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.4" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.15%)</title><rect x="923.4" y="723.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="926.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.15%)</title><rect x="923.4" y="707.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.4" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="923.6" y="691.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.6" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.08%)</title><rect x="924.1" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="927.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.04%)</title><rect x="924.6" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="927.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (319 samples, 6.65%)</title><rect x="925.1" y="755.0" width="78.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="928.1" y="766.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (319 samples, 6.65%)</title><rect x="925.1" y="739.0" width="78.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="928.1" y="750.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (314 samples, 6.55%)</title><rect x="926.1" y="723.0" width="77.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="929.1" y="734.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (230 samples, 4.79%)</title><rect x="927.3" y="707.0" width="56.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.3" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (229 samples, 4.77%)</title><rect x="927.5" y="691.0" width="56.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="930.5" y="702.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (229 samples, 4.77%)</title><rect x="927.5" y="675.0" width="56.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="930.5" y="686.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (229 samples, 4.77%)</title><rect x="927.5" y="659.0" width="56.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="930.5" y="670.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (229 samples, 4.77%)</title><rect x="927.5" y="643.0" width="56.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="930.5" y="654.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (229 samples, 4.77%)</title><rect x="927.5" y="627.0" width="56.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="930.5" y="638.0">jdk/in..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.04%)</title><rect x="928.0" y="611.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.0" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.04%)</title><rect x="928.5" y="611.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="931.5" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.04%)</title><rect x="929.0" y="611.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="932.0" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark (38 samples, 0.79%)</title><rect x="929.5" y="611.0" width="9.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="932.5" y="622.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.04%)</title><rect x="930.0" y="595.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.0" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.06%)</title><rect x="930.7" y="595.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.7" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.08%)</title><rect x="931.5" y="595.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.5" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.06%)</title><rect x="932.5" y="595.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="935.5" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (4 samples, 0.08%)</title><rect x="933.2" y="595.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.2" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (14 samples, 0.29%)</title><rect x="934.2" y="595.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="937.2" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.06%)</title><rect x="938.1" y="595.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="941.1" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.13%)</title><rect x="938.8" y="611.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="941.8" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (177 samples, 3.69%)</title><rect x="940.3" y="611.0" width="43.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="943.3" y="622.0">pthr..</text>
</g>
<g>
<title>[unknown] (156 samples, 3.25%)</title><rect x="945.5" y="595.0" width="38.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="948.5" y="606.0">[un..</text>
</g>
<g>
<title>[unknown] (156 samples, 3.25%)</title><rect x="945.5" y="579.0" width="38.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="948.5" y="590.0">[un..</text>
</g>
<g>
<title>[unknown] (146 samples, 3.04%)</title><rect x="947.9" y="563.0" width="36.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="950.9" y="574.0">[un..</text>
</g>
<g>
<title>[unknown] (144 samples, 3.00%)</title><rect x="948.4" y="547.0" width="35.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="951.4" y="558.0">[un..</text>
</g>
<g>
<title>[unknown] (144 samples, 3.00%)</title><rect x="948.4" y="531.0" width="35.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="951.4" y="542.0">[un..</text>
</g>
<g>
<title>[unknown] (133 samples, 2.77%)</title><rect x="951.1" y="515.0" width="32.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="954.1" y="526.0">[u..</text>
</g>
<g>
<title>[unknown] (119 samples, 2.48%)</title><rect x="954.6" y="499.0" width="29.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="957.6" y="510.0">[u..</text>
</g>
<g>
<title>[unknown] (109 samples, 2.27%)</title><rect x="957.1" y="483.0" width="26.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="960.1" y="494.0">[..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 0.44%)</title><rect x="983.9" y="707.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="986.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 0.44%)</title><rect x="983.9" y="691.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="986.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.15%)</title><rect x="987.3" y="675.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="990.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.04%)</title><rect x="987.6" y="659.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="990.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (4 samples, 0.08%)</title><rect x="988.0" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="991.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (3 samples, 0.06%)</title><rect x="988.3" y="643.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="991.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.06%)</title><rect x="988.3" y="627.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="991.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (3 samples, 0.06%)</title><rect x="988.3" y="611.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="991.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (55 samples, 1.15%)</title><rect x="989.0" y="707.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="992.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (44 samples, 0.92%)</title><rect x="991.7" y="691.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="994.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (24 samples, 0.50%)</title><rect x="994.2" y="675.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="997.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (6 samples, 0.13%)</title><rect x="994.9" y="659.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="997.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (6 samples, 0.13%)</title><rect x="994.9" y="643.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="997.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (12 samples, 0.25%)</title><rect x="996.4" y="659.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="999.4" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (12 samples, 0.25%)</title><rect x="996.4" y="643.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="999.4" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (5 samples, 0.10%)</title><rect x="996.4" y="627.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="999.4" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (7 samples, 0.15%)</title><rect x="997.6" y="627.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1000.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (3 samples, 0.06%)</title><rect x="999.4" y="659.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1002.4" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.06%)</title><rect x="999.4" y="643.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1002.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.21%)</title><rect x="1000.1" y="675.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1003.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.19%)</title><rect x="1000.3" y="659.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1003.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.15%)</title><rect x="1000.8" y="643.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1003.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (7 samples, 0.15%)</title><rect x="1000.8" y="627.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1003.8" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (6 samples, 0.13%)</title><rect x="1001.1" y="611.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1004.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.06%)</title><rect x="1002.6" y="707.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1005.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.06%)</title><rect x="1002.6" y="691.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1005.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.06%)</title><rect x="1002.6" y="675.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1005.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.primaryFor (14 samples, 0.29%)</title><rect x="1003.8" y="755.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1006.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (5 samples, 0.10%)</title><rect x="1003.8" y="739.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1006.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1004.3" y="723.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1007.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Number.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1004.3" y="707.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1007.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.19%)</title><rect x="1005.0" y="739.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1008.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.19%)</title><rect x="1005.0" y="723.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1008.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (18 samples, 0.38%)</title><rect x="1007.2" y="787.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1010.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (17 samples, 0.35%)</title><rect x="1007.5" y="771.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1010.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (14 samples, 0.29%)</title><rect x="1007.5" y="755.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1010.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equals (12 samples, 0.25%)</title><rect x="1008.0" y="739.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1011.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.06%)</title><rect x="1010.9" y="755.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1013.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.06%)</title><rect x="1010.9" y="739.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1013.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.04%)</title><rect x="1011.2" y="723.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1014.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (36 samples, 0.75%)</title><rect x="1011.7" y="819.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1014.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (17 samples, 0.35%)</title><rect x="1012.4" y="803.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1015.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.33%)</title><rect x="1012.6" y="787.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1015.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.33%)</title><rect x="1012.6" y="771.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1015.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (14 samples, 0.29%)</title><rect x="1013.1" y="755.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1016.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.33%)</title><rect x="1016.6" y="803.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.6" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.33%)</title><rect x="1016.6" y="787.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1019.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.33%)</title><rect x="1016.6" y="771.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1019.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14 samples, 0.29%)</title><rect x="1017.1" y="755.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (6 samples, 0.13%)</title><rect x="1019.0" y="739.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1022.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (21 samples, 0.44%)</title><rect x="1020.5" y="819.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1023.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (14 samples, 0.29%)</title><rect x="1020.5" y="803.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1023.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (14 samples, 0.29%)</title><rect x="1020.5" y="787.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1023.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.08%)</title><rect x="1021.3" y="771.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1024.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (4 samples, 0.08%)</title><rect x="1021.3" y="755.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1024.3" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.15%)</title><rect x="1022.2" y="771.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1025.2" y="782.0"></text>
</g>
<g>
<title>jbyte_arraycopy (5 samples, 0.10%)</title><rect x="1024.0" y="803.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1027.0" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1025.2" y="803.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1028.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.06%)</title><rect x="1025.7" y="819.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1028.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (67 samples, 1.40%)</title><rect x="1026.4" y="819.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1029.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (25 samples, 0.52%)</title><rect x="1031.6" y="803.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.04%)</title><rect x="1031.6" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1034.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (23 samples, 0.48%)</title><rect x="1032.1" y="787.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1035.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (21 samples, 0.44%)</title><rect x="1032.6" y="771.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="1037.0" y="755.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1040.0" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.04%)</title><rect x="1037.2" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1040.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (21 samples, 0.44%)</title><rect x="1037.7" y="803.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (20 samples, 0.42%)</title><rect x="1038.0" y="787.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1041.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.23%)</title><rect x="1038.0" y="771.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1041.0" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.19%)</title><rect x="1040.7" y="771.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1043.7" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.10%)</title><rect x="1041.7" y="755.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1044.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (18 samples, 0.38%)</title><rect x="1042.9" y="819.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1045.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (18 samples, 0.38%)</title><rect x="1042.9" y="803.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1045.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.23%)</title><rect x="1043.6" y="787.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1046.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.23%)</title><rect x="1043.6" y="771.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1046.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.06%)</title><rect x="1046.3" y="787.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1049.3" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (253 samples, 5.27%)</title><rect x="1047.3" y="835.0" width="62.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1050.3" y="846.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (249 samples, 5.19%)</title><rect x="1048.3" y="819.0" width="61.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1051.3" y="830.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.04%)</title><rect x="1050.3" y="803.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1053.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 1.27%)</title><rect x="1050.8" y="803.0" width="15.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1053.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 1.27%)</title><rect x="1050.8" y="787.0" width="15.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1053.8" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (48 samples, 1.00%)</title><rect x="1050.8" y="771.0" width="11.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1053.8" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.08%)</title><rect x="1052.0" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1055.0" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.04%)</title><rect x="1053.2" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.2" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.04%)</title><rect x="1053.7" y="755.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.7" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3 (9 samples, 0.19%)</title><rect x="1054.2" y="755.0" width="2.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1057.2" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.08%)</title><rect x="1056.4" y="755.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1059.4" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (20 samples, 0.42%)</title><rect x="1057.4" y="755.0" width="4.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1060.4" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="1058.9" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.9" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.08%)</title><rect x="1059.4" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.4" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.04%)</title><rect x="1060.4" y="739.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1063.4" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (4 samples, 0.08%)</title><rect x="1060.9" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1063.9" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.04%)</title><rect x="1061.8" y="739.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1064.8" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.04%)</title><rect x="1062.6" y="771.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1065.6" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.10%)</title><rect x="1063.1" y="771.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1066.1" y="782.0"></text>
</g>
<g>
<title>recv (6 samples, 0.13%)</title><rect x="1064.3" y="771.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1067.3" y="782.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.06%)</title><rect x="1065.8" y="803.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1068.8" y="814.0"></text>
</g>
<g>
<title>recv (175 samples, 3.65%)</title><rect x="1066.5" y="803.0" width="43.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1069.5" y="814.0">recv</text>
</g>
<g>
<title>[unknown] (161 samples, 3.36%)</title><rect x="1070.0" y="787.0" width="39.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1073.0" y="798.0">[un..</text>
</g>
<g>
<title>[unknown] (161 samples, 3.36%)</title><rect x="1070.0" y="771.0" width="39.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1073.0" y="782.0">[un..</text>
</g>
<g>
<title>[unknown] (143 samples, 2.98%)</title><rect x="1074.4" y="755.0" width="35.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1077.4" y="766.0">[un..</text>
</g>
<g>
<title>[unknown] (141 samples, 2.94%)</title><rect x="1074.9" y="739.0" width="34.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1077.9" y="750.0">[u..</text>
</g>
<g>
<title>[unknown] (139 samples, 2.90%)</title><rect x="1075.4" y="723.0" width="34.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1078.4" y="734.0">[u..</text>
</g>
<g>
<title>[unknown] (133 samples, 2.77%)</title><rect x="1076.8" y="707.0" width="32.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1079.8" y="718.0">[u..</text>
</g>
<g>
<title>[unknown] (131 samples, 2.73%)</title><rect x="1077.3" y="691.0" width="32.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1080.3" y="702.0">[u..</text>
</g>
<g>
<title>[unknown] (110 samples, 2.29%)</title><rect x="1082.5" y="675.0" width="27.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1085.5" y="686.0">[..</text>
</g>
<g>
<title>[unknown] (87 samples, 1.81%)</title><rect x="1088.2" y="659.0" width="21.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1091.2" y="670.0">[..</text>
</g>
<g>
<title>[unknown] (53 samples, 1.10%)</title><rect x="1096.5" y="643.0" width="13.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1099.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.81%)</title><rect x="1100.0" y="627.0" width="9.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1103.0" y="638.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.38%)</title><rect x="1105.1" y="611.0" width="4.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1108.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1109.1" y="595.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1112.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1109.1" y="579.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1112.1" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.19%)</title><rect x="1109.6" y="851.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.6" y="862.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.17%)</title><rect x="1109.8" y="835.0" width="2.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1112.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.17%)</title><rect x="1109.8" y="819.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1112.8" y="830.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (2 samples, 0.04%)</title><rect x="1111.8" y="883.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1114.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1111.8" y="867.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1114.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1111.8" y="851.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1114.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1111.8" y="835.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1114.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1111.8" y="819.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1114.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1111.8" y="803.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1114.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1111.8" y="787.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1114.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1111.8" y="771.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1114.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="1111.8" y="755.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1114.8" y="766.0"></text>
</g>
<g>
<title>start_thread (316 samples, 6.59%)</title><rect x="1112.3" y="883.0" width="77.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1115.3" y="894.0">start_thr..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (316 samples, 6.59%)</title><rect x="1112.3" y="867.0" width="77.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1115.3" y="878.0">thread_na..</text>
</g>
<g>
<title>Thread::call_run() (316 samples, 6.59%)</title><rect x="1112.3" y="851.0" width="77.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.3" y="862.0">Thread::c..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.08%)</title><rect x="1112.3" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.3" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.08%)</title><rect x="1112.3" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.3" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (4 samples, 0.08%)</title><rect x="1112.3" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.3" y="814.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (4 samples, 0.08%)</title><rect x="1112.3" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.3" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (3 samples, 0.06%)</title><rect x="1112.3" y="771.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.3" y="782.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (3 samples, 0.06%)</title><rect x="1112.3" y="755.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.3" y="766.0"></text>
</g>
<g>
<title>GangWorker::loop() (40 samples, 0.83%)</title><rect x="1113.3" y="835.0" width="9.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.3" y="846.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.04%)</title><rect x="1113.3" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.3" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (2 samples, 0.04%)</title><rect x="1113.3" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.3" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (34 samples, 0.71%)</title><rect x="1114.0" y="819.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.0" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (27 samples, 0.56%)</title><rect x="1114.0" y="803.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.0" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (22 samples, 0.46%)</title><rect x="1114.0" y="787.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.0" y="798.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (16 samples, 0.33%)</title><rect x="1115.5" y="771.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.5" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (14 samples, 0.29%)</title><rect x="1116.0" y="755.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.0" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.04%)</title><rect x="1118.9" y="739.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.9" y="750.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.04%)</title><rect x="1119.4" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.4" y="798.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.04%)</title><rect x="1119.9" y="787.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1122.9" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (6 samples, 0.13%)</title><rect x="1120.9" y="803.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.9" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.06%)</title><rect x="1120.9" y="787.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.9" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.04%)</title><rect x="1121.1" y="771.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.1" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.04%)</title><rect x="1121.1" y="755.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.1" y="766.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.04%)</title><rect x="1121.1" y="739.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.1" y="750.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.04%)</title><rect x="1121.9" y="787.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.9" y="798.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 0.04%)</title><rect x="1121.9" y="771.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.9" y="782.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.04%)</title><rect x="1122.6" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.6" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.04%)</title><rect x="1122.6" y="803.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.6" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (262 samples, 5.46%)</title><rect x="1123.1" y="835.0" width="64.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.1" y="846.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (262 samples, 5.46%)</title><rect x="1123.1" y="819.0" width="64.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.1" y="830.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (256 samples, 5.34%)</title><rect x="1123.1" y="803.0" width="63.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.1" y="814.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (256 samples, 5.34%)</title><rect x="1123.1" y="787.0" width="63.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.1" y="798.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (250 samples, 5.21%)</title><rect x="1123.1" y="771.0" width="61.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.1" y="782.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (250 samples, 5.21%)</title><rect x="1123.1" y="755.0" width="61.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.1" y="766.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (155 samples, 3.23%)</title><rect x="1123.1" y="739.0" width="38.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.1" y="750.0">Com..</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.13%)</title><rect x="1123.1" y="723.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.1" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.06%)</title><rect x="1123.1" y="707.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.1" y="718.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.10%)</title><rect x="1124.6" y="723.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.6" y="734.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.04%)</title><rect x="1124.6" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.6" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.21%)</title><rect x="1125.8" y="723.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.8" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.19%)</title><rect x="1126.0" y="707.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.0" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.04%)</title><rect x="1126.3" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.3" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.08%)</title><rect x="1126.8" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.8" y="702.0"></text>
</g>
<g>
<title>Node::clone() const (2 samples, 0.04%)</title><rect x="1127.8" y="691.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (20 samples, 0.42%)</title><rect x="1128.5" y="723.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.5" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (19 samples, 0.40%)</title><rect x="1128.7" y="707.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 0.08%)</title><rect x="1130.2" y="691.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.04%)</title><rect x="1131.2" y="691.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.2" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.10%)</title><rect x="1132.2" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.2" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.08%)</title><rect x="1132.4" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.4" y="686.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.04%)</title><rect x="1132.9" y="659.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.9" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (110 samples, 2.29%)</title><rect x="1133.9" y="723.0" width="27.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.9" y="734.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.04%)</title><rect x="1134.9" y="707.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 0.15%)</title><rect x="1135.4" y="707.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.4" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.04%)</title><rect x="1136.4" y="691.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.06%)</title><rect x="1137.1" y="707.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.04%)</title><rect x="1137.4" y="691.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.23%)</title><rect x="1137.9" y="707.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (26 samples, 0.54%)</title><rect x="1140.8" y="707.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (5 samples, 0.10%)</title><rect x="1142.8" y="691.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (3 samples, 0.06%)</title><rect x="1144.0" y="691.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.10%)</title><rect x="1144.7" y="691.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (5 samples, 0.10%)</title><rect x="1146.0" y="691.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.0" y="702.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.06%)</title><rect x="1146.5" y="675.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (4 samples, 0.08%)</title><rect x="1147.2" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.04%)</title><rect x="1147.7" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (3 samples, 0.06%)</title><rect x="1148.2" y="707.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (9 samples, 0.19%)</title><rect x="1148.9" y="707.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.9" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.06%)</title><rect x="1149.7" y="691.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.06%)</title><rect x="1151.1" y="707.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (13 samples, 0.27%)</title><rect x="1151.9" y="707.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.08%)</title><rect x="1153.6" y="691.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.04%)</title><rect x="1155.1" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.1" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.04%)</title><rect x="1155.6" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.6" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.06%)</title><rect x="1156.3" y="707.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.3" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (12 samples, 0.25%)</title><rect x="1157.0" y="707.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.0" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.06%)</title><rect x="1159.0" y="691.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.0" y="702.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (3 samples, 0.06%)</title><rect x="1160.0" y="707.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1163.0" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (74 samples, 1.54%)</title><rect x="1161.2" y="739.0" width="18.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.04%)</title><rect x="1162.0" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.04%)</title><rect x="1162.0" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.0" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.04%)</title><rect x="1162.4" y="723.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.4" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.04%)</title><rect x="1162.9" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.9" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.04%)</title><rect x="1162.9" y="707.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (52 samples, 1.08%)</title><rect x="1163.4" y="723.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.4" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.06%)</title><rect x="1163.7" y="707.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.06%)</title><rect x="1163.7" y="691.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1163.7" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.06%)</title><rect x="1165.2" y="707.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.13%)</title><rect x="1165.9" y="707.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 0.35%)</title><rect x="1167.4" y="707.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 0.27%)</title><rect x="1168.1" y="691.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 0.19%)</title><rect x="1169.1" y="675.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (8 samples, 0.17%)</title><rect x="1169.3" y="659.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.08%)</title><rect x="1171.6" y="707.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1172.5" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (6 samples, 0.13%)</title><rect x="1173.0" y="707.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.08%)</title><rect x="1173.5" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (3 samples, 0.06%)</title><rect x="1173.5" y="675.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.10%)</title><rect x="1174.5" y="707.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.08%)</title><rect x="1174.7" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="702.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1175.0" y="675.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.0" y="686.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (2 samples, 0.04%)</title><rect x="1175.7" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.23%)</title><rect x="1176.2" y="723.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 0.23%)</title><rect x="1176.2" y="707.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.2" y="718.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1176.7" y="691.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="702.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.04%)</title><rect x="1179.4" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 0.33%)</title><rect x="1179.9" y="739.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 0.33%)</title><rect x="1179.9" y="723.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 0.33%)</title><rect x="1179.9" y="707.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 0.33%)</title><rect x="1179.9" y="691.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 0.33%)</title><rect x="1179.9" y="675.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.31%)</title><rect x="1179.9" y="659.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1180.2" y="643.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1180.2" y="627.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1180.2" y="611.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1180.2" y="595.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.04%)</title><rect x="1180.2" y="579.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1180.2" y="563.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (12 samples, 0.25%)</title><rect x="1180.7" y="643.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.23%)</title><rect x="1180.7" y="627.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.23%)</title><rect x="1180.7" y="611.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.23%)</title><rect x="1180.7" y="595.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.23%)</title><rect x="1180.7" y="579.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.23%)</title><rect x="1180.7" y="563.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.23%)</title><rect x="1180.7" y="547.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.21%)</title><rect x="1180.7" y="531.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.21%)</title><rect x="1180.7" y="515.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.21%)</title><rect x="1180.7" y="499.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.21%)</title><rect x="1180.7" y="483.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.21%)</title><rect x="1180.7" y="467.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.21%)</title><rect x="1180.7" y="451.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.15%)</title><rect x="1180.9" y="435.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.15%)</title><rect x="1180.9" y="419.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.15%)</title><rect x="1180.9" y="403.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.15%)</title><rect x="1180.9" y="387.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.15%)</title><rect x="1180.9" y="371.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.13%)</title><rect x="1180.9" y="355.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.04%)</title><rect x="1180.9" y="339.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.04%)</title><rect x="1180.9" y="323.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.04%)</title><rect x="1180.9" y="307.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.04%)</title><rect x="1180.9" y="291.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.04%)</title><rect x="1180.9" y="275.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.04%)</title><rect x="1180.9" y="259.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.04%)</title><rect x="1180.9" y="243.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1181.4" y="339.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1181.4" y="323.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1181.4" y="307.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1181.4" y="291.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.06%)</title><rect x="1181.4" y="275.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1181.4" y="259.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="270.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.04%)</title><rect x="1183.9" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 0.10%)</title><rect x="1184.8" y="771.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (5 samples, 0.10%)</title><rect x="1184.8" y="755.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 0.10%)</title><rect x="1184.8" y="739.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.8" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 0.10%)</title><rect x="1184.8" y="723.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.06%)</title><rect x="1184.8" y="707.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.04%)</title><rect x="1184.8" y="691.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.04%)</title><rect x="1184.8" y="675.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.04%)</title><rect x="1184.8" y="659.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.04%)</title><rect x="1184.8" y="643.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.04%)</title><rect x="1184.8" y="627.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.04%)</title><rect x="1185.6" y="707.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.6" y="718.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.04%)</title><rect x="1185.6" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.6" y="702.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.04%)</title><rect x="1185.6" y="675.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="686.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (5 samples, 0.10%)</title><rect x="1186.3" y="803.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (5 samples, 0.10%)</title><rect x="1186.3" y="787.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.3" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (5 samples, 0.10%)</title><rect x="1186.3" y="771.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.3" y="782.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (4 samples, 0.08%)</title><rect x="1186.6" y="755.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (3 samples, 0.06%)</title><rect x="1186.8" y="739.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="750.0"></text>
</g>
<g>
<title>VMThread::run() (6 samples, 0.13%)</title><rect x="1187.5" y="835.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.5" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (6 samples, 0.13%)</title><rect x="1187.5" y="819.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.04%)</title><rect x="1187.5" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="814.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.06%)</title><rect x="1188.0" y="803.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.0" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.06%)</title><rect x="1188.0" y="787.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.0" y="798.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (3 samples, 0.06%)</title><rect x="1188.0" y="771.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.06%)</title><rect x="1188.0" y="755.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="766.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.08%)</title><rect x="1189.0" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.04%)</title><rect x="1189.0" y="819.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.04%)</title><rect x="1189.5" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title><rect x="1189.5" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.5" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title><rect x="1189.5" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.5" y="798.0"></text>
</g>
</g>
</svg>
