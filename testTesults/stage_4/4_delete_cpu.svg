<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (3,915 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="1219.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="1219.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.3" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="10.6" y="1219.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.6" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.6" y="1203.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.6" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="10.9" y="1203.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.9" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.9" y="1187.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.9" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="10.9" y="1171.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.9" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.9" y="1155.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.9" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.9" y="1139.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.9" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="11.2" y="1219.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="11.2" y="1203.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.2" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="11.2" y="1187.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.2" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="11.2" y="1171.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.2" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="11.2" y="1155.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.2" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="11.2" y="1139.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.2" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="11.2" y="1123.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="11.2" y="1107.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.2" y="1118.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.03%)</title><rect x="11.2" y="1091.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.2" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.03%)</title><rect x="11.2" y="1075.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.2" y="1086.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.03%)</title><rect x="11.2" y="1059.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="1070.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="11.2" y="1043.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.2" y="1054.0"></text>
</g>
<g>
<title>G1ConcurrentRefine::max_num_threads() (1 samples, 0.03%)</title><rect x="11.2" y="1027.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.2" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (5 samples, 0.13%)</title><rect x="11.5" y="1219.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.10%)</title><rect x="11.8" y="1203.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.8" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.10%)</title><rect x="11.8" y="1187.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.8" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.10%)</title><rect x="11.8" y="1171.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.8" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.10%)</title><rect x="11.8" y="1155.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.8" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="11.8" y="1139.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.8" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.08%)</title><rect x="12.1" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.1" y="1150.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="12.1" y="1123.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.1" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="12.4" y="1123.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.4" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="12.4" y="1107.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.4" y="1118.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="12.4" y="1091.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.4" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="12.4" y="1075.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.4" y="1086.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="12.4" y="1059.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.4" y="1070.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.03%)</title><rect x="12.4" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.4" y="1054.0"></text>
</g>
<g>
<title>G1Analytics::predict_object_copy_time_ms(unsigned long, bool) const (1 samples, 0.03%)</title><rect x="12.4" y="1027.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.4" y="1038.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.03%)</title><rect x="12.4" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.4" y="1022.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="12.7" y="1123.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.7" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="12.7" y="1107.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.7" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (37 samples, 0.95%)</title><rect x="13.0" y="1219.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.0" y="1230.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="13.3" y="1203.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.3" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (33 samples, 0.84%)</title><rect x="13.6" y="1203.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.6" y="1214.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="13.9" y="1187.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.9" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (19 samples, 0.49%)</title><rect x="14.2" y="1187.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.2" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (8 samples, 0.20%)</title><rect x="15.1" y="1171.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="18.1" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.15%)</title><rect x="17.5" y="1171.0" width="1.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="20.5" y="1182.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.13%)</title><rect x="17.8" y="1155.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="20.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.13%)</title><rect x="17.8" y="1139.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="20.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="19.0" y="1123.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="22.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="19.0" y="1107.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="22.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="19.0" y="1091.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="22.0" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.05%)</title><rect x="19.3" y="1171.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="22.3" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (11 samples, 0.28%)</title><rect x="19.9" y="1187.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="22.9" y="1198.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="23.3" y="1187.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="26.3" y="1198.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="23.6" y="1203.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="26.6" y="1214.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.03%)</title><rect x="23.6" y="1187.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="26.6" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="23.9" y="1203.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.9" y="1214.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.03%)</title><rect x="24.2" y="1219.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="27.2" y="1230.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*, int) (1 samples, 0.03%)</title><rect x="24.2" y="1203.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="27.2" y="1214.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*, int) (1 samples, 0.03%)</title><rect x="24.2" y="1187.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="27.2" y="1198.0"></text>
</g>
<g>
<title>Deoptimization::create_vframeArray(JavaThread*, frame, RegisterMap*, GrowableArray&lt;compiledVFrame*&gt;*, bool) (1 samples, 0.03%)</title><rect x="24.2" y="1171.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="27.2" y="1182.0"></text>
</g>
<g>
<title>RegisterMap::pd_location(VMRegImpl*) const (1 samples, 0.03%)</title><rect x="24.2" y="1155.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="27.2" y="1166.0"></text>
</g>
<g>
<title>[not_walkable] (6 samples, 0.15%)</title><rect x="24.5" y="1219.0" width="1.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="27.5" y="1230.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.05%)</title><rect x="26.3" y="1219.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="29.3" y="1230.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="26.3" y="1203.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="29.3" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="26.6" y="1203.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="29.6" y="1214.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="26.6" y="1187.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="29.6" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="26.9" y="1219.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="29.9" y="1230.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.03%)</title><rect x="26.9" y="1203.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="29.9" y="1214.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.03%)</title><rect x="26.9" y="1187.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="29.9" y="1198.0"></text>
</g>
<g>
<title>[unknown_Java] (50 samples, 1.28%)</title><rect x="27.2" y="1219.0" width="15.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="30.2" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="36.5" y="1203.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="39.5" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="36.5" y="1187.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="39.5" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="36.5" y="1171.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="39.5" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="36.5" y="1155.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="39.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="36.5" y="1139.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="39.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="36.5" y="1123.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="39.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="36.5" y="1107.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="39.5" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="36.8" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="39.8" y="1214.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (15 samples, 0.38%)</title><rect x="37.7" y="1203.0" width="4.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="40.7" y="1214.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.36%)</title><rect x="38.0" y="1187.0" width="4.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="41.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.36%)</title><rect x="38.0" y="1171.0" width="4.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="41.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="38.6" y="1155.0" width="3.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="41.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="38.6" y="1139.0" width="3.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="41.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="38.6" y="1123.0" width="3.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="41.6" y="1134.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="39.2" y="1107.0" width="3.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="42.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.23%)</title><rect x="39.5" y="1091.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="42.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.23%)</title><rect x="39.5" y="1075.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="42.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.9" y="1059.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="44.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.9" y="1043.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="44.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.9" y="1027.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="44.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.9" y="1011.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="44.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.9" y="995.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="44.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.9" y="979.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="44.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.9" y="963.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="44.9" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 0.33%)</title><rect x="42.3" y="1219.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="45.3" y="1230.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="43.2" y="1203.0" width="3.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="46.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="43.2" y="1187.0" width="3.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="46.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="44.1" y="1171.0" width="2.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="47.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="44.1" y="1155.0" width="2.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="47.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="44.1" y="1139.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="47.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.13%)</title><rect x="44.7" y="1123.0" width="1.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="47.7" y="1134.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="45.0" y="1107.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="48.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="45.3" y="1091.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="48.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="45.6" y="1075.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="48.6" y="1086.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="46.2" y="1219.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="49.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,345 samples, 59.90%)</title><rect x="46.5" y="1219.0" width="706.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.5" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,345 samples, 59.90%)</title><rect x="46.5" y="1203.0" width="706.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.5" y="1214.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,345 samples, 59.90%)</title><rect x="46.5" y="1187.0" width="706.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.5" y="1198.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 0.15%)</title><rect x="49.2" y="1171.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.18%)</title><rect x="51.0" y="1171.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.18%)</title><rect x="51.0" y="1155.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.18%)</title><rect x="51.0" y="1139.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.0" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run (3 samples, 0.08%)</title><rect x="52.2" y="1123.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (524 samples, 13.38%)</title><rect x="53.1" y="1171.0" width="157.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="56.1" y="1182.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (520 samples, 13.28%)</title><rect x="54.3" y="1155.0" width="156.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="57.3" y="1166.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (388 samples, 9.91%)</title><rect x="54.3" y="1139.0" width="117.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="57.3" y="1150.0">java/util/conc..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.05%)</title><rect x="57.0" y="1123.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (21 samples, 0.54%)</title><rect x="57.6" y="1123.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.08%)</title><rect x="63.0" y="1107.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.08%)</title><rect x="63.0" y="1091.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="66.0" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.08%)</title><rect x="63.0" y="1075.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.0" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.03%)</title><rect x="63.0" y="1059.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="66.0" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="63.0" y="1043.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="66.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.0" y="1027.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="66.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.0" y="1011.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="66.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.0" y="995.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="66.0" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.0" y="979.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="66.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.0" y="963.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="66.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.0" y="947.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="66.0" y="958.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="63.3" y="1059.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="66.3" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.05%)</title><rect x="63.3" y="1043.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="66.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.7" y="1027.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="66.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.7" y="1011.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="66.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.7" y="995.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="66.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.7" y="979.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="66.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.7" y="963.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="66.7" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="63.7" y="947.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="66.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (39 samples, 1.00%)</title><rect x="64.0" y="1123.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (39 samples, 1.00%)</title><rect x="64.0" y="1107.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 0.69%)</title><rect x="67.0" y="1091.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 0.69%)</title><rect x="67.0" y="1075.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.0" y="1086.0"></text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.03%)</title><rect x="67.6" y="1059.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="70.6" y="1070.0"></text>
</g>
<g>
<title>Method::result_type() const (1 samples, 0.03%)</title><rect x="67.6" y="1043.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="70.6" y="1054.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.03%)</title><rect x="67.6" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="70.6" y="1038.0"></text>
</g>
<g>
<title>SignatureInfo::do_bool() (1 samples, 0.03%)</title><rect x="67.6" y="1011.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="70.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.10%)</title><rect x="67.9" y="1059.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.9" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 0.51%)</title><rect x="69.1" y="1059.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.1" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.13%)</title><rect x="70.0" y="1043.0" width="1.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="73.0" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.03%)</title><rect x="70.0" y="1027.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="73.0" y="1038.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="70.3" y="1027.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="73.3" y="1038.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="70.6" y="1027.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="73.6" y="1038.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.05%)</title><rect x="70.9" y="1027.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="73.9" y="1038.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (12 samples, 0.31%)</title><rect x="71.5" y="1043.0" width="3.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="74.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="71.5" y="1027.0" width="3.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="74.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="71.5" y="1011.0" width="3.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="74.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="71.5" y="995.0" width="3.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="74.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.28%)</title><rect x="71.8" y="979.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="74.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.28%)</title><rect x="71.8" y="963.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="74.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="72.1" y="947.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="75.1" y="958.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.20%)</title><rect x="72.7" y="931.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="75.7" y="942.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="73.0" y="915.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="76.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="75.1" y="1091.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="75.4" y="1091.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.05%)</title><rect x="75.7" y="1123.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.05%)</title><rect x="75.7" y="1107.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (312 samples, 7.97%)</title><rect x="76.3" y="1123.0" width="94.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.3" y="1134.0">java/util/c..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (306 samples, 7.82%)</title><rect x="78.1" y="1107.0" width="92.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.1" y="1118.0">jdk/interna..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="82.6" y="1091.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="85.6" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.05%)</title><rect x="82.9" y="1091.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="85.9" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park (161 samples, 4.11%)</title><rect x="83.5" y="1091.0" width="48.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="86.5" y="1102.0">Unsa..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.10%)</title><rect x="86.6" y="1075.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="89.6" y="1086.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.05%)</title><rect x="87.8" y="1075.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="90.8" y="1086.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.08%)</title><rect x="88.4" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="91.4" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="89.3" y="1075.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="92.3" y="1086.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (42 samples, 1.07%)</title><rect x="89.6" y="1075.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="92.6" y="1086.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="96.5" y="1059.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="99.5" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (8 samples, 0.20%)</title><rect x="96.8" y="1059.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="99.8" y="1070.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (7 samples, 0.18%)</title><rect x="97.1" y="1043.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="100.1" y="1054.0"></text>
</g>
<g>
<title>Monitor::unlock() (5 samples, 0.13%)</title><rect x="99.2" y="1059.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="102.2" y="1070.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.08%)</title><rect x="100.7" y="1059.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="103.7" y="1070.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.05%)</title><rect x="101.6" y="1059.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="104.6" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (5 samples, 0.13%)</title><rect x="102.2" y="1075.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="105.2" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (9 samples, 0.23%)</title><rect x="103.7" y="1075.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="106.7" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (58 samples, 1.48%)</title><rect x="106.4" y="1075.0" width="17.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="109.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 1.20%)</title><rect x="109.8" y="1059.0" width="14.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="112.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 1.20%)</title><rect x="109.8" y="1043.0" width="14.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="112.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.46%)</title><rect x="118.5" y="1027.0" width="5.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="121.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.46%)</title><rect x="118.5" y="1011.0" width="5.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="121.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.41%)</title><rect x="119.1" y="995.0" width="4.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="122.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="122.7" y="979.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="125.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="123.0" y="963.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="126.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="123.6" y="947.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="126.6" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="123.6" y="931.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="126.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="123.6" y="915.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="126.6" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="123.6" y="899.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="126.6" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="123.6" y="883.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="126.6" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 0.13%)</title><rect x="123.9" y="1075.0" width="1.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="126.9" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (7 samples, 0.18%)</title><rect x="125.4" y="1075.0" width="2.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="128.4" y="1086.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.05%)</title><rect x="127.5" y="1075.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="130.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="127.8" y="1059.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="130.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="127.8" y="1043.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="130.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="127.8" y="1027.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="130.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="127.8" y="1011.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="130.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="127.8" y="995.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="130.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="127.8" y="979.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="130.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="127.8" y="963.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="130.8" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title><rect x="128.2" y="1075.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="131.2" y="1086.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (4 samples, 0.10%)</title><rect x="128.8" y="1075.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="131.8" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (7 samples, 0.18%)</title><rect x="130.0" y="1075.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="133.0" y="1086.0"></text>
</g>
<g>
<title>[unknown] (119 samples, 3.04%)</title><rect x="132.1" y="1091.0" width="35.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="135.1" y="1102.0">[un..</text>
</g>
<g>
<title>__pthread_cleanup_pop (4 samples, 0.10%)</title><rect x="132.1" y="1075.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="135.1" y="1086.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.03%)</title><rect x="133.3" y="1075.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="136.3" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_wait (88 samples, 2.25%)</title><rect x="133.6" y="1075.0" width="26.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="136.6" y="1086.0">_..</text>
</g>
<g>
<title>[unknown] (52 samples, 1.33%)</title><rect x="144.4" y="1059.0" width="15.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="147.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 1.33%)</title><rect x="144.4" y="1043.0" width="15.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="147.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 1.05%)</title><rect x="147.7" y="1027.0" width="12.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="150.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 1.00%)</title><rect x="148.3" y="1011.0" width="11.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="151.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.92%)</title><rect x="149.2" y="995.0" width="10.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="152.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.87%)</title><rect x="149.9" y="979.0" width="10.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="152.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.72%)</title><rect x="151.7" y="963.0" width="8.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="154.7" y="974.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.43%)</title><rect x="155.0" y="947.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="158.0" y="958.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.33%)</title><rect x="156.2" y="931.0" width="3.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="159.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="158.9" y="915.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="161.9" y="926.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="158.9" y="899.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="161.9" y="910.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="158.9" y="883.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="161.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="158.9" y="867.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="161.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="158.9" y="851.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="161.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="158.9" y="835.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="161.9" y="846.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="158.9" y="819.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="161.9" y="830.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.10%)</title><rect x="160.1" y="1075.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="163.1" y="1086.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="161.3" y="1075.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="164.3" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (19 samples, 0.49%)</title><rect x="161.9" y="1075.0" width="5.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="164.9" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="167.6" y="1075.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="170.6" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="167.9" y="1091.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="170.9" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (7 samples, 0.18%)</title><rect x="168.2" y="1091.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="171.2" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.08%)</title><rect x="170.3" y="1123.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="171.3" y="1139.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="171.3" y="1123.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="171.3" y="1107.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="171.3" y="1091.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.10%)</title><rect x="171.6" y="1139.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (10 samples, 0.26%)</title><rect x="172.8" y="1139.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (10 samples, 0.26%)</title><rect x="172.8" y="1123.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (10 samples, 0.26%)</title><rect x="172.8" y="1107.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="175.2" y="1091.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="178.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="175.2" y="1075.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.2" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="175.2" y="1059.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.2" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="175.2" y="1043.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="178.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="175.5" y="1043.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="178.5" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="175.5" y="1027.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="178.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (117 samples, 2.99%)</title><rect x="175.8" y="1139.0" width="35.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="178.8" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (117 samples, 2.99%)</title><rect x="175.8" y="1123.0" width="35.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="178.8" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (117 samples, 2.99%)</title><rect x="175.8" y="1107.0" width="35.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.8" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (85 samples, 2.17%)</title><rect x="185.4" y="1091.0" width="25.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.4" y="1102.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (85 samples, 2.17%)</title><rect x="185.4" y="1075.0" width="25.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="188.4" y="1086.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (11 samples, 0.28%)</title><rect x="186.3" y="1059.0" width="3.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="189.3" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.03%)</title><rect x="186.6" y="1043.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="189.6" y="1054.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="186.9" y="1043.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="189.9" y="1054.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="187.2" y="1043.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="190.2" y="1054.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="187.5" y="1043.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="190.5" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="187.8" y="1043.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="190.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="187.8" y="1027.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="190.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="187.8" y="1011.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="190.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="187.8" y="995.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="190.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="187.8" y="979.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="190.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="187.8" y="963.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="190.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="187.8" y="947.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="190.8" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (4 samples, 0.10%)</title><rect x="188.1" y="1043.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="191.1" y="1054.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="189.3" y="1043.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="192.3" y="1054.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (71 samples, 1.81%)</title><rect x="189.6" y="1059.0" width="21.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="192.6" y="1070.0">p..</text>
</g>
<g>
<title>[unknown] (61 samples, 1.56%)</title><rect x="192.7" y="1043.0" width="18.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="195.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 1.56%)</title><rect x="192.7" y="1027.0" width="18.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="195.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 1.48%)</title><rect x="193.6" y="1011.0" width="17.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="196.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 1.46%)</title><rect x="193.9" y="995.0" width="17.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="196.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 1.46%)</title><rect x="193.9" y="979.0" width="17.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="196.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.30%)</title><rect x="195.7" y="963.0" width="15.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="198.7" y="974.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.25%)</title><rect x="196.3" y="947.0" width="14.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="199.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.23%)</title><rect x="196.6" y="931.0" width="14.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="199.6" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$FlushingTask.run (96 samples, 2.45%)</title><rect x="211.0" y="1171.0" width="29.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="214.0" y="1182.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.flushAndLoad (96 samples, 2.45%)</title><rect x="211.0" y="1155.0" width="29.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="214.0" y="1166.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.flush (96 samples, 2.45%)</title><rect x="211.0" y="1139.0" width="29.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.0" y="1150.0">ru..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="213.4" y="1123.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.4" y="1134.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="213.7" y="1123.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.7" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.10%)</title><rect x="214.1" y="1123.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.1" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="214.7" y="1107.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.7" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="215.0" y="1091.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.0" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="215.0" y="1075.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.0" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.03%)</title><rect x="215.3" y="1123.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.3" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (1 samples, 0.03%)</title><rect x="215.6" y="1123.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.05%)</title><rect x="215.9" y="1123.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.05%)</title><rect x="215.9" y="1107.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="218.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.05%)</title><rect x="215.9" y="1091.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.9" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.05%)</title><rect x="216.5" y="1123.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.5" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="216.5" y="1107.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.5" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="216.5" y="1091.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.5" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="216.5" y="1075.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.5" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="216.8" y="1107.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.8" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getSizeOfFlushedRow (1 samples, 0.03%)</title><rect x="217.1" y="1123.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.1" y="1134.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="217.1" y="1107.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.1" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (2 samples, 0.05%)</title><rect x="217.4" y="1123.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.4" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="217.7" y="1107.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.7" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="217.7" y="1091.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.7" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (73 samples, 1.86%)</title><rect x="218.0" y="1123.0" width="22.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.0" y="1134.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (6 samples, 0.15%)</title><rect x="218.0" y="1107.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.0" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (6 samples, 0.15%)</title><rect x="218.0" y="1091.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.0" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.15%)</title><rect x="218.0" y="1075.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.15%)</title><rect x="218.0" y="1059.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.15%)</title><rect x="218.0" y="1043.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.05%)</title><rect x="218.9" y="1027.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.9" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="219.5" y="1027.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.5" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (67 samples, 1.71%)</title><rect x="219.8" y="1107.0" width="20.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.8" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (62 samples, 1.58%)</title><rect x="219.8" y="1091.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (62 samples, 1.58%)</title><rect x="219.8" y="1075.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.8" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (62 samples, 1.58%)</title><rect x="219.8" y="1059.0" width="18.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.8" y="1070.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="220.7" y="1043.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="223.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 1.48%)</title><rect x="221.0" y="1043.0" width="17.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="224.0" y="1054.0"></text>
</g>
<g>
<title>__write (58 samples, 1.48%)</title><rect x="221.0" y="1027.0" width="17.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="224.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.40%)</title><rect x="221.9" y="1011.0" width="16.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="224.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.40%)</title><rect x="221.9" y="995.0" width="16.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="224.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="222.2" y="979.0" width="16.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="225.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="222.2" y="963.0" width="16.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="225.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="222.2" y="947.0" width="16.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="225.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="222.2" y="931.0" width="16.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="225.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 1.33%)</title><rect x="222.8" y="915.0" width="15.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="225.8" y="926.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.25%)</title><rect x="223.7" y="899.0" width="14.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="226.7" y="910.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 1.17%)</title><rect x="224.6" y="883.0" width="13.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="227.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.15%)</title><rect x="224.9" y="867.0" width="13.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="227.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 1.05%)</title><rect x="226.1" y="851.0" width="12.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="229.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.97%)</title><rect x="227.0" y="835.0" width="11.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="230.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.82%)</title><rect x="228.8" y="819.0" width="9.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="231.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.79%)</title><rect x="229.1" y="803.0" width="9.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="232.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.59%)</title><rect x="231.5" y="787.0" width="7.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="234.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.54%)</title><rect x="232.1" y="771.0" width="6.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="235.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.46%)</title><rect x="233.0" y="755.0" width="5.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="236.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.43%)</title><rect x="233.3" y="739.0" width="5.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="236.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.36%)</title><rect x="234.2" y="723.0" width="4.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="237.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.31%)</title><rect x="234.8" y="707.0" width="3.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="237.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="235.5" y="691.0" width="3.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="238.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="236.7" y="675.0" width="1.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="239.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.10%)</title><rect x="237.3" y="659.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="240.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="238.5" y="1091.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.5" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.05%)</title><rect x="238.5" y="1075.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (3 samples, 0.08%)</title><rect x="239.1" y="1091.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.08%)</title><rect x="239.1" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="239.1" y="1059.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.05%)</title><rect x="239.4" y="1059.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.4" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run (1,703 samples, 43.50%)</title><rect x="240.0" y="1171.0" width="513.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.0" y="1182.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4 (1,703 samples, 43.50%)</title><rect x="240.0" y="1155.0" width="513.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.0" y="1166.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,391 samples, 35.53%)</title><rect x="240.0" y="1139.0" width="419.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.0" y="1150.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.15%)</title><rect x="243.3" y="1123.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="244.5" y="1107.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="244.8" y="1091.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.8" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,295 samples, 33.08%)</title><rect x="245.1" y="1123.0" width="390.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.1" y="1134.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (55 samples, 1.40%)</title><rect x="245.1" y="1107.0" width="16.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="252.6" y="1091.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="255.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="252.6" y="1075.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="255.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="252.6" y="1059.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="255.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="252.6" y="1043.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="255.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="252.6" y="1027.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="255.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="252.6" y="1011.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="255.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="252.6" y="995.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="255.6" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (28 samples, 0.72%)</title><rect x="253.2" y="1091.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.2" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (28 samples, 0.72%)</title><rect x="253.2" y="1075.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.charAt (28 samples, 0.72%)</title><rect x="253.2" y="1059.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.2" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,240 samples, 31.67%)</title><rect x="261.7" y="1107.0" width="373.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.7" y="1118.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,240 samples, 31.67%)</title><rect x="261.7" y="1091.0" width="373.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.7" y="1102.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,240 samples, 31.67%)</title><rect x="261.7" y="1075.0" width="373.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.7" y="1086.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,240 samples, 31.67%)</title><rect x="261.7" y="1059.0" width="373.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.7" y="1070.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (5 samples, 0.13%)</title><rect x="267.4" y="1043.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="270.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="268.9" y="1043.0" width="16.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="271.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="268.9" y="1027.0" width="16.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="271.9" y="1038.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (48 samples, 1.23%)</title><rect x="268.9" y="1011.0" width="14.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="271.9" y="1022.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.05%)</title><rect x="271.3" y="995.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="274.3" y="1006.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="271.9" y="995.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="274.9" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (2 samples, 0.05%)</title><rect x="272.2" y="995.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="275.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="272.5" y="979.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="275.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="272.5" y="963.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="275.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="272.5" y="947.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="275.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="272.5" y="931.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="275.5" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="272.5" y="915.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="275.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="272.5" y="899.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="275.5" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="272.5" y="883.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="275.5" y="894.0"></text>
</g>
<g>
<title>__memmove_ssse3 (8 samples, 0.20%)</title><rect x="272.8" y="995.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="275.8" y="1006.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (25 samples, 0.64%)</title><rect x="275.2" y="995.0" width="7.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="278.2" y="1006.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="276.7" y="979.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="279.7" y="990.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.08%)</title><rect x="277.3" y="979.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="280.3" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (7 samples, 0.18%)</title><rect x="278.3" y="979.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="281.3" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.13%)</title><rect x="280.4" y="979.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="283.4" y="990.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.08%)</title><rect x="281.9" y="979.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="284.9" y="990.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.05%)</title><rect x="282.8" y="995.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="285.8" y="1006.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="283.4" y="1011.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="286.4" y="1022.0"></text>
</g>
<g>
<title>__send (4 samples, 0.10%)</title><rect x="283.7" y="1011.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="286.7" y="1022.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="284.9" y="1011.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="287.9" y="1022.0"></text>
</g>
<g>
<title>__send (1,162 samples, 29.68%)</title><rect x="285.2" y="1043.0" width="350.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="288.2" y="1054.0">__send</text>
</g>
<g>
<title>[unknown] (1,148 samples, 29.32%)</title><rect x="289.4" y="1027.0" width="346.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="292.4" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,148 samples, 29.32%)</title><rect x="289.4" y="1011.0" width="346.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="292.4" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,125 samples, 28.74%)</title><rect x="296.3" y="995.0" width="339.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="299.3" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,123 samples, 28.68%)</title><rect x="296.9" y="979.0" width="338.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="299.9" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,102 samples, 28.15%)</title><rect x="303.3" y="963.0" width="332.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="306.3" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,098 samples, 28.05%)</title><rect x="304.5" y="947.0" width="330.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="307.5" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,088 samples, 27.79%)</title><rect x="307.5" y="931.0" width="327.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="310.5" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,079 samples, 27.56%)</title><rect x="310.2" y="915.0" width="325.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="313.2" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,033 samples, 26.39%)</title><rect x="324.1" y="899.0" width="311.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="327.1" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (987 samples, 25.21%)</title><rect x="337.9" y="883.0" width="297.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="340.9" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (940 samples, 24.01%)</title><rect x="352.1" y="867.0" width="283.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="355.1" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (893 samples, 22.81%)</title><rect x="366.3" y="851.0" width="269.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="369.3" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (797 samples, 20.36%)</title><rect x="395.2" y="835.0" width="240.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="398.2" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (775 samples, 19.80%)</title><rect x="401.8" y="819.0" width="233.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="404.8" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (750 samples, 19.16%)</title><rect x="409.4" y="803.0" width="226.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="412.4" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (743 samples, 18.98%)</title><rect x="411.5" y="787.0" width="223.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="414.5" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (732 samples, 18.70%)</title><rect x="414.8" y="771.0" width="220.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="417.8" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (701 samples, 17.91%)</title><rect x="424.1" y="755.0" width="211.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="427.1" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (670 samples, 17.11%)</title><rect x="433.5" y="739.0" width="201.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="436.5" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (627 samples, 16.02%)</title><rect x="446.4" y="723.0" width="189.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="449.4" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (546 samples, 13.95%)</title><rect x="470.8" y="707.0" width="164.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="473.8" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (520 samples, 13.28%)</title><rect x="478.7" y="691.0" width="156.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="481.7" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (493 samples, 12.59%)</title><rect x="486.8" y="675.0" width="148.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="489.8" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (478 samples, 12.21%)</title><rect x="491.3" y="659.0" width="144.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="494.3" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (467 samples, 11.93%)</title><rect x="494.7" y="643.0" width="140.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="497.7" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (458 samples, 11.70%)</title><rect x="497.4" y="627.0" width="138.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="500.4" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (451 samples, 11.52%)</title><rect x="499.5" y="611.0" width="135.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="502.5" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (434 samples, 11.09%)</title><rect x="504.6" y="595.0" width="130.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="507.6" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (415 samples, 10.60%)</title><rect x="510.3" y="579.0" width="125.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="513.3" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (411 samples, 10.50%)</title><rect x="511.5" y="563.0" width="123.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="514.5" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (401 samples, 10.24%)</title><rect x="514.6" y="547.0" width="120.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="517.6" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (392 samples, 10.01%)</title><rect x="517.3" y="531.0" width="118.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="520.3" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (365 samples, 9.32%)</title><rect x="525.4" y="515.0" width="110.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="528.4" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (331 samples, 8.45%)</title><rect x="535.7" y="499.0" width="99.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="538.7" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (315 samples, 8.05%)</title><rect x="540.5" y="483.0" width="94.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="543.5" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (265 samples, 6.77%)</title><rect x="555.5" y="467.0" width="79.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="558.5" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (210 samples, 5.36%)</title><rect x="572.1" y="451.0" width="63.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="575.1" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (198 samples, 5.06%)</title><rect x="575.7" y="435.0" width="59.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="578.7" y="446.0">[unkno..</text>
</g>
<g>
<title>[unknown] (194 samples, 4.96%)</title><rect x="576.9" y="419.0" width="58.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="579.9" y="430.0">[unkno..</text>
</g>
<g>
<title>[unknown] (18 samples, 0.46%)</title><rect x="630.0" y="403.0" width="5.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="633.0" y="414.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="632.4" y="387.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="635.4" y="398.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.15%)</title><rect x="633.6" y="371.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="636.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (68 samples, 1.74%)</title><rect x="635.4" y="1123.0" width="20.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="638.1" y="1107.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="641.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="638.1" y="1091.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="641.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (57 samples, 1.46%)</title><rect x="638.7" y="1107.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (47 samples, 1.20%)</title><rect x="641.1" y="1091.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (40 samples, 1.02%)</title><rect x="642.0" y="1075.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="645.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (40 samples, 1.02%)</title><rect x="642.0" y="1059.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.03%)</title><rect x="643.3" y="1043.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (35 samples, 0.89%)</title><rect x="643.6" y="1043.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.6" y="1054.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.18%)</title><rect x="648.1" y="1027.0" width="2.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="651.1" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="649.9" y="1011.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="652.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="649.9" y="995.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="652.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="649.9" y="979.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="652.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="649.9" y="963.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="652.9" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="649.9" y="947.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="652.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="649.9" y="931.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="652.9" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="649.9" y="915.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="652.9" y="926.0"></text>
</g>
<g>
<title>itable stub (9 samples, 0.23%)</title><rect x="650.2" y="1027.0" width="2.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="653.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="652.9" y="1027.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="655.9" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="653.2" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="656.2" y="1038.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="653.2" y="1011.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="656.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.10%)</title><rect x="654.1" y="1075.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.10%)</title><rect x="654.1" y="1059.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.08%)</title><rect x="654.4" y="1043.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.4" y="1054.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.05%)</title><rect x="655.3" y="1091.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="658.3" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (11 samples, 0.28%)</title><rect x="655.9" y="1123.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.9" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.08%)</title><rect x="658.3" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="661.3" y="1118.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="658.3" y="1091.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="661.3" y="1102.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.03%)</title><rect x="658.3" y="1075.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="661.3" y="1086.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="658.6" y="1091.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="661.6" y="1102.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="658.9" y="1091.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="661.9" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$83/517024138.action (312 samples, 7.97%)</title><rect x="659.2" y="1139.0" width="94.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.2" y="1150.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$3 (310 samples, 7.92%)</title><rect x="659.8" y="1123.0" width="93.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="662.8" y="1134.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.delete (310 samples, 7.92%)</title><rect x="659.8" y="1107.0" width="93.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.8" y="1118.0">ru/mail/pol..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="660.1" y="1091.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.1" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.remove (308 samples, 7.87%)</title><rect x="660.4" y="1091.0" width="92.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.4" y="1102.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.remove (302 samples, 7.71%)</title><rect x="662.2" y="1075.0" width="91.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="665.2" y="1086.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (9 samples, 0.23%)</title><rect x="662.8" y="1059.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="665.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (9 samples, 0.23%)</title><rect x="662.8" y="1043.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (9 samples, 0.23%)</title><rect x="662.8" y="1027.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="665.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="664.0" y="1011.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="664.0" y="995.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="667.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.05%)</title><rect x="664.3" y="1011.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="667.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.05%)</title><rect x="664.3" y="995.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="667.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.05%)</title><rect x="664.3" y="979.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (2 samples, 0.05%)</title><rect x="665.0" y="1011.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (2 samples, 0.05%)</title><rect x="665.0" y="995.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="668.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (6 samples, 0.15%)</title><rect x="665.6" y="1059.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="668.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (6 samples, 0.15%)</title><rect x="665.6" y="1043.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="668.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.03%)</title><rect x="665.6" y="1027.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (5 samples, 0.13%)</title><rect x="665.9" y="1027.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (2 samples, 0.05%)</title><rect x="665.9" y="1011.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="668.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.08%)</title><rect x="666.5" y="1011.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="669.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.05%)</title><rect x="666.8" y="995.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="669.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.03%)</title><rect x="667.1" y="979.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="670.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.readLock (1 samples, 0.03%)</title><rect x="667.4" y="1059.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.4" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.remove (276 samples, 7.05%)</title><rect x="667.7" y="1059.0" width="83.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="670.7" y="1070.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (252 samples, 6.44%)</title><rect x="667.7" y="1043.0" width="75.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="670.7" y="1054.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (252 samples, 6.44%)</title><rect x="667.7" y="1027.0" width="75.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="670.7" y="1038.0">java/uti..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (65 samples, 1.66%)</title><rect x="675.2" y="1011.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="678.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="688.5" y="995.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="691.5" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="688.5" y="979.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="691.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="688.5" y="963.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="691.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="688.8" y="947.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="691.8" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="688.8" y="931.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="691.8" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (19 samples, 0.49%)</title><rect x="689.1" y="995.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="692.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="694.5" y="979.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="697.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="694.5" y="963.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="697.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="694.5" y="947.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="697.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="694.5" y="931.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="697.5" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="694.5" y="915.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="697.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="694.5" y="899.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="697.5" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="694.5" y="883.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="697.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (11 samples, 0.28%)</title><rect x="694.8" y="1011.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="697.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (2 samples, 0.05%)</title><rect x="698.1" y="1011.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="701.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (2 samples, 0.05%)</title><rect x="698.1" y="995.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="701.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/Striped64.casBase (2 samples, 0.05%)</title><rect x="698.1" y="979.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="701.1" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (2 samples, 0.05%)</title><rect x="698.1" y="963.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="701.1" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (2 samples, 0.05%)</title><rect x="698.1" y="947.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="701.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (10 samples, 0.26%)</title><rect x="698.7" y="1011.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="701.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (4 samples, 0.10%)</title><rect x="699.3" y="995.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.08%)</title><rect x="699.6" y="979.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="702.6" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.08%)</title><rect x="699.6" y="963.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="702.6" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.05%)</title><rect x="699.9" y="947.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="702.9" y="958.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.05%)</title><rect x="699.9" y="931.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="702.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.10%)</title><rect x="700.5" y="995.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="703.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.10%)</title><rect x="700.5" y="979.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="703.5" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.10%)</title><rect x="700.5" y="963.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="703.5" y="974.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.10%)</title><rect x="700.5" y="947.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="703.5" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="700.8" y="931.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="703.8" y="942.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.05%)</title><rect x="701.1" y="931.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="704.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (139 samples, 3.55%)</title><rect x="701.7" y="1011.0" width="41.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="704.7" y="1022.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (136 samples, 3.47%)</title><rect x="702.6" y="995.0" width="41.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.6" y="1006.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (131 samples, 3.35%)</title><rect x="704.1" y="979.0" width="39.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.1" y="990.0">jav..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (121 samples, 3.09%)</title><rect x="704.4" y="963.0" width="36.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="707.4" y="974.0">jav..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="721.9" y="947.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="724.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="721.9" y="931.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="724.9" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="721.9" y="915.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="724.9" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="721.9" y="899.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="724.9" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="721.9" y="883.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="724.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="721.9" y="867.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="724.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="721.9" y="851.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="724.9" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (11 samples, 0.28%)</title><rect x="722.2" y="947.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="725.2" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (32 samples, 0.82%)</title><rect x="725.5" y="947.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="728.5" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (18 samples, 0.46%)</title><rect x="729.8" y="931.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="732.8" y="942.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (8 samples, 0.20%)</title><rect x="735.2" y="947.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.2" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.03%)</title><rect x="737.3" y="931.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.3" y="942.0"></text>
</g>
<g>
<title>vtable stub (11 samples, 0.28%)</title><rect x="737.6" y="947.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="740.6" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (1 samples, 0.03%)</title><rect x="740.9" y="963.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="743.9" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (8 samples, 0.20%)</title><rect x="741.2" y="963.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.2" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.08%)</title><rect x="742.7" y="947.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="745.7" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (12 samples, 0.31%)</title><rect x="743.6" y="1043.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="746.6" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.&lt;init&gt; (12 samples, 0.31%)</title><rect x="743.6" y="1027.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="746.6" y="1038.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="745.7" y="1011.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="748.7" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.10%)</title><rect x="746.0" y="1011.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="749.0" y="1022.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.10%)</title><rect x="746.0" y="995.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="749.0" y="1006.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.10%)</title><rect x="746.0" y="979.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="749.0" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (12 samples, 0.31%)</title><rect x="747.2" y="1043.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="750.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.08%)</title><rect x="747.8" y="1027.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="750.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.08%)</title><rect x="747.8" y="1011.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="750.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="748.4" y="995.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="751.4" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="748.4" y="979.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.4" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.18%)</title><rect x="748.7" y="1027.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (6 samples, 0.15%)</title><rect x="749.0" y="1011.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="752.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="749.0" y="995.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="749.0" y="979.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="752.0" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="749.0" y="963.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.0" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="749.0" y="947.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.0" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="749.0" y="931.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="752.0" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="749.0" y="915.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="752.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="749.0" y="899.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="752.0" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="749.3" y="931.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.3" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="749.3" y="915.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="752.3" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.08%)</title><rect x="749.6" y="947.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="752.6" y="958.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="750.6" y="947.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="753.6" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (8 samples, 0.20%)</title><rect x="750.9" y="1059.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.9" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (8 samples, 0.20%)</title><rect x="750.9" y="1043.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (5 samples, 0.13%)</title><rect x="750.9" y="1027.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="753.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (5 samples, 0.13%)</title><rect x="750.9" y="1011.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="753.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (5 samples, 0.13%)</title><rect x="750.9" y="995.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="753.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (2 samples, 0.05%)</title><rect x="751.8" y="979.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="754.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (2 samples, 0.05%)</title><rect x="751.8" y="963.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="754.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (2 samples, 0.05%)</title><rect x="751.8" y="947.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="754.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.05%)</title><rect x="751.8" y="931.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="754.8" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.05%)</title><rect x="751.8" y="915.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="754.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.08%)</title><rect x="752.4" y="1027.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="755.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.08%)</title><rect x="752.4" y="1011.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="755.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.08%)</title><rect x="752.4" y="995.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="755.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (3 samples, 0.08%)</title><rect x="752.4" y="979.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="755.4" y="990.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.03%)</title><rect x="753.3" y="1219.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="756.3" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="753.3" y="1203.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="756.3" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="753.3" y="1187.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="756.3" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="753.3" y="1171.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="756.3" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="753.3" y="1155.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="756.3" y="1166.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,214 samples, 31.01%)</title><rect x="753.6" y="1219.0" width="365.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="756.6" y="1230.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.08%)</title><rect x="756.0" y="1203.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="759.0" y="1214.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="756.3" y="1187.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="759.3" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="756.6" y="1187.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="759.6" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="756.6" y="1171.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="759.6" y="1182.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="756.9" y="1203.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="759.9" y="1214.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.08%)</title><rect x="757.2" y="1203.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="760.2" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.03%)</title><rect x="758.1" y="1203.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="761.1" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.03%)</title><rect x="758.1" y="1187.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="761.1" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.03%)</title><rect x="758.1" y="1171.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="761.1" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (300 samples, 7.66%)</title><rect x="758.4" y="1203.0" width="90.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="761.4" y="1214.0">one/nio/ne..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.4" y="1187.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="764.4" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.4" y="1171.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="764.4" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.4" y="1155.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="764.4" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.4" y="1139.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="764.4" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.4" y="1123.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="764.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.4" y="1107.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="764.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.4" y="1091.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="764.4" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (5 samples, 0.13%)</title><rect x="761.7" y="1187.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="764.7" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.08%)</title><rect x="762.3" y="1171.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="765.3" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (284 samples, 7.25%)</title><rect x="763.2" y="1187.0" width="85.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="766.2" y="1198.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 0.15%)</title><rect x="766.8" y="1171.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="769.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (255 samples, 6.51%)</title><rect x="768.6" y="1171.0" width="76.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="771.6" y="1182.0">[unknown]</text>
</g>
<g>
<title>JavaThread::~JavaThread() (1 samples, 0.03%)</title><rect x="768.6" y="1155.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="771.6" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="768.6" y="1139.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="771.6" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="768.6" y="1123.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="771.6" y="1134.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="768.6" y="1107.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="771.6" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="768.6" y="1091.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="771.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.28%)</title><rect x="768.9" y="1155.0" width="3.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="771.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="768.9" y="1139.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="771.9" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="768.9" y="1123.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="771.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="768.9" y="1107.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="771.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="768.9" y="1091.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="771.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="768.9" y="1075.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="771.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="769.2" y="1139.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="772.2" y="1150.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (4 samples, 0.10%)</title><rect x="769.8" y="1139.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="772.8" y="1150.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.10%)</title><rect x="771.0" y="1139.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="774.0" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="771.7" y="1123.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="774.7" y="1134.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (4 samples, 0.10%)</title><rect x="772.3" y="1155.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="775.3" y="1166.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.05%)</title><rect x="773.5" y="1155.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="776.5" y="1166.0"></text>
</g>
<g>
<title>epoll_wait (237 samples, 6.05%)</title><rect x="774.1" y="1155.0" width="71.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="777.1" y="1166.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (221 samples, 5.64%)</title><rect x="778.9" y="1139.0" width="66.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="781.9" y="1150.0">[unknown]</text>
</g>
<g>
<title>[unknown] (221 samples, 5.64%)</title><rect x="778.9" y="1123.0" width="66.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="781.9" y="1134.0">[unknown]</text>
</g>
<g>
<title>[unknown] (202 samples, 5.16%)</title><rect x="784.6" y="1107.0" width="60.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="787.6" y="1118.0">[unkno..</text>
</g>
<g>
<title>[unknown] (201 samples, 5.13%)</title><rect x="784.9" y="1091.0" width="60.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="787.9" y="1102.0">[unkno..</text>
</g>
<g>
<title>[unknown] (191 samples, 4.88%)</title><rect x="787.9" y="1075.0" width="57.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="790.9" y="1086.0">[unkno..</text>
</g>
<g>
<title>[unknown] (163 samples, 4.16%)</title><rect x="796.4" y="1059.0" width="49.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="799.4" y="1070.0">[unkn..</text>
</g>
<g>
<title>[unknown] (117 samples, 2.99%)</title><rect x="810.2" y="1043.0" width="35.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="813.2" y="1054.0">[un..</text>
</g>
<g>
<title>[unknown] (89 samples, 2.27%)</title><rect x="818.7" y="1027.0" width="26.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="821.7" y="1038.0">[..</text>
</g>
<g>
<title>[unknown] (74 samples, 1.89%)</title><rect x="823.2" y="1011.0" width="22.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="826.2" y="1022.0">[..</text>
</g>
<g>
<title>[unknown] (56 samples, 1.43%)</title><rect x="828.6" y="995.0" width="16.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="831.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.13%)</title><rect x="844.0" y="979.0" width="1.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="847.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="844.6" y="963.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="847.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="844.6" y="947.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="847.6" y="958.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="844.6" y="931.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="847.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="844.9" y="915.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="847.9" y="926.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="844.9" y="899.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="847.9" y="910.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="844.9" y="883.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="847.9" y="894.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="845.5" y="1171.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="848.5" y="1182.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.05%)</title><rect x="845.8" y="1171.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="848.8" y="1182.0"></text>
</g>
<g>
<title>epoll_wait (8 samples, 0.20%)</title><rect x="846.4" y="1171.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="849.4" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (895 samples, 22.86%)</title><rect x="848.8" y="1203.0" width="269.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="851.8" y="1214.0">one/nio/net/Session.process</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="852.1" y="1187.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="855.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="852.1" y="1171.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="855.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="852.1" y="1155.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="855.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="852.1" y="1139.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="855.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="852.1" y="1123.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="855.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="852.1" y="1107.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="855.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="852.1" y="1091.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="855.1" y="1102.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.08%)</title><rect x="852.4" y="1187.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="855.4" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (877 samples, 22.40%)</title><rect x="853.3" y="1187.0" width="264.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="856.3" y="1198.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (600 samples, 15.33%)</title><rect x="853.6" y="1171.0" width="180.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="856.6" y="1182.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (496 samples, 12.67%)</title><rect x="855.4" y="1155.0" width="149.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="858.4" y="1166.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (474 samples, 12.11%)</title><rect x="860.9" y="1139.0" width="142.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="863.9" y="1150.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (435 samples, 11.11%)</title><rect x="861.2" y="1123.0" width="131.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.2" y="1134.0">RequestHandler0_..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="861.2" y="1107.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="864.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (26 samples, 0.66%)</title><rect x="861.5" y="1107.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="864.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.20%)</title><rect x="861.8" y="1091.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="864.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.20%)</title><rect x="861.8" y="1075.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="864.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (5 samples, 0.13%)</title><rect x="864.2" y="1091.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.08%)</title><rect x="864.8" y="1075.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="867.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="865.1" y="1059.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.10%)</title><rect x="865.7" y="1091.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.08%)</title><rect x="866.0" y="1075.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="869.0" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.08%)</title><rect x="866.0" y="1059.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="869.0" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.20%)</title><rect x="866.9" y="1091.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="869.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.13%)</title><rect x="867.8" y="1075.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="870.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.13%)</title><rect x="867.8" y="1059.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="870.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.13%)</title><rect x="867.8" y="1043.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="870.8" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (408 samples, 10.42%)</title><rect x="869.3" y="1107.0" width="123.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="872.3" y="1118.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="870.8" y="1091.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="873.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.03%)</title><rect x="870.8" y="1075.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="873.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.03%)</title><rect x="870.8" y="1059.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="873.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="870.8" y="1043.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="873.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (4 samples, 0.10%)</title><rect x="871.1" y="1091.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="872.3" y="1091.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="875.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="872.3" y="1075.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="875.3" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$76/369077687.get$Lambda (1 samples, 0.03%)</title><rect x="872.3" y="1059.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="875.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.20%)</title><rect x="872.6" y="1091.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="875.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.20%)</title><rect x="872.6" y="1075.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="875.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.20%)</title><rect x="872.6" y="1059.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="875.6" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.18%)</title><rect x="872.9" y="1043.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="873.2" y="1027.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="873.5" y="1011.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="876.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="873.5" y="995.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="876.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="873.5" y="979.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="876.5" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.10%)</title><rect x="873.8" y="1011.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="876.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.08%)</title><rect x="874.1" y="995.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="877.1" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (382 samples, 9.76%)</title><rect x="875.0" y="1091.0" width="115.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="878.0" y="1102.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="876.5" y="1075.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="879.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="876.5" y="1059.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="879.5" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.get$Lambda (1 samples, 0.03%)</title><rect x="876.5" y="1043.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="879.5" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.&lt;init&gt; (1 samples, 0.03%)</title><rect x="876.5" y="1027.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="879.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (376 samples, 9.60%)</title><rect x="876.8" y="1075.0" width="113.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.8" y="1086.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (375 samples, 9.58%)</title><rect x="877.1" y="1059.0" width="113.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="880.1" y="1070.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="877.4" y="1043.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="880.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (292 samples, 7.46%)</title><rect x="877.7" y="1043.0" width="88.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="880.7" y="1054.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="877.7" y="1027.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="880.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="877.7" y="1011.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="880.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="877.7" y="995.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="880.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (290 samples, 7.41%)</title><rect x="878.3" y="1027.0" width="87.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="881.3" y="1038.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (290 samples, 7.41%)</title><rect x="878.3" y="1011.0" width="87.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="881.3" y="1022.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (290 samples, 7.41%)</title><rect x="878.3" y="995.0" width="87.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="881.3" y="1006.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (290 samples, 7.41%)</title><rect x="878.3" y="979.0" width="87.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="881.3" y="990.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (290 samples, 7.41%)</title><rect x="878.3" y="963.0" width="87.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="881.3" y="974.0">jdk/intern..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.05%)</title><rect x="880.8" y="947.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="883.8" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.08%)</title><rect x="881.4" y="947.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="884.4" y="958.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="882.3" y="947.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="885.3" y="958.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="882.6" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="885.6" y="958.0"></text>
</g>
<g>
<title>Unsafe_Unpark (41 samples, 1.05%)</title><rect x="882.9" y="947.0" width="12.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="885.9" y="958.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="883.8" y="931.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="886.8" y="942.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.08%)</title><rect x="884.1" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="887.1" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.05%)</title><rect x="885.0" y="931.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.0" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.03%)</title><rect x="885.6" y="931.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="888.6" y="942.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (6 samples, 0.15%)</title><rect x="885.9" y="931.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="888.9" y="942.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.10%)</title><rect x="887.7" y="931.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="890.7" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (12 samples, 0.31%)</title><rect x="888.9" y="931.0" width="3.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="891.9" y="942.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="892.5" y="931.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="895.5" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (4 samples, 0.10%)</title><rect x="892.8" y="931.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="895.8" y="942.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="894.0" y="931.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="897.0" y="942.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.05%)</title><rect x="894.6" y="931.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="897.6" y="942.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.10%)</title><rect x="895.2" y="947.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="898.2" y="958.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (230 samples, 5.87%)</title><rect x="896.4" y="947.0" width="69.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="899.4" y="958.0">pthread..</text>
</g>
<g>
<title>[unknown] (199 samples, 5.08%)</title><rect x="905.8" y="931.0" width="60.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="908.8" y="942.0">[unkno..</text>
</g>
<g>
<title>[unknown] (199 samples, 5.08%)</title><rect x="905.8" y="915.0" width="60.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="908.8" y="926.0">[unkno..</text>
</g>
<g>
<title>[unknown] (185 samples, 4.73%)</title><rect x="910.0" y="899.0" width="55.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="913.0" y="910.0">[unkn..</text>
</g>
<g>
<title>[unknown] (180 samples, 4.60%)</title><rect x="911.5" y="883.0" width="54.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="914.5" y="894.0">[unkn..</text>
</g>
<g>
<title>[unknown] (179 samples, 4.57%)</title><rect x="911.8" y="867.0" width="54.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="914.8" y="878.0">[unkn..</text>
</g>
<g>
<title>[unknown] (166 samples, 4.24%)</title><rect x="915.7" y="851.0" width="50.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="918.7" y="862.0">[unkn..</text>
</g>
<g>
<title>[unknown] (153 samples, 3.91%)</title><rect x="919.6" y="835.0" width="46.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="922.6" y="846.0">[unk..</text>
</g>
<g>
<title>[unknown] (146 samples, 3.73%)</title><rect x="921.7" y="819.0" width="44.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="924.7" y="830.0">[unk..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (12 samples, 0.31%)</title><rect x="965.8" y="1043.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="968.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (12 samples, 0.31%)</title><rect x="965.8" y="1027.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="968.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.08%)</title><rect x="968.5" y="1011.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="971.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.05%)</title><rect x="968.5" y="995.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="971.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.05%)</title><rect x="968.5" y="979.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="971.5" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="968.8" y="963.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="969.1" y="995.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="972.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.03%)</title><rect x="969.1" y="979.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="972.1" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="969.1" y="963.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.1" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.03%)</title><rect x="969.1" y="947.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="972.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (65 samples, 1.66%)</title><rect x="969.4" y="1043.0" width="19.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="972.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (59 samples, 1.51%)</title><rect x="971.2" y="1027.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="974.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (32 samples, 0.82%)</title><rect x="974.5" y="1011.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="977.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (8 samples, 0.20%)</title><rect x="975.7" y="995.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="978.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.05%)</title><rect x="976.0" y="979.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="979.0" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.13%)</title><rect x="976.6" y="979.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="979.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (14 samples, 0.36%)</title><rect x="978.1" y="995.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="981.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (14 samples, 0.36%)</title><rect x="978.1" y="979.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="981.1" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (2 samples, 0.05%)</title><rect x="978.1" y="963.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="981.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="978.4" y="947.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="981.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="978.4" y="931.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="981.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="978.4" y="915.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="981.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="978.4" y="899.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="981.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="978.4" y="883.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="981.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="978.4" y="867.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="981.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="978.4" y="851.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="981.4" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (12 samples, 0.31%)</title><rect x="978.7" y="963.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="981.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="982.0" y="947.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="985.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (6 samples, 0.15%)</title><rect x="982.3" y="995.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="985.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (6 samples, 0.15%)</title><rect x="982.3" y="979.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="985.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="983.8" y="963.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="986.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="983.8" y="947.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="986.8" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="983.8" y="931.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="986.8" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="983.8" y="915.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="986.8" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="983.8" y="899.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="986.8" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="983.8" y="883.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="986.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="983.8" y="867.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="986.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (16 samples, 0.41%)</title><rect x="984.1" y="1011.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (15 samples, 0.38%)</title><rect x="984.4" y="995.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="987.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.05%)</title><rect x="985.0" y="979.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="988.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (11 samples, 0.28%)</title><rect x="985.6" y="979.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="988.6" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (11 samples, 0.28%)</title><rect x="985.6" y="963.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="988.6" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (9 samples, 0.23%)</title><rect x="986.3" y="947.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="989.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.10%)</title><rect x="989.0" y="1043.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="992.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.10%)</title><rect x="989.0" y="1027.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="992.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.10%)</title><rect x="989.0" y="1011.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="992.0" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.isMe (2 samples, 0.05%)</title><rect x="990.2" y="1091.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="993.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.05%)</title><rect x="990.2" y="1075.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="993.2" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.primaryFor (5 samples, 0.13%)</title><rect x="990.8" y="1091.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="993.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.03%)</title><rect x="991.4" y="1075.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="994.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="991.7" y="1075.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="994.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="991.7" y="1059.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="994.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (1 samples, 0.03%)</title><rect x="991.7" y="1043.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="994.7" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.hashCode (1 samples, 0.03%)</title><rect x="992.0" y="1075.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="995.0" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="992.0" y="1059.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="995.0" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.03%)</title><rect x="992.3" y="1123.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="995.3" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (18 samples, 0.46%)</title><rect x="992.6" y="1123.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="995.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (18 samples, 0.46%)</title><rect x="992.6" y="1107.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="995.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.13%)</title><rect x="992.6" y="1091.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="995.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="992.9" y="1075.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="995.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="992.9" y="1059.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="995.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="992.9" y="1043.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="995.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="992.9" y="1027.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="995.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="992.9" y="1011.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="995.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="992.9" y="995.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="995.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="992.9" y="979.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="995.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.08%)</title><rect x="993.2" y="1075.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="996.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (13 samples, 0.33%)</title><rect x="994.1" y="1091.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="997.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (13 samples, 0.33%)</title><rect x="994.1" y="1075.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="997.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.05%)</title><rect x="997.4" y="1059.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1000.4" y="1070.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="997.4" y="1043.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1000.4" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (19 samples, 0.49%)</title><rect x="998.0" y="1123.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.23%)</title><rect x="1001.0" y="1107.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1004.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1001.6" y="1091.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1004.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.15%)</title><rect x="1001.9" y="1091.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1004.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.10%)</title><rect x="1001.9" y="1075.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1004.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="1003.1" y="1075.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1006.1" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1003.4" y="1059.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1006.4" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.10%)</title><rect x="1003.7" y="1139.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1006.7" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (31 samples, 0.79%)</title><rect x="1004.9" y="1155.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1007.9" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.08%)</title><rect x="1006.7" y="1139.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1009.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.08%)</title><rect x="1006.7" y="1123.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1009.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.08%)</title><rect x="1006.7" y="1107.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1009.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="1006.7" y="1091.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1009.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="1007.0" y="1091.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1010.0" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.36%)</title><rect x="1007.7" y="1139.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1010.7" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.36%)</title><rect x="1007.7" y="1123.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1010.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1011.6" y="1107.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1014.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1011.6" y="1091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1014.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.03%)</title><rect x="1011.6" y="1075.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1014.6" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (8 samples, 0.20%)</title><rect x="1011.9" y="1139.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1014.9" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (29 samples, 0.74%)</title><rect x="1014.3" y="1155.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1017.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (22 samples, 0.56%)</title><rect x="1016.4" y="1139.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1019.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (22 samples, 0.56%)</title><rect x="1016.4" y="1123.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1019.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="1107.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1022.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="1091.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1022.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="1075.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1022.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="1059.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1022.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="1043.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1022.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="1027.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1022.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="1011.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1022.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="995.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1022.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="979.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1022.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="963.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1022.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="947.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1022.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="931.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1022.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="915.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1022.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="899.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1022.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="883.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1022.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="867.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1022.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="851.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1022.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="835.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1022.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="819.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1022.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="803.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1022.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="787.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1022.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="771.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1022.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="755.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1022.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1019.4" y="739.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1022.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.05%)</title><rect x="1019.7" y="1107.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1022.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.05%)</title><rect x="1019.7" y="1091.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1022.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (2 samples, 0.05%)</title><rect x="1019.7" y="1075.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1022.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.18%)</title><rect x="1020.3" y="1107.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1023.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (7 samples, 0.18%)</title><rect x="1020.3" y="1091.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1023.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="1022.1" y="1075.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1025.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="1022.4" y="1107.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1025.4" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (6 samples, 0.15%)</title><rect x="1023.0" y="1155.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1026.0" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.28%)</title><rect x="1024.8" y="1155.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1027.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1025.1" y="1139.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1028.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.23%)</title><rect x="1025.4" y="1139.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1028.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.23%)</title><rect x="1025.4" y="1123.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1028.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.08%)</title><rect x="1026.6" y="1107.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1029.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.05%)</title><rect x="1026.9" y="1091.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1029.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.05%)</title><rect x="1026.9" y="1075.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1029.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title><rect x="1027.5" y="1107.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1030.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title><rect x="1027.5" y="1091.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1030.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.05%)</title><rect x="1027.5" y="1075.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1030.5" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (21 samples, 0.54%)</title><rect x="1028.1" y="1155.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1031.1" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (21 samples, 0.54%)</title><rect x="1028.1" y="1139.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1031.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1030.9" y="1123.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1033.9" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1030.9" y="1107.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1033.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1030.9" y="1091.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1033.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1030.9" y="1075.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1033.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1030.9" y="1059.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1033.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1030.9" y="1043.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1033.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1030.9" y="1027.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1033.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.13%)</title><rect x="1031.2" y="1123.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1034.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.13%)</title><rect x="1031.2" y="1107.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1034.2" y="1118.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (6 samples, 0.15%)</title><rect x="1032.7" y="1123.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1035.7" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (276 samples, 7.05%)</title><rect x="1034.5" y="1171.0" width="83.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1037.5" y="1182.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (271 samples, 6.92%)</title><rect x="1036.0" y="1155.0" width="81.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1039.0" y="1166.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.03%)</title><rect x="1040.8" y="1139.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1043.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.28%)</title><rect x="1041.1" y="1139.0" width="15.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1044.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.28%)</title><rect x="1041.1" y="1123.0" width="15.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1044.1" y="1134.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (46 samples, 1.17%)</title><rect x="1041.1" y="1107.0" width="13.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1044.1" y="1118.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.18%)</title><rect x="1042.9" y="1091.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.9" y="1102.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="1045.0" y="1091.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.0" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.03%)</title><rect x="1045.3" y="1091.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.3" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (3 samples, 0.08%)</title><rect x="1045.6" y="1091.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.6" y="1102.0"></text>
</g>
<g>
<title>__memmove_ssse3 (9 samples, 0.23%)</title><rect x="1046.5" y="1091.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1049.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.9" y="1075.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1051.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.9" y="1059.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1051.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.9" y="1043.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1051.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.9" y="1027.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1051.9" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.9" y="1011.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1051.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.9" y="995.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1051.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.9" y="979.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1051.9" y="990.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (16 samples, 0.41%)</title><rect x="1049.2" y="1091.0" width="4.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1052.2" y="1102.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="1050.1" y="1075.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.1" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.05%)</title><rect x="1050.8" y="1075.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.8" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (3 samples, 0.08%)</title><rect x="1051.4" y="1075.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1054.4" y="1086.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.15%)</title><rect x="1052.3" y="1075.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1055.3" y="1086.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.08%)</title><rect x="1054.1" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.1" y="1102.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="1055.0" y="1107.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1058.0" y="1118.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.05%)</title><rect x="1055.3" y="1107.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1058.3" y="1118.0"></text>
</g>
<g>
<title>recv (1 samples, 0.03%)</title><rect x="1055.9" y="1107.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1058.9" y="1118.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="1056.2" y="1139.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1059.2" y="1150.0"></text>
</g>
<g>
<title>recv (203 samples, 5.19%)</title><rect x="1056.5" y="1139.0" width="61.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1059.5" y="1150.0">recv</text>
</g>
<g>
<title>[unknown] (188 samples, 4.80%)</title><rect x="1061.0" y="1123.0" width="56.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1064.0" y="1134.0">[unkno..</text>
</g>
<g>
<title>[unknown] (188 samples, 4.80%)</title><rect x="1061.0" y="1107.0" width="56.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1064.0" y="1118.0">[unkno..</text>
</g>
<g>
<title>[unknown] (168 samples, 4.29%)</title><rect x="1067.0" y="1091.0" width="50.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1070.0" y="1102.0">[unkn..</text>
</g>
<g>
<title>[unknown] (165 samples, 4.21%)</title><rect x="1067.9" y="1075.0" width="49.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1070.9" y="1086.0">[unkn..</text>
</g>
<g>
<title>[unknown] (152 samples, 3.88%)</title><rect x="1071.8" y="1059.0" width="45.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1074.8" y="1070.0">[unk..</text>
</g>
<g>
<title>[unknown] (143 samples, 3.65%)</title><rect x="1074.6" y="1043.0" width="43.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1077.6" y="1054.0">[unk..</text>
</g>
<g>
<title>[unknown] (133 samples, 3.40%)</title><rect x="1077.6" y="1027.0" width="40.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1080.6" y="1038.0">[un..</text>
</g>
<g>
<title>[unknown] (118 samples, 3.01%)</title><rect x="1082.1" y="1011.0" width="35.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1085.1" y="1022.0">[un..</text>
</g>
<g>
<title>[unknown] (83 samples, 2.12%)</title><rect x="1092.6" y="995.0" width="25.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1095.6" y="1006.0">[..</text>
</g>
<g>
<title>[unknown] (54 samples, 1.38%)</title><rect x="1101.4" y="979.0" width="16.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1104.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.97%)</title><rect x="1106.2" y="963.0" width="11.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1109.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.54%)</title><rect x="1111.3" y="947.0" width="6.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1114.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1117.1" y="931.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1120.1" y="942.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1117.1" y="915.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1120.1" y="926.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1117.1" y="899.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1120.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1117.4" y="883.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1120.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1117.4" y="867.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1120.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1117.4" y="851.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1120.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1117.4" y="835.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1120.4" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="1117.7" y="1187.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.7" y="1198.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1118.3" y="1171.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1121.3" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="1118.3" y="1155.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1121.3" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="1118.6" y="1203.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.6" y="1214.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.08%)</title><rect x="1118.6" y="1187.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1121.6" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="1118.9" y="1171.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1121.9" y="1182.0"></text>
</g>
<g>
<title>start_thread (234 samples, 5.98%)</title><rect x="1119.5" y="1219.0" width="70.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1122.5" y="1230.0">start_th..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (234 samples, 5.98%)</title><rect x="1119.5" y="1203.0" width="70.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1122.5" y="1214.0">thread_n..</text>
</g>
<g>
<title>Thread::call_run() (234 samples, 5.98%)</title><rect x="1119.5" y="1187.0" width="70.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.5" y="1198.0">Thread::..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.10%)</title><rect x="1119.5" y="1171.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.5" y="1182.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.10%)</title><rect x="1119.5" y="1155.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.5" y="1166.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1119.5" y="1139.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.5" y="1150.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1119.5" y="1123.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.5" y="1134.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1119.5" y="1107.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.5" y="1118.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1119.5" y="1091.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.5" y="1102.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.08%)</title><rect x="1119.8" y="1139.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.8" y="1150.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.05%)</title><rect x="1119.8" y="1123.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.8" y="1134.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.03%)</title><rect x="1120.4" y="1123.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.4" y="1134.0"></text>
</g>
<g>
<title>GangWorker::loop() (72 samples, 1.84%)</title><rect x="1120.7" y="1171.0" width="21.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.7" y="1182.0">G..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (7 samples, 0.18%)</title><rect x="1120.7" y="1155.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.7" y="1166.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (7 samples, 0.18%)</title><rect x="1120.7" y="1139.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.7" y="1150.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (4 samples, 0.10%)</title><rect x="1120.7" y="1123.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.7" y="1134.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.241] (2 samples, 0.05%)</title><rect x="1121.3" y="1107.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.3" y="1118.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.05%)</title><rect x="1121.3" y="1091.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.3" y="1102.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .part.298] (1 samples, 0.03%)</title><rect x="1121.9" y="1123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.9" y="1134.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.241] (1 samples, 0.03%)</title><rect x="1122.2" y="1123.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.2" y="1134.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1122.2" y="1107.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.2" y="1118.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.03%)</title><rect x="1122.2" y="1091.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.2" y="1102.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1122.5" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.5" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (59 samples, 1.51%)</title><rect x="1122.8" y="1155.0" width="17.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.8" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (17 samples, 0.43%)</title><rect x="1122.8" y="1139.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.8" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="1122.8" y="1123.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.8" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 0.36%)</title><rect x="1123.1" y="1123.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1124.9" y="1107.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1127.9" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1124.9" y="1091.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1127.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1124.9" y="1075.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1127.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1124.9" y="1059.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1127.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1124.9" y="1043.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1127.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1124.9" y="1027.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1127.9" y="1038.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (7 samples, 0.18%)</title><rect x="1125.2" y="1107.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.2" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 0.18%)</title><rect x="1125.2" y="1091.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.2" y="1102.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.05%)</title><rect x="1127.3" y="1123.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1130.3" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (41 samples, 1.05%)</title><rect x="1127.9" y="1139.0" width="12.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.9" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (41 samples, 1.05%)</title><rect x="1127.9" y="1123.0" width="12.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.9" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (41 samples, 1.05%)</title><rect x="1127.9" y="1107.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.9" y="1118.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (41 samples, 1.05%)</title><rect x="1127.9" y="1091.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.9" y="1102.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (40 samples, 1.02%)</title><rect x="1127.9" y="1075.0" width="12.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.9" y="1086.0"></text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (1 samples, 0.03%)</title><rect x="1127.9" y="1059.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.9" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (33 samples, 0.84%)</title><rect x="1128.2" y="1059.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.2" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (18 samples, 0.46%)</title><rect x="1132.7" y="1043.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.7" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::start_of_nonstatic_oop_maps() const (1 samples, 0.03%)</title><rect x="1136.3" y="1027.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.3" y="1038.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.13%)</title><rect x="1136.7" y="1027.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.7" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::start_of_nonstatic_oop_maps() const (1 samples, 0.03%)</title><rect x="1136.7" y="1011.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.7" y="1022.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.10%)</title><rect x="1137.0" y="1011.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.0" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (6 samples, 0.15%)</title><rect x="1138.2" y="1059.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.2" y="1070.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.03%)</title><rect x="1139.1" y="1043.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.1" y="1054.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1139.1" y="1027.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.1" y="1038.0"></text>
</g>
<g>
<title>G1ContiguousSpace::block_start(void const*) (1 samples, 0.03%)</title><rect x="1139.4" y="1043.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.4" y="1054.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1139.7" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.7" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.03%)</title><rect x="1140.0" y="1075.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.0" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1140.3" y="1139.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.3" y="1150.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1140.3" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.3" y="1134.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1140.3" y="1107.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.3" y="1118.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.03%)</title><rect x="1140.3" y="1091.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.3" y="1102.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (1 samples, 0.03%)</title><rect x="1140.3" y="1075.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.3" y="1086.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1140.6" y="1155.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.6" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::clean_weak_instanceklass_links() (1 samples, 0.03%)</title><rect x="1140.6" y="1139.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.6" y="1150.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (4 samples, 0.10%)</title><rect x="1140.9" y="1155.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.9" y="1166.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (4 samples, 0.10%)</title><rect x="1140.9" y="1139.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.9" y="1150.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (4 samples, 0.10%)</title><rect x="1140.9" y="1123.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.9" y="1134.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1141.2" y="1107.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.2" y="1118.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.327] (1 samples, 0.03%)</title><rect x="1141.5" y="1107.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.5" y="1118.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1141.8" y="1107.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.8" y="1118.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1142.1" y="1155.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.1" y="1166.0"></text>
</g>
<g>
<title>TraceTime::~TraceTime() (1 samples, 0.03%)</title><rect x="1142.1" y="1139.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.1" y="1150.0"></text>
</g>
<g>
<title>JavaThread::run() (150 samples, 3.83%)</title><rect x="1142.4" y="1171.0" width="45.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.4" y="1182.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (150 samples, 3.83%)</title><rect x="1142.4" y="1155.0" width="45.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.4" y="1166.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (149 samples, 3.81%)</title><rect x="1142.4" y="1139.0" width="44.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.4" y="1150.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (148 samples, 3.78%)</title><rect x="1142.4" y="1123.0" width="44.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.4" y="1134.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (146 samples, 3.73%)</title><rect x="1142.4" y="1107.0" width="44.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.4" y="1118.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (146 samples, 3.73%)</title><rect x="1142.4" y="1091.0" width="44.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="1102.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (86 samples, 2.20%)</title><rect x="1142.4" y="1075.0" width="25.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.4" y="1086.0">C..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.10%)</title><rect x="1142.4" y="1059.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.4" y="1070.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.05%)</title><rect x="1142.4" y="1043.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.4" y="1054.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.03%)</title><rect x="1142.7" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.7" y="1038.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.03%)</title><rect x="1142.7" y="1011.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.7" y="1022.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.03%)</title><rect x="1143.0" y="1043.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.0" y="1054.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.03%)</title><rect x="1143.0" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.0" y="1038.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (1 samples, 0.03%)</title><rect x="1143.3" y="1043.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1146.3" y="1054.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.05%)</title><rect x="1143.6" y="1059.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.6" y="1070.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.03%)</title><rect x="1143.6" y="1043.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.6" y="1054.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.03%)</title><rect x="1143.9" y="1043.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.9" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.03%)</title><rect x="1143.9" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.9" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::add_gc_map(int, OopMap*) (1 samples, 0.03%)</title><rect x="1143.9" y="1011.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.9" y="1022.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.03%)</title><rect x="1144.2" y="1059.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.2" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.15%)</title><rect x="1144.5" y="1059.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.5" y="1070.0"></text>
</g>
<g>
<title>Compile::set_cached_top_node(Node*) (1 samples, 0.03%)</title><rect x="1144.5" y="1043.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.5" y="1054.0"></text>
</g>
<g>
<title>Node::setup_is_top() (1 samples, 0.03%)</title><rect x="1144.5" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.5" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.13%)</title><rect x="1144.8" y="1043.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.8" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.08%)</title><rect x="1145.4" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.4" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="1145.7" y="1011.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.7" y="1022.0"></text>
</g>
<g>
<title>immI1Oper::num_edges() const (1 samples, 0.03%)</title><rect x="1145.7" y="995.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.7" y="1006.0"></text>
</g>
<g>
<title>Node::match_edge(unsigned int) const (1 samples, 0.03%)</title><rect x="1146.0" y="1011.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.18%)</title><rect x="1146.3" y="1059.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.18%)</title><rect x="1146.3" y="1043.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::call_catch_cleanup(Block*) (1 samples, 0.03%)</title><rect x="1146.3" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.3" y="1038.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.03%)</title><rect x="1146.3" y="1011.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.3" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.03%)</title><rect x="1146.6" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.6" y="1038.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.03%)</title><rect x="1146.6" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.08%)</title><rect x="1146.9" y="1027.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.9" y="1038.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1147.5" y="1011.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.5" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.03%)</title><rect x="1147.8" y="1027.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.8" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (1 samples, 0.03%)</title><rect x="1147.8" y="1011.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1147.8" y="995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.8" y="1006.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.03%)</title><rect x="1148.1" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (66 samples, 1.69%)</title><rect x="1148.4" y="1059.0" width="19.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.4" y="1070.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="1148.4" y="1043.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.4" y="1054.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.03%)</title><rect x="1148.7" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.05%)</title><rect x="1149.0" y="1043.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.0" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1149.0" y="1027.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.03%)</title><rect x="1149.3" y="1027.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.08%)</title><rect x="1149.6" y="1043.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.05%)</title><rect x="1149.9" y="1027.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.20%)</title><rect x="1150.5" y="1043.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.5" y="1054.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.05%)</title><rect x="1151.4" y="1027.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="1038.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="1151.7" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.7" y="1022.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.03%)</title><rect x="1152.0" y="1027.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.0" y="1038.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.03%)</title><rect x="1152.3" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.3" y="1038.0"></text>
</g>
<g>
<title>encodeHeapOop_not_nullNode::rule() const (1 samples, 0.03%)</title><rect x="1152.6" y="1027.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (17 samples, 0.43%)</title><rect x="1152.9" y="1043.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="1153.5" y="1027.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (1 samples, 0.03%)</title><rect x="1153.8" y="1027.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.15%)</title><rect x="1154.1" y="1027.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.1" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1155.3" y="1011.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (5 samples, 0.13%)</title><rect x="1155.9" y="1027.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.9" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1156.8" y="1011.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.8" y="1022.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.03%)</title><rect x="1157.1" y="1011.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.05%)</title><rect x="1157.4" y="1027.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (3 samples, 0.08%)</title><rect x="1158.1" y="1043.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.1" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.03%)</title><rect x="1158.7" y="1027.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (10 samples, 0.26%)</title><rect x="1159.0" y="1043.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.0" y="1054.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.03%)</title><rect x="1159.9" y="1027.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="1038.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.08%)</title><rect x="1160.2" y="1027.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.2" y="1038.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 0.05%)</title><rect x="1161.1" y="1027.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.1" y="1038.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.03%)</title><rect x="1161.7" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.03%)</title><rect x="1162.0" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.13%)</title><rect x="1162.3" y="1043.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.10%)</title><rect x="1162.6" y="1027.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1163.5" y="1011.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.5" y="1022.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1163.5" y="995.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.08%)</title><rect x="1163.8" y="1043.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.8" y="1054.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.05%)</title><rect x="1163.8" y="1027.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.8" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.03%)</title><rect x="1164.4" y="1027.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.4" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.03%)</title><rect x="1164.4" y="1011.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.4" y="1022.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.03%)</title><rect x="1164.4" y="995.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.4" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1164.4" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.4" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.05%)</title><rect x="1164.7" y="1043.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.03%)</title><rect x="1165.3" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.03%)</title><rect x="1165.6" y="1043.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.6" y="1054.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.03%)</title><rect x="1165.6" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.15%)</title><rect x="1165.9" y="1043.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.9" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.08%)</title><rect x="1166.8" y="1027.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="1038.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1167.4" y="1011.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1170.4" y="1022.0"></text>
</g>
<g>
<title>PhaseRegAlloc::alloc_node_regs(int) (1 samples, 0.03%)</title><rect x="1167.7" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.7" y="1054.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.03%)</title><rect x="1168.0" y="1043.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 1.17%)</title><rect x="1168.3" y="1075.0" width="13.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.3" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.05%)</title><rect x="1168.3" y="1059.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.05%)</title><rect x="1168.3" y="1043.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.08%)</title><rect x="1168.9" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.08%)</title><rect x="1168.9" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.03%)</title><rect x="1169.5" y="1027.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.5" y="1038.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.03%)</title><rect x="1169.5" y="1011.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.5" y="1022.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.03%)</title><rect x="1169.5" y="995.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="1006.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.164] (1 samples, 0.03%)</title><rect x="1169.5" y="979.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.5" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1169.5" y="963.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.03%)</title><rect x="1169.8" y="1059.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.8" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1169.8" y="1043.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (29 samples, 0.74%)</title><rect x="1170.1" y="1059.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.1" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1170.1" y="1043.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.1" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1170.1" y="1027.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1170.1" y="1011.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_range_check(IdealLoopTree*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1170.1" y="995.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_scaled_iv_plus_offset(Node*, Node*, int*, Node**, int) (1 samples, 0.03%)</title><rect x="1170.1" y="979.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.1" y="990.0"></text>
</g>
<g>
<title>AddLNode::Opcode() const (1 samples, 0.03%)</title><rect x="1170.1" y="963.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1170.4" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.03%)</title><rect x="1170.4" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.03%)</title><rect x="1170.4" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.4" y="1022.0"></text>
</g>
<g>
<title>Invariance::visit(Node*, Node*) (1 samples, 0.03%)</title><rect x="1170.4" y="995.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.10%)</title><rect x="1170.7" y="1043.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="1054.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.08%)</title><rect x="1171.0" y="1027.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.13%)</title><rect x="1171.9" y="1043.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1173.1" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1173.1" y="1011.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.182] (1 samples, 0.03%)</title><rect x="1173.1" y="995.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 0.33%)</title><rect x="1173.4" y="1043.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 0.28%)</title><rect x="1174.0" y="1027.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.0" y="1038.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.03%)</title><rect x="1174.3" y="1011.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 0.23%)</title><rect x="1174.6" y="1011.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.6" y="1022.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="1174.6" y="995.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="1006.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1174.6" y="979.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.6" y="990.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1174.6" y="963.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="974.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="1174.6" y="947.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.03%)</title><rect x="1174.9" y="995.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1174.9" y="979.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.03%)</title><rect x="1174.9" y="963.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (7 samples, 0.18%)</title><rect x="1175.2" y="995.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1177.0" y="979.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1180.0" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1177.0" y="963.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1180.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1177.0" y="947.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1180.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.03%)</title><rect x="1177.3" y="1043.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.03%)</title><rect x="1177.3" y="1027.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.03%)</title><rect x="1177.6" y="1043.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="1054.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.03%)</title><rect x="1177.6" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.08%)</title><rect x="1177.9" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.08%)</title><rect x="1177.9" y="1027.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1177.9" y="1011.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="1022.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.05%)</title><rect x="1178.2" y="1011.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.05%)</title><rect x="1178.2" y="995.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="979.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="963.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="947.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="931.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="915.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="899.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.2" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="883.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="867.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="851.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.2" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="835.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.2" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="819.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="803.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="787.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="771.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="755.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.2" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.05%)</title><rect x="1178.2" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1178.2" y="723.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.03%)</title><rect x="1178.2" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1178.2" y="691.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.03%)</title><rect x="1178.5" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="734.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1178.5" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.20%)</title><rect x="1178.8" y="1059.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.20%)</title><rect x="1178.8" y="1043.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="1054.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1179.1" y="1027.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1038.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.03%)</title><rect x="1179.1" y="1011.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="1022.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.03%)</title><rect x="1179.1" y="995.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="1006.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1179.5" y="1027.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="1038.0"></text>
</g>
<g>
<title>IfNode::fold_compares(PhaseIterGVN*) (1 samples, 0.03%)</title><rect x="1179.5" y="1011.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="1022.0"></text>
</g>
<g>
<title>IfNode::has_only_uncommon_traps(ProjNode*, ProjNode*&amp;, ProjNode*&amp;, PhaseIterGVN*) (1 samples, 0.03%)</title><rect x="1179.5" y="995.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="1006.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.03%)</title><rect x="1179.5" y="979.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="990.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.03%)</title><rect x="1179.5" y="963.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1179.8" y="1027.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="1038.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1179.8" y="1011.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.8" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.03%)</title><rect x="1179.8" y="995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1179.8" y="979.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="990.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.03%)</title><rect x="1180.1" y="1027.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.1" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.03%)</title><rect x="1180.4" y="1027.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="1038.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.03%)</title><rect x="1180.7" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="1038.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.03%)</title><rect x="1180.7" y="1011.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1181.0" y="1027.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="1038.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.03%)</title><rect x="1181.0" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.03%)</title><rect x="1181.3" y="1059.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.03%)</title><rect x="1181.3" y="1043.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.03%)</title><rect x="1181.3" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1181.3" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1181.3" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="1006.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1181.3" y="979.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="990.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.05%)</title><rect x="1181.6" y="1059.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1184.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.28%)</title><rect x="1182.2" y="1075.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.28%)</title><rect x="1182.2" y="1059.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.28%)</title><rect x="1182.2" y="1043.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.28%)</title><rect x="1182.2" y="1027.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.28%)</title><rect x="1182.2" y="1011.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.28%)</title><rect x="1182.2" y="995.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.28%)</title><rect x="1182.2" y="979.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.28%)</title><rect x="1182.2" y="963.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="974.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.03%)</title><rect x="1182.2" y="947.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="958.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.285] (1 samples, 0.03%)</title><rect x="1182.2" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="942.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1182.2" y="915.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.03%)</title><rect x="1182.2" y="899.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1182.2" y="883.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1182.2" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.26%)</title><rect x="1182.5" y="947.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.26%)</title><rect x="1182.5" y="931.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.26%)</title><rect x="1182.5" y="915.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.23%)</title><rect x="1182.5" y="899.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.18%)</title><rect x="1182.5" y="883.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.18%)</title><rect x="1182.5" y="867.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.18%)</title><rect x="1182.5" y="851.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.18%)</title><rect x="1182.5" y="835.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.18%)</title><rect x="1182.5" y="819.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.18%)</title><rect x="1182.5" y="803.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1182.5" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1182.5" y="771.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1182.5" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1182.5" y="739.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.5" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1182.5" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1182.5" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1182.5" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1182.5" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1182.5" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1182.5" y="643.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1182.5" y="627.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1182.5" y="611.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1182.8" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1182.8" y="771.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.08%)</title><rect x="1182.8" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.08%)</title><rect x="1182.8" y="739.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.08%)</title><rect x="1182.8" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.08%)</title><rect x="1182.8" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1182.8" y="691.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1182.8" y="675.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1182.8" y="659.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1182.8" y="643.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1182.8" y="627.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1182.8" y="611.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1182.8" y="595.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1182.8" y="579.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1182.8" y="563.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1182.8" y="547.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1182.8" y="531.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1182.8" y="515.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1182.8" y="499.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1182.8" y="483.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1182.8" y="467.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1182.8" y="451.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1182.8" y="435.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1182.8" y="419.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1182.8" y="403.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1182.8" y="387.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1182.8" y="371.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1182.8" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1182.8" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1182.8" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="334.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.03%)</title><rect x="1182.8" y="307.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="318.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.03%)</title><rect x="1182.8" y="291.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.03%)</title><rect x="1182.8" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1182.8" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.03%)</title><rect x="1182.8" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1182.8" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1183.1" y="515.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="526.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1183.1" y="499.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="510.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1183.1" y="483.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="494.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.03%)</title><rect x="1183.1" y="467.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1183.1" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="462.0"></text>
</g>
<g>
<title>MergeMemNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1183.1" y="435.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="1183.4" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1183.4" y="643.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1183.7" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1183.7" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1183.7" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.08%)</title><rect x="1183.7" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.08%)</title><rect x="1183.7" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.08%)</title><rect x="1183.7" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.08%)</title><rect x="1183.7" y="691.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1183.7" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1183.7" y="659.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.08%)</title><rect x="1183.7" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.08%)</title><rect x="1183.7" y="627.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.08%)</title><rect x="1183.7" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.08%)</title><rect x="1183.7" y="595.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1183.7" y="579.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1183.7" y="563.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1183.7" y="547.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1183.7" y="531.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1183.7" y="515.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1183.7" y="499.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1183.7" y="483.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.03%)</title><rect x="1183.7" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="478.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.03%)</title><rect x="1183.7" y="451.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.7" y="462.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.03%)</title><rect x="1183.7" y="435.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1183.7" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.7" y="430.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1183.7" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="414.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.03%)</title><rect x="1183.7" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="398.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1183.7" y="371.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="382.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="1183.7" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1184.0" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1184.0" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1184.0" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1184.0" y="419.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1184.0" y="403.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1184.0" y="387.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1184.0" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1184.0" y="355.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1184.0" y="339.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1184.0" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1184.0" y="307.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1184.0" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1184.0" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1184.0" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1184.0" y="243.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1184.0" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1184.0" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="222.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1184.0" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1184.3" y="579.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1184.3" y="563.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1184.3" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1184.3" y="531.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1184.3" y="515.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1184.3" y="499.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1184.3" y="483.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1184.3" y="467.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1184.3" y="451.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1184.3" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1184.3" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1184.3" y="403.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1184.3" y="387.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1184.3" y="371.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1184.3" y="355.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1184.3" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1184.3" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1184.3" y="307.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1184.3" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1184.3" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.3" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1184.3" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1184.3" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1184.3" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1184.3" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1184.3" y="195.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1184.3" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="190.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1184.3" y="163.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1184.6" y="883.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1184.6" y="867.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1184.6" y="851.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1184.6" y="835.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1184.6" y="819.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1184.6" y="803.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1184.6" y="787.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1184.6" y="771.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1184.6" y="755.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1184.6" y="739.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1184.6" y="723.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1184.6" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1184.6" y="691.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1184.6" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1184.6" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1184.6" y="643.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1184.6" y="627.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1184.6" y="611.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1184.6" y="595.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1184.6" y="579.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1184.6" y="563.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1184.6" y="547.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1184.6" y="531.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1184.6" y="515.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1184.6" y="499.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1184.6" y="483.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1184.6" y="467.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1184.6" y="451.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1184.6" y="435.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1184.6" y="419.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1184.6" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1184.6" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1184.6" y="371.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1184.6" y="355.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1184.6" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1184.6" y="323.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1184.6" y="307.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.6" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1184.6" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1184.6" y="275.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1184.6" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1184.6" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1184.6" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1184.6" y="211.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1184.6" y="195.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1184.6" y="179.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1184.6" y="163.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1184.6" y="147.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1184.6" y="131.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1184.6" y="115.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1184.6" y="99.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1184.6" y="83.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="94.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1184.6" y="67.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.6" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1184.6" y="51.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1184.6" y="35.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1184.9" y="403.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1184.9" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1184.9" y="371.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.9" y="382.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.03%)</title><rect x="1184.9" y="355.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1185.2" y="899.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1185.2" y="883.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="894.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1185.2" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="878.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1185.2" y="851.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.2" y="862.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1185.2" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="846.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1185.2" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="830.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1185.2" y="803.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="814.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.03%)</title><rect x="1185.2" y="787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="798.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1185.2" y="771.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="782.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.05%)</title><rect x="1185.5" y="1075.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="1086.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.05%)</title><rect x="1185.5" y="1059.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.5" y="1070.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.03%)</title><rect x="1186.1" y="1075.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.1" y="1086.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.03%)</title><rect x="1186.1" y="1059.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1070.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1186.1" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="1054.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_abstract() (1 samples, 0.03%)</title><rect x="1186.1" y="1027.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.1" y="1038.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.05%)</title><rect x="1186.4" y="1107.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.4" y="1118.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.05%)</title><rect x="1186.4" y="1091.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.4" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.05%)</title><rect x="1186.4" y="1075.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.4" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.05%)</title><rect x="1186.4" y="1059.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.4" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.05%)</title><rect x="1186.4" y="1043.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.4" y="1054.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.05%)</title><rect x="1186.4" y="1027.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.4" y="1038.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.03%)</title><rect x="1186.4" y="1011.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.4" y="1022.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.03%)</title><rect x="1186.4" y="995.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.4" y="1006.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.03%)</title><rect x="1186.4" y="979.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="990.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.03%)</title><rect x="1186.4" y="963.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.4" y="974.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.03%)</title><rect x="1186.7" y="1011.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="1022.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.03%)</title><rect x="1186.7" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (1 samples, 0.03%)</title><rect x="1187.0" y="1123.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.0" y="1134.0"></text>
</g>
<g>
<title>CompileBroker::make_thread(_jobject*, CompileQueue*, AbstractCompiler*, bool, Thread*) [clone .constprop.267] (1 samples, 0.03%)</title><rect x="1187.0" y="1107.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.0" y="1118.0"></text>
</g>
<g>
<title>Threads::add(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1187.0" y="1091.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.0" y="1102.0"></text>
</g>
<g>
<title>ThreadService::add_thread(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1187.0" y="1075.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.0" y="1086.0"></text>
</g>
<g>
<title>CompilerThread::can_call_java() const (1 samples, 0.03%)</title><rect x="1187.0" y="1059.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.0" y="1070.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="1187.3" y="1139.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.3" y="1150.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.03%)</title><rect x="1187.3" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.3" y="1134.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.03%)</title><rect x="1187.3" y="1107.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.3" y="1118.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.03%)</title><rect x="1187.3" y="1091.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1190.3" y="1102.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.03%)</title><rect x="1187.3" y="1075.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="1086.0"></text>
</g>
<g>
<title>WatcherThread::run() (8 samples, 0.20%)</title><rect x="1187.6" y="1171.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.6" y="1182.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="1187.6" y="1155.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.6" y="1166.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.05%)</title><rect x="1187.9" y="1155.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="1166.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.03%)</title><rect x="1188.2" y="1139.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.2" y="1150.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (5 samples, 0.13%)</title><rect x="1188.5" y="1155.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.5" y="1166.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.10%)</title><rect x="1188.8" y="1139.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="1150.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1188.8" y="1123.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="1134.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.08%)</title><rect x="1189.1" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="1134.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="1189.1" y="1107.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1192.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.1" y="1091.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.1" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.1" y="1075.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1192.1" y="1086.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1189.4" y="1107.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.4" y="1118.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1189.7" y="1107.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1192.7" y="1118.0"></text>
</g>
</g>
</svg>
