<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="677"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="677"> </text>
<g id="frames">
<g>
<title>all (217,337 samples, 100.00%)</title><rect x="10.0" y="643.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="654.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (217,331 samples, 100.00%)</title><rect x="10.0" y="627.0" width="1180.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="638.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (217,331 samples, 100.00%)</title><rect x="10.0" y="611.0" width="1180.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="622.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (217,331 samples, 100.00%)</title><rect x="10.0" y="595.0" width="1180.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="606.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (217,331 samples, 100.00%)</title><rect x="10.0" y="579.0" width="1180.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="590.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (217,331 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="574.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (217,331 samples, 100.00%)</title><rect x="10.0" y="547.0" width="1180.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="558.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (217,331 samples, 100.00%)</title><rect x="10.0" y="531.0" width="1180.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="542.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entities (217,331 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="526.0">ru/mail/polis/service/igorlo/AsyncService.entities</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (106,977 samples, 49.22%)</title><rect x="10.0" y="499.0" width="580.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="510.0">ru/mail/polis/dao/DAO.range</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (99,162 samples, 45.63%)</title><rect x="10.0" y="483.0" width="538.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="494.0">ru/mail/polis/dao/Iters.until</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (99,162 samples, 45.63%)</title><rect x="10.0" y="467.0" width="538.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="478.0">ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt;</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (99,162 samples, 45.63%)</title><rect x="10.0" y="451.0" width="538.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="462.0">com/google/common/collect/TransformedIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (99,162 samples, 45.63%)</title><rect x="10.0" y="435.0" width="538.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="446.0">com/google/common/collect/AbstractIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (99,162 samples, 45.63%)</title><rect x="10.0" y="419.0" width="538.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="430.0">com/google/common/collect/AbstractIterator.tryToComputeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (99,162 samples, 45.63%)</title><rect x="10.0" y="403.0" width="538.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="414.0">com/google/common/collect/Iterators$5.computeNext</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (99,162 samples, 45.63%)</title><rect x="10.0" y="387.0" width="538.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="398.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (87,706 samples, 40.35%)</title><rect x="10.0" y="371.0" width="476.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="382.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (35,188 samples, 16.19%)</title><rect x="10.0" y="355.0" width="191.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/util/AbstractQueue.r..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (35,188 samples, 16.19%)</title><rect x="10.0" y="339.0" width="191.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="350.0">java/util/PriorityQueue.p..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (35,188 samples, 16.19%)</title><rect x="10.0" y="323.0" width="191.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/util/PriorityQueue.s..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (35,188 samples, 16.19%)</title><rect x="10.0" y="307.0" width="191.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="318.0">com/google/common/collect..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (35,188 samples, 16.19%)</title><rect x="10.0" y="291.0" width="191.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="302.0">com/google/common/collect..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (35,188 samples, 16.19%)</title><rect x="10.0" y="275.0" width="191.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="286.0">ru/mail/polis/dao/igorlo/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (35,188 samples, 16.19%)</title><rect x="10.0" y="259.0" width="191.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="270.0">ru/mail/polis/dao/igorlo/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (35,188 samples, 16.19%)</title><rect x="10.0" y="243.0" width="191.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/util/Comparator$$Lam..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (35,188 samples, 16.19%)</title><rect x="10.0" y="227.0" width="191.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="238.0">java/util/Comparator.lamb..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (35,188 samples, 16.19%)</title><rect x="10.0" y="211.0" width="191.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="222.0">java/util/Comparator$$Lam..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (35,188 samples, 16.19%)</title><rect x="10.0" y="195.0" width="191.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="206.0">java/util/Comparator.lamb..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (35,188 samples, 16.19%)</title><rect x="10.0" y="179.0" width="191.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="190.0">java/util/Comparator$$Lam..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (35,188 samples, 16.19%)</title><rect x="10.0" y="163.0" width="191.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="174.0">java/util/Comparator.lamb..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (35,188 samples, 16.19%)</title><rect x="10.0" y="147.0" width="191.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="158.0">ru/mail/polis/dao/igorlo/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (35,188 samples, 16.19%)</title><rect x="10.0" y="131.0" width="191.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="142.0">ru/mail/polis/dao/igorlo/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (35,188 samples, 16.19%)</title><rect x="10.0" y="115.0" width="191.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="126.0">java/nio/DirectByteBuffer..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (35,188 samples, 16.19%)</title><rect x="10.0" y="99.0" width="191.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="110.0">java/nio/DirectByteBuffer..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (35,188 samples, 16.19%)</title><rect x="10.0" y="83.0" width="191.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="13.0" y="94.0">java.nio.DirectByteBufferR</text>
</g>
<g>
<title>java/util/PriorityQueue.add (52,518 samples, 24.16%)</title><rect x="201.1" y="355.0" width="285.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.1" y="366.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (52,518 samples, 24.16%)</title><rect x="201.1" y="339.0" width="285.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.1" y="350.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (52,518 samples, 24.16%)</title><rect x="201.1" y="323.0" width="285.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.1" y="334.0">java/util/PriorityQueue.siftUp</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (52,518 samples, 24.16%)</title><rect x="201.1" y="307.0" width="285.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.1" y="318.0">java/util/PriorityQueue.siftUpUsingCom..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (52,518 samples, 24.16%)</title><rect x="201.1" y="291.0" width="285.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.1" y="302.0">com/google/common/collect/Iterators$Me..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (52,518 samples, 24.16%)</title><rect x="201.1" y="275.0" width="285.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.1" y="286.0">com/google/common/collect/Iterators$Me..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (40,848 samples, 18.79%)</title><rect x="201.1" y="259.0" width="221.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.1" y="270.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (40,848 samples, 18.79%)</title><rect x="201.1" y="243.0" width="221.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.1" y="254.0">ru/mail/polis/dao/igorlo/SSTa..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (40,848 samples, 18.79%)</title><rect x="201.1" y="227.0" width="221.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.1" y="238.0">ru/mail/polis/dao/igorlo/SSTa..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (40,848 samples, 18.79%)</title><rect x="201.1" y="211.0" width="221.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="204.1" y="222.0">ru/mail/polis/dao/igorlo/SSTa..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (11,762 samples, 5.41%)</title><rect x="201.1" y="195.0" width="63.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="204.1" y="206.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5,675 samples, 2.61%)</title><rect x="201.1" y="179.0" width="30.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.1" y="190.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5,675 samples, 2.61%)</title><rect x="201.1" y="163.0" width="30.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.1" y="174.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (5,675 samples, 2.61%)</title><rect x="201.1" y="147.0" width="30.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="204.1" y="158.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (6,087 samples, 2.80%)</title><rect x="231.9" y="179.0" width="33.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.9" y="190.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (6,087 samples, 2.80%)</title><rect x="231.9" y="163.0" width="33.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="234.9" y="174.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (11,693 samples, 5.38%)</title><rect x="265.0" y="195.0" width="63.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.0" y="206.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5,922 samples, 2.72%)</title><rect x="265.0" y="179.0" width="32.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.0" y="190.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5,922 samples, 2.72%)</title><rect x="265.0" y="163.0" width="32.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.0" y="174.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (5,922 samples, 2.72%)</title><rect x="265.0" y="147.0" width="32.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="268.0" y="158.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (5,771 samples, 2.66%)</title><rect x="297.1" y="179.0" width="31.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.1" y="190.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (5,771 samples, 2.66%)</title><rect x="297.1" y="163.0" width="31.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="300.1" y="174.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (6,023 samples, 2.77%)</title><rect x="328.4" y="195.0" width="32.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.4" y="206.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6,023 samples, 2.77%)</title><rect x="328.4" y="179.0" width="32.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.4" y="190.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6,023 samples, 2.77%)</title><rect x="328.4" y="163.0" width="32.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.4" y="174.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (6,023 samples, 2.77%)</title><rect x="328.4" y="147.0" width="32.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="331.4" y="158.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (5,710 samples, 2.63%)</title><rect x="361.1" y="195.0" width="31.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="364.1" y="206.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2,925 samples, 1.35%)</title><rect x="361.1" y="179.0" width="15.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.1" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,925 samples, 1.35%)</title><rect x="361.1" y="163.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.1" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,925 samples, 1.35%)</title><rect x="361.1" y="147.0" width="15.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="364.1" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2,785 samples, 1.28%)</title><rect x="377.0" y="179.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="380.0" y="190.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,785 samples, 1.28%)</title><rect x="377.0" y="163.0" width="15.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="380.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (2,948 samples, 1.36%)</title><rect x="392.1" y="195.0" width="16.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.1" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (2,948 samples, 1.36%)</title><rect x="392.1" y="179.0" width="16.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="395.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (1,419 samples, 0.65%)</title><rect x="408.2" y="195.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.2" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (1,419 samples, 0.65%)</title><rect x="408.2" y="179.0" width="7.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="411.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (1,293 samples, 0.59%)</title><rect x="415.9" y="195.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="418.9" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (1,293 samples, 0.59%)</title><rect x="415.9" y="179.0" width="7.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="418.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (11,670 samples, 5.37%)</title><rect x="422.9" y="259.0" width="63.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.9" y="270.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (11,670 samples, 5.37%)</title><rect x="422.9" y="243.0" width="63.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.9" y="254.0">ru/mail..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (11,670 samples, 5.37%)</title><rect x="422.9" y="227.0" width="63.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="425.9" y="238.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11,670 samples, 5.37%)</title><rect x="422.9" y="211.0" width="63.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.9" y="222.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (11,670 samples, 5.37%)</title><rect x="422.9" y="195.0" width="63.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.9" y="206.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11,670 samples, 5.37%)</title><rect x="422.9" y="179.0" width="63.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.9" y="190.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (11,670 samples, 5.37%)</title><rect x="422.9" y="163.0" width="63.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="425.9" y="174.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (11,670 samples, 5.37%)</title><rect x="422.9" y="147.0" width="63.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.9" y="158.0">java/ut..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (11,670 samples, 5.37%)</title><rect x="422.9" y="131.0" width="63.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.9" y="142.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (11,670 samples, 5.37%)</title><rect x="422.9" y="115.0" width="63.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="425.9" y="126.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (11,670 samples, 5.37%)</title><rect x="422.9" y="99.0" width="63.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="425.9" y="110.0">java/ni..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (11,670 samples, 5.37%)</title><rect x="422.9" y="83.0" width="63.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.9" y="94.0">java/ni..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (11,670 samples, 5.37%)</title><rect x="422.9" y="67.0" width="63.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="425.9" y="78.0">java.ni..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (11,456 samples, 5.27%)</title><rect x="486.2" y="371.0" width="62.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="489.2" y="382.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (11,456 samples, 5.27%)</title><rect x="486.2" y="355.0" width="62.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="489.2" y="366.0">ru/mai..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (11,456 samples, 5.27%)</title><rect x="486.2" y="339.0" width="62.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="489.2" y="350.0">java/n..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (11,456 samples, 5.27%)</title><rect x="486.2" y="323.0" width="62.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="489.2" y="334.0">java/n..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (11,456 samples, 5.27%)</title><rect x="486.2" y="307.0" width="62.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="489.2" y="318.0">java.n..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (7,814 samples, 3.60%)</title><rect x="548.4" y="483.0" width="42.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.4" y="494.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (7,814 samples, 3.60%)</title><rect x="548.4" y="467.0" width="42.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.4" y="478.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (7,778 samples, 3.58%)</title><rect x="548.6" y="451.0" width="42.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="551.6" y="462.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (7,776 samples, 3.58%)</title><rect x="548.6" y="435.0" width="42.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="551.6" y="446.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (7,776 samples, 3.58%)</title><rect x="548.6" y="419.0" width="42.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.6" y="430.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (7,772 samples, 3.58%)</title><rect x="548.6" y="403.0" width="42.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="551.6" y="414.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (7,772 samples, 3.58%)</title><rect x="548.6" y="387.0" width="42.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="551.6" y="398.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (7,772 samples, 3.58%)</title><rect x="548.6" y="371.0" width="42.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="551.6" y="382.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (7,772 samples, 3.58%)</title><rect x="548.6" y="355.0" width="42.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.6" y="366.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (7,772 samples, 3.58%)</title><rect x="548.6" y="339.0" width="42.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.6" y="350.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (7,772 samples, 3.58%)</title><rect x="548.6" y="323.0" width="42.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="551.6" y="334.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7,772 samples, 3.58%)</title><rect x="548.6" y="307.0" width="42.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.6" y="318.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (7,772 samples, 3.58%)</title><rect x="548.6" y="291.0" width="42.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="551.6" y="302.0">java..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (110,352 samples, 50.77%)</title><rect x="590.9" y="499.0" width="599.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="593.9" y="510.0">ru/mail/polis/service/igorlo/StorageSession.stream</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.next (110,352 samples, 50.77%)</title><rect x="590.9" y="483.0" width="599.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="593.9" y="494.0">ru/mail/polis/service/igorlo/StorageSession.next</text>
</g>
<g>
<title>one/nio/net/Session.write (797 samples, 0.37%)</title><rect x="590.9" y="467.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="593.9" y="478.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (797 samples, 0.37%)</title><rect x="590.9" y="451.0" width="4.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="593.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession$Chunks.next (109,555 samples, 50.41%)</title><rect x="595.2" y="467.0" width="594.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="598.2" y="478.0">ru/mail/polis/service/igorlo/StorageSession$Chunks.next</text>
</g>
<g>
<title>byte[] (879 samples, 0.40%)</title><rect x="595.2" y="451.0" width="4.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="598.2" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.toHexString (286 samples, 0.13%)</title><rect x="600.0" y="451.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="603.0" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.toUnsignedString0 (286 samples, 0.13%)</title><rect x="600.0" y="435.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="603.0" y="446.0"></text>
</g>
<g>
<title>byte[] (286 samples, 0.13%)</title><rect x="600.0" y="419.0" width="1.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="603.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (253 samples, 0.12%)</title><rect x="601.5" y="451.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="604.5" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (253 samples, 0.12%)</title><rect x="601.5" y="435.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.5" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (253 samples, 0.12%)</title><rect x="601.5" y="419.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="604.5" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (253 samples, 0.12%)</title><rect x="601.5" y="403.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.5" y="414.0"></text>
</g>
<g>
<title>byte[] (253 samples, 0.12%)</title><rect x="601.5" y="387.0" width="1.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="604.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (1,155 samples, 0.53%)</title><rect x="602.9" y="451.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="605.9" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,155 samples, 0.53%)</title><rect x="602.9" y="435.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="605.9" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,155 samples, 0.53%)</title><rect x="602.9" y="419.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="605.9" y="430.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,155 samples, 0.53%)</title><rect x="602.9" y="403.0" width="6.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="605.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (1,032 samples, 0.47%)</title><rect x="609.2" y="451.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="612.2" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,032 samples, 0.47%)</title><rect x="609.2" y="435.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="612.2" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,032 samples, 0.47%)</title><rect x="609.2" y="419.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="612.2" y="430.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,032 samples, 0.47%)</title><rect x="609.2" y="403.0" width="5.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="612.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (102,779 samples, 47.29%)</title><rect x="614.8" y="451.0" width="558.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="617.8" y="462.0">ru/mail/polis/dao/Iters$UntilIterator.next</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (102,779 samples, 47.29%)</title><rect x="614.8" y="435.0" width="558.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.8" y="446.0">ru/mail/polis/dao/Iters$UntilIterator.next</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (100,169 samples, 46.09%)</title><rect x="614.8" y="419.0" width="543.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="617.8" y="430.0">com/google/common/collect/TransformedIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (100,169 samples, 46.09%)</title><rect x="614.8" y="403.0" width="543.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="617.8" y="414.0">com/google/common/collect/AbstractIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (100,169 samples, 46.09%)</title><rect x="614.8" y="387.0" width="543.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="617.8" y="398.0">com/google/common/collect/AbstractIterator.tryToComputeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (100,169 samples, 46.09%)</title><rect x="614.8" y="371.0" width="543.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.8" y="382.0">com/google/common/collect/Iterators$5.computeNext</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (100,169 samples, 46.09%)</title><rect x="614.8" y="355.0" width="543.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.8" y="366.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (87,909 samples, 40.45%)</title><rect x="614.8" y="339.0" width="477.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.8" y="350.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (31,543 samples, 14.51%)</title><rect x="614.8" y="323.0" width="171.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="617.8" y="334.0">java/util/AbstractQueu..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (31,543 samples, 14.51%)</title><rect x="614.8" y="307.0" width="171.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="617.8" y="318.0">java/util/PriorityQueu..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (31,543 samples, 14.51%)</title><rect x="614.8" y="291.0" width="171.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="617.8" y="302.0">java/util/PriorityQueu..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (31,543 samples, 14.51%)</title><rect x="614.8" y="275.0" width="171.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.8" y="286.0">com/google/common/coll..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (31,543 samples, 14.51%)</title><rect x="614.8" y="259.0" width="171.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.8" y="270.0">com/google/common/coll..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (31,543 samples, 14.51%)</title><rect x="614.8" y="243.0" width="171.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="617.8" y="254.0">ru/mail/polis/dao/igor..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (31,543 samples, 14.51%)</title><rect x="614.8" y="227.0" width="171.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="617.8" y="238.0">ru/mail/polis/dao/igor..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (31,543 samples, 14.51%)</title><rect x="614.8" y="211.0" width="171.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="617.8" y="222.0">java/util/Comparator$$..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (31,543 samples, 14.51%)</title><rect x="614.8" y="195.0" width="171.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="617.8" y="206.0">java/util/Comparator.l..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (31,543 samples, 14.51%)</title><rect x="614.8" y="179.0" width="171.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.8" y="190.0">java/util/Comparator$$..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (31,543 samples, 14.51%)</title><rect x="614.8" y="163.0" width="171.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="617.8" y="174.0">java/util/Comparator.l..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (31,543 samples, 14.51%)</title><rect x="614.8" y="147.0" width="171.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.8" y="158.0">java/util/Comparator$$..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (31,543 samples, 14.51%)</title><rect x="614.8" y="131.0" width="171.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="617.8" y="142.0">java/util/Comparator.l..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (31,543 samples, 14.51%)</title><rect x="614.8" y="115.0" width="171.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.8" y="126.0">ru/mail/polis/dao/igor..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (31,543 samples, 14.51%)</title><rect x="614.8" y="99.0" width="171.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="617.8" y="110.0">ru/mail/polis/dao/igor..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (31,543 samples, 14.51%)</title><rect x="614.8" y="83.0" width="171.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="617.8" y="94.0">java/nio/DirectByteBuf..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (31,543 samples, 14.51%)</title><rect x="614.8" y="67.0" width="171.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.8" y="78.0">java/nio/DirectByteBuf..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (31,543 samples, 14.51%)</title><rect x="614.8" y="51.0" width="171.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="617.8" y="62.0">java.nio.DirectByteBuf..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (56,366 samples, 25.93%)</title><rect x="786.0" y="323.0" width="306.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="789.0" y="334.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (56,366 samples, 25.93%)</title><rect x="786.0" y="307.0" width="306.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="789.0" y="318.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (56,366 samples, 25.93%)</title><rect x="786.0" y="291.0" width="306.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="789.0" y="302.0">java/util/PriorityQueue.siftUp</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (56,366 samples, 25.93%)</title><rect x="786.0" y="275.0" width="306.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.0" y="286.0">java/util/PriorityQueue.siftUpUsingCompar..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (56,366 samples, 25.93%)</title><rect x="786.0" y="259.0" width="306.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.0" y="270.0">com/google/common/collect/Iterators$Mergi..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (56,366 samples, 25.93%)</title><rect x="786.0" y="243.0" width="306.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="789.0" y="254.0">com/google/common/collect/Iterators$Mergi..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (43,764 samples, 20.14%)</title><rect x="786.0" y="227.0" width="237.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="789.0" y="238.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (43,764 samples, 20.14%)</title><rect x="786.0" y="211.0" width="237.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.0" y="222.0">ru/mail/polis/dao/igorlo/SSTabl..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (43,764 samples, 20.14%)</title><rect x="786.0" y="195.0" width="237.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="789.0" y="206.0">ru/mail/polis/dao/igorlo/SSTabl..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (43,764 samples, 20.14%)</title><rect x="786.0" y="179.0" width="237.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="789.0" y="190.0">ru/mail/polis/dao/igorlo/SSTabl..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (12,043 samples, 5.54%)</title><rect x="786.0" y="163.0" width="65.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="789.0" y="174.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5,835 samples, 2.68%)</title><rect x="786.0" y="147.0" width="31.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="789.0" y="158.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5,835 samples, 2.68%)</title><rect x="786.0" y="131.0" width="31.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.0" y="142.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (5,835 samples, 2.68%)</title><rect x="786.0" y="115.0" width="31.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="789.0" y="126.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (6,208 samples, 2.86%)</title><rect x="817.7" y="147.0" width="33.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="820.7" y="158.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (6,208 samples, 2.86%)</title><rect x="817.7" y="131.0" width="33.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="820.7" y="142.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (12,522 samples, 5.76%)</title><rect x="851.4" y="163.0" width="68.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="854.4" y="174.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6,335 samples, 2.91%)</title><rect x="851.4" y="147.0" width="34.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="854.4" y="158.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6,335 samples, 2.91%)</title><rect x="851.4" y="131.0" width="34.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.4" y="142.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (6,335 samples, 2.91%)</title><rect x="851.4" y="115.0" width="34.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="854.4" y="126.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (6,187 samples, 2.85%)</title><rect x="885.8" y="147.0" width="33.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="888.8" y="158.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (6,187 samples, 2.85%)</title><rect x="885.8" y="131.0" width="33.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="888.8" y="142.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (6,052 samples, 2.78%)</title><rect x="919.4" y="163.0" width="32.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.4" y="174.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6,052 samples, 2.78%)</title><rect x="919.4" y="147.0" width="32.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.4" y="158.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6,052 samples, 2.78%)</title><rect x="919.4" y="131.0" width="32.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="922.4" y="142.0">ja..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (6,052 samples, 2.78%)</title><rect x="919.4" y="115.0" width="32.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="922.4" y="126.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (7,238 samples, 3.33%)</title><rect x="952.2" y="163.0" width="39.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="955.2" y="174.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3,646 samples, 1.68%)</title><rect x="952.2" y="147.0" width="19.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="955.2" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3,646 samples, 1.68%)</title><rect x="952.2" y="131.0" width="19.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="955.2" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (3,646 samples, 1.68%)</title><rect x="952.2" y="115.0" width="19.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="955.2" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3,592 samples, 1.65%)</title><rect x="972.0" y="147.0" width="19.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="975.0" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (3,592 samples, 1.65%)</title><rect x="972.0" y="131.0" width="19.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="975.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (2,817 samples, 1.30%)</title><rect x="991.5" y="163.0" width="15.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="994.5" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (2,817 samples, 1.30%)</title><rect x="991.5" y="147.0" width="15.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="994.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (1,907 samples, 0.88%)</title><rect x="1006.8" y="163.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1009.8" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (1,907 samples, 0.88%)</title><rect x="1006.8" y="147.0" width="10.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1009.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (1,185 samples, 0.55%)</title><rect x="1017.2" y="163.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1020.2" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (1,185 samples, 0.55%)</title><rect x="1017.2" y="147.0" width="6.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1020.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/1799357758.compare (12,602 samples, 5.80%)</title><rect x="1023.6" y="227.0" width="68.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1026.6" y="238.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (12,602 samples, 5.80%)</title><rect x="1023.6" y="211.0" width="68.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1026.6" y="222.0">ru/mail..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (12,602 samples, 5.80%)</title><rect x="1023.6" y="195.0" width="68.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1026.6" y="206.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (12,602 samples, 5.80%)</title><rect x="1023.6" y="179.0" width="68.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1026.6" y="190.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$80/1990546855.compare (12,602 samples, 5.80%)</title><rect x="1023.6" y="163.0" width="68.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1026.6" y="174.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (12,602 samples, 5.80%)</title><rect x="1023.6" y="147.0" width="68.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1026.6" y="158.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$78/176690171.compare (12,602 samples, 5.80%)</title><rect x="1023.6" y="131.0" width="68.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1026.6" y="142.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (12,602 samples, 5.80%)</title><rect x="1023.6" y="115.0" width="68.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1026.6" y="126.0">java/ut..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$77/702195752.apply (12,602 samples, 5.80%)</title><rect x="1023.6" y="99.0" width="68.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1026.6" y="110.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (12,602 samples, 5.80%)</title><rect x="1023.6" y="83.0" width="68.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1026.6" y="94.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12,602 samples, 5.80%)</title><rect x="1023.6" y="67.0" width="68.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1026.6" y="78.0">java/ni..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12,602 samples, 5.80%)</title><rect x="1023.6" y="51.0" width="68.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1026.6" y="62.0">java/ni..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (12,602 samples, 5.80%)</title><rect x="1023.6" y="35.0" width="68.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1026.6" y="46.0">java.ni..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$68/970701722.apply (12,260 samples, 5.64%)</title><rect x="1092.0" y="339.0" width="66.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1095.0" y="350.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (12,260 samples, 5.64%)</title><rect x="1092.0" y="323.0" width="66.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1095.0" y="334.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12,260 samples, 5.64%)</title><rect x="1092.0" y="307.0" width="66.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1095.0" y="318.0">java/ni..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12,260 samples, 5.64%)</title><rect x="1092.0" y="291.0" width="66.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1095.0" y="302.0">java/ni..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (12,260 samples, 5.64%)</title><rect x="1092.0" y="275.0" width="66.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1095.0" y="286.0">java.ni..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (2,610 samples, 1.20%)</title><rect x="1158.6" y="419.0" width="14.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1161.6" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (2,610 samples, 1.20%)</title><rect x="1158.6" y="403.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1161.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$75/540352630.apply (2,610 samples, 1.20%)</title><rect x="1158.6" y="387.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1161.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (2,610 samples, 1.20%)</title><rect x="1158.6" y="371.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1161.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (425 samples, 0.20%)</title><rect x="1158.6" y="355.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1161.6" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (425 samples, 0.20%)</title><rect x="1158.6" y="339.0" width="2.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1161.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (1,083 samples, 0.50%)</title><rect x="1160.9" y="355.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1163.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,083 samples, 0.50%)</title><rect x="1160.9" y="339.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1163.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,083 samples, 0.50%)</title><rect x="1160.9" y="323.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1163.9" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,083 samples, 0.50%)</title><rect x="1160.9" y="307.0" width="5.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1163.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (1,102 samples, 0.51%)</title><rect x="1166.8" y="355.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1169.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,102 samples, 0.51%)</title><rect x="1166.8" y="339.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1169.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,102 samples, 0.51%)</title><rect x="1166.8" y="323.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1169.8" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,102 samples, 0.51%)</title><rect x="1166.8" y="307.0" width="6.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1169.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.bufferToArray (3,171 samples, 1.46%)</title><rect x="1172.8" y="451.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1175.8" y="462.0"></text>
</g>
<g>
<title>byte[] (1,036 samples, 0.48%)</title><rect x="1172.8" y="435.0" width="5.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1175.8" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2,135 samples, 0.98%)</title><rect x="1178.4" y="435.0" width="11.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1181.4" y="446.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (2,135 samples, 0.98%)</title><rect x="1178.4" y="419.0" width="11.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
</g>
</svg>
