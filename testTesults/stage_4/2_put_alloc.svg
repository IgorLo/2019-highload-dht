<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (3,608 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.03%)</title><rect x="10.0" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.3" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.06%)</title><rect x="10.7" y="883.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.7" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="11.3" y="883.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.3" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="11.3" y="867.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.3" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="11.3" y="851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.3" y="862.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="11.3" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.3" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="11.6" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="11.6" y="851.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.6" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="11.6" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="11.6" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.6" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="11.6" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.03%)</title><rect x="11.6" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="12.0" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.0" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="12.0" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="12.0" y="851.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.0" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="12.0" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="12.0" y="819.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.0" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="12.0" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.0" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::par_allocate(HeapRegion*, unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="12.0" y="787.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.08%)</title><rect x="12.3" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.3" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="12.6" y="867.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="12.6" y="851.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.6" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="12.6" y="835.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="12.6" y="819.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="12.6" y="803.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.6" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="12.9" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="12.9" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="12.9" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.9" y="782.0"></text>
</g>
<g>
<title>HSpaceCounters::update_used(unsigned long) (1 samples, 0.03%)</title><rect x="12.9" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.9" y="766.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.03%)</title><rect x="13.3" y="883.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.3" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="13.3" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.3" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (54 samples, 1.50%)</title><rect x="13.6" y="883.0" width="17.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.6" y="894.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="13.9" y="867.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.9" y="878.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (2 samples, 0.06%)</title><rect x="14.3" y="867.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.3" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="14.9" y="867.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.9" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.03%)</title><rect x="15.2" y="867.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.2" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="15.6" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.6" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (45 samples, 1.25%)</title><rect x="15.9" y="867.0" width="14.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.9" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="15.9" y="851.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="18.9" y="862.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="15.9" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="18.9" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (36 samples, 1.00%)</title><rect x="16.2" y="851.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.2" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (14 samples, 0.39%)</title><rect x="17.5" y="835.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="20.5" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (12 samples, 0.33%)</title><rect x="22.1" y="835.0" width="3.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="25.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.33%)</title><rect x="22.1" y="819.0" width="3.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="25.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.33%)</title><rect x="22.1" y="803.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="25.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="25.4" y="787.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="28.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="25.4" y="771.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="28.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="25.4" y="755.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="28.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="25.4" y="739.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="28.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="25.7" y="723.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="28.7" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.06%)</title><rect x="26.0" y="835.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="29.0" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.03%)</title><rect x="26.7" y="835.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="29.7" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.06%)</title><rect x="27.0" y="835.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="30.0" y="846.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="27.3" y="819.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="30.3" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="27.7" y="835.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="30.7" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.19%)</title><rect x="28.0" y="851.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="31.0" y="862.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="30.3" y="851.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="33.3" y="862.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.03%)</title><rect x="30.6" y="867.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="33.6" y="878.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="30.9" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="33.9" y="878.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="31.3" y="883.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="34.3" y="894.0"></text>
</g>
<g>
<title>[not_walkable] (5 samples, 0.14%)</title><rect x="31.6" y="883.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="34.6" y="894.0"></text>
</g>
<g>
<title>[not_walkable_Java] (7 samples, 0.19%)</title><rect x="33.2" y="883.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="36.2" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="33.2" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="36.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.08%)</title><rect x="33.5" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="36.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.08%)</title><rect x="33.5" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="36.5" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.06%)</title><rect x="33.5" y="835.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="36.5" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.06%)</title><rect x="33.5" y="819.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="36.5" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="33.9" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="36.9" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="34.2" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="37.2" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.08%)</title><rect x="34.5" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="37.5" y="878.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.06%)</title><rect x="34.9" y="851.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="37.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="35.5" y="883.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="38.5" y="894.0"></text>
</g>
<g>
<title>WatcherThread::~WatcherThread() (1 samples, 0.03%)</title><rect x="35.5" y="867.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="38.5" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.5" y="851.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="38.5" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.5" y="835.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="38.5" y="846.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="35.5" y="819.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="38.5" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="35.5" y="803.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="38.5" y="814.0"></text>
</g>
<g>
<title>__GI___open64 (1 samples, 0.03%)</title><rect x="35.8" y="867.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="38.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.8" y="851.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="38.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.8" y="835.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="38.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.8" y="819.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="38.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.8" y="803.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="38.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.8" y="787.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="38.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.8" y="771.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="38.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.8" y="755.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="38.8" y="766.0"></text>
</g>
<g>
<title>__new_sem_wait_slow.constprop.0 (1 samples, 0.03%)</title><rect x="36.2" y="867.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="39.2" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (79 samples, 2.19%)</title><rect x="36.5" y="883.0" width="25.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="39.5" y="894.0">[..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="51.9" y="867.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="54.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="52.2" y="867.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="55.2" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="52.2" y="851.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="55.2" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="52.5" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="55.5" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="52.8" y="867.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="55.8" y="878.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (28 samples, 0.78%)</title><rect x="53.2" y="867.0" width="9.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="56.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.75%)</title><rect x="53.5" y="851.0" width="8.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="56.5" y="862.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.75%)</title><rect x="53.5" y="835.0" width="8.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="56.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.72%)</title><rect x="53.8" y="819.0" width="8.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="56.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.64%)</title><rect x="54.8" y="803.0" width="7.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="57.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.64%)</title><rect x="54.8" y="787.0" width="7.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="57.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.58%)</title><rect x="55.5" y="771.0" width="6.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="58.5" y="782.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.50%)</title><rect x="56.4" y="755.0" width="5.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="59.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.47%)</title><rect x="56.8" y="739.0" width="5.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="59.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="61.7" y="723.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="64.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="61.7" y="707.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="64.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="61.7" y="691.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="64.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="61.7" y="675.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="64.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="61.7" y="659.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="64.7" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (19 samples, 0.53%)</title><rect x="62.3" y="883.0" width="6.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="65.3" y="894.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.42%)</title><rect x="63.6" y="867.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="66.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.42%)</title><rect x="63.6" y="851.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="66.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.36%)</title><rect x="64.3" y="835.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="67.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.36%)</title><rect x="64.3" y="819.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="67.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.36%)</title><rect x="64.3" y="803.0" width="4.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="67.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.36%)</title><rect x="64.3" y="787.0" width="4.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="67.3" y="798.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="65.6" y="771.0" width="2.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="68.6" y="782.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.19%)</title><rect x="66.3" y="755.0" width="2.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="69.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="67.9" y="739.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="70.9" y="750.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.06%)</title><rect x="68.5" y="883.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="71.5" y="894.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="69.2" y="883.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="72.2" y="894.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.03%)</title><rect x="69.5" y="883.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="72.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,195 samples, 60.84%)</title><rect x="69.9" y="883.0" width="717.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.9" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,195 samples, 60.84%)</title><rect x="69.9" y="867.0" width="717.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="72.9" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,195 samples, 60.84%)</title><rect x="69.9" y="851.0" width="717.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.9" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 0.14%)</title><rect x="71.2" y="835.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.14%)</title><rect x="72.8" y="835.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.14%)</title><rect x="72.8" y="819.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.14%)</title><rect x="72.8" y="803.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (502 samples, 13.91%)</title><rect x="74.4" y="835.0" width="164.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.4" y="846.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (493 samples, 13.66%)</title><rect x="77.4" y="819.0" width="161.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.4" y="830.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (5 samples, 0.14%)</title><rect x="77.4" y="803.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.06%)</title><rect x="79.0" y="803.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.03%)</title><rect x="79.7" y="803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (377 samples, 10.45%)</title><rect x="80.0" y="803.0" width="123.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.0" y="814.0">java/util/concu..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (7 samples, 0.19%)</title><rect x="82.9" y="787.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 0.55%)</title><rect x="85.2" y="787.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="90.1" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="93.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="90.1" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="93.1" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="90.1" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="90.1" y="723.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="93.1" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.03%)</title><rect x="90.1" y="707.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="93.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="90.1" y="691.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="93.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="90.1" y="675.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="93.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="90.1" y="659.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="93.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="90.1" y="643.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="93.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="90.1" y="627.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="93.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="90.1" y="611.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="93.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.11%)</title><rect x="90.5" y="771.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.11%)</title><rect x="90.5" y="755.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="91.4" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="91.4" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="94.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="91.4" y="707.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (39 samples, 1.08%)</title><rect x="91.8" y="787.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (39 samples, 1.08%)</title><rect x="91.8" y="771.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 0.64%)</title><rect x="96.0" y="755.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="99.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.64%)</title><rect x="96.0" y="739.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.08%)</title><rect x="96.3" y="723.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.3" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.53%)</title><rect x="97.3" y="723.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (1 samples, 0.03%)</title><rect x="97.3" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="100.3" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="97.6" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="100.6" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="98.0" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="101.0" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.11%)</title><rect x="98.3" y="707.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="101.3" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="98.3" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="101.3" y="702.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="98.6" y="691.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="101.6" y="702.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.06%)</title><rect x="99.0" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="102.0" y="702.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (12 samples, 0.33%)</title><rect x="99.6" y="707.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="102.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="100.6" y="691.0" width="2.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="103.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="100.6" y="675.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="103.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="100.6" y="659.0" width="2.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="103.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="100.6" y="643.0" width="2.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="103.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="100.6" y="627.0" width="2.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="103.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="100.6" y="611.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="103.6" y="622.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="100.6" y="595.0" width="2.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="103.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="100.6" y="579.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="103.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.08%)</title><rect x="103.5" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="104.5" y="787.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.03%)</title><rect x="104.5" y="771.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (300 samples, 8.31%)</title><rect x="104.8" y="787.0" width="98.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="107.8" y="798.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (298 samples, 8.26%)</title><rect x="105.5" y="771.0" width="97.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.5" y="782.0">jdk/interna..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="108.8" y="755.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="111.8" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.03%)</title><rect x="109.1" y="755.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="112.1" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (146 samples, 4.05%)</title><rect x="109.4" y="755.0" width="47.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="112.4" y="766.0">Unsa..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="112.4" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="115.4" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.11%)</title><rect x="112.7" y="739.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="115.7" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="114.0" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="117.0" y="750.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="114.3" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="117.3" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (44 samples, 1.22%)</title><rect x="114.7" y="739.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="117.7" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.08%)</title><rect x="122.5" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="125.5" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (8 samples, 0.22%)</title><rect x="123.5" y="723.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="126.5" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (6 samples, 0.17%)</title><rect x="124.1" y="707.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="127.1" y="718.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.08%)</title><rect x="126.1" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="129.1" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.17%)</title><rect x="127.1" y="723.0" width="1.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="130.1" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.06%)</title><rect x="129.0" y="739.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="132.0" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.06%)</title><rect x="129.7" y="739.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="132.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="130.0" y="723.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="133.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="130.0" y="707.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="133.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="130.0" y="691.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="133.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="130.0" y="675.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="133.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="130.0" y="659.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="133.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="130.0" y="643.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="133.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="130.0" y="627.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="133.0" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (2 samples, 0.06%)</title><rect x="130.4" y="739.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="133.4" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (51 samples, 1.41%)</title><rect x="131.0" y="739.0" width="16.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="134.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 1.14%)</title><rect x="134.3" y="723.0" width="13.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="137.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 1.14%)</title><rect x="134.3" y="707.0" width="13.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="137.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.44%)</title><rect x="142.5" y="691.0" width="5.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="145.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.39%)</title><rect x="143.1" y="675.0" width="4.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="146.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.36%)</title><rect x="143.4" y="659.0" width="4.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="146.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.14%)</title><rect x="146.1" y="643.0" width="1.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="149.1" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.06%)</title><rect x="147.7" y="739.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="150.7" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.17%)</title><rect x="148.3" y="739.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="151.3" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.19%)</title><rect x="150.3" y="739.0" width="2.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="153.3" y="750.0"></text>
</g>
<g>
<title>_init (2 samples, 0.06%)</title><rect x="152.6" y="739.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="155.6" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.08%)</title><rect x="153.2" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="156.2" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.25%)</title><rect x="154.2" y="739.0" width="3.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="157.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (132 samples, 3.66%)</title><rect x="157.2" y="755.0" width="43.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="160.2" y="766.0">[unk..</text>
</g>
<g>
<title>__pthread_cleanup_pop (3 samples, 0.08%)</title><rect x="157.2" y="739.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="160.2" y="750.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (3 samples, 0.08%)</title><rect x="158.2" y="739.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="161.2" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (103 samples, 2.85%)</title><rect x="159.1" y="739.0" width="33.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="162.1" y="750.0">__..</text>
</g>
<g>
<title>[unknown] (64 samples, 1.77%)</title><rect x="171.9" y="723.0" width="20.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="174.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 1.77%)</title><rect x="171.9" y="707.0" width="20.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="174.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.41%)</title><rect x="176.1" y="691.0" width="16.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="179.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.41%)</title><rect x="176.1" y="675.0" width="16.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="179.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.39%)</title><rect x="176.5" y="659.0" width="16.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="179.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.33%)</title><rect x="177.1" y="643.0" width="15.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="180.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.86%)</title><rect x="182.7" y="627.0" width="10.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="185.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.55%)</title><rect x="186.3" y="611.0" width="6.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="189.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.39%)</title><rect x="188.2" y="595.0" width="4.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="191.2" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="192.2" y="579.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="195.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="192.2" y="563.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="195.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="192.2" y="547.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="195.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="192.2" y="531.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="195.2" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="192.2" y="515.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="195.2" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="192.2" y="499.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="195.2" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="192.2" y="483.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="195.2" y="494.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.14%)</title><rect x="192.8" y="739.0" width="1.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="195.8" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="194.5" y="739.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="197.5" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (7 samples, 0.19%)</title><rect x="194.8" y="739.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="197.8" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.17%)</title><rect x="197.1" y="739.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="200.1" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (4 samples, 0.11%)</title><rect x="199.0" y="739.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="202.0" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.08%)</title><rect x="200.3" y="755.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="203.3" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.14%)</title><rect x="201.3" y="755.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="204.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="202.6" y="739.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="205.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="202.6" y="723.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="205.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="202.6" y="707.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="205.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="202.6" y="691.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="205.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="202.6" y="675.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="205.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="202.6" y="659.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="205.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="202.6" y="643.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="205.6" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="203.0" y="787.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.06%)</title><rect x="203.3" y="803.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.06%)</title><rect x="203.3" y="787.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.06%)</title><rect x="203.3" y="771.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="203.6" y="755.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.08%)</title><rect x="203.9" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="206.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.25%)</title><rect x="204.9" y="803.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.25%)</title><rect x="204.9" y="787.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.25%)</title><rect x="204.9" y="771.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.06%)</title><rect x="207.2" y="755.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.06%)</title><rect x="207.2" y="739.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.2" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.06%)</title><rect x="207.2" y="723.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="207.2" y="707.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="210.2" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.06%)</title><rect x="207.2" y="691.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="210.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="207.5" y="675.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="210.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="207.5" y="659.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="210.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="207.5" y="643.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="210.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="207.5" y="627.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="210.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="207.5" y="611.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="210.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="207.5" y="595.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="210.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="207.5" y="579.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="210.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (94 samples, 2.61%)</title><rect x="207.9" y="803.0" width="30.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.9" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (94 samples, 2.61%)</title><rect x="207.9" y="787.0" width="30.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.9" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (93 samples, 2.58%)</title><rect x="207.9" y="771.0" width="30.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.9" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 2.11%)</title><rect x="213.1" y="755.0" width="24.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.1" y="766.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (76 samples, 2.11%)</title><rect x="213.1" y="739.0" width="24.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.1" y="750.0">j..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="214.1" y="723.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="217.1" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="214.4" y="723.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="217.4" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (14 samples, 0.39%)</title><rect x="214.7" y="723.0" width="4.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="217.7" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="215.7" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="218.7" y="718.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="216.0" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="219.0" y="718.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="216.4" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="219.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (1 samples, 0.03%)</title><rect x="216.7" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="219.7" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="217.0" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="220.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="217.0" y="691.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="220.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="217.0" y="675.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="220.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="217.0" y="659.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="220.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="217.0" y="643.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="220.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="217.0" y="627.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="220.0" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="217.0" y="611.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="220.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="217.0" y="595.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="220.0" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.06%)</title><rect x="217.4" y="707.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="220.4" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.08%)</title><rect x="218.0" y="707.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="221.0" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="219.0" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="222.0" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (57 samples, 1.58%)</title><rect x="219.3" y="723.0" width="18.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="222.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.50%)</title><rect x="220.3" y="707.0" width="17.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="223.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (54 samples, 1.50%)</title><rect x="220.3" y="691.0" width="17.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="223.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.39%)</title><rect x="221.6" y="675.0" width="16.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="224.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.39%)</title><rect x="221.6" y="659.0" width="16.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="224.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.39%)</title><rect x="221.6" y="643.0" width="16.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="224.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 1.33%)</title><rect x="222.3" y="627.0" width="15.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="225.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 1.16%)</title><rect x="224.2" y="611.0" width="13.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="227.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 1.11%)</title><rect x="224.9" y="595.0" width="13.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="227.9" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="237.6" y="579.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="240.6" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="237.6" y="563.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="240.6" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="237.6" y="547.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="240.6" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="237.6" y="531.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="240.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="237.6" y="515.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="240.6" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="237.6" y="499.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="240.6" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="237.6" y="483.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="240.6" y="494.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="238.0" y="755.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="241.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="238.3" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.03%)</title><rect x="238.3" y="755.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.3" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$FlushingTask.run (80 samples, 2.22%)</title><rect x="238.6" y="835.0" width="26.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.6" y="846.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.flushAndLoad (80 samples, 2.22%)</title><rect x="238.6" y="819.0" width="26.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.6" y="830.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.flush (80 samples, 2.22%)</title><rect x="238.6" y="803.0" width="26.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.6" y="814.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.06%)</title><rect x="238.9" y="787.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.06%)</title><rect x="238.9" y="771.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (4 samples, 0.11%)</title><rect x="239.6" y="787.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.6" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.11%)</title><rect x="239.6" y="771.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.6" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.11%)</title><rect x="239.6" y="755.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.6" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.08%)</title><rect x="239.6" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.6" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="239.6" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.6" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="239.6" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.6" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="240.2" y="691.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.2" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="240.6" y="739.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="243.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (2 samples, 0.06%)</title><rect x="240.9" y="787.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.9" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="241.2" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.2" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="241.2" y="755.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.2" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="241.2" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="241.2" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.2" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (71 samples, 1.97%)</title><rect x="241.6" y="787.0" width="23.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.6" y="798.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (4 samples, 0.11%)</title><rect x="241.6" y="771.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.6" y="782.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.11%)</title><rect x="241.6" y="755.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="241.6" y="739.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.6" y="750.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.08%)</title><rect x="241.9" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.9" y="750.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.08%)</title><rect x="241.9" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.08%)</title><rect x="241.9" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.9" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="241.9" y="691.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="244.9" y="702.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.03%)</title><rect x="242.5" y="691.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="245.5" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (64 samples, 1.77%)</title><rect x="242.9" y="771.0" width="20.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.9" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (59 samples, 1.64%)</title><rect x="243.2" y="755.0" width="19.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (59 samples, 1.64%)</title><rect x="243.2" y="739.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (59 samples, 1.64%)</title><rect x="243.2" y="723.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 1.52%)</title><rect x="243.8" y="707.0" width="18.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="246.8" y="718.0"></text>
</g>
<g>
<title>__write (55 samples, 1.52%)</title><rect x="243.8" y="691.0" width="18.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="246.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.36%)</title><rect x="245.8" y="675.0" width="16.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="248.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 1.36%)</title><rect x="245.8" y="659.0" width="16.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="248.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.25%)</title><rect x="247.1" y="643.0" width="14.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="250.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.25%)</title><rect x="247.1" y="627.0" width="14.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="250.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 1.25%)</title><rect x="247.1" y="611.0" width="14.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="250.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 1.19%)</title><rect x="247.8" y="595.0" width="14.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="250.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 1.16%)</title><rect x="248.1" y="579.0" width="13.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="251.1" y="590.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 1.11%)</title><rect x="248.7" y="563.0" width="13.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="251.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 1.05%)</title><rect x="249.4" y="547.0" width="12.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="252.4" y="558.0"></text>
</g>
<g>
<title>[unknown] (37 samples, 1.03%)</title><rect x="249.7" y="531.0" width="12.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="252.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (37 samples, 1.03%)</title><rect x="249.7" y="515.0" width="12.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="252.7" y="526.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.97%)</title><rect x="250.4" y="499.0" width="11.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="253.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.86%)</title><rect x="251.7" y="483.0" width="10.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="254.7" y="494.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.78%)</title><rect x="252.7" y="467.0" width="9.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="255.7" y="478.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.64%)</title><rect x="254.3" y="451.0" width="7.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="257.3" y="462.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.58%)</title><rect x="255.0" y="435.0" width="6.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="258.0" y="446.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.50%)</title><rect x="255.9" y="419.0" width="5.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="258.9" y="430.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.44%)</title><rect x="256.6" y="403.0" width="5.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="259.6" y="414.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.28%)</title><rect x="258.6" y="387.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="261.6" y="398.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.25%)</title><rect x="258.9" y="371.0" width="2.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="261.9" y="382.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.19%)</title><rect x="259.5" y="355.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="262.5" y="366.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.14%)</title><rect x="260.2" y="339.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="263.2" y="350.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="260.8" y="323.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="263.8" y="334.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="261.8" y="707.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="264.8" y="718.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="262.2" y="707.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="265.2" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="262.5" y="755.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocateDirect (1 samples, 0.03%)</title><rect x="262.5" y="739.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.5" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.5" y="723.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.5" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.setMemory (1 samples, 0.03%)</title><rect x="262.5" y="707.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.5" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.setMemory (1 samples, 0.03%)</title><rect x="262.5" y="691.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.setMemory0 (1 samples, 0.03%)</title><rect x="262.5" y="675.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.5" y="686.0"></text>
</g>
<g>
<title>Unsafe_SetMemory0 (1 samples, 0.03%)</title><rect x="262.5" y="659.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="265.5" y="670.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (1 samples, 0.03%)</title><rect x="262.5" y="643.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="265.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="262.5" y="627.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="265.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="262.5" y="611.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="265.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="262.5" y="595.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="265.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="262.8" y="739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.8" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="262.8" y="723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.8" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="262.8" y="707.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="262.8" y="691.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.8" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="262.8" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="263.1" y="755.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.1" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.06%)</title><rect x="263.1" y="739.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.1" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="263.1" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.1" y="734.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="263.5" y="723.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="266.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.08%)</title><rect x="263.8" y="771.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="266.8" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.08%)</title><rect x="263.8" y="755.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.8" y="766.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (2 samples, 0.06%)</title><rect x="264.1" y="739.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="267.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run (1,599 samples, 44.32%)</title><rect x="264.8" y="835.0" width="522.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.8" y="846.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$64/1422043020.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4 (1,599 samples, 44.32%)</title><rect x="264.8" y="819.0" width="522.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.8" y="830.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,359 samples, 37.67%)</title><rect x="264.8" y="803.0" width="444.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="267.8" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (11 samples, 0.30%)</title><rect x="268.4" y="787.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.30%)</title><rect x="268.4" y="771.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.11%)</title><rect x="268.7" y="755.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.06%)</title><rect x="269.4" y="739.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.17%)</title><rect x="270.0" y="755.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.06%)</title><rect x="271.3" y="739.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.06%)</title><rect x="271.3" y="723.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.3" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,282 samples, 35.53%)</title><rect x="272.0" y="787.0" width="419.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.0" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (48 samples, 1.33%)</title><rect x="272.0" y="771.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="274.9" y="755.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="277.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="274.9" y="739.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="277.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="274.9" y="723.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="277.9" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (38 samples, 1.05%)</title><rect x="275.2" y="755.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.06%)</title><rect x="275.2" y="739.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.06%)</title><rect x="275.2" y="723.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.2" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.03%)</title><rect x="275.9" y="739.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (20 samples, 0.55%)</title><rect x="276.2" y="739.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.17%)</title><rect x="280.5" y="723.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.5" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4 samples, 0.11%)</title><rect x="281.1" y="707.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="284.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="282.4" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (15 samples, 0.42%)</title><rect x="282.8" y="739.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (15 samples, 0.42%)</title><rect x="282.8" y="723.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.14%)</title><rect x="285.4" y="707.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (4 samples, 0.11%)</title><rect x="285.7" y="691.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.7" y="702.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (2 samples, 0.06%)</title><rect x="287.0" y="707.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.0" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,234 samples, 34.20%)</title><rect x="287.7" y="771.0" width="403.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.7" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,234 samples, 34.20%)</title><rect x="287.7" y="755.0" width="403.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.7" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,234 samples, 34.20%)</title><rect x="287.7" y="739.0" width="403.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.7" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,234 samples, 34.20%)</title><rect x="287.7" y="723.0" width="403.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.7" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.08%)</title><rect x="292.9" y="707.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="295.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.41%)</title><rect x="293.9" y="707.0" width="16.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="296.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 1.41%)</title><rect x="293.9" y="691.0" width="16.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="296.9" y="702.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (43 samples, 1.19%)</title><rect x="293.9" y="675.0" width="14.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="296.9" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.06%)</title><rect x="295.5" y="659.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="298.5" y="670.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="296.2" y="659.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="299.2" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.03%)</title><rect x="296.5" y="659.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="299.5" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (3 samples, 0.08%)</title><rect x="296.8" y="659.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="299.8" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3 (6 samples, 0.17%)</title><rect x="297.8" y="659.0" width="2.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="300.8" y="670.0"></text>
</g>
<g>
<title>_init (2 samples, 0.06%)</title><rect x="299.8" y="659.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="302.8" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (20 samples, 0.55%)</title><rect x="300.4" y="659.0" width="6.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="303.4" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.08%)</title><rect x="302.1" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="305.1" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (4 samples, 0.11%)</title><rect x="303.0" y="643.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="306.0" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.14%)</title><rect x="304.3" y="643.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="307.3" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.08%)</title><rect x="306.0" y="643.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="309.0" y="654.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.08%)</title><rect x="307.0" y="659.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="310.0" y="670.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.11%)</title><rect x="307.9" y="675.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="310.9" y="686.0"></text>
</g>
<g>
<title>__send (3 samples, 0.08%)</title><rect x="309.3" y="675.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="312.3" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="310.2" y="675.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="313.2" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.06%)</title><rect x="310.6" y="707.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="313.6" y="718.0"></text>
</g>
<g>
<title>__send (1,162 samples, 32.21%)</title><rect x="311.2" y="707.0" width="380.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="314.2" y="718.0">__send</text>
</g>
<g>
<title>[unknown] (1,150 samples, 31.87%)</title><rect x="315.1" y="691.0" width="376.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="318.1" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,150 samples, 31.87%)</title><rect x="315.1" y="675.0" width="376.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="318.1" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,138 samples, 31.54%)</title><rect x="319.1" y="659.0" width="372.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="322.1" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,137 samples, 31.51%)</title><rect x="319.4" y="643.0" width="371.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="322.4" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,130 samples, 31.32%)</title><rect x="321.7" y="627.0" width="369.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="324.7" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,121 samples, 31.07%)</title><rect x="324.6" y="611.0" width="366.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="327.6" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,115 samples, 30.90%)</title><rect x="326.6" y="595.0" width="364.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="329.6" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,106 samples, 30.65%)</title><rect x="329.5" y="579.0" width="361.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="332.5" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,060 samples, 29.38%)</title><rect x="344.6" y="563.0" width="346.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="347.6" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,004 samples, 27.83%)</title><rect x="362.9" y="547.0" width="328.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="365.9" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (965 samples, 26.75%)</title><rect x="375.6" y="531.0" width="315.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="378.6" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (904 samples, 25.06%)</title><rect x="395.6" y="515.0" width="295.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="398.6" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (823 samples, 22.81%)</title><rect x="422.1" y="499.0" width="269.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="425.1" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (796 samples, 22.06%)</title><rect x="430.9" y="483.0" width="260.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="433.9" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (776 samples, 21.51%)</title><rect x="437.5" y="467.0" width="253.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="440.5" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (758 samples, 21.01%)</title><rect x="443.3" y="451.0" width="247.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="446.3" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (741 samples, 20.54%)</title><rect x="448.9" y="435.0" width="242.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="451.9" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (709 samples, 19.65%)</title><rect x="459.4" y="419.0" width="231.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="462.4" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (676 samples, 18.74%)</title><rect x="470.2" y="403.0" width="221.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="473.2" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (621 samples, 17.21%)</title><rect x="488.1" y="387.0" width="203.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="491.1" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (538 samples, 14.91%)</title><rect x="515.3" y="371.0" width="175.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="518.3" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (514 samples, 14.25%)</title><rect x="523.1" y="355.0" width="168.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="526.1" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (494 samples, 13.69%)</title><rect x="529.7" y="339.0" width="161.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="532.7" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (479 samples, 13.28%)</title><rect x="534.6" y="323.0" width="156.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="537.6" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (468 samples, 12.97%)</title><rect x="538.2" y="307.0" width="153.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="541.2" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (457 samples, 12.67%)</title><rect x="541.8" y="291.0" width="149.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="544.8" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (452 samples, 12.53%)</title><rect x="543.4" y="275.0" width="147.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="546.4" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (435 samples, 12.06%)</title><rect x="549.0" y="259.0" width="142.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="552.0" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (420 samples, 11.64%)</title><rect x="553.9" y="243.0" width="137.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="556.9" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (412 samples, 11.42%)</title><rect x="556.5" y="227.0" width="134.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="559.5" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (406 samples, 11.25%)</title><rect x="558.5" y="211.0" width="132.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="561.5" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (396 samples, 10.98%)</title><rect x="561.7" y="195.0" width="129.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="564.7" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (374 samples, 10.37%)</title><rect x="568.9" y="179.0" width="122.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="571.9" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (342 samples, 9.48%)</title><rect x="579.4" y="163.0" width="111.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="582.4" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (326 samples, 9.04%)</title><rect x="584.6" y="147.0" width="106.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="587.6" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (265 samples, 7.34%)</title><rect x="604.6" y="131.0" width="86.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="607.6" y="142.0">[unknown]</text>
</g>
<g>
<title>[unknown] (207 samples, 5.74%)</title><rect x="623.5" y="115.0" width="67.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="626.5" y="126.0">[unknown]</text>
</g>
<g>
<title>[unknown] (183 samples, 5.07%)</title><rect x="631.4" y="99.0" width="59.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="634.4" y="110.0">[unkno..</text>
</g>
<g>
<title>[unknown] (174 samples, 4.82%)</title><rect x="634.3" y="83.0" width="56.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="637.3" y="94.0">[unkno..</text>
</g>
<g>
<title>[unknown] (18 samples, 0.50%)</title><rect x="685.4" y="67.0" width="5.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="688.4" y="78.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.42%)</title><rect x="686.3" y="51.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="689.3" y="62.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.36%)</title><rect x="687.0" y="35.0" width="4.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="690.0" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (44 samples, 1.22%)</title><rect x="691.2" y="787.0" width="14.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="694.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (18 samples, 0.50%)</title><rect x="692.9" y="771.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="695.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="692.9" y="755.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="695.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.47%)</title><rect x="693.2" y="755.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="696.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (8 samples, 0.22%)</title><rect x="695.8" y="739.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="698.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.17%)</title><rect x="696.5" y="723.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="699.5" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.03%)</title><rect x="698.4" y="739.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="701.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (21 samples, 0.58%)</title><rect x="698.8" y="771.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="701.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (11 samples, 0.30%)</title><rect x="699.1" y="755.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="702.1" y="766.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="699.1" y="739.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="702.1" y="750.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.11%)</title><rect x="699.4" y="739.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="702.4" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.17%)</title><rect x="700.7" y="739.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="703.7" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="700.7" y="723.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="703.7" y="734.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.11%)</title><rect x="701.4" y="723.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="704.4" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="701.7" y="707.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="704.7" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.25%)</title><rect x="702.7" y="755.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="705.7" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.25%)</title><rect x="702.7" y="739.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="705.7" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (4 samples, 0.11%)</title><rect x="705.6" y="787.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="708.6" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.08%)</title><rect x="706.0" y="771.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="709.0" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.06%)</title><rect x="706.0" y="755.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="709.0" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="706.6" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="709.6" y="766.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (7 samples, 0.19%)</title><rect x="706.9" y="787.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (7 samples, 0.19%)</title><rect x="706.9" y="771.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$76/369077687.action (240 samples, 6.65%)</title><rect x="709.2" y="803.0" width="78.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="712.2" y="814.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$2 (237 samples, 6.57%)</title><rect x="710.2" y="787.0" width="77.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="713.2" y="798.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (237 samples, 6.57%)</title><rect x="710.2" y="771.0" width="77.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="713.2" y="782.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.28%)</title><rect x="711.2" y="755.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="714.2" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.22%)</title><rect x="711.9" y="739.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="714.9" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.19%)</title><rect x="712.2" y="723.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="715.2" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.19%)</title><rect x="712.2" y="707.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="715.2" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="714.1" y="691.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.1" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getBody (4 samples, 0.11%)</title><rect x="714.5" y="755.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="717.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.06%)</title><rect x="715.8" y="755.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.upsert (218 samples, 6.04%)</title><rect x="716.4" y="755.0" width="71.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.4" y="766.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.upsert (218 samples, 6.04%)</title><rect x="716.4" y="739.0" width="71.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="719.4" y="750.0">ru/mail/..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="716.8" y="723.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="719.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.03%)</title><rect x="717.4" y="723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="720.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.03%)</title><rect x="717.4" y="707.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="720.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.03%)</title><rect x="717.4" y="691.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="717.4" y="675.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="720.4" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="717.4" y="659.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="720.4" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="717.4" y="643.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="720.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.readLock (1 samples, 0.03%)</title><rect x="717.7" y="723.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="720.7" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="718.1" y="723.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="721.1" y="734.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="718.1" y="707.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="721.1" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="718.1" y="691.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="721.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.upsert (183 samples, 5.07%)</title><rect x="718.7" y="723.0" width="59.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.7" y="734.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (182 samples, 5.04%)</title><rect x="718.7" y="707.0" width="59.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="721.7" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (182 samples, 5.04%)</title><rect x="718.7" y="691.0" width="59.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="721.7" y="702.0">java/u..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="736.7" y="675.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="739.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="736.7" y="659.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="739.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="736.7" y="643.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="739.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="736.7" y="627.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="739.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="736.7" y="611.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="739.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="737.0" y="595.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="740.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="737.0" y="579.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="740.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (5 samples, 0.14%)</title><rect x="737.4" y="675.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (2 samples, 0.06%)</title><rect x="739.0" y="675.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="742.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (2 samples, 0.06%)</title><rect x="739.0" y="659.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="742.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/Striped64.casBase (1 samples, 0.03%)</title><rect x="739.3" y="643.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="742.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (1 samples, 0.03%)</title><rect x="739.3" y="627.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="742.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="739.3" y="611.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="742.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (11 samples, 0.30%)</title><rect x="739.7" y="675.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (3 samples, 0.08%)</title><rect x="739.7" y="659.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="742.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="740.0" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="743.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="740.3" y="643.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="743.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="740.3" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.3" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="740.3" y="611.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.22%)</title><rect x="740.6" y="659.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="743.6" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.22%)</title><rect x="740.6" y="643.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="743.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.22%)</title><rect x="740.6" y="627.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="743.6" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.14%)</title><rect x="741.0" y="611.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="744.0" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.06%)</title><rect x="741.6" y="595.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="744.6" y="606.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="742.3" y="595.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="745.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.06%)</title><rect x="742.6" y="611.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.6" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.06%)</title><rect x="742.6" y="595.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="745.6" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="742.9" y="579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="745.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (106 samples, 2.94%)</title><rect x="743.2" y="675.0" width="34.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="746.2" y="686.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (100 samples, 2.77%)</title><rect x="745.2" y="659.0" width="32.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="748.2" y="670.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (81 samples, 2.25%)</title><rect x="751.4" y="643.0" width="26.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="754.4" y="654.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="752.7" y="627.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="755.7" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.06%)</title><rect x="753.1" y="627.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="756.1" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (64 samples, 1.77%)</title><rect x="753.7" y="627.0" width="20.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="756.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.2" y="611.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="764.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.2" y="595.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="764.2" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.2" y="579.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="764.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.2" y="563.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="764.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.2" y="547.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="764.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.2" y="531.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="764.2" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="761.2" y="515.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="764.2" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 0.55%)</title><rect x="761.6" y="611.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="764.6" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (10 samples, 0.28%)</title><rect x="764.8" y="595.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (20 samples, 0.55%)</title><rect x="768.1" y="611.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="771.1" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.08%)</title><rect x="773.7" y="595.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="776.7" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.28%)</title><rect x="774.6" y="627.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="777.6" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.14%)</title><rect x="776.0" y="611.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.0" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.03%)</title><rect x="777.6" y="611.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (1 samples, 0.03%)</title><rect x="777.9" y="675.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (1 samples, 0.03%)</title><rect x="778.2" y="707.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="781.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (28 samples, 0.78%)</title><rect x="778.6" y="723.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="781.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (25 samples, 0.69%)</title><rect x="779.6" y="707.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="782.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (7 samples, 0.19%)</title><rect x="779.6" y="691.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="782.6" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="781.5" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="784.5" y="686.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="781.5" y="659.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="784.5" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="781.5" y="643.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="784.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (15 samples, 0.42%)</title><rect x="781.8" y="691.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="784.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (15 samples, 0.42%)</title><rect x="781.8" y="675.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="784.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (15 samples, 0.42%)</title><rect x="781.8" y="659.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.8" y="670.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="782.2" y="643.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="785.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (10 samples, 0.28%)</title><rect x="782.5" y="643.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="785.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (10 samples, 0.28%)</title><rect x="782.5" y="627.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="785.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (10 samples, 0.28%)</title><rect x="782.5" y="611.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.5" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="785.1" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.1" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="785.1" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="785.4" y="595.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="785.4" y="579.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.4" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="785.8" y="643.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="788.8" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="785.8" y="627.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="788.8" y="638.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="786.1" y="627.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="789.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="786.4" y="611.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="789.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.08%)</title><rect x="786.7" y="691.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="789.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.08%)</title><rect x="786.7" y="675.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="789.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.08%)</title><rect x="786.7" y="659.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (3 samples, 0.08%)</title><rect x="786.7" y="643.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="789.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="787.4" y="627.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="790.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="787.4" y="611.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="790.4" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="787.4" y="595.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="790.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="787.4" y="579.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="790.4" y="590.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,131 samples, 31.35%)</title><rect x="787.7" y="883.0" width="369.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="790.7" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.03%)</title><rect x="795.9" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="798.9" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="796.2" y="867.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="799.2" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.14%)</title><rect x="796.6" y="867.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="799.6" y="878.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="796.6" y="851.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.6" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.06%)</title><rect x="796.9" y="851.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.9" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="797.2" y="835.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="800.2" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="797.5" y="851.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="800.5" y="862.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="797.9" y="851.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="800.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.03%)</title><rect x="798.2" y="867.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.2" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (15 samples, 0.42%)</title><rect x="798.5" y="867.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="801.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (15 samples, 0.42%)</title><rect x="798.5" y="851.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="801.5" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.03%)</title><rect x="803.1" y="835.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.1" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (1 samples, 0.03%)</title><rect x="803.4" y="867.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.4" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (223 samples, 6.18%)</title><rect x="803.8" y="867.0" width="72.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.8" y="878.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.06%)</title><rect x="804.7" y="851.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="807.7" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (218 samples, 6.04%)</title><rect x="805.4" y="851.0" width="71.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="808.4" y="862.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.11%)</title><rect x="808.0" y="835.0" width="1.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="811.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (198 samples, 5.49%)</title><rect x="809.3" y="835.0" width="64.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="812.3" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="809.3" y="819.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="812.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="809.3" y="803.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="812.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="809.3" y="787.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="812.3" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="809.3" y="771.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="812.3" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="809.3" y="755.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="812.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="809.3" y="739.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="812.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="809.6" y="723.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="812.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="809.6" y="707.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="812.6" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="810.0" y="819.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="813.0" y="830.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.08%)</title><rect x="810.3" y="819.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="813.3" y="830.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (4 samples, 0.11%)</title><rect x="811.3" y="819.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="814.3" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="812.6" y="819.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="815.6" y="830.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.11%)</title><rect x="812.9" y="819.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="815.9" y="830.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="813.6" y="803.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="816.6" y="814.0"></text>
</g>
<g>
<title>epoll_wait (183 samples, 5.07%)</title><rect x="814.2" y="819.0" width="59.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="817.2" y="830.0">epoll_..</text>
</g>
<g>
<title>[unknown] (166 samples, 4.60%)</title><rect x="819.8" y="803.0" width="54.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="822.8" y="814.0">[unkn..</text>
</g>
<g>
<title>[unknown] (166 samples, 4.60%)</title><rect x="819.8" y="787.0" width="54.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="822.8" y="798.0">[unkn..</text>
</g>
<g>
<title>[unknown] (153 samples, 4.24%)</title><rect x="824.0" y="771.0" width="50.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="827.0" y="782.0">[unkn..</text>
</g>
<g>
<title>[unknown] (152 samples, 4.21%)</title><rect x="824.4" y="755.0" width="49.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="827.4" y="766.0">[unkn..</text>
</g>
<g>
<title>[unknown] (152 samples, 4.21%)</title><rect x="824.4" y="739.0" width="49.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="827.4" y="750.0">[unkn..</text>
</g>
<g>
<title>[unknown] (137 samples, 3.80%)</title><rect x="829.3" y="723.0" width="44.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="832.3" y="734.0">[unk..</text>
</g>
<g>
<title>[unknown] (100 samples, 2.77%)</title><rect x="841.4" y="707.0" width="32.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="844.4" y="718.0">[u..</text>
</g>
<g>
<title>[unknown] (71 samples, 1.97%)</title><rect x="850.8" y="691.0" width="23.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="853.8" y="702.0">[..</text>
</g>
<g>
<title>[unknown] (56 samples, 1.55%)</title><rect x="855.8" y="675.0" width="18.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="858.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.94%)</title><rect x="862.9" y="659.0" width="11.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="865.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="873.1" y="643.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="876.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="873.4" y="627.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="876.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="873.4" y="611.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="876.4" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="873.4" y="595.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="876.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="873.4" y="579.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="876.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="873.4" y="563.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="876.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="873.4" y="547.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="876.4" y="558.0"></text>
</g>
<g>
<title>_init (2 samples, 0.06%)</title><rect x="874.1" y="835.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="877.1" y="846.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="874.7" y="835.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="877.7" y="846.0"></text>
</g>
<g>
<title>epoll_wait (5 samples, 0.14%)</title><rect x="875.0" y="835.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="878.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (859 samples, 23.81%)</title><rect x="876.7" y="867.0" width="280.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="879.7" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (6 samples, 0.17%)</title><rect x="879.0" y="851.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="882.0" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (842 samples, 23.34%)</title><rect x="880.9" y="851.0" width="275.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="883.9" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (578 samples, 16.02%)</title><rect x="882.9" y="835.0" width="189.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="885.9" y="846.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (458 samples, 12.69%)</title><rect x="885.2" y="819.0" width="149.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="888.2" y="830.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (449 samples, 12.44%)</title><rect x="888.1" y="803.0" width="146.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="891.1" y="814.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (428 samples, 11.86%)</title><rect x="889.1" y="787.0" width="140.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="892.1" y="798.0">RequestHandler0_e..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (23 samples, 0.64%)</title><rect x="889.1" y="771.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="892.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.06%)</title><rect x="889.8" y="755.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="892.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="890.4" y="755.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="893.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (12 samples, 0.33%)</title><rect x="890.7" y="755.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="893.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.08%)</title><rect x="892.4" y="739.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="895.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="893.0" y="723.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="896.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="893.0" y="707.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="896.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="893.0" y="691.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="896.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="893.0" y="675.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="896.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="893.0" y="659.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="896.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="893.0" y="643.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="896.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="893.0" y="627.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="896.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.08%)</title><rect x="893.4" y="739.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="896.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="894.3" y="739.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="897.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.17%)</title><rect x="894.7" y="755.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="897.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="896.0" y="739.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="899.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="896.0" y="723.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="899.0" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.06%)</title><rect x="896.0" y="707.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="899.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (405 samples, 11.23%)</title><rect x="896.6" y="771.0" width="132.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="899.6" y="782.0">ru/mail/polis/se..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.06%)</title><rect x="897.6" y="755.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="900.6" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.06%)</title><rect x="897.6" y="739.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="900.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$76/369077687.get$Lambda (2 samples, 0.06%)</title><rect x="897.6" y="723.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="900.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$76/369077687.&lt;init&gt; (1 samples, 0.03%)</title><rect x="897.9" y="707.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="900.9" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16 samples, 0.44%)</title><rect x="898.3" y="755.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="901.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16 samples, 0.44%)</title><rect x="898.3" y="739.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="901.3" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.39%)</title><rect x="898.9" y="723.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="901.9" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.39%)</title><rect x="898.9" y="707.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="901.9" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="901.2" y="691.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="904.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.11%)</title><rect x="901.5" y="675.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="904.5" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.11%)</title><rect x="901.5" y="659.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="904.5" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.11%)</title><rect x="901.5" y="643.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="904.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.06%)</title><rect x="902.8" y="691.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="905.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (359 samples, 9.95%)</title><rect x="903.5" y="755.0" width="117.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="906.5" y="766.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (354 samples, 9.81%)</title><rect x="905.1" y="739.0" width="115.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="908.1" y="750.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (354 samples, 9.81%)</title><rect x="905.1" y="723.0" width="115.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="908.1" y="734.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (285 samples, 7.90%)</title><rect x="905.5" y="707.0" width="93.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="908.5" y="718.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (285 samples, 7.90%)</title><rect x="905.5" y="691.0" width="93.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="908.5" y="702.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (285 samples, 7.90%)</title><rect x="905.5" y="675.0" width="93.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="908.5" y="686.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (285 samples, 7.90%)</title><rect x="905.5" y="659.0" width="93.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="908.5" y="670.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (285 samples, 7.90%)</title><rect x="905.5" y="643.0" width="93.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="908.5" y="654.0">java/util/c..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (285 samples, 7.90%)</title><rect x="905.5" y="627.0" width="93.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="908.5" y="638.0">jdk/interna..</text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.08%)</title><rect x="907.1" y="611.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="910.1" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.08%)</title><rect x="908.1" y="611.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="911.1" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.06%)</title><rect x="909.1" y="611.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="912.1" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.06%)</title><rect x="909.7" y="611.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="912.7" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark (49 samples, 1.36%)</title><rect x="910.4" y="611.0" width="16.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="913.4" y="622.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.08%)</title><rect x="912.3" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.3" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (6 samples, 0.17%)</title><rect x="913.3" y="595.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.3" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (4 samples, 0.11%)</title><rect x="915.3" y="595.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="918.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="916.3" y="579.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="919.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="916.3" y="563.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="919.3" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="916.3" y="547.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="919.3" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="916.3" y="531.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="919.3" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="916.3" y="515.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="919.3" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="916.3" y="499.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="919.3" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="916.3" y="483.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="919.3" y="494.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (8 samples, 0.22%)</title><rect x="916.6" y="595.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="919.6" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.08%)</title><rect x="919.2" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="922.2" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.06%)</title><rect x="920.2" y="595.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="923.2" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (10 samples, 0.28%)</title><rect x="920.8" y="595.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="923.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="923.8" y="579.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="926.8" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="923.8" y="563.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="926.8" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="923.8" y="547.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="926.8" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="923.8" y="531.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="926.8" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="923.8" y="515.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="926.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="923.8" y="499.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="926.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="923.8" y="483.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="926.8" y="494.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="924.1" y="595.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="927.1" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="924.4" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.4" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.06%)</title><rect x="924.8" y="595.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.8" y="606.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="925.4" y="595.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="928.4" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.06%)</title><rect x="925.7" y="595.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="928.7" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.06%)</title><rect x="926.4" y="611.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="929.4" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="927.1" y="611.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="930.1" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (218 samples, 6.04%)</title><rect x="927.4" y="611.0" width="71.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="930.4" y="622.0">pthread_..</text>
</g>
<g>
<title>[unknown] (195 samples, 5.40%)</title><rect x="934.9" y="595.0" width="63.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="937.9" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (195 samples, 5.40%)</title><rect x="934.9" y="579.0" width="63.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="937.9" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (182 samples, 5.04%)</title><rect x="939.2" y="563.0" width="59.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="942.2" y="574.0">[unkno..</text>
</g>
<g>
<title>[unknown] (181 samples, 5.02%)</title><rect x="939.5" y="547.0" width="59.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="942.5" y="558.0">[unkno..</text>
</g>
<g>
<title>[unknown] (173 samples, 4.79%)</title><rect x="942.1" y="531.0" width="56.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="945.1" y="542.0">[unkno..</text>
</g>
<g>
<title>[unknown] (158 samples, 4.38%)</title><rect x="947.0" y="515.0" width="51.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="950.0" y="526.0">[unkn..</text>
</g>
<g>
<title>[unknown] (137 samples, 3.80%)</title><rect x="953.9" y="499.0" width="44.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="956.9" y="510.0">[unk..</text>
</g>
<g>
<title>[unknown] (130 samples, 3.60%)</title><rect x="956.2" y="483.0" width="42.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="959.2" y="494.0">[unk..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="998.3" y="467.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1001.3" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="998.3" y="451.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1001.3" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="998.3" y="435.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1001.3" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="998.3" y="419.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1001.3" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="998.3" y="403.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1001.3" y="414.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="998.3" y="387.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1001.3" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="998.3" y="371.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1001.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (13 samples, 0.36%)</title><rect x="998.7" y="707.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1001.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (13 samples, 0.36%)</title><rect x="998.7" y="691.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1001.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="1002.6" y="675.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1005.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="1002.6" y="659.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1005.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.03%)</title><rect x="1002.6" y="643.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1005.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="1002.6" y="627.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1005.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.03%)</title><rect x="1002.6" y="611.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1005.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (53 samples, 1.47%)</title><rect x="1002.9" y="707.0" width="17.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1005.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (48 samples, 1.33%)</title><rect x="1004.6" y="691.0" width="15.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1007.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (28 samples, 0.78%)</title><rect x="1007.8" y="675.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1010.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (5 samples, 0.14%)</title><rect x="1009.1" y="659.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1012.1" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.14%)</title><rect x="1009.1" y="643.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1012.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (13 samples, 0.36%)</title><rect x="1010.8" y="659.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1013.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (13 samples, 0.36%)</title><rect x="1010.8" y="643.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1013.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (5 samples, 0.14%)</title><rect x="1010.8" y="627.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1013.8" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (8 samples, 0.22%)</title><rect x="1012.4" y="627.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1015.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="1014.7" y="611.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1017.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (6 samples, 0.17%)</title><rect x="1015.0" y="659.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1018.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (6 samples, 0.17%)</title><rect x="1015.0" y="643.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.28%)</title><rect x="1017.0" y="675.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1020.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.28%)</title><rect x="1017.0" y="659.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1020.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.17%)</title><rect x="1018.3" y="643.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1021.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.17%)</title><rect x="1018.3" y="627.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1021.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.11%)</title><rect x="1019.0" y="611.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1022.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="1020.3" y="707.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1023.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="1020.3" y="691.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1023.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="1020.3" y="675.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1023.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.isMe (1 samples, 0.03%)</title><rect x="1020.9" y="755.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1023.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="1020.9" y="739.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1023.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="1020.9" y="723.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1023.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.primaryFor (24 samples, 0.67%)</title><rect x="1021.2" y="755.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1024.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.03%)</title><rect x="1024.2" y="739.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1027.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.25%)</title><rect x="1024.5" y="739.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1027.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="1026.5" y="723.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1029.5" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="1026.8" y="723.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1029.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/HashingTopology.hashCode (5 samples, 0.14%)</title><rect x="1027.5" y="739.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1030.5" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (5 samples, 0.14%)</title><rect x="1027.5" y="723.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1030.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1028.4" y="707.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1031.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1028.4" y="691.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1031.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1028.4" y="675.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1031.4" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="1028.8" y="707.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1031.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="1028.8" y="691.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1031.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.06%)</title><rect x="1029.1" y="787.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1032.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (2 samples, 0.06%)</title><rect x="1029.1" y="771.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1032.1" y="782.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (12 samples, 0.33%)</title><rect x="1029.7" y="787.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1032.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.33%)</title><rect x="1029.7" y="771.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1032.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.14%)</title><rect x="1029.7" y="755.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1032.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.08%)</title><rect x="1030.4" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1033.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="1031.1" y="723.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1034.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.19%)</title><rect x="1031.4" y="755.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.14%)</title><rect x="1032.0" y="739.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1035.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.11%)</title><rect x="1033.7" y="787.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1036.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1034.3" y="771.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1037.3" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1034.3" y="755.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1037.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1034.3" y="739.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1037.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1034.3" y="723.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1037.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1034.7" y="771.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1037.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (20 samples, 0.55%)</title><rect x="1035.0" y="819.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1038.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1035.0" y="803.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1038.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="1035.0" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1038.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="1035.0" y="771.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1038.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.06%)</title><rect x="1035.0" y="755.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1038.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.39%)</title><rect x="1035.6" y="803.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1038.6" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.39%)</title><rect x="1035.6" y="787.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1038.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.11%)</title><rect x="1040.2" y="803.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (32 samples, 0.89%)</title><rect x="1041.5" y="819.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1044.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (18 samples, 0.50%)</title><rect x="1045.8" y="803.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1048.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (17 samples, 0.47%)</title><rect x="1046.1" y="787.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1049.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.4" y="771.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1051.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.4" y="755.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1051.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.4" y="739.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1051.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1048.4" y="723.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1051.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.06%)</title><rect x="1048.7" y="771.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1051.7" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.06%)</title><rect x="1048.7" y="755.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1051.7" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.03%)</title><rect x="1049.0" y="739.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1052.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.17%)</title><rect x="1049.4" y="771.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1052.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (4 samples, 0.11%)</title><rect x="1049.4" y="755.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1052.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.06%)</title><rect x="1050.7" y="755.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1051.3" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1054.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (1 samples, 0.03%)</title><rect x="1051.7" y="803.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (7 samples, 0.19%)</title><rect x="1052.0" y="819.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1055.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (20 samples, 0.55%)</title><rect x="1054.3" y="819.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1057.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1054.9" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1057.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (16 samples, 0.44%)</title><rect x="1055.3" y="803.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1058.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (15 samples, 0.42%)</title><rect x="1055.6" y="787.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1058.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.08%)</title><rect x="1057.2" y="771.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1060.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.06%)</title><rect x="1057.5" y="755.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1060.5" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.06%)</title><rect x="1057.5" y="739.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1060.5" y="750.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.03%)</title><rect x="1057.9" y="723.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1060.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.08%)</title><rect x="1058.2" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1061.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.08%)</title><rect x="1058.2" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1061.2" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.08%)</title><rect x="1058.2" y="739.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.2" y="750.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.03%)</title><rect x="1058.9" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1061.9" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.06%)</title><rect x="1059.2" y="771.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1062.2" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="1059.8" y="771.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1062.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1060.5" y="803.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1060.5" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1063.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (34 samples, 0.94%)</title><rect x="1060.8" y="819.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1063.8" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (33 samples, 0.91%)</title><rect x="1061.1" y="803.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1064.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (24 samples, 0.67%)</title><rect x="1064.1" y="787.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1067.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (20 samples, 0.55%)</title><rect x="1065.4" y="771.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1068.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.11%)</title><rect x="1070.6" y="755.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1073.6" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (258 samples, 7.15%)</title><rect x="1071.9" y="835.0" width="84.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1074.9" y="846.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (255 samples, 7.07%)</title><rect x="1072.3" y="819.0" width="83.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1075.3" y="830.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.08%)</title><rect x="1076.8" y="803.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1079.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 1.88%)</title><rect x="1077.8" y="803.0" width="22.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1080.8" y="814.0">[..</text>
</g>
<g>
<title>[unknown] (68 samples, 1.88%)</title><rect x="1077.8" y="787.0" width="22.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1080.8" y="798.0">[..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (50 samples, 1.39%)</title><rect x="1077.8" y="771.0" width="16.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1080.8" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.11%)</title><rect x="1078.8" y="755.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.8" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.06%)</title><rect x="1080.1" y="755.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.1" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.03%)</title><rect x="1080.8" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.8" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3 (16 samples, 0.44%)</title><rect x="1081.1" y="755.0" width="5.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1084.1" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.08%)</title><rect x="1086.3" y="755.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1089.3" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (20 samples, 0.55%)</title><rect x="1087.3" y="755.0" width="6.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1090.3" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.06%)</title><rect x="1088.6" y="739.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.6" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.06%)</title><rect x="1089.3" y="739.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.3" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (3 samples, 0.08%)</title><rect x="1089.9" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.14%)</title><rect x="1090.9" y="739.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.9" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.11%)</title><rect x="1092.5" y="739.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1095.5" y="750.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="1093.8" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.8" y="766.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="1094.2" y="771.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1097.2" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.19%)</title><rect x="1094.5" y="771.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1097.5" y="782.0"></text>
</g>
<g>
<title>recv (10 samples, 0.28%)</title><rect x="1096.8" y="771.0" width="3.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1099.8" y="782.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="1100.1" y="803.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1103.1" y="814.0"></text>
</g>
<g>
<title>recv (169 samples, 4.68%)</title><rect x="1100.4" y="803.0" width="55.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1103.4" y="814.0">recv</text>
</g>
<g>
<title>[unknown] (155 samples, 4.30%)</title><rect x="1105.0" y="787.0" width="50.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1108.0" y="798.0">[unkn..</text>
</g>
<g>
<title>[unknown] (155 samples, 4.30%)</title><rect x="1105.0" y="771.0" width="50.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1108.0" y="782.0">[unkn..</text>
</g>
<g>
<title>[unknown] (144 samples, 3.99%)</title><rect x="1108.6" y="755.0" width="47.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1111.6" y="766.0">[unk..</text>
</g>
<g>
<title>[unknown] (144 samples, 3.99%)</title><rect x="1108.6" y="739.0" width="47.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1111.6" y="750.0">[unk..</text>
</g>
<g>
<title>[unknown] (141 samples, 3.91%)</title><rect x="1109.5" y="723.0" width="46.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1112.5" y="734.0">[unk..</text>
</g>
<g>
<title>[unknown] (133 samples, 3.69%)</title><rect x="1112.2" y="707.0" width="43.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1115.2" y="718.0">[unk..</text>
</g>
<g>
<title>[unknown] (129 samples, 3.58%)</title><rect x="1113.5" y="691.0" width="42.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1116.5" y="702.0">[unk..</text>
</g>
<g>
<title>[unknown] (104 samples, 2.88%)</title><rect x="1121.6" y="675.0" width="34.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1124.6" y="686.0">[u..</text>
</g>
<g>
<title>[unknown] (79 samples, 2.19%)</title><rect x="1129.8" y="659.0" width="25.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1132.8" y="670.0">[..</text>
</g>
<g>
<title>[unknown] (57 samples, 1.58%)</title><rect x="1137.0" y="643.0" width="18.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1140.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.94%)</title><rect x="1144.5" y="627.0" width="11.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1147.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.64%)</title><rect x="1148.1" y="611.0" width="7.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1151.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="1154.7" y="595.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1157.7" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="1154.7" y="579.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1157.7" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="1154.7" y="563.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1157.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="1155.0" y="547.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1158.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1155.3" y="531.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1158.3" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.06%)</title><rect x="1155.7" y="819.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1158.7" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.11%)</title><rect x="1156.3" y="851.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.3" y="862.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.11%)</title><rect x="1156.3" y="835.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1159.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="1156.6" y="819.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1159.6" y="830.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.03%)</title><rect x="1157.6" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.6" y="894.0"></text>
</g>
<g>
<title>start_thread (98 samples, 2.72%)</title><rect x="1157.9" y="883.0" width="32.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1160.9" y="894.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (98 samples, 2.72%)</title><rect x="1157.9" y="867.0" width="32.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1160.9" y="878.0">th..</text>
</g>
<g>
<title>Thread::call_run() (98 samples, 2.72%)</title><rect x="1157.9" y="851.0" width="32.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.9" y="862.0">Th..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.06%)</title><rect x="1157.9" y="835.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.9" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.06%)</title><rect x="1157.9" y="819.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.9" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1157.9" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.9" y="814.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1157.9" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.9" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="1157.9" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.9" y="782.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.03%)</title><rect x="1157.9" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.9" y="766.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.03%)</title><rect x="1157.9" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.9" y="750.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.03%)</title><rect x="1158.3" y="803.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1161.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.3" y="787.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1161.3" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1158.3" y="771.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1161.3" y="782.0"></text>
</g>
<g>
<title>GangWorker::loop() (73 samples, 2.02%)</title><rect x="1158.6" y="835.0" width="23.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.6" y="846.0">G..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1158.6" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.6" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.03%)</title><rect x="1158.6" y="803.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.6" y="814.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (1 samples, 0.03%)</title><rect x="1158.6" y="787.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.6" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1158.6" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.6" y="782.0"></text>
</g>
<g>
<title>bool G1CMTask::deal_with_reference&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1158.6" y="755.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.6" y="766.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (70 samples, 1.94%)</title><rect x="1158.9" y="819.0" width="22.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="830.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (47 samples, 1.30%)</title><rect x="1158.9" y="803.0" width="15.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (45 samples, 1.25%)</title><rect x="1158.9" y="787.0" width="14.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="1163.8" y="771.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1166.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="1163.8" y="755.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1166.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="1163.8" y="739.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1166.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1164.2" y="723.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1167.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1164.2" y="707.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1167.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1164.2" y="691.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1167.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1164.2" y="675.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1167.2" y="686.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (28 samples, 0.78%)</title><rect x="1164.5" y="771.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.5" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (22 samples, 0.61%)</title><rect x="1165.1" y="755.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1169.7" y="739.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1172.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1169.7" y="723.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1172.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1169.7" y="707.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1172.7" y="718.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1170.0" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.0" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (6 samples, 0.17%)</title><rect x="1170.4" y="739.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.4" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::start_of_nonstatic_oop_maps() const (1 samples, 0.03%)</title><rect x="1170.7" y="723.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="734.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.11%)</title><rect x="1171.0" y="723.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.0" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.06%)</title><rect x="1172.3" y="755.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.3" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.06%)</title><rect x="1173.0" y="755.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="766.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1173.6" y="787.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1176.6" y="798.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1174.0" y="787.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.0" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (20 samples, 0.55%)</title><rect x="1174.3" y="803.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.3" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (20 samples, 0.55%)</title><rect x="1174.3" y="787.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.3" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (20 samples, 0.55%)</title><rect x="1174.3" y="771.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.3" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (20 samples, 0.55%)</title><rect x="1174.3" y="755.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.3" y="766.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (20 samples, 0.55%)</title><rect x="1174.3" y="739.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.3" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (14 samples, 0.39%)</title><rect x="1174.3" y="723.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.3" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 0.25%)</title><rect x="1175.6" y="707.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.6" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1178.6" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (6 samples, 0.17%)</title><rect x="1178.9" y="723.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.08%)</title><rect x="1178.9" y="707.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (3 samples, 0.08%)</title><rect x="1178.9" y="691.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1179.5" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.03%)</title><rect x="1179.9" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (2 samples, 0.06%)</title><rect x="1180.2" y="707.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="718.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1180.5" y="691.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="702.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.06%)</title><rect x="1180.8" y="803.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.06%)</title><rect x="1180.8" y="787.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.06%)</title><rect x="1180.8" y="771.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2 samples, 0.06%)</title><rect x="1180.8" y="755.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="766.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (2 samples, 0.06%)</title><rect x="1180.8" y="739.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.03%)</title><rect x="1180.8" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="734.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1180.8" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.03%)</title><rect x="1181.2" y="723.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1181.5" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1181.5" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.5" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1181.5" y="771.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="1181.5" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.5" y="766.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1181.5" y="739.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="750.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.03%)</title><rect x="1181.5" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.5" y="734.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.03%)</title><rect x="1181.5" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="718.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1181.8" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="830.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (1 samples, 0.03%)</title><rect x="1181.8" y="803.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1181.8" y="787.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1181.8" y="771.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.03%)</title><rect x="1181.8" y="755.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="766.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (1 samples, 0.03%)</title><rect x="1181.8" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="1182.2" y="819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>PosixSemaphore::wait() (1 samples, 0.03%)</title><rect x="1182.2" y="803.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (18 samples, 0.50%)</title><rect x="1182.5" y="835.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (18 samples, 0.50%)</title><rect x="1182.5" y="819.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (18 samples, 0.50%)</title><rect x="1182.5" y="803.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (18 samples, 0.50%)</title><rect x="1182.5" y="787.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="798.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (18 samples, 0.50%)</title><rect x="1182.5" y="771.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="782.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (18 samples, 0.50%)</title><rect x="1182.5" y="755.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="766.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (9 samples, 0.25%)</title><rect x="1182.5" y="739.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="750.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.03%)</title><rect x="1182.5" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.03%)</title><rect x="1182.5" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.03%)</title><rect x="1182.5" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.03%)</title><rect x="1182.5" y="675.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.03%)</title><rect x="1182.5" y="659.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="670.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1182.5" y="643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="654.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1182.5" y="627.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.5" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1182.5" y="611.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1185.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (8 samples, 0.22%)</title><rect x="1182.8" y="723.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.03%)</title><rect x="1182.8" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.06%)</title><rect x="1183.1" y="707.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.06%)</title><rect x="1183.1" y="691.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (1 samples, 0.03%)</title><rect x="1183.8" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.03%)</title><rect x="1183.8" y="691.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (1 samples, 0.03%)</title><rect x="1184.1" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.03%)</title><rect x="1184.4" y="707.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="718.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.03%)</title><rect x="1184.8" y="707.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1187.8" y="718.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.03%)</title><rect x="1185.1" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 0.19%)</title><rect x="1185.4" y="739.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (3 samples, 0.08%)</title><rect x="1185.4" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.4" y="734.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.03%)</title><rect x="1185.4" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.03%)</title><rect x="1185.7" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.03%)</title><rect x="1185.7" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="702.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.03%)</title><rect x="1186.1" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.06%)</title><rect x="1186.4" y="723.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.06%)</title><rect x="1186.4" y="707.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.4" y="718.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1186.4" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.4" y="702.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.03%)</title><rect x="1186.4" y="675.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.4" y="686.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.03%)</title><rect x="1186.7" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.06%)</title><rect x="1187.1" y="723.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.06%)</title><rect x="1187.1" y="707.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.06%)</title><rect x="1187.1" y="691.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="702.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1187.1" y="675.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="686.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1187.4" y="675.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="686.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.03%)</title><rect x="1187.4" y="659.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="670.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1187.4" y="643.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1187.7" y="739.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1187.7" y="723.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1187.7" y="707.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1187.7" y="691.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1187.7" y="675.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1187.7" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.7" y="643.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.7" y="627.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1187.7" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1187.7" y="595.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1187.7" y="579.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1187.7" y="563.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1187.7" y="547.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.7" y="531.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1187.7" y="515.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1187.7" y="499.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1187.7" y="483.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1187.7" y="467.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1187.7" y="451.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.7" y="435.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1187.7" y="419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1187.7" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1187.7" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1187.7" y="371.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1187.7" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.7" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1187.7" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1187.7" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1187.7" y="291.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1187.7" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1187.7" y="259.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.7" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1187.7" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1187.7" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1187.7" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1187.7" y="179.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1187.7" y="163.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.7" y="147.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1187.7" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1187.7" y="115.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1187.7" y="99.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1187.7" y="83.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1187.7" y="67.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.7" y="78.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1187.7" y="51.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.7" y="62.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.03%)</title><rect x="1187.7" y="35.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1188.0" y="659.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1188.0" y="643.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="654.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.03%)</title><rect x="1188.0" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="638.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1188.0" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.0" y="622.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1188.0" y="595.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.0" y="606.0"></text>
</g>
<g>
<title>VMError::is_error_reported() (2 samples, 0.06%)</title><rect x="1188.4" y="835.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.4" y="846.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.08%)</title><rect x="1189.0" y="835.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.03%)</title><rect x="1189.0" y="819.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.03%)</title><rect x="1189.0" y="803.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.03%)</title><rect x="1189.3" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.3" y="830.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.03%)</title><rect x="1189.7" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.7" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1189.7" y="803.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.7" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1189.7" y="787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.7" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="1189.7" y="771.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1192.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.7" y="755.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1192.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1189.7" y="739.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1192.7" y="750.0"></text>
</g>
</g>
</svg>
