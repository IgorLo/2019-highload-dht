<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (6,132 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.07%)</title><rect x="10.2" y="883.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.2" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.07%)</title><rect x="10.2" y="867.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.07%)</title><rect x="10.2" y="851.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.2" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="10.2" y="835.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.2" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="10.2" y="819.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.2" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="10.2" y="803.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.2" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (8 samples, 0.13%)</title><rect x="11.0" y="883.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (6 samples, 0.10%)</title><rect x="11.3" y="867.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.3" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (6 samples, 0.10%)</title><rect x="11.3" y="851.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.3" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.08%)</title><rect x="11.3" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.3" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (5 samples, 0.08%)</title><rect x="11.3" y="819.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.3" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (5 samples, 0.08%)</title><rect x="11.3" y="803.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.3" y="814.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (2 samples, 0.03%)</title><rect x="12.5" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.5" y="894.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.03%)</title><rect x="12.5" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.5" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (45 samples, 0.73%)</title><rect x="12.9" y="883.0" width="8.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.9" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (39 samples, 0.64%)</title><rect x="13.7" y="867.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="16.7" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (11 samples, 0.18%)</title><rect x="14.4" y="851.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.4" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.07%)</title><rect x="14.8" y="835.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.8" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.03%)</title><rect x="15.6" y="835.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="18.6" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="16.2" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="19.2" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (24 samples, 0.39%)</title><rect x="16.5" y="851.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="19.5" y="862.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.07%)</title><rect x="21.7" y="883.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="24.7" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="22.1" y="867.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="25.1" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.03%)</title><rect x="22.1" y="851.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="25.1" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (36 samples, 0.59%)</title><rect x="22.7" y="883.0" width="6.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="25.7" y="894.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="25.0" y="867.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="28.0" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="25.2" y="851.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="28.2" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.20%)</title><rect x="25.6" y="867.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="28.6" y="878.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (9 samples, 0.15%)</title><rect x="27.9" y="867.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="30.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="27.9" y="851.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="30.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="27.9" y="835.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="30.9" y="846.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="27.9" y="819.0" width="1.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="30.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="27.9" y="803.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="30.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="27.9" y="787.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="30.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="27.9" y="771.0" width="1.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="30.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="27.9" y="755.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="30.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="27.9" y="739.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="30.9" y="750.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (2 samples, 0.03%)</title><rect x="30.0" y="883.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="33.0" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 0.26%)</title><rect x="30.4" y="883.0" width="3.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="33.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.21%)</title><rect x="31.0" y="867.0" width="2.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="34.0" y="878.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.21%)</title><rect x="31.0" y="851.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="34.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.18%)</title><rect x="31.4" y="835.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="34.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.18%)</title><rect x="31.4" y="819.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="34.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.18%)</title><rect x="31.4" y="803.0" width="2.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="34.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="31.7" y="787.0" width="1.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="34.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.11%)</title><rect x="32.1" y="771.0" width="1.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="35.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="32.7" y="755.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="35.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="32.9" y="739.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="35.9" y="750.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="33.5" y="883.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="36.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,444 samples, 56.16%)</title><rect x="34.2" y="883.0" width="662.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.2" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,444 samples, 56.16%)</title><rect x="34.2" y="867.0" width="662.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.2" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,444 samples, 56.16%)</title><rect x="34.2" y="851.0" width="662.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="37.2" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (5 samples, 0.08%)</title><rect x="34.4" y="835.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="37.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.08%)</title><rect x="34.4" y="819.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="37.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (5 samples, 0.08%)</title><rect x="34.4" y="803.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.08%)</title><rect x="34.4" y="787.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.4" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.08%)</title><rect x="34.4" y="771.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.4" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.08%)</title><rect x="34.4" y="755.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.10%)</title><rect x="35.4" y="835.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.10%)</title><rect x="35.4" y="819.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="38.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 0.03%)</title><rect x="36.2" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="39.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.03%)</title><rect x="36.2" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (807 samples, 13.16%)</title><rect x="36.6" y="835.0" width="155.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="39.6" y="846.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (787 samples, 12.83%)</title><rect x="40.0" y="819.0" width="151.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.0" y="830.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (564 samples, 9.20%)</title><rect x="41.8" y="803.0" width="108.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.8" y="814.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (25 samples, 0.41%)</title><rect x="42.9" y="787.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (20 samples, 0.33%)</title><rect x="43.9" y="771.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.9" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (10 samples, 0.16%)</title><rect x="45.8" y="755.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.8" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (7 samples, 0.11%)</title><rect x="45.8" y="739.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.8" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.set (3 samples, 0.05%)</title><rect x="47.1" y="739.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (38 samples, 0.62%)</title><rect x="47.7" y="787.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="50.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.10%)</title><rect x="47.7" y="771.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.10%)</title><rect x="47.7" y="755.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.7" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.10%)</title><rect x="47.7" y="739.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.7" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (5 samples, 0.08%)</title><rect x="47.7" y="723.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="50.7" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="47.9" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="50.9" y="718.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="47.9" y="691.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="50.9" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.03%)</title><rect x="48.3" y="707.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="51.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.03%)</title><rect x="48.9" y="771.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (30 samples, 0.49%)</title><rect x="49.3" y="771.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (30 samples, 0.49%)</title><rect x="49.3" y="755.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (6 samples, 0.10%)</title><rect x="52.1" y="739.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (9 samples, 0.15%)</title><rect x="53.3" y="739.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.3" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (9 samples, 0.15%)</title><rect x="53.3" y="723.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.3" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (9 samples, 0.15%)</title><rect x="53.3" y="707.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (37 samples, 0.60%)</title><rect x="55.0" y="787.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (37 samples, 0.60%)</title><rect x="55.0" y="771.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (34 samples, 0.55%)</title><rect x="55.2" y="755.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (33 samples, 0.54%)</title><rect x="55.4" y="739.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (33 samples, 0.54%)</title><rect x="55.4" y="723.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.4" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.03%)</title><rect x="55.4" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="58.4" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.05%)</title><rect x="55.8" y="707.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="58.8" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (28 samples, 0.46%)</title><rect x="56.4" y="707.0" width="5.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="59.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.39%)</title><rect x="57.1" y="691.0" width="4.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="60.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.39%)</title><rect x="57.1" y="675.0" width="4.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="60.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.38%)</title><rect x="57.3" y="659.0" width="4.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="60.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.38%)</title><rect x="57.3" y="643.0" width="4.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="60.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.36%)</title><rect x="57.5" y="627.0" width="4.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="60.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.34%)</title><rect x="57.7" y="611.0" width="4.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="60.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.31%)</title><rect x="58.1" y="595.0" width="3.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="61.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.31%)</title><rect x="58.1" y="579.0" width="3.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="61.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="61.8" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="64.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (458 samples, 7.47%)</title><rect x="62.1" y="787.0" width="88.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.1" y="798.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (458 samples, 7.47%)</title><rect x="62.1" y="771.0" width="88.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.1" y="782.0">jdk/intern..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.05%)</title><rect x="65.4" y="755.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="68.4" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="66.0" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="69.0" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (4 samples, 0.07%)</title><rect x="66.4" y="755.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="69.4" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (214 samples, 3.49%)</title><rect x="67.3" y="755.0" width="41.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="70.3" y="766.0">Uns..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.05%)</title><rect x="71.2" y="739.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="74.2" y="750.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (5 samples, 0.08%)</title><rect x="71.8" y="739.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="74.8" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (45 samples, 0.73%)</title><rect x="73.3" y="739.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="76.3" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (8 samples, 0.13%)</title><rect x="78.5" y="723.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="81.5" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.03%)</title><rect x="79.7" y="707.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="82.7" y="718.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.05%)</title><rect x="80.0" y="723.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="83.0" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.11%)</title><rect x="80.6" y="723.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="83.6" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.05%)</title><rect x="82.0" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="85.0" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (7 samples, 0.11%)</title><rect x="82.5" y="739.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="85.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (8 samples, 0.13%)</title><rect x="83.9" y="739.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="86.9" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (81 samples, 1.32%)</title><rect x="85.4" y="739.0" width="15.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="88.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.06%)</title><rect x="88.5" y="723.0" width="12.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="91.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.06%)</title><rect x="88.5" y="707.0" width="12.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="91.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.39%)</title><rect x="96.4" y="691.0" width="4.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="99.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.38%)</title><rect x="96.6" y="675.0" width="4.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="99.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.33%)</title><rect x="97.2" y="659.0" width="3.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="100.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.16%)</title><rect x="99.1" y="643.0" width="1.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="102.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="100.6" y="627.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="103.6" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.05%)</title><rect x="101.0" y="739.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="104.0" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="101.6" y="739.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="104.6" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.08%)</title><rect x="102.0" y="739.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="105.0" y="750.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="102.9" y="739.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="105.9" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="103.3" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="106.3" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.05%)</title><rect x="103.7" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="106.7" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (22 samples, 0.36%)</title><rect x="104.3" y="739.0" width="4.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="107.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (209 samples, 3.41%)</title><rect x="108.5" y="755.0" width="40.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="111.5" y="766.0">[un..</text>
</g>
<g>
<title>__pthread_cleanup_push (4 samples, 0.07%)</title><rect x="108.7" y="739.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="111.7" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (173 samples, 2.82%)</title><rect x="109.5" y="739.0" width="33.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="112.5" y="750.0">__..</text>
</g>
<g>
<title>[unknown] (107 samples, 1.74%)</title><rect x="122.2" y="723.0" width="20.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="125.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (107 samples, 1.74%)</title><rect x="122.2" y="707.0" width="20.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="125.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (81 samples, 1.32%)</title><rect x="127.2" y="691.0" width="15.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="130.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (77 samples, 1.26%)</title><rect x="128.0" y="675.0" width="14.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="131.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (74 samples, 1.21%)</title><rect x="128.5" y="659.0" width="14.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="131.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.13%)</title><rect x="129.5" y="643.0" width="13.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="132.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.90%)</title><rect x="132.2" y="627.0" width="10.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="135.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.59%)</title><rect x="135.9" y="611.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="138.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.52%)</title><rect x="136.6" y="595.0" width="6.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="139.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="141.8" y="579.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="144.8" y="590.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="141.8" y="563.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="144.8" y="574.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="141.8" y="547.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="144.8" y="558.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="141.8" y="531.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="144.8" y="542.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="141.8" y="515.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="144.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="141.8" y="499.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="144.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="141.8" y="483.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="144.8" y="494.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.08%)</title><rect x="142.8" y="739.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="145.8" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.05%)</title><rect x="143.7" y="739.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="146.7" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (17 samples, 0.28%)</title><rect x="144.3" y="739.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="147.3" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.05%)</title><rect x="147.6" y="739.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="150.6" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.05%)</title><rect x="148.2" y="739.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="151.2" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="148.7" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="151.7" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 0.10%)</title><rect x="149.1" y="755.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="152.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (77 samples, 1.26%)</title><rect x="150.3" y="803.0" width="14.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (76 samples, 1.24%)</title><rect x="150.5" y="787.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (62 samples, 1.01%)</title><rect x="150.9" y="771.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="153.6" y="755.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="156.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (14 samples, 0.23%)</title><rect x="154.1" y="755.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (10 samples, 0.16%)</title><rect x="154.1" y="739.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="157.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.07%)</title><rect x="156.1" y="739.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="159.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (2 samples, 0.03%)</title><rect x="156.2" y="723.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (24 samples, 0.39%)</title><rect x="156.8" y="755.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.07%)</title><rect x="161.4" y="755.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.4" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.05%)</title><rect x="162.2" y="755.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (12 samples, 0.20%)</title><rect x="162.8" y="771.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (12 samples, 0.20%)</title><rect x="162.8" y="755.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="165.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.07%)</title><rect x="163.8" y="739.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (3 samples, 0.05%)</title><rect x="164.5" y="739.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (137 samples, 2.23%)</title><rect x="165.1" y="803.0" width="26.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="168.1" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (137 samples, 2.23%)</title><rect x="165.1" y="787.0" width="26.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.1" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (137 samples, 2.23%)</title><rect x="165.1" y="771.0" width="26.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.1" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (137 samples, 2.23%)</title><rect x="165.1" y="755.0" width="26.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.1" y="766.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (137 samples, 2.23%)</title><rect x="165.1" y="739.0" width="26.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="168.1" y="750.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (18 samples, 0.29%)</title><rect x="165.3" y="723.0" width="3.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="168.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.05%)</title><rect x="166.4" y="707.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="169.4" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="167.0" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="170.0" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.08%)</title><rect x="167.6" y="707.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="170.6" y="718.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.05%)</title><rect x="168.8" y="723.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="171.8" y="734.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (115 samples, 1.88%)</title><rect x="169.3" y="723.0" width="22.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="172.3" y="734.0">p..</text>
</g>
<g>
<title>[unknown] (100 samples, 1.63%)</title><rect x="172.2" y="707.0" width="19.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="175.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (100 samples, 1.63%)</title><rect x="172.2" y="691.0" width="19.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="175.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (95 samples, 1.55%)</title><rect x="173.2" y="675.0" width="18.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="176.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (94 samples, 1.53%)</title><rect x="173.4" y="659.0" width="18.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="176.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (93 samples, 1.52%)</title><rect x="173.6" y="643.0" width="17.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="176.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (88 samples, 1.44%)</title><rect x="174.5" y="627.0" width="17.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="177.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 1.29%)</title><rect x="176.3" y="611.0" width="15.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="179.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (74 samples, 1.21%)</title><rect x="177.2" y="595.0" width="14.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="180.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.03%)</title><rect x="191.5" y="819.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="194.5" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$FlushingTask.run (137 samples, 2.23%)</title><rect x="192.0" y="835.0" width="26.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.0" y="846.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.flushAndLoad (137 samples, 2.23%)</title><rect x="192.0" y="819.0" width="26.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.0" y="830.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.flush (137 samples, 2.23%)</title><rect x="192.0" y="803.0" width="26.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.0" y="814.0">r..</text>
</g>
<g>
<title>I2C/C2I adapters (5 samples, 0.08%)</title><rect x="194.5" y="787.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.5" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.05%)</title><rect x="195.7" y="787.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.7" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="195.7" y="771.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="198.7" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.07%)</title><rect x="196.5" y="787.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="199.5" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.03%)</title><rect x="196.9" y="771.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (4 samples, 0.07%)</title><rect x="197.2" y="787.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.05%)</title><rect x="197.4" y="771.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.03%)</title><rect x="197.6" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.03%)</title><rect x="198.0" y="787.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.0" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="198.0" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (3 samples, 0.05%)</title><rect x="198.4" y="787.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.4" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="198.6" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.6" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="198.6" y="755.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.6" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (101 samples, 1.65%)</title><rect x="199.0" y="787.0" width="19.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.0" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.05%)</title><rect x="199.2" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.2" y="782.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.03%)</title><rect x="199.4" y="755.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.03%)</title><rect x="199.4" y="739.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.4" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (96 samples, 1.57%)</title><rect x="199.7" y="771.0" width="18.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.7" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.07%)</title><rect x="200.7" y="755.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.7" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.07%)</title><rect x="200.7" y="739.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.05%)</title><rect x="200.9" y="723.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.9" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="201.1" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="201.1" y="691.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.03%)</title><rect x="201.1" y="675.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.1" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (83 samples, 1.35%)</title><rect x="201.5" y="755.0" width="15.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (81 samples, 1.32%)</title><rect x="201.9" y="739.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (81 samples, 1.32%)</title><rect x="201.9" y="723.0" width="15.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (76 samples, 1.24%)</title><rect x="202.4" y="707.0" width="14.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="205.4" y="718.0"></text>
</g>
<g>
<title>__write (75 samples, 1.22%)</title><rect x="202.6" y="691.0" width="14.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="205.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (73 samples, 1.19%)</title><rect x="203.0" y="675.0" width="14.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="206.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (73 samples, 1.19%)</title><rect x="203.0" y="659.0" width="14.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="206.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.13%)</title><rect x="203.8" y="643.0" width="13.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="206.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.13%)</title><rect x="203.8" y="627.0" width="13.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="206.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (67 samples, 1.09%)</title><rect x="204.2" y="611.0" width="12.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="207.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (63 samples, 1.03%)</title><rect x="204.9" y="595.0" width="12.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="207.9" y="606.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 0.99%)</title><rect x="205.3" y="579.0" width="11.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="208.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (59 samples, 0.96%)</title><rect x="205.7" y="563.0" width="11.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="208.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 0.95%)</title><rect x="205.9" y="547.0" width="11.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="208.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 0.95%)</title><rect x="205.9" y="531.0" width="11.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="208.9" y="542.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 0.91%)</title><rect x="206.3" y="515.0" width="10.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="209.3" y="526.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 0.82%)</title><rect x="207.4" y="499.0" width="9.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="210.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 0.72%)</title><rect x="208.6" y="483.0" width="8.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="211.6" y="494.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.59%)</title><rect x="210.1" y="467.0" width="7.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="213.1" y="478.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.49%)</title><rect x="211.3" y="451.0" width="5.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="214.3" y="462.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.44%)</title><rect x="211.9" y="435.0" width="5.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="214.9" y="446.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.38%)</title><rect x="212.6" y="419.0" width="4.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="215.6" y="430.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.34%)</title><rect x="213.0" y="403.0" width="4.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="216.0" y="414.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.31%)</title><rect x="213.4" y="387.0" width="3.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="216.4" y="398.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.24%)</title><rect x="214.2" y="371.0" width="2.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="217.2" y="382.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.18%)</title><rect x="214.9" y="355.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="217.9" y="366.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.16%)</title><rect x="215.1" y="339.0" width="2.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="218.1" y="350.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="215.5" y="323.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="218.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (3 samples, 0.05%)</title><rect x="217.6" y="755.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="220.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.05%)</title><rect x="217.6" y="739.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.6" y="750.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="217.8" y="723.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="220.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run (2,485 samples, 40.53%)</title><rect x="218.4" y="835.0" width="478.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.4" y="846.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (2,485 samples, 40.53%)</title><rect x="218.4" y="819.0" width="478.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.4" y="830.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,950 samples, 31.80%)</title><rect x="219.9" y="803.0" width="375.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.9" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (35 samples, 0.57%)</title><rect x="220.1" y="787.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (12 samples, 0.20%)</title><rect x="220.5" y="771.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (21 samples, 0.34%)</title><rect x="222.8" y="771.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (18 samples, 0.29%)</title><rect x="222.8" y="755.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (7 samples, 0.11%)</title><rect x="224.9" y="739.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.05%)</title><rect x="226.3" y="755.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.3" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.05%)</title><rect x="226.3" y="739.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.05%)</title><rect x="226.3" y="723.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.3" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,909 samples, 31.13%)</title><rect x="226.9" y="787.0" width="367.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.9" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (66 samples, 1.08%)</title><rect x="226.9" y="771.0" width="12.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.9" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (50 samples, 0.82%)</title><rect x="230.0" y="755.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.07%)</title><rect x="230.0" y="739.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.05%)</title><rect x="230.1" y="723.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.05%)</title><rect x="230.7" y="739.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (18 samples, 0.29%)</title><rect x="231.3" y="739.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.10%)</title><rect x="233.4" y="723.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.4" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4 samples, 0.07%)</title><rect x="233.8" y="707.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.8" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (25 samples, 0.41%)</title><rect x="234.8" y="739.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (23 samples, 0.38%)</title><rect x="235.1" y="723.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.08%)</title><rect x="238.2" y="707.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.05%)</title><rect x="238.2" y="691.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.2" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="238.8" y="691.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.8" y="702.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (2 samples, 0.03%)</title><rect x="239.2" y="707.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.2" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,843 samples, 30.06%)</title><rect x="239.6" y="771.0" width="354.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.6" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,843 samples, 30.06%)</title><rect x="239.6" y="755.0" width="354.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.6" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,842 samples, 30.04%)</title><rect x="239.8" y="739.0" width="354.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.8" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,842 samples, 30.04%)</title><rect x="239.8" y="723.0" width="354.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.8" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.07%)</title><rect x="245.0" y="707.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="248.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (88 samples, 1.44%)</title><rect x="245.7" y="707.0" width="17.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="248.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (88 samples, 1.44%)</title><rect x="245.7" y="691.0" width="17.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="248.7" y="702.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (73 samples, 1.19%)</title><rect x="245.7" y="675.0" width="14.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="248.7" y="686.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.07%)</title><rect x="248.0" y="659.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="251.0" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.08%)</title><rect x="248.8" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="251.8" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3 (12 samples, 0.20%)</title><rect x="249.8" y="659.0" width="2.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="252.8" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (35 samples, 0.57%)</title><rect x="252.1" y="659.0" width="6.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="255.1" y="670.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.05%)</title><rect x="253.0" y="643.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="256.0" y="654.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (9 samples, 0.15%)</title><rect x="253.6" y="643.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="256.6" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (9 samples, 0.15%)</title><rect x="255.5" y="643.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="258.5" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.13%)</title><rect x="257.3" y="643.0" width="1.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="260.3" y="654.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (5 samples, 0.08%)</title><rect x="258.8" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="261.8" y="670.0"></text>
</g>
<g>
<title>__send (10 samples, 0.16%)</title><rect x="260.0" y="675.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="263.0" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="262.1" y="675.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="265.1" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.05%)</title><rect x="262.7" y="707.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="265.7" y="718.0"></text>
</g>
<g>
<title>__send (1,720 samples, 28.05%)</title><rect x="263.2" y="707.0" width="331.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="266.2" y="718.0">__send</text>
</g>
<g>
<title>[unknown] (1,700 samples, 27.72%)</title><rect x="267.1" y="691.0" width="327.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="270.1" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,700 samples, 27.72%)</title><rect x="267.1" y="675.0" width="327.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="270.1" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,670 samples, 27.23%)</title><rect x="272.9" y="659.0" width="321.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="275.9" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,668 samples, 27.20%)</title><rect x="273.2" y="643.0" width="321.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="276.2" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,652 samples, 26.94%)</title><rect x="276.3" y="627.0" width="317.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="279.3" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,637 samples, 26.70%)</title><rect x="279.2" y="611.0" width="315.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="282.2" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,627 samples, 26.53%)</title><rect x="281.1" y="595.0" width="313.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="284.1" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,619 samples, 26.40%)</title><rect x="282.7" y="579.0" width="311.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="285.7" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,536 samples, 25.05%)</title><rect x="298.6" y="563.0" width="295.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="301.6" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,455 samples, 23.73%)</title><rect x="314.2" y="547.0" width="280.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="317.2" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,388 samples, 22.64%)</title><rect x="327.1" y="531.0" width="267.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="330.1" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,297 samples, 21.15%)</title><rect x="344.6" y="515.0" width="249.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="347.6" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,186 samples, 19.34%)</title><rect x="366.0" y="499.0" width="228.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="369.0" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,149 samples, 18.74%)</title><rect x="373.1" y="483.0" width="221.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="376.1" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,113 samples, 18.15%)</title><rect x="380.0" y="467.0" width="214.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="383.0" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,094 samples, 17.84%)</title><rect x="383.7" y="451.0" width="210.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="386.7" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,080 samples, 17.61%)</title><rect x="386.4" y="435.0" width="207.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="389.4" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,030 samples, 16.80%)</title><rect x="396.0" y="419.0" width="198.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="399.0" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (993 samples, 16.19%)</title><rect x="403.1" y="403.0" width="191.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="406.1" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (925 samples, 15.08%)</title><rect x="416.2" y="387.0" width="178.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="419.2" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (805 samples, 13.13%)</title><rect x="439.3" y="371.0" width="154.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="442.3" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (759 samples, 12.38%)</title><rect x="448.2" y="355.0" width="146.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="451.2" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (727 samples, 11.86%)</title><rect x="454.3" y="339.0" width="139.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="457.3" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (708 samples, 11.55%)</title><rect x="458.0" y="323.0" width="136.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="461.0" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (685 samples, 11.17%)</title><rect x="462.4" y="307.0" width="131.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="465.4" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (670 samples, 10.93%)</title><rect x="465.3" y="291.0" width="128.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="468.3" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (663 samples, 10.81%)</title><rect x="466.6" y="275.0" width="127.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="469.6" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (645 samples, 10.52%)</title><rect x="470.1" y="259.0" width="124.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="473.1" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (621 samples, 10.13%)</title><rect x="474.7" y="243.0" width="119.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="477.7" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (613 samples, 10.00%)</title><rect x="476.3" y="227.0" width="117.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="479.3" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (608 samples, 9.92%)</title><rect x="477.2" y="211.0" width="117.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="480.2" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (592 samples, 9.65%)</title><rect x="480.3" y="195.0" width="113.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="483.3" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (543 samples, 8.86%)</title><rect x="489.7" y="179.0" width="104.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="492.7" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (493 samples, 8.04%)</title><rect x="499.4" y="163.0" width="94.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="502.4" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (468 samples, 7.63%)</title><rect x="504.2" y="147.0" width="90.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="507.2" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (396 samples, 6.46%)</title><rect x="518.0" y="131.0" width="76.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="521.0" y="142.0">[unknown]</text>
</g>
<g>
<title>[unknown] (303 samples, 4.94%)</title><rect x="535.9" y="115.0" width="58.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="538.9" y="126.0">[unkno..</text>
</g>
<g>
<title>[unknown] (281 samples, 4.58%)</title><rect x="540.2" y="99.0" width="54.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="543.2" y="110.0">[unkn..</text>
</g>
<g>
<title>[unknown] (264 samples, 4.31%)</title><rect x="543.4" y="83.0" width="50.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="546.4" y="94.0">[unkn..</text>
</g>
<g>
<title>[unknown] (29 samples, 0.47%)</title><rect x="588.6" y="67.0" width="5.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="591.6" y="78.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.39%)</title><rect x="589.6" y="51.0" width="4.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="592.6" y="62.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.28%)</title><rect x="591.0" y="35.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="594.0" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.08%)</title><rect x="594.2" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="597.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.08%)</title><rect x="594.2" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="597.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.08%)</title><rect x="594.2" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="597.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.05%)</title><rect x="594.6" y="739.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="597.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.05%)</title><rect x="594.6" y="723.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="597.6" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.03%)</title><rect x="594.8" y="707.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="597.8" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.03%)</title><rect x="594.8" y="691.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="597.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/1098854345.action (98 samples, 1.60%)</title><rect x="595.2" y="803.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="598.2" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0 (98 samples, 1.60%)</title><rect x="595.2" y="787.0" width="18.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="598.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (98 samples, 1.60%)</title><rect x="595.2" y="771.0" width="18.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="598.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (42 samples, 0.68%)</title><rect x="596.3" y="755.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="599.3" y="766.0"></text>
</g>
<g>
<title>gettimeofday (10 samples, 0.16%)</title><rect x="597.7" y="739.0" width="1.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="600.7" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.08%)</title><rect x="599.6" y="739.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="602.6" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.08%)</title><rect x="600.6" y="739.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="603.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.07%)</title><rect x="600.6" y="723.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="603.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (15 samples, 0.24%)</title><rect x="601.5" y="739.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="604.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (50 samples, 0.82%)</title><rect x="604.4" y="755.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="607.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (12 samples, 0.20%)</title><rect x="604.4" y="739.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="607.4" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (12 samples, 0.20%)</title><rect x="604.4" y="723.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="607.4" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.05%)</title><rect x="606.2" y="707.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.2" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.05%)</title><rect x="606.2" y="691.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (38 samples, 0.62%)</title><rect x="606.7" y="739.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.7" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (3 samples, 0.05%)</title><rect x="606.7" y="723.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="609.7" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.&lt;init&gt; (3 samples, 0.05%)</title><rect x="606.7" y="707.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="609.7" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="606.7" y="691.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.7" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (35 samples, 0.57%)</title><rect x="607.3" y="723.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="610.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (35 samples, 0.57%)</title><rect x="607.3" y="707.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="610.3" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (23 samples, 0.38%)</title><rect x="607.3" y="691.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.3" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.&lt;init&gt; (18 samples, 0.29%)</title><rect x="608.3" y="675.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.3" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.&lt;init&gt; (18 samples, 0.29%)</title><rect x="608.3" y="659.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="611.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (12 samples, 0.20%)</title><rect x="611.7" y="691.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.7" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (12 samples, 0.20%)</title><rect x="611.7" y="675.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="614.7" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$75/1479440256.action (429 samples, 7.00%)</title><rect x="614.0" y="803.0" width="82.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.0" y="814.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$1 (429 samples, 7.00%)</title><rect x="614.0" y="787.0" width="82.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.0" y="798.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (429 samples, 7.00%)</title><rect x="614.0" y="771.0" width="82.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="617.0" y="782.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (17 samples, 0.28%)</title><rect x="614.6" y="755.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="617.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (17 samples, 0.28%)</title><rect x="614.6" y="739.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.6" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.28%)</title><rect x="614.6" y="723.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="617.6" y="734.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="614.6" y="707.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="617.6" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.13%)</title><rect x="615.2" y="707.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.2" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.11%)</title><rect x="615.4" y="691.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="618.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="616.2" y="675.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="619.2" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="616.2" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="619.2" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.05%)</title><rect x="616.2" y="643.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="619.2" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.10%)</title><rect x="616.7" y="707.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="619.7" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="616.7" y="691.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="619.7" y="702.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.07%)</title><rect x="617.1" y="691.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="620.1" y="702.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.05%)</title><rect x="617.3" y="675.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="620.3" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.03%)</title><rect x="617.9" y="755.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="620.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.upsert (407 samples, 6.64%)</title><rect x="618.3" y="755.0" width="78.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="621.3" y="766.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.upsert (407 samples, 6.64%)</title><rect x="618.3" y="739.0" width="78.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="621.3" y="750.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 0.05%)</title><rect x="618.9" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="621.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.03%)</title><rect x="619.4" y="723.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="622.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.03%)</title><rect x="619.4" y="707.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="622.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.03%)</title><rect x="619.4" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (11 samples, 0.18%)</title><rect x="619.8" y="723.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="622.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (11 samples, 0.18%)</title><rect x="619.8" y="707.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (10 samples, 0.16%)</title><rect x="620.0" y="691.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (3 samples, 0.05%)</title><rect x="620.0" y="675.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.05%)</title><rect x="620.6" y="675.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.6" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.05%)</title><rect x="620.6" y="659.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="623.6" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.05%)</title><rect x="620.6" y="643.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.6" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="621.4" y="675.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="624.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.upsert (321 samples, 5.23%)</title><rect x="621.9" y="723.0" width="61.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="624.9" y="734.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (320 samples, 5.22%)</title><rect x="621.9" y="707.0" width="61.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.9" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (320 samples, 5.22%)</title><rect x="621.9" y="691.0" width="61.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="624.9" y="702.0">java/u..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (28 samples, 0.46%)</title><rect x="627.5" y="675.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="630.5" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (15 samples, 0.24%)</title><rect x="630.0" y="659.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="633.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="632.5" y="643.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="635.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="632.5" y="627.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="635.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="632.5" y="611.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="635.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="632.5" y="595.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="635.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="632.5" y="579.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="635.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="632.5" y="563.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="635.5" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="632.5" y="547.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="635.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (97 samples, 1.58%)</title><rect x="632.9" y="675.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.9" y="686.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.08%)</title><rect x="650.6" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="653.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (7 samples, 0.11%)</title><rect x="651.6" y="675.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="654.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (24 samples, 0.39%)</title><rect x="652.9" y="675.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="655.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.03%)</title><rect x="654.5" y="659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="657.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.03%)</title><rect x="654.5" y="643.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="657.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.03%)</title><rect x="654.5" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="657.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (14 samples, 0.23%)</title><rect x="654.8" y="659.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="657.8" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.23%)</title><rect x="654.8" y="643.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="657.8" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.23%)</title><rect x="654.8" y="627.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.8" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.05%)</title><rect x="657.0" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (135 samples, 2.20%)</title><rect x="657.5" y="675.0" width="26.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.5" y="686.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (133 samples, 2.17%)</title><rect x="657.9" y="659.0" width="25.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.9" y="670.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="658.3" y="643.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="661.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (129 samples, 2.10%)</title><rect x="658.7" y="643.0" width="24.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.7" y="654.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (12 samples, 0.20%)</title><rect x="663.3" y="627.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.3" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (90 samples, 1.47%)</title><rect x="665.6" y="627.0" width="17.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="668.6" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (29 samples, 0.47%)</title><rect x="672.7" y="611.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="675.7" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (12 samples, 0.20%)</title><rect x="675.8" y="595.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="678.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (24 samples, 0.39%)</title><rect x="678.3" y="611.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="681.3" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.05%)</title><rect x="682.9" y="627.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="685.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (67 samples, 1.09%)</title><rect x="683.7" y="723.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="686.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.&lt;init&gt; (3 samples, 0.05%)</title><rect x="683.7" y="707.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="686.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (63 samples, 1.03%)</title><rect x="684.3" y="707.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="687.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (2 samples, 0.03%)</title><rect x="684.3" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="687.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (35 samples, 0.57%)</title><rect x="684.7" y="691.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="687.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (35 samples, 0.57%)</title><rect x="684.7" y="675.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (35 samples, 0.57%)</title><rect x="684.7" y="659.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="687.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (33 samples, 0.54%)</title><rect x="685.1" y="643.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="688.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (33 samples, 0.54%)</title><rect x="685.1" y="627.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="688.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (33 samples, 0.54%)</title><rect x="685.1" y="611.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (2 samples, 0.03%)</title><rect x="689.9" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="692.9" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.10%)</title><rect x="690.3" y="595.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="693.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (26 samples, 0.42%)</title><rect x="691.4" y="691.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="694.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (26 samples, 0.42%)</title><rect x="691.4" y="675.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="694.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (26 samples, 0.42%)</title><rect x="691.4" y="659.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.4" y="670.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="693.3" y="643.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="696.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (4 samples, 0.07%)</title><rect x="693.7" y="643.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="696.7" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.16%)</title><rect x="694.5" y="643.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="697.5" y="654.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="694.5" y="627.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="697.5" y="638.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.13%)</title><rect x="694.9" y="627.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="697.9" y="638.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.08%)</title><rect x="695.4" y="611.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="698.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (2 samples, 0.03%)</title><rect x="696.6" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.6" y="846.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,982 samples, 32.32%)</title><rect x="697.0" y="883.0" width="381.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="700.0" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (528 samples, 8.61%)</title><rect x="697.2" y="867.0" width="101.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="700.2" y="878.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (19 samples, 0.31%)</title><rect x="699.3" y="851.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="702.3" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (5 samples, 0.08%)</title><rect x="702.0" y="835.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="705.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (498 samples, 8.12%)</title><rect x="703.0" y="851.0" width="95.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="706.0" y="862.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (7 samples, 0.11%)</title><rect x="707.2" y="835.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="710.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (448 samples, 7.31%)</title><rect x="708.5" y="835.0" width="86.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="711.5" y="846.0">[unknown]</text>
</g>
<g>
<title>[vdso] (3 samples, 0.05%)</title><rect x="708.5" y="819.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="711.5" y="830.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (6 samples, 0.10%)</title><rect x="709.1" y="819.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="712.1" y="830.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (8 samples, 0.13%)</title><rect x="710.3" y="819.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="713.3" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (4 samples, 0.07%)</title><rect x="711.8" y="819.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="714.8" y="830.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.11%)</title><rect x="712.6" y="819.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="715.6" y="830.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.07%)</title><rect x="713.2" y="803.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="716.2" y="814.0"></text>
</g>
<g>
<title>epoll_wait (420 samples, 6.85%)</title><rect x="713.9" y="819.0" width="80.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="716.9" y="830.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (383 samples, 6.25%)</title><rect x="721.0" y="803.0" width="73.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="724.0" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (383 samples, 6.25%)</title><rect x="721.0" y="787.0" width="73.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="724.0" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (346 samples, 5.64%)</title><rect x="728.2" y="771.0" width="66.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="731.2" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (346 samples, 5.64%)</title><rect x="728.2" y="755.0" width="66.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="731.2" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (341 samples, 5.56%)</title><rect x="729.1" y="739.0" width="65.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="732.1" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (289 samples, 4.71%)</title><rect x="739.1" y="723.0" width="55.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="742.1" y="734.0">[unkn..</text>
</g>
<g>
<title>[unknown] (200 samples, 3.26%)</title><rect x="756.3" y="707.0" width="38.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="759.3" y="718.0">[un..</text>
</g>
<g>
<title>[unknown] (144 samples, 2.35%)</title><rect x="767.0" y="691.0" width="27.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="770.0" y="702.0">[..</text>
</g>
<g>
<title>[unknown] (105 samples, 1.71%)</title><rect x="774.5" y="675.0" width="20.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="777.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.13%)</title><rect x="781.5" y="659.0" width="13.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="784.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.16%)</title><rect x="792.8" y="643.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="795.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.16%)</title><rect x="792.8" y="627.0" width="1.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="795.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.16%)</title><rect x="792.8" y="611.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="795.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.16%)</title><rect x="792.8" y="595.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="795.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.16%)</title><rect x="792.8" y="579.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="795.8" y="590.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="793.0" y="563.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="796.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="793.0" y="547.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="796.0" y="558.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.08%)</title><rect x="794.7" y="835.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="797.7" y="846.0"></text>
</g>
<g>
<title>epoll_wait (16 samples, 0.26%)</title><rect x="795.7" y="835.0" width="3.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="798.7" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,453 samples, 23.70%)</title><rect x="798.8" y="867.0" width="279.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.8" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (6 samples, 0.10%)</title><rect x="801.7" y="851.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="804.7" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,427 samples, 23.27%)</title><rect x="802.8" y="851.0" width="274.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="805.8" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (983 samples, 16.03%)</title><rect x="804.0" y="835.0" width="189.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.0" y="846.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="810.5" y="819.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="813.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="810.5" y="803.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="813.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="810.5" y="787.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="813.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (728 samples, 11.87%)</title><rect x="810.9" y="819.0" width="140.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="813.9" y="830.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (719 samples, 11.73%)</title><rect x="812.6" y="803.0" width="138.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="815.6" y="814.0">one/nio/http/Http..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (656 samples, 10.70%)</title><rect x="813.0" y="787.0" width="126.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="816.0" y="798.0">RequestHandler0_..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (54 samples, 0.88%)</title><rect x="813.4" y="771.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="816.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (27 samples, 0.44%)</title><rect x="813.8" y="755.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (26 samples, 0.42%)</title><rect x="814.0" y="739.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.0" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.08%)</title><rect x="817.3" y="723.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="820.3" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.07%)</title><rect x="818.2" y="723.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (15 samples, 0.24%)</title><rect x="819.0" y="755.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="822.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (8 samples, 0.13%)</title><rect x="820.3" y="739.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="823.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (6 samples, 0.10%)</title><rect x="820.7" y="723.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="823.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.08%)</title><rect x="821.9" y="755.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="824.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.07%)</title><rect x="822.1" y="739.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.1" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.07%)</title><rect x="822.1" y="723.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="825.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.08%)</title><rect x="822.8" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="825.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="823.0" y="739.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="826.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="823.0" y="723.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="826.0" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.07%)</title><rect x="823.0" y="707.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (600 samples, 9.78%)</title><rect x="823.8" y="771.0" width="115.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="826.8" y="782.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/String.getBytes (7 samples, 0.11%)</title><rect x="824.2" y="755.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="827.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (4 samples, 0.07%)</title><rect x="825.5" y="755.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="828.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.23%)</title><rect x="826.3" y="755.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="829.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.23%)</title><rect x="826.3" y="739.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="829.3" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.23%)</title><rect x="826.3" y="723.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="829.3" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.23%)</title><rect x="826.3" y="707.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="829.3" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (14 samples, 0.23%)</title><rect x="826.3" y="691.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="829.3" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.05%)</title><rect x="827.1" y="675.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.11%)</title><rect x="827.6" y="675.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="830.6" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.05%)</title><rect x="828.4" y="659.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="831.4" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (573 samples, 9.34%)</title><rect x="829.0" y="755.0" width="110.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="832.0" y="766.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (573 samples, 9.34%)</title><rect x="829.0" y="739.0" width="110.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="832.0" y="750.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (569 samples, 9.28%)</title><rect x="829.6" y="723.0" width="109.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="832.6" y="734.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (12 samples, 0.20%)</title><rect x="831.5" y="707.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="834.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (15 samples, 0.24%)</title><rect x="833.8" y="707.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="836.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (407 samples, 6.64%)</title><rect x="836.7" y="707.0" width="78.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="839.7" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.03%)</title><rect x="836.9" y="691.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="839.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="837.3" y="691.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="840.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="837.3" y="675.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="840.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="837.3" y="659.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="840.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="837.3" y="643.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="840.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="837.3" y="627.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="840.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="837.3" y="611.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="840.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (402 samples, 6.56%)</title><rect x="837.7" y="691.0" width="77.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="840.7" y="702.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (402 samples, 6.56%)</title><rect x="837.7" y="675.0" width="77.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="840.7" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (402 samples, 6.56%)</title><rect x="837.7" y="659.0" width="77.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="840.7" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (402 samples, 6.56%)</title><rect x="837.7" y="643.0" width="77.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="840.7" y="654.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (402 samples, 6.56%)</title><rect x="837.7" y="627.0" width="77.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="840.7" y="638.0">jdk/inter..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.03%)</title><rect x="838.2" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="841.2" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.05%)</title><rect x="838.6" y="611.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="841.6" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="839.2" y="611.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="842.2" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.03%)</title><rect x="839.6" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="842.6" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark (72 samples, 1.17%)</title><rect x="840.0" y="611.0" width="13.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="843.0" y="622.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.05%)</title><rect x="841.5" y="595.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="844.5" y="606.0"></text>
</g>
<g>
<title>Parker::unpark() (6 samples, 0.10%)</title><rect x="842.1" y="595.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="845.1" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.05%)</title><rect x="843.2" y="595.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="846.2" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (5 samples, 0.08%)</title><rect x="843.8" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="846.8" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (8 samples, 0.13%)</title><rect x="844.8" y="595.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="847.8" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.07%)</title><rect x="846.3" y="595.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="849.3" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (3 samples, 0.05%)</title><rect x="847.1" y="595.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="850.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="847.7" y="595.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="850.7" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="847.7" y="579.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="850.7" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="847.7" y="563.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="850.7" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (20 samples, 0.33%)</title><rect x="848.0" y="595.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="851.0" y="606.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (5 samples, 0.08%)</title><rect x="852.3" y="595.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="855.3" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.05%)</title><rect x="853.2" y="595.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="856.2" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (12 samples, 0.20%)</title><rect x="853.8" y="611.0" width="2.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="856.8" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (305 samples, 4.97%)</title><rect x="856.3" y="611.0" width="58.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="859.3" y="622.0">pthrea..</text>
</g>
<g>
<title>[unknown] (274 samples, 4.47%)</title><rect x="862.3" y="595.0" width="52.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="865.3" y="606.0">[unkn..</text>
</g>
<g>
<title>[unknown] (274 samples, 4.47%)</title><rect x="862.3" y="579.0" width="52.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="865.3" y="590.0">[unkn..</text>
</g>
<g>
<title>[unknown] (253 samples, 4.13%)</title><rect x="866.3" y="563.0" width="48.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="869.3" y="574.0">[unk..</text>
</g>
<g>
<title>[unknown] (251 samples, 4.09%)</title><rect x="866.7" y="547.0" width="48.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="869.7" y="558.0">[unk..</text>
</g>
<g>
<title>[unknown] (244 samples, 3.98%)</title><rect x="868.1" y="531.0" width="46.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="871.1" y="542.0">[unk..</text>
</g>
<g>
<title>[unknown] (216 samples, 3.52%)</title><rect x="873.4" y="515.0" width="41.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="876.4" y="526.0">[un..</text>
</g>
<g>
<title>[unknown] (192 samples, 3.13%)</title><rect x="878.1" y="499.0" width="36.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="881.1" y="510.0">[un..</text>
</g>
<g>
<title>[unknown] (175 samples, 2.85%)</title><rect x="881.3" y="483.0" width="33.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="884.3" y="494.0">[u..</text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="913.9" y="467.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="916.9" y="478.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="913.9" y="451.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="916.9" y="462.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="913.9" y="435.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="916.9" y="446.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="913.9" y="419.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="916.9" y="430.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="914.1" y="403.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="917.1" y="414.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="914.2" y="387.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="917.2" y="398.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="914.2" y="371.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="917.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 0.42%)</title><rect x="915.0" y="707.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="918.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 0.42%)</title><rect x="915.0" y="691.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="918.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (8 samples, 0.13%)</title><rect x="918.5" y="675.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (6 samples, 0.10%)</title><rect x="918.9" y="659.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="921.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.03%)</title><rect x="918.9" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (4 samples, 0.07%)</title><rect x="919.2" y="643.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.2" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.03%)</title><rect x="919.6" y="627.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="919.6" y="611.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="922.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (98 samples, 1.60%)</title><rect x="920.0" y="707.0" width="18.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="923.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (90 samples, 1.47%)</title><rect x="921.6" y="691.0" width="17.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="924.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (55 samples, 0.90%)</title><rect x="922.7" y="675.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="925.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (16 samples, 0.26%)</title><rect x="923.7" y="659.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="926.7" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (12 samples, 0.20%)</title><rect x="924.4" y="643.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="927.4" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (7 samples, 0.11%)</title><rect x="925.4" y="627.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (26 samples, 0.42%)</title><rect x="926.8" y="659.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="929.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (26 samples, 0.42%)</title><rect x="926.8" y="643.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="929.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (15 samples, 0.24%)</title><rect x="928.9" y="627.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="931.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (8 samples, 0.13%)</title><rect x="931.8" y="659.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="934.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (8 samples, 0.13%)</title><rect x="931.8" y="643.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="934.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (8 samples, 0.13%)</title><rect x="931.8" y="627.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="934.8" y="638.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.05%)</title><rect x="932.3" y="611.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="935.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.03%)</title><rect x="932.9" y="611.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="935.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (29 samples, 0.47%)</title><rect x="933.3" y="675.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="936.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (27 samples, 0.44%)</title><rect x="933.7" y="659.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="936.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (11 samples, 0.18%)</title><rect x="934.1" y="643.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="937.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (10 samples, 0.16%)</title><rect x="936.2" y="643.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="939.2" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (9 samples, 0.15%)</title><rect x="936.4" y="627.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="939.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (4 samples, 0.07%)</title><rect x="938.1" y="643.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="941.1" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (7 samples, 0.11%)</title><rect x="939.3" y="787.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (4 samples, 0.07%)</title><rect x="939.8" y="771.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="942.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (30 samples, 0.49%)</title><rect x="940.6" y="787.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (28 samples, 0.46%)</title><rect x="941.0" y="771.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="944.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (21 samples, 0.34%)</title><rect x="941.4" y="755.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="944.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equals (14 samples, 0.23%)</title><rect x="941.8" y="739.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="944.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="943.3" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="946.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (4 samples, 0.07%)</title><rect x="943.7" y="723.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="946.7" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.05%)</title><rect x="944.5" y="739.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="947.5" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="945.0" y="739.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="948.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.08%)</title><rect x="945.4" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="948.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.08%)</title><rect x="945.4" y="739.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="948.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (24 samples, 0.39%)</title><rect x="946.4" y="787.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="949.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (24 samples, 0.39%)</title><rect x="946.4" y="771.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="949.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (19 samples, 0.31%)</title><rect x="947.3" y="755.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="950.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13 samples, 0.21%)</title><rect x="947.3" y="739.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.3" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.10%)</title><rect x="949.8" y="739.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="952.8" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (69 samples, 1.13%)</title><rect x="951.0" y="819.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="954.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (34 samples, 0.55%)</title><rect x="952.2" y="803.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (19 samples, 0.31%)</title><rect x="954.5" y="787.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="957.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (18 samples, 0.29%)</title><rect x="954.7" y="771.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (15 samples, 0.24%)</title><rect x="955.2" y="755.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="958.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.05%)</title><rect x="958.1" y="787.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="961.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 0.47%)</title><rect x="958.7" y="803.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="961.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 0.47%)</title><rect x="958.7" y="787.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="961.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.13%)</title><rect x="962.7" y="771.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="965.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.13%)</title><rect x="962.7" y="755.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="965.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (14 samples, 0.23%)</title><rect x="964.3" y="819.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="967.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.10%)</title><rect x="965.2" y="803.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="968.2" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.10%)</title><rect x="965.2" y="787.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="968.2" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (2 samples, 0.03%)</title><rect x="966.6" y="803.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="969.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (35 samples, 0.57%)</title><rect x="967.0" y="819.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="970.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (74 samples, 1.21%)</title><rect x="973.9" y="819.0" width="14.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="976.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="974.5" y="803.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="977.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (58 samples, 0.95%)</title><rect x="974.9" y="803.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="977.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="976.2" y="787.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (43 samples, 0.70%)</title><rect x="976.6" y="787.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="979.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.10%)</title><rect x="980.8" y="771.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="983.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.08%)</title><rect x="981.0" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="984.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (15 samples, 0.24%)</title><rect x="982.0" y="771.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="985.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.07%)</title><rect x="982.0" y="755.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="985.0" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.03%)</title><rect x="982.0" y="739.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="985.0" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="982.4" y="739.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="985.4" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (11 samples, 0.18%)</title><rect x="982.7" y="755.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="985.7" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.10%)</title><rect x="984.9" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="987.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (11 samples, 0.18%)</title><rect x="986.0" y="803.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="989.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10 samples, 0.16%)</title><rect x="986.2" y="787.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="989.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.13%)</title><rect x="986.2" y="771.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="989.2" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="987.8" y="771.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="990.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (26 samples, 0.42%)</title><rect x="988.1" y="819.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="991.1" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (23 samples, 0.38%)</title><rect x="988.7" y="803.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="991.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.13%)</title><rect x="991.4" y="787.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="994.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.08%)</title><rect x="991.4" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="994.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.05%)</title><rect x="991.8" y="755.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="994.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (3 samples, 0.05%)</title><rect x="992.4" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="995.4" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (438 samples, 7.14%)</title><rect x="993.1" y="835.0" width="84.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="996.1" y="846.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (438 samples, 7.14%)</title><rect x="993.1" y="819.0" width="84.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="996.1" y="830.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.05%)</title><rect x="997.6" y="803.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1000.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (103 samples, 1.68%)</title><rect x="998.1" y="803.0" width="19.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1001.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (103 samples, 1.68%)</title><rect x="998.1" y="787.0" width="19.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1001.1" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (87 samples, 1.42%)</title><rect x="998.1" y="771.0" width="16.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1001.1" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.07%)</title><rect x="999.7" y="755.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.7" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.07%)</title><rect x="1000.5" y="755.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1003.5" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (3 samples, 0.05%)</title><rect x="1001.4" y="755.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.4" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3 (29 samples, 0.47%)</title><rect x="1002.0" y="755.0" width="5.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1005.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1007.2" y="739.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1010.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1007.2" y="723.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1010.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1007.2" y="707.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1010.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1007.2" y="691.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1010.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1007.2" y="675.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1010.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1007.2" y="659.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1010.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1007.2" y="643.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1010.2" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.03%)</title><rect x="1007.6" y="755.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1010.6" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (31 samples, 0.51%)</title><rect x="1008.0" y="755.0" width="5.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1011.0" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.05%)</title><rect x="1009.3" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.3" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="1009.9" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (8 samples, 0.13%)</title><rect x="1010.3" y="739.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.3" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.08%)</title><rect x="1011.8" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1014.8" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.10%)</title><rect x="1012.8" y="739.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1015.8" y="750.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (5 samples, 0.08%)</title><rect x="1013.9" y="755.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.9" y="766.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.07%)</title><rect x="1014.9" y="771.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1017.9" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.11%)</title><rect x="1015.7" y="771.0" width="1.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1018.7" y="782.0"></text>
</g>
<g>
<title>recv (5 samples, 0.08%)</title><rect x="1017.0" y="771.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1020.0" y="782.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.10%)</title><rect x="1018.0" y="803.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1021.0" y="814.0"></text>
</g>
<g>
<title>recv (303 samples, 4.94%)</title><rect x="1019.1" y="803.0" width="58.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1022.1" y="814.0">recv</text>
</g>
<g>
<title>[unknown] (287 samples, 4.68%)</title><rect x="1022.2" y="787.0" width="55.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1025.2" y="798.0">[unkn..</text>
</g>
<g>
<title>[unknown] (287 samples, 4.68%)</title><rect x="1022.2" y="771.0" width="55.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1025.2" y="782.0">[unkn..</text>
</g>
<g>
<title>[unknown] (261 samples, 4.26%)</title><rect x="1027.2" y="755.0" width="50.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1030.2" y="766.0">[unkn..</text>
</g>
<g>
<title>[unknown] (260 samples, 4.24%)</title><rect x="1027.4" y="739.0" width="50.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1030.4" y="750.0">[unkn..</text>
</g>
<g>
<title>[unknown] (253 samples, 4.13%)</title><rect x="1028.7" y="723.0" width="48.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1031.7" y="734.0">[unk..</text>
</g>
<g>
<title>[unknown] (245 samples, 4.00%)</title><rect x="1030.3" y="707.0" width="47.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1033.3" y="718.0">[unk..</text>
</g>
<g>
<title>[unknown] (235 samples, 3.83%)</title><rect x="1032.2" y="691.0" width="45.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1035.2" y="702.0">[unk..</text>
</g>
<g>
<title>[unknown] (188 samples, 3.07%)</title><rect x="1041.2" y="675.0" width="36.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1044.2" y="686.0">[un..</text>
</g>
<g>
<title>[unknown] (148 samples, 2.41%)</title><rect x="1048.9" y="659.0" width="28.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1051.9" y="670.0">[u..</text>
</g>
<g>
<title>[unknown] (104 samples, 1.70%)</title><rect x="1057.4" y="643.0" width="20.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1060.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (67 samples, 1.09%)</title><rect x="1064.5" y="627.0" width="12.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1067.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.55%)</title><rect x="1070.9" y="611.0" width="6.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1073.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1076.8" y="595.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1079.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1076.8" y="579.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1079.8" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1077.0" y="563.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1080.0" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.08%)</title><rect x="1077.4" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.4" y="862.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.07%)</title><rect x="1077.6" y="835.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1080.6" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.07%)</title><rect x="1077.6" y="819.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1080.6" y="830.0"></text>
</g>
<g>
<title>start_thread (579 samples, 9.44%)</title><rect x="1078.6" y="883.0" width="111.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1081.6" y="894.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (579 samples, 9.44%)</title><rect x="1078.6" y="867.0" width="111.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1081.6" y="878.0">thread_native..</text>
</g>
<g>
<title>Thread::call_run() (579 samples, 9.44%)</title><rect x="1078.6" y="851.0" width="111.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.6" y="862.0">Thread::call_..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.07%)</title><rect x="1078.6" y="835.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.6" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.07%)</title><rect x="1078.6" y="819.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.6" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (4 samples, 0.07%)</title><rect x="1078.6" y="803.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.6" y="814.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (4 samples, 0.07%)</title><rect x="1078.6" y="787.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.6" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (3 samples, 0.05%)</title><rect x="1078.6" y="771.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.6" y="782.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (3 samples, 0.05%)</title><rect x="1078.6" y="755.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.6" y="766.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (2 samples, 0.03%)</title><rect x="1078.6" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.6" y="750.0"></text>
</g>
<g>
<title>GangWorker::loop() (108 samples, 1.76%)</title><rect x="1079.4" y="835.0" width="20.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.4" y="846.0"></text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (6 samples, 0.10%)</title><rect x="1079.4" y="819.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1082.4" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (6 samples, 0.10%)</title><rect x="1079.4" y="803.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.4" y="814.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (5 samples, 0.08%)</title><rect x="1079.5" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1082.5" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (4 samples, 0.07%)</title><rect x="1079.7" y="771.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.7" y="782.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (97 samples, 1.58%)</title><rect x="1080.5" y="819.0" width="18.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.5" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (73 samples, 1.19%)</title><rect x="1080.5" y="803.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.5" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (72 samples, 1.17%)</title><rect x="1080.5" y="787.0" width="13.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.5" y="798.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (46 samples, 0.75%)</title><rect x="1085.3" y="771.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.3" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (41 samples, 0.67%)</title><rect x="1086.3" y="755.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="1091.9" y="739.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1094.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="1091.9" y="723.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1094.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="1091.9" y="707.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1094.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="1091.9" y="691.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1094.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="1091.9" y="675.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1094.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1092.1" y="659.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1095.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1092.2" y="643.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1095.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1092.2" y="627.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1095.2" y="638.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (8 samples, 0.13%)</title><rect x="1092.6" y="739.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.6" y="750.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.07%)</title><rect x="1093.4" y="723.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.4" y="734.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (22 samples, 0.36%)</title><rect x="1094.6" y="803.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.6" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (22 samples, 0.36%)</title><rect x="1094.6" y="787.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.6" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (22 samples, 0.36%)</title><rect x="1094.6" y="771.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.6" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (22 samples, 0.36%)</title><rect x="1094.6" y="755.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.6" y="766.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (21 samples, 0.34%)</title><rect x="1094.6" y="739.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.6" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (17 samples, 0.28%)</title><rect x="1094.6" y="723.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.6" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 0.11%)</title><rect x="1096.3" y="707.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.3" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="1097.2" y="691.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1100.2" y="702.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.05%)</title><rect x="1097.8" y="723.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.8" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.05%)</title><rect x="1097.8" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.8" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.03%)</title><rect x="1098.8" y="803.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.8" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.03%)</title><rect x="1098.8" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.8" y="798.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1099.2" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.2" y="830.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (3 samples, 0.05%)</title><rect x="1099.6" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.6" y="830.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (3 samples, 0.05%)</title><rect x="1099.6" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.6" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.05%)</title><rect x="1099.6" y="787.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.6" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (458 samples, 7.47%)</title><rect x="1100.1" y="835.0" width="88.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.1" y="846.0">JavaThread..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (458 samples, 7.47%)</title><rect x="1100.1" y="819.0" width="88.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.1" y="830.0">JavaThread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (454 samples, 7.40%)</title><rect x="1100.1" y="803.0" width="87.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.1" y="814.0">CompileBro..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (453 samples, 7.39%)</title><rect x="1100.1" y="787.0" width="87.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.1" y="798.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (429 samples, 7.00%)</title><rect x="1100.1" y="771.0" width="82.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.1" y="782.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (429 samples, 7.00%)</title><rect x="1100.1" y="755.0" width="82.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.1" y="766.0">Compile::..</text>
</g>
<g>
<title>Compile::Code_Gen() (223 samples, 3.64%)</title><rect x="1100.1" y="739.0" width="42.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.1" y="750.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.07%)</title><rect x="1100.1" y="723.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.1" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.03%)</title><rect x="1100.1" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.1" y="718.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (2 samples, 0.03%)</title><rect x="1100.5" y="707.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1103.5" y="718.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.08%)</title><rect x="1100.9" y="723.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.9" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (14 samples, 0.23%)</title><rect x="1102.1" y="723.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.1" y="734.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.03%)</title><rect x="1102.3" y="707.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.3" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (10 samples, 0.16%)</title><rect x="1102.6" y="707.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.6" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.05%)</title><rect x="1103.0" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.0" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.07%)</title><rect x="1103.8" y="691.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.8" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.03%)</title><rect x="1103.8" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.8" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.03%)</title><rect x="1104.2" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.2" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.03%)</title><rect x="1104.9" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.9" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (2 samples, 0.03%)</title><rect x="1104.9" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.9" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (17 samples, 0.28%)</title><rect x="1105.3" y="723.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (16 samples, 0.26%)</title><rect x="1105.5" y="707.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.5" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.05%)</title><rect x="1105.7" y="691.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.05%)</title><rect x="1106.5" y="691.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (2 samples, 0.03%)</title><rect x="1107.1" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.1" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.07%)</title><rect x="1107.6" y="691.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1110.6" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.03%)</title><rect x="1108.0" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.0" y="686.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.03%)</title><rect x="1108.0" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (178 samples, 2.90%)</title><rect x="1108.8" y="723.0" width="34.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.8" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.07%)</title><rect x="1109.8" y="707.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.13%)</title><rect x="1110.5" y="707.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.5" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.03%)</title><rect x="1111.7" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (8 samples, 0.13%)</title><rect x="1112.1" y="707.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.1" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (7 samples, 0.11%)</title><rect x="1112.3" y="691.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.3" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.05%)</title><rect x="1113.0" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (20 samples, 0.33%)</title><rect x="1113.6" y="707.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (40 samples, 0.65%)</title><rect x="1117.5" y="707.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.5" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1119.0" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.03%)</title><rect x="1119.4" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (3 samples, 0.05%)</title><rect x="1120.0" y="691.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.0" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1120.1" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.18%)</title><rect x="1120.5" y="691.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.5" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.05%)</title><rect x="1122.1" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.03%)</title><rect x="1122.6" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (6 samples, 0.10%)</title><rect x="1123.0" y="691.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.0" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.05%)</title><rect x="1123.0" y="675.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.0" y="686.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.05%)</title><rect x="1123.6" y="675.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.6" y="686.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (4 samples, 0.07%)</title><rect x="1124.4" y="691.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (4 samples, 0.07%)</title><rect x="1125.2" y="707.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.05%)</title><rect x="1125.3" y="691.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (2 samples, 0.03%)</title><rect x="1126.7" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (18 samples, 0.29%)</title><rect x="1127.1" y="707.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.1" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.05%)</title><rect x="1129.2" y="691.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.2" y="702.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 0.03%)</title><rect x="1129.8" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (11 samples, 0.18%)</title><rect x="1130.5" y="707.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (17 samples, 0.28%)</title><rect x="1132.7" y="707.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (8 samples, 0.13%)</title><rect x="1134.0" y="691.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.0" y="702.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 0.03%)</title><rect x="1135.5" y="691.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1138.5" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.08%)</title><rect x="1135.9" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.9" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.03%)</title><rect x="1135.9" y="691.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.9" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.05%)</title><rect x="1136.3" y="691.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.3" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (3 samples, 0.05%)</title><rect x="1136.3" y="675.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.3" y="686.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (2 samples, 0.03%)</title><rect x="1136.3" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.3" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.08%)</title><rect x="1136.9" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.9" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.07%)</title><rect x="1137.1" y="691.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.1" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.07%)</title><rect x="1137.9" y="707.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.07%)</title><rect x="1138.6" y="707.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.6" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (14 samples, 0.23%)</title><rect x="1139.4" y="707.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.4" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.11%)</title><rect x="1140.7" y="691.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.7" y="702.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.03%)</title><rect x="1141.5" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.5" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (176 samples, 2.87%)</title><rect x="1143.0" y="739.0" width="33.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.0" y="750.0">Co..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.03%)</title><rect x="1143.4" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.03%)</title><rect x="1143.4" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.4" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.03%)</title><rect x="1143.4" y="691.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (8 samples, 0.13%)</title><rect x="1143.8" y="723.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (8 samples, 0.13%)</title><rect x="1143.8" y="707.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (6 samples, 0.10%)</title><rect x="1144.0" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.10%)</title><rect x="1144.0" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.08%)</title><rect x="1144.2" y="659.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.03%)</title><rect x="1144.2" y="643.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.2" y="654.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (2 samples, 0.03%)</title><rect x="1144.2" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.05%)</title><rect x="1144.6" y="643.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.03%)</title><rect x="1144.8" y="627.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.03%)</title><rect x="1144.8" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.03%)</title><rect x="1144.8" y="595.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.8" y="606.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.07%)</title><rect x="1145.4" y="723.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.4" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (4 samples, 0.07%)</title><rect x="1146.1" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.1" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (4 samples, 0.07%)</title><rect x="1146.1" y="707.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool, bool) (2 samples, 0.03%)</title><rect x="1146.9" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.9" y="734.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.03%)</title><rect x="1146.9" y="707.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1149.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (127 samples, 2.07%)</title><rect x="1147.3" y="723.0" width="24.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.3" y="734.0">P..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1147.3" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.3" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1147.3" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.3" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1147.3" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.3" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.03%)</title><rect x="1147.7" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.03%)</title><rect x="1147.7" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1147.7" y="675.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.03%)</title><rect x="1147.7" y="659.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.7" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.11%)</title><rect x="1148.6" y="707.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1150.0" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (83 samples, 1.35%)</title><rect x="1150.4" y="707.0" width="15.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (77 samples, 1.26%)</title><rect x="1151.5" y="691.0" width="14.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (74 samples, 1.21%)</title><rect x="1151.5" y="675.0" width="14.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.03%)</title><rect x="1151.9" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (70 samples, 1.14%)</title><rect x="1152.3" y="659.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (2 samples, 0.03%)</title><rect x="1165.8" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (7 samples, 0.11%)</title><rect x="1166.3" y="707.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (3 samples, 0.05%)</title><rect x="1166.9" y="691.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (8 samples, 0.13%)</title><rect x="1167.7" y="707.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (5 samples, 0.08%)</title><rect x="1168.1" y="691.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.03%)</title><rect x="1168.3" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.03%)</title><rect x="1168.6" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.6" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.18%)</title><rect x="1169.4" y="707.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.16%)</title><rect x="1169.6" y="691.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="702.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (3 samples, 0.05%)</title><rect x="1169.6" y="675.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.6" y="686.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (3 samples, 0.05%)</title><rect x="1169.6" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="670.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1170.4" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.4" y="686.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1171.1" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.1" y="686.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.03%)</title><rect x="1171.1" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.1" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1171.1" y="643.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.1" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1171.1" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.1" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1171.1" y="611.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.1" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1171.1" y="595.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.1" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1171.1" y="579.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.1" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1171.1" y="563.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.1" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1171.1" y="547.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.1" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1171.1" y="531.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.1" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (21 samples, 0.34%)</title><rect x="1171.7" y="723.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (18 samples, 0.29%)</title><rect x="1172.3" y="707.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.3" y="718.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1172.9" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="702.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.05%)</title><rect x="1173.3" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="702.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1173.3" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.05%)</title><rect x="1174.2" y="691.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.2" y="702.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.05%)</title><rect x="1174.8" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="702.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (3 samples, 0.05%)</title><rect x="1174.8" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="686.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1175.4" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.4" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (4 samples, 0.07%)</title><rect x="1176.0" y="723.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.0" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.07%)</title><rect x="1176.0" y="707.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.05%)</title><rect x="1176.1" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (27 samples, 0.44%)</title><rect x="1176.9" y="739.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (27 samples, 0.44%)</title><rect x="1176.9" y="723.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (27 samples, 0.44%)</title><rect x="1176.9" y="707.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (27 samples, 0.44%)</title><rect x="1176.9" y="691.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (27 samples, 0.44%)</title><rect x="1176.9" y="675.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (27 samples, 0.44%)</title><rect x="1176.9" y="659.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (20 samples, 0.33%)</title><rect x="1177.1" y="643.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (20 samples, 0.33%)</title><rect x="1177.1" y="627.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 0.31%)</title><rect x="1177.1" y="611.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 0.31%)</title><rect x="1177.1" y="595.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (19 samples, 0.31%)</title><rect x="1177.1" y="579.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 0.26%)</title><rect x="1177.1" y="563.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.21%)</title><rect x="1177.3" y="547.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.20%)</title><rect x="1177.5" y="531.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.18%)</title><rect x="1177.5" y="515.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.18%)</title><rect x="1177.5" y="499.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.18%)</title><rect x="1177.5" y="483.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.11%)</title><rect x="1177.7" y="467.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.10%)</title><rect x="1177.9" y="451.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.10%)</title><rect x="1177.9" y="435.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.10%)</title><rect x="1177.9" y="419.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.10%)</title><rect x="1177.9" y="403.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.10%)</title><rect x="1177.9" y="387.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.08%)</title><rect x="1177.9" y="371.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1178.1" y="355.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1178.1" y="339.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1178.1" y="323.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1178.1" y="307.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.07%)</title><rect x="1178.1" y="291.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1178.1" y="275.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1178.3" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1178.3" y="243.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1178.3" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1178.3" y="211.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1178.3" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1178.3" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.03%)</title><rect x="1179.0" y="467.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1179.8" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1179.8" y="531.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1179.8" y="515.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1179.8" y="499.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1179.8" y="483.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1179.8" y="467.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1179.8" y="451.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1179.8" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1179.8" y="419.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.03%)</title><rect x="1180.2" y="563.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1181.0" y="643.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1181.0" y="627.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.08%)</title><rect x="1181.0" y="611.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.08%)</title><rect x="1181.0" y="595.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.08%)</title><rect x="1181.0" y="579.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.08%)</title><rect x="1181.0" y="563.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.08%)</title><rect x="1181.0" y="547.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1181.1" y="531.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1181.1" y="515.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1181.1" y="499.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1181.1" y="483.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.05%)</title><rect x="1181.1" y="467.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1181.1" y="451.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.3" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.3" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.3" y="403.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.3" y="387.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.3" y="371.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1181.3" y="355.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.3" y="339.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.3" y="323.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.3" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.3" y="291.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.3" y="275.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1181.3" y="259.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.3" y="243.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.3" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.3" y="211.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.3" y="195.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.3" y="179.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1181.3" y="163.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.3" y="147.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.3" y="131.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.3" y="115.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="126.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.05%)</title><rect x="1182.1" y="739.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="750.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.03%)</title><rect x="1182.1" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="734.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (17 samples, 0.28%)</title><rect x="1182.7" y="771.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (17 samples, 0.28%)</title><rect x="1182.7" y="755.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (17 samples, 0.28%)</title><rect x="1182.7" y="739.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (17 samples, 0.28%)</title><rect x="1182.7" y="723.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (4 samples, 0.07%)</title><rect x="1182.7" y="707.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.05%)</title><rect x="1182.7" y="691.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.05%)</title><rect x="1182.7" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.7" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.05%)</title><rect x="1182.7" y="659.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.05%)</title><rect x="1182.7" y="643.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.7" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.05%)</title><rect x="1182.7" y="627.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.05%)</title><rect x="1182.7" y="611.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.03%)</title><rect x="1182.7" y="595.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.03%)</title><rect x="1182.7" y="579.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.7" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.03%)</title><rect x="1182.7" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.03%)</title><rect x="1182.7" y="547.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="558.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.03%)</title><rect x="1183.5" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (11 samples, 0.18%)</title><rect x="1183.8" y="707.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (3 samples, 0.05%)</title><rect x="1183.8" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="702.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (3 samples, 0.05%)</title><rect x="1183.8" y="675.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="686.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (8 samples, 0.13%)</title><rect x="1184.4" y="691.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="702.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (4 samples, 0.07%)</title><rect x="1184.4" y="675.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.4" y="686.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (4 samples, 0.07%)</title><rect x="1184.4" y="659.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="670.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (3 samples, 0.05%)</title><rect x="1184.6" y="643.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="654.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (3 samples, 0.05%)</title><rect x="1184.6" y="627.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.6" y="638.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (2 samples, 0.03%)</title><rect x="1185.2" y="675.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="686.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (2 samples, 0.03%)</title><rect x="1185.2" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (4 samples, 0.07%)</title><rect x="1186.2" y="771.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (4 samples, 0.07%)</title><rect x="1186.2" y="755.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.2" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (4 samples, 0.07%)</title><rect x="1186.2" y="739.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="750.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (4 samples, 0.07%)</title><rect x="1186.2" y="723.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.2" y="734.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (3 samples, 0.05%)</title><rect x="1186.3" y="707.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="718.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (2 samples, 0.03%)</title><rect x="1186.3" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.3" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (2 samples, 0.03%)</title><rect x="1186.3" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.3" y="686.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (2 samples, 0.03%)</title><rect x="1186.9" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="782.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (2 samples, 0.03%)</title><rect x="1186.9" y="755.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="766.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.05%)</title><rect x="1187.7" y="803.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.7" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.05%)</title><rect x="1187.7" y="787.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (3 samples, 0.05%)</title><rect x="1187.7" y="771.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.7" y="782.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.03%)</title><rect x="1187.9" y="755.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1190.9" y="766.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.03%)</title><rect x="1188.3" y="835.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.3" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.03%)</title><rect x="1188.3" y="819.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.3" y="830.0"></text>
</g>
<g>
<title>WatcherThread::run() (7 samples, 0.11%)</title><rect x="1188.7" y="835.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.7" y="846.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (3 samples, 0.05%)</title><rect x="1188.7" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.7" y="830.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.07%)</title><rect x="1189.2" y="819.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.07%)</title><rect x="1189.2" y="803.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.2" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.07%)</title><rect x="1189.2" y="787.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.2" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.03%)</title><rect x="1189.4" y="771.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1192.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="755.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1192.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="739.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1192.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="723.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1192.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="707.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1192.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="691.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1192.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="675.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1192.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1189.4" y="659.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1192.4" y="670.0"></text>
</g>
</g>
</svg>
