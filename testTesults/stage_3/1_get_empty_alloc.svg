<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="613"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="613"> </text>
<g id="frames">
<g>
<title>all (750,955 samples, 100.00%)</title><rect x="10.0" y="579.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="590.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (744,469 samples, 99.14%)</title><rect x="10.0" y="563.0" width="1169.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="574.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (744,469 samples, 99.14%)</title><rect x="10.0" y="547.0" width="1169.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="558.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (744,469 samples, 99.14%)</title><rect x="10.0" y="531.0" width="1169.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run (744,415 samples, 99.13%)</title><rect x="10.1" y="515.0" width="1169.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.1" y="526.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (744,415 samples, 99.13%)</title><rect x="10.1" y="499.0" width="1169.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.1" y="510.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/1098854345.action (744,405 samples, 99.13%)</title><rect x="10.1" y="483.0" width="1169.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.1" y="494.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/1098854345.action</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0 (744,405 samples, 99.13%)</title><rect x="10.1" y="467.0" width="1169.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.1" y="478.0">ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (744,405 samples, 99.13%)</title><rect x="10.1" y="451.0" width="1169.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.1" y="462.0">ru/mail/polis/service/igorlo/AsyncService.get</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (744,399 samples, 99.13%)</title><rect x="10.1" y="435.0" width="1169.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.1" y="446.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (353,788 samples, 47.11%)</title><rect x="10.1" y="419.0" width="555.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.1" y="430.0">com/google/common/collect/TransformedIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (353,788 samples, 47.11%)</title><rect x="10.1" y="403.0" width="555.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.1" y="414.0">com/google/common/collect/AbstractIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (353,788 samples, 47.11%)</title><rect x="10.1" y="387.0" width="555.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.1" y="398.0">com/google/common/collect/AbstractIterator.tryToComputeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (353,788 samples, 47.11%)</title><rect x="10.1" y="371.0" width="555.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.1" y="382.0">com/google/common/collect/Iterators$5.computeNext</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (353,788 samples, 47.11%)</title><rect x="10.1" y="355.0" width="555.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.1" y="366.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (299,028 samples, 39.82%)</title><rect x="10.1" y="339.0" width="469.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.1" y="350.0">com/google/common/collect/Iterators$MergingIterator.next</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (55,273 samples, 7.36%)</title><rect x="10.1" y="323.0" width="86.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.1" y="334.0">java/util/..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (55,273 samples, 7.36%)</title><rect x="10.1" y="307.0" width="86.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.1" y="318.0">java/util/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (55,273 samples, 7.36%)</title><rect x="10.1" y="291.0" width="86.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.1" y="302.0">java/util/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (55,273 samples, 7.36%)</title><rect x="10.1" y="275.0" width="86.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.1" y="286.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (55,273 samples, 7.36%)</title><rect x="10.1" y="259.0" width="86.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.1" y="270.0">com/google..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (55,273 samples, 7.36%)</title><rect x="10.1" y="243.0" width="86.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.1" y="254.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (55,273 samples, 7.36%)</title><rect x="10.1" y="227.0" width="86.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.1" y="238.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (55,273 samples, 7.36%)</title><rect x="10.1" y="211.0" width="86.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.1" y="222.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (55,273 samples, 7.36%)</title><rect x="10.1" y="195.0" width="86.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.1" y="206.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (55,273 samples, 7.36%)</title><rect x="10.1" y="179.0" width="86.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.1" y="190.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (55,273 samples, 7.36%)</title><rect x="10.1" y="163.0" width="86.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.1" y="174.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (55,273 samples, 7.36%)</title><rect x="10.1" y="147.0" width="86.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.1" y="158.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (55,273 samples, 7.36%)</title><rect x="10.1" y="131.0" width="86.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.1" y="142.0">java/util/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (55,273 samples, 7.36%)</title><rect x="10.1" y="115.0" width="86.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.1" y="126.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (55,273 samples, 7.36%)</title><rect x="10.1" y="99.0" width="86.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.1" y="110.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (55,273 samples, 7.36%)</title><rect x="10.1" y="83.0" width="86.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.1" y="94.0">java/nio/D..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (55,273 samples, 7.36%)</title><rect x="10.1" y="67.0" width="86.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.1" y="78.0">java/nio/D..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (55,273 samples, 7.36%)</title><rect x="10.1" y="51.0" width="86.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="13.1" y="62.0">java.nio.D..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (243,755 samples, 32.46%)</title><rect x="97.0" y="323.0" width="383.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.0" y="334.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (243,755 samples, 32.46%)</title><rect x="97.0" y="307.0" width="383.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.0" y="318.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (243,755 samples, 32.46%)</title><rect x="97.0" y="291.0" width="383.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.0" y="302.0">java/util/PriorityQueue.siftUp</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (243,755 samples, 32.46%)</title><rect x="97.0" y="275.0" width="383.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="100.0" y="286.0">java/util/PriorityQueue.siftUpUsingComparator</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (243,755 samples, 32.46%)</title><rect x="97.0" y="259.0" width="383.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.0" y="270.0">com/google/common/collect/Iterators$MergingIterator$..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (243,755 samples, 32.46%)</title><rect x="97.0" y="243.0" width="383.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.0" y="254.0">com/google/common/collect/Iterators$MergingIterator$..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (188,777 samples, 25.14%)</title><rect x="97.0" y="227.0" width="296.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.0" y="238.0">com/google/common/collect/Iterators$Peek..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (188,777 samples, 25.14%)</title><rect x="97.0" y="211.0" width="296.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.0" y="222.0">ru/mail/polis/dao/igorlo/SSTable$SSTable..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (188,777 samples, 25.14%)</title><rect x="97.0" y="195.0" width="296.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.0" y="206.0">ru/mail/polis/dao/igorlo/SSTable$SSTable..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (188,777 samples, 25.14%)</title><rect x="97.0" y="179.0" width="296.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.0" y="190.0">ru/mail/polis/dao/igorlo/SSTable.transform</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (54,125 samples, 7.21%)</title><rect x="97.0" y="163.0" width="85.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.0" y="174.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (27,127 samples, 3.61%)</title><rect x="97.0" y="147.0" width="42.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.0" y="158.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (27,127 samples, 3.61%)</title><rect x="97.0" y="131.0" width="42.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.0" y="142.0">java..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (27,127 samples, 3.61%)</title><rect x="97.0" y="115.0" width="42.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="100.0" y="126.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (26,998 samples, 3.60%)</title><rect x="139.6" y="147.0" width="42.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.6" y="158.0">java..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (26,998 samples, 3.60%)</title><rect x="139.6" y="131.0" width="42.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="142.6" y="142.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (54,628 samples, 7.27%)</title><rect x="182.0" y="163.0" width="85.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="185.0" y="174.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (27,403 samples, 3.65%)</title><rect x="182.0" y="147.0" width="43.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="185.0" y="158.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (27,403 samples, 3.65%)</title><rect x="182.0" y="131.0" width="43.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="185.0" y="142.0">java..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (27,403 samples, 3.65%)</title><rect x="182.0" y="115.0" width="43.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="185.0" y="126.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (27,225 samples, 3.63%)</title><rect x="225.1" y="147.0" width="42.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.1" y="158.0">java..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (27,225 samples, 3.63%)</title><rect x="225.1" y="131.0" width="42.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="228.1" y="142.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (27,356 samples, 3.64%)</title><rect x="267.8" y="163.0" width="43.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.8" y="174.0">ru/m..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (27,356 samples, 3.64%)</title><rect x="267.8" y="147.0" width="43.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.8" y="158.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (27,356 samples, 3.64%)</title><rect x="267.8" y="131.0" width="43.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.8" y="142.0">java..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (27,356 samples, 3.64%)</title><rect x="267.8" y="115.0" width="43.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="270.8" y="126.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (27,630 samples, 3.68%)</title><rect x="310.8" y="163.0" width="43.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="313.8" y="174.0">ru/m..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (13,778 samples, 1.83%)</title><rect x="310.8" y="147.0" width="21.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.8" y="158.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (13,778 samples, 1.83%)</title><rect x="310.8" y="131.0" width="21.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.8" y="142.0">j..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (13,778 samples, 1.83%)</title><rect x="310.8" y="115.0" width="21.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="313.8" y="126.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (13,852 samples, 1.84%)</title><rect x="332.5" y="147.0" width="21.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.5" y="158.0">j..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (13,852 samples, 1.84%)</title><rect x="332.5" y="131.0" width="21.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="335.5" y="142.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (10,814 samples, 1.44%)</title><rect x="354.3" y="163.0" width="16.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="357.3" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (10,814 samples, 1.44%)</title><rect x="354.3" y="147.0" width="16.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="357.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (7,087 samples, 0.94%)</title><rect x="371.2" y="163.0" width="11.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.2" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (7,087 samples, 0.94%)</title><rect x="371.2" y="147.0" width="11.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="374.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (7,137 samples, 0.95%)</title><rect x="382.4" y="163.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.4" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (7,137 samples, 0.95%)</title><rect x="382.4" y="147.0" width="11.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="385.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (54,978 samples, 7.32%)</title><rect x="393.6" y="227.0" width="86.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="396.6" y="238.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (54,978 samples, 7.32%)</title><rect x="393.6" y="211.0" width="86.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.6" y="222.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (54,978 samples, 7.32%)</title><rect x="393.6" y="195.0" width="86.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.6" y="206.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (54,978 samples, 7.32%)</title><rect x="393.6" y="179.0" width="86.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="396.6" y="190.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (54,978 samples, 7.32%)</title><rect x="393.6" y="163.0" width="86.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="396.6" y="174.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (54,978 samples, 7.32%)</title><rect x="393.6" y="147.0" width="86.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.6" y="158.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (54,978 samples, 7.32%)</title><rect x="393.6" y="131.0" width="86.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.6" y="142.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (54,978 samples, 7.32%)</title><rect x="393.6" y="115.0" width="86.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.6" y="126.0">java/util/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (54,978 samples, 7.32%)</title><rect x="393.6" y="99.0" width="86.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.6" y="110.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (54,978 samples, 7.32%)</title><rect x="393.6" y="83.0" width="86.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="396.6" y="94.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (54,978 samples, 7.32%)</title><rect x="393.6" y="67.0" width="86.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.6" y="78.0">java/nio/D..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (54,978 samples, 7.32%)</title><rect x="393.6" y="51.0" width="86.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.6" y="62.0">java/nio/D..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (54,978 samples, 7.32%)</title><rect x="393.6" y="35.0" width="86.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="396.6" y="46.0">java.nio.D..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (54,760 samples, 7.29%)</title><rect x="480.0" y="339.0" width="86.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.0" y="350.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (54,760 samples, 7.29%)</title><rect x="480.0" y="323.0" width="86.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.0" y="334.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (54,760 samples, 7.29%)</title><rect x="480.0" y="307.0" width="86.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="483.0" y="318.0">java/nio/D..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (54,760 samples, 7.29%)</title><rect x="480.0" y="291.0" width="86.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="483.0" y="302.0">java/nio/D..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (54,760 samples, 7.29%)</title><rect x="480.0" y="275.0" width="86.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="483.0" y="286.0">java.nio.D..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (390,598 samples, 52.01%)</title><rect x="566.0" y="419.0" width="613.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.0" y="430.0">ru/mail/polis/dao/igorlo/PersistentDAO.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (390,597 samples, 52.01%)</title><rect x="566.1" y="403.0" width="613.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="569.1" y="414.0">ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (827 samples, 0.11%)</title><rect x="566.1" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="569.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.iterator (712 samples, 0.09%)</title><rect x="566.2" y="371.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="569.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt; (701 samples, 0.09%)</title><rect x="566.2" y="355.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.position (701 samples, 0.09%)</title><rect x="566.2" y="339.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="569.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (353 samples, 0.05%)</title><rect x="566.2" y="323.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (174 samples, 0.02%)</title><rect x="566.2" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="569.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (174 samples, 0.02%)</title><rect x="566.2" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="569.2" y="302.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (174 samples, 0.02%)</title><rect x="566.2" y="275.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="569.2" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (179 samples, 0.02%)</title><rect x="566.5" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.5" y="318.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (179 samples, 0.02%)</title><rect x="566.5" y="291.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="569.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (348 samples, 0.05%)</title><rect x="566.8" y="323.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (160 samples, 0.02%)</title><rect x="566.8" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (160 samples, 0.02%)</title><rect x="566.8" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.8" y="302.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (160 samples, 0.02%)</title><rect x="566.8" y="275.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="569.8" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (188 samples, 0.03%)</title><rect x="567.1" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="570.1" y="318.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (188 samples, 0.03%)</title><rect x="567.1" y="291.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="570.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (389,770 samples, 51.90%)</title><rect x="567.4" y="387.0" width="612.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="570.4" y="398.0">ru/mail/polis/dao/igorlo/Table.transformRows</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (389,728 samples, 51.90%)</title><rect x="567.4" y="371.0" width="612.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="570.4" y="382.0">com/google/common/collect/Iterators.mergeSorted</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (389,727 samples, 51.90%)</title><rect x="567.4" y="355.0" width="612.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="570.4" y="366.0">com/google/common/collect/Iterators$MergingIterator.&lt;init&gt;</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (389,616 samples, 51.88%)</title><rect x="567.4" y="339.0" width="612.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="570.4" y="350.0">com/google/common/collect/AbstractIterator.hasNext</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (389,616 samples, 51.88%)</title><rect x="567.4" y="323.0" width="612.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="570.4" y="334.0">com/google/common/collect/AbstractIterator.tryToComputeNext</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (389,616 samples, 51.88%)</title><rect x="567.4" y="307.0" width="612.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.4" y="318.0">com/google/common/collect/Iterators$5.computeNext</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (389,616 samples, 51.88%)</title><rect x="567.4" y="291.0" width="612.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="570.4" y="302.0">ru/mail/polis/dao/Iters$CollapseEqualsIterator.next</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (389,616 samples, 51.88%)</title><rect x="567.4" y="275.0" width="612.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.4" y="286.0">ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (389,616 samples, 51.88%)</title><rect x="567.4" y="259.0" width="612.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="570.4" y="270.0">ru/mail/polis/dao/igorlo/TableRow.getKey</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (389,616 samples, 51.88%)</title><rect x="567.4" y="243.0" width="612.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="570.4" y="254.0">java/nio/HeapByteBuffer.asReadOnlyBuffer</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (389,616 samples, 51.88%)</title><rect x="567.4" y="227.0" width="612.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="570.4" y="238.0">java.nio.HeapByteBufferR</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (6,484 samples, 0.86%)</title><rect x="1179.8" y="563.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (273 samples, 0.04%)</title><rect x="1179.8" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (273 samples, 0.04%)</title><rect x="1179.8" y="531.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (6,211 samples, 0.83%)</title><rect x="1180.2" y="547.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1183.2" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (6,210 samples, 0.83%)</title><rect x="1180.2" y="531.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1183.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6,207 samples, 0.83%)</title><rect x="1180.2" y="515.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1183.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (219 samples, 0.03%)</title><rect x="1180.2" y="499.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (219 samples, 0.03%)</title><rect x="1180.2" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (172 samples, 0.02%)</title><rect x="1180.2" y="467.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (170 samples, 0.02%)</title><rect x="1180.2" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1183.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (160 samples, 0.02%)</title><rect x="1180.3" y="435.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (160 samples, 0.02%)</title><rect x="1180.3" y="419.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1183.3" y="430.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (160 samples, 0.02%)</title><rect x="1180.3" y="403.0" width="0.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1183.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5,434 samples, 0.72%)</title><rect x="1180.6" y="499.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1183.6" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,231 samples, 0.70%)</title><rect x="1180.9" y="483.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1183.9" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,231 samples, 0.70%)</title><rect x="1180.9" y="467.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>char[] (5,218 samples, 0.69%)</title><rect x="1180.9" y="451.0" width="8.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (554 samples, 0.07%)</title><rect x="1189.1" y="499.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1192.1" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (554 samples, 0.07%)</title><rect x="1189.1" y="483.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1192.1" y="494.0"></text>
</g>
<g>
<title>char[] (429 samples, 0.06%)</title><rect x="1189.1" y="467.0" width="0.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1192.1" y="478.0"></text>
</g>
</g>
</svg>
