<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (7,656 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (2 samples, 0.03%)</title><rect x="10.3" y="883.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (13 samples, 0.17%)</title><rect x="10.6" y="883.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.6" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (5 samples, 0.07%)</title><rect x="10.8" y="867.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.07%)</title><rect x="10.8" y="851.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.07%)</title><rect x="10.8" y="835.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.05%)</title><rect x="10.9" y="819.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.9" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="11.1" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.04%)</title><rect x="11.1" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.1" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.04%)</title><rect x="11.1" y="771.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.1" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.09%)</title><rect x="11.5" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.09%)</title><rect x="11.5" y="851.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.09%)</title><rect x="11.5" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (5 samples, 0.07%)</title><rect x="11.8" y="819.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.8" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (5 samples, 0.07%)</title><rect x="11.8" y="803.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.8" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.03%)</title><rect x="12.3" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.03%)</title><rect x="12.3" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.3" y="782.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="12.3" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.14%)</title><rect x="12.6" y="883.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.6" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (11 samples, 0.14%)</title><rect x="12.6" y="867.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (10 samples, 0.13%)</title><rect x="12.6" y="851.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.6" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (9 samples, 0.12%)</title><rect x="12.6" y="835.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (8 samples, 0.10%)</title><rect x="12.6" y="819.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.6" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.08%)</title><rect x="12.9" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.04%)</title><rect x="13.1" y="787.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.1" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.04%)</title><rect x="13.1" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="16.1" y="782.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.03%)</title><rect x="13.5" y="787.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.5" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (56 samples, 0.73%)</title><rect x="14.3" y="883.0" width="8.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.3" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (53 samples, 0.69%)</title><rect x="14.5" y="867.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (50 samples, 0.65%)</title><rect x="14.6" y="851.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.6" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (45 samples, 0.59%)</title><rect x="14.8" y="835.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.8" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (42 samples, 0.55%)</title><rect x="14.9" y="819.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.9" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (39 samples, 0.51%)</title><rect x="15.2" y="803.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.2" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (26 samples, 0.34%)</title><rect x="16.0" y="787.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.0" y="798.0"></text>
</g>
<g>
<title>G1AllocRegion::par_allocate(HeapRegion*, unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="16.2" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="19.2" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (23 samples, 0.30%)</title><rect x="16.5" y="771.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.5" y="782.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (7 samples, 0.09%)</title><rect x="16.6" y="755.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (5 samples, 0.07%)</title><rect x="16.6" y="739.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.6" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (2 samples, 0.03%)</title><rect x="17.4" y="739.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="20.4" y="750.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (12 samples, 0.16%)</title><rect x="18.0" y="755.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.0" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (9 samples, 0.12%)</title><rect x="18.2" y="739.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="21.2" y="750.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (8 samples, 0.10%)</title><rect x="18.2" y="723.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="21.2" y="734.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.03%)</title><rect x="18.5" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.5" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.04%)</title><rect x="18.8" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.8" y="718.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.04%)</title><rect x="18.8" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.8" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (3 samples, 0.04%)</title><rect x="20.3" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.03%)</title><rect x="20.3" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="23.3" y="782.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (2 samples, 0.03%)</title><rect x="20.8" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="23.8" y="798.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="21.4" y="819.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.4" y="830.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="22.0" y="835.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="25.0" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="22.3" y="851.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.3" y="862.0"></text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.03%)</title><rect x="22.6" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="25.6" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (48 samples, 0.63%)</title><rect x="22.9" y="883.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="25.9" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (46 samples, 0.60%)</title><rect x="23.3" y="867.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.3" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (18 samples, 0.24%)</title><rect x="23.7" y="851.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.7" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (12 samples, 0.16%)</title><rect x="23.7" y="835.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="26.7" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.04%)</title><rect x="25.6" y="835.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="28.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="25.7" y="819.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="28.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="25.7" y="803.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="28.7" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.03%)</title><rect x="26.0" y="835.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="29.0" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (23 samples, 0.30%)</title><rect x="26.5" y="851.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="29.5" y="862.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.05%)</title><rect x="30.5" y="883.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="33.5" y="894.0"></text>
</g>
<g>
<title>[not_walkable_Java] (18 samples, 0.24%)</title><rect x="31.1" y="883.0" width="2.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="34.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.13%)</title><rect x="31.4" y="867.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="34.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (10 samples, 0.13%)</title><rect x="31.4" y="851.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="34.4" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (5 samples, 0.07%)</title><rect x="31.6" y="835.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="34.6" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="31.6" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="34.6" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="32.0" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="35.0" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.05%)</title><rect x="32.3" y="835.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="35.3" y="846.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.03%)</title><rect x="32.7" y="819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="35.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="33.0" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="36.0" y="878.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.03%)</title><rect x="33.0" y="851.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="36.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.21%)</title><rect x="33.9" y="883.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="36.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="34.0" y="867.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="37.0" y="878.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (2 samples, 0.03%)</title><rect x="34.2" y="851.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="37.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="34.2" y="835.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="37.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="34.2" y="819.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="37.2" y="830.0"></text>
</g>
<g>
<title>__GI___open64 (3 samples, 0.04%)</title><rect x="34.5" y="867.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="37.5" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="34.5" y="851.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="37.5" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="34.5" y="835.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="37.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="34.5" y="819.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="37.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="34.5" y="803.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="37.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="34.5" y="787.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="37.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="34.5" y="771.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="37.5" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="34.5" y="755.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="37.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="34.5" y="739.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="37.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="34.7" y="723.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="37.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="34.7" y="707.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="37.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="34.7" y="691.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="37.7" y="702.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="35.1" y="867.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="38.1" y="878.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="35.1" y="851.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="38.1" y="862.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (2 samples, 0.03%)</title><rect x="35.4" y="867.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="38.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="35.4" y="851.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="38.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="35.4" y="835.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="38.4" y="846.0"></text>
</g>
<g>
<title>vsnprintf (4 samples, 0.05%)</title><rect x="35.7" y="867.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="38.7" y="878.0"></text>
</g>
<g>
<title>vfprintf (3 samples, 0.04%)</title><rect x="35.9" y="851.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="38.9" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (76 samples, 0.99%)</title><rect x="36.4" y="883.0" width="11.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="39.4" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.10%)</title><rect x="46.2" y="867.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="49.2" y="878.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (4 samples, 0.05%)</title><rect x="47.5" y="867.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="50.5" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="47.6" y="851.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="50.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="47.6" y="835.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="50.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="47.8" y="819.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="50.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="47.8" y="803.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="50.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="47.8" y="787.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="50.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="47.8" y="771.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="50.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="47.8" y="755.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="50.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="47.8" y="739.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="50.8" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (17 samples, 0.22%)</title><rect x="48.4" y="883.0" width="2.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="51.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.20%)</title><rect x="48.7" y="867.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="51.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.20%)</title><rect x="48.7" y="851.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="51.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.17%)</title><rect x="49.0" y="835.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="52.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.17%)</title><rect x="49.0" y="819.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="52.0" y="830.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.13%)</title><rect x="49.5" y="803.0" width="1.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="52.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.10%)</title><rect x="49.8" y="787.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="52.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.09%)</title><rect x="49.9" y="771.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="52.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="50.4" y="755.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="53.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5,224 samples, 68.23%)</title><rect x="51.2" y="883.0" width="805.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.2" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5,224 samples, 68.23%)</title><rect x="51.2" y="867.0" width="805.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.2" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5,224 samples, 68.23%)</title><rect x="51.2" y="851.0" width="805.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.2" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.03%)</title><rect x="52.2" y="835.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="52.2" y="819.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (707 samples, 9.23%)</title><rect x="52.5" y="835.0" width="109.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.5" y="846.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (679 samples, 8.87%)</title><rect x="55.5" y="819.0" width="104.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.5" y="830.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (481 samples, 6.28%)</title><rect x="56.4" y="803.0" width="74.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.4" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (25 samples, 0.33%)</title><rect x="56.9" y="787.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (20 samples, 0.26%)</title><rect x="57.5" y="771.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.5" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (10 samples, 0.13%)</title><rect x="59.0" y="755.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.0" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (8 samples, 0.10%)</title><rect x="59.0" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.0" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.set (2 samples, 0.03%)</title><rect x="60.2" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="63.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (29 samples, 0.38%)</title><rect x="60.7" y="787.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="61.2" y="771.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="61.2" y="755.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="61.2" y="739.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (23 samples, 0.30%)</title><rect x="61.6" y="771.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (23 samples, 0.30%)</title><rect x="61.6" y="755.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (5 samples, 0.07%)</title><rect x="63.9" y="739.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.04%)</title><rect x="64.7" y="739.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.7" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.04%)</title><rect x="64.7" y="723.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.7" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.04%)</title><rect x="64.7" y="707.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (36 samples, 0.47%)</title><rect x="65.2" y="787.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="68.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (36 samples, 0.47%)</title><rect x="65.2" y="771.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (34 samples, 0.44%)</title><rect x="65.5" y="755.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (33 samples, 0.43%)</title><rect x="65.6" y="739.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (33 samples, 0.43%)</title><rect x="65.6" y="723.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.6" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.09%)</title><rect x="65.8" y="707.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="68.8" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (25 samples, 0.33%)</title><rect x="66.9" y="707.0" width="3.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="69.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.27%)</title><rect x="67.5" y="691.0" width="3.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="70.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.27%)</title><rect x="67.5" y="675.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="70.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.27%)</title><rect x="67.5" y="659.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="70.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.27%)</title><rect x="67.5" y="643.0" width="3.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="70.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.27%)</title><rect x="67.5" y="627.0" width="3.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="70.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.25%)</title><rect x="67.8" y="611.0" width="2.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="70.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.22%)</title><rect x="68.1" y="595.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="71.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.20%)</title><rect x="68.4" y="579.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="71.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.04%)</title><rect x="70.7" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="73.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (3 samples, 0.04%)</title><rect x="70.7" y="771.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (385 samples, 5.03%)</title><rect x="71.2" y="787.0" width="59.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.2" y="798.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (385 samples, 5.03%)</title><rect x="71.2" y="771.0" width="59.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.2" y="782.0">jdk/in..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.04%)</title><rect x="72.3" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="75.3" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="72.7" y="755.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="75.7" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (177 samples, 2.31%)</title><rect x="73.3" y="755.0" width="27.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="76.3" y="766.0">U..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (7 samples, 0.09%)</title><rect x="75.5" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="78.5" y="750.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.04%)</title><rect x="76.6" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="79.6" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="77.0" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="80.0" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (51 samples, 0.67%)</title><rect x="77.7" y="739.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="80.7" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (9 samples, 0.12%)</title><rect x="81.4" y="723.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="84.4" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.05%)</title><rect x="82.1" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="85.1" y="718.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.03%)</title><rect x="82.7" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="85.7" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (16 samples, 0.21%)</title><rect x="83.1" y="723.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="86.1" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (7 samples, 0.09%)</title><rect x="85.5" y="739.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="88.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (9 samples, 0.12%)</title><rect x="86.6" y="739.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="89.6" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (52 samples, 0.68%)</title><rect x="88.0" y="739.0" width="8.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="91.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.52%)</title><rect x="89.8" y="723.0" width="6.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="92.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.52%)</title><rect x="89.8" y="707.0" width="6.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="92.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.25%)</title><rect x="93.1" y="691.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="96.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.24%)</title><rect x="93.2" y="675.0" width="2.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="96.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.24%)</title><rect x="93.2" y="659.0" width="2.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="96.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.09%)</title><rect x="94.9" y="643.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="97.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="95.4" y="627.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="98.4" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_wait (9 samples, 0.12%)</title><rect x="96.0" y="739.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="99.0" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.05%)</title><rect x="97.4" y="739.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="100.4" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="98.0" y="739.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="101.0" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.05%)</title><rect x="98.3" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="101.3" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.03%)</title><rect x="98.9" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="101.9" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.12%)</title><rect x="99.2" y="739.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="102.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (189 samples, 2.47%)</title><rect x="100.6" y="755.0" width="29.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="103.6" y="766.0">[u..</text>
</g>
<g>
<title>__pthread_cond_wait (161 samples, 2.10%)</title><rect x="100.6" y="739.0" width="24.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="103.6" y="750.0">_..</text>
</g>
<g>
<title>[unknown] (106 samples, 1.38%)</title><rect x="109.1" y="723.0" width="16.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="112.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (106 samples, 1.38%)</title><rect x="109.1" y="707.0" width="16.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="112.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (86 samples, 1.12%)</title><rect x="112.2" y="691.0" width="13.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="115.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 1.10%)</title><rect x="112.5" y="675.0" width="12.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="115.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 1.03%)</title><rect x="113.3" y="659.0" width="12.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="116.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 0.93%)</title><rect x="114.5" y="643.0" width="10.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="117.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 0.67%)</title><rect x="117.6" y="627.0" width="7.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="120.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 0.50%)</title><rect x="119.6" y="611.0" width="5.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="122.6" y="622.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.40%)</title><rect x="120.7" y="595.0" width="4.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="123.7" y="606.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.09%)</title><rect x="124.4" y="579.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="127.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.09%)</title><rect x="124.4" y="563.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="127.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="124.5" y="547.0" width="0.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="127.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="124.5" y="531.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="127.5" y="542.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="124.5" y="515.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="127.5" y="526.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="124.5" y="499.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="127.5" y="510.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="124.5" y="483.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="127.5" y="494.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.05%)</title><rect x="125.4" y="739.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="128.4" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.03%)</title><rect x="126.1" y="739.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="129.1" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (16 samples, 0.21%)</title><rect x="126.4" y="739.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="129.4" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.08%)</title><rect x="128.8" y="739.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="131.8" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="129.8" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="132.8" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.04%)</title><rect x="130.1" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="133.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (75 samples, 0.98%)</title><rect x="130.5" y="803.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (75 samples, 0.98%)</title><rect x="130.5" y="787.0" width="11.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.08%)</title><rect x="131.0" y="771.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.0" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.03%)</title><rect x="131.6" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (60 samples, 0.78%)</title><rect x="131.9" y="771.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (20 samples, 0.26%)</title><rect x="134.1" y="755.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (12 samples, 0.16%)</title><rect x="134.1" y="739.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.10%)</title><rect x="135.9" y="739.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (3 samples, 0.04%)</title><rect x="136.2" y="723.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.04%)</title><rect x="136.7" y="723.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.7" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 0.04%)</title><rect x="136.7" y="707.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="139.7" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.03%)</title><rect x="136.7" y="691.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="139.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (20 samples, 0.26%)</title><rect x="137.2" y="755.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.05%)</title><rect x="140.2" y="755.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="143.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="140.9" y="755.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.08%)</title><rect x="141.2" y="771.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.08%)</title><rect x="141.2" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.04%)</title><rect x="141.5" y="739.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="144.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (117 samples, 1.53%)</title><rect x="142.1" y="803.0" width="18.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (117 samples, 1.53%)</title><rect x="142.1" y="787.0" width="18.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (117 samples, 1.53%)</title><rect x="142.1" y="771.0" width="18.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (117 samples, 1.53%)</title><rect x="142.1" y="755.0" width="18.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.1" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (117 samples, 1.53%)</title><rect x="142.1" y="739.0" width="18.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.1" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (21 samples, 0.27%)</title><rect x="142.5" y="723.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="145.5" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="142.7" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="145.7" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (2 samples, 0.03%)</title><rect x="143.5" y="707.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="146.5" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.04%)</title><rect x="143.8" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="146.8" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="144.4" y="707.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="147.4" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.04%)</title><rect x="144.9" y="707.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="147.9" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.03%)</title><rect x="145.3" y="707.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="148.3" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (92 samples, 1.20%)</title><rect x="145.9" y="723.0" width="14.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="148.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (87 samples, 1.14%)</title><rect x="146.7" y="707.0" width="13.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="149.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (87 samples, 1.14%)</title><rect x="146.7" y="691.0" width="13.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="149.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 1.10%)</title><rect x="147.2" y="675.0" width="12.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="150.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 1.10%)</title><rect x="147.2" y="659.0" width="12.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="150.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 1.10%)</title><rect x="147.2" y="643.0" width="12.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="150.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (78 samples, 1.02%)</title><rect x="148.1" y="627.0" width="12.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="151.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (72 samples, 0.94%)</title><rect x="149.0" y="611.0" width="11.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="152.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 0.85%)</title><rect x="150.1" y="595.0" width="10.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="153.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="159.7" y="579.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="162.7" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="159.7" y="563.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="162.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="159.7" y="547.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="162.7" y="558.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="159.7" y="531.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="162.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="159.7" y="515.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="162.7" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="159.8" y="499.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="162.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="159.8" y="483.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="162.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (3 samples, 0.04%)</title><rect x="160.1" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (6 samples, 0.08%)</title><rect x="160.6" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.03%)</title><rect x="161.5" y="835.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="164.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run (4,506 samples, 58.86%)</title><rect x="161.8" y="835.0" width="694.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.8" y="846.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (4,506 samples, 58.86%)</title><rect x="161.8" y="819.0" width="694.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="164.8" y="830.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,939 samples, 25.33%)</title><rect x="163.8" y="803.0" width="298.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.8" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (18 samples, 0.24%)</title><rect x="164.0" y="787.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.14%)</title><rect x="165.1" y="771.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="168.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.13%)</title><rect x="165.2" y="755.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="168.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.13%)</title><rect x="165.2" y="739.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.2" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.13%)</title><rect x="165.2" y="723.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.2" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (10 samples, 0.13%)</title><rect x="165.2" y="707.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.2" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (9 samples, 0.12%)</title><rect x="165.4" y="691.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="168.4" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,851 samples, 24.18%)</title><rect x="166.7" y="787.0" width="285.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="169.7" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (69 samples, 0.90%)</title><rect x="166.7" y="771.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.7" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.09%)</title><rect x="168.6" y="755.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="171.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (50 samples, 0.65%)</title><rect x="169.7" y="755.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="172.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="169.7" y="739.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="172.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.03%)</title><rect x="169.7" y="723.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.03%)</title><rect x="170.0" y="739.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="173.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (20 samples, 0.26%)</title><rect x="170.3" y="739.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.10%)</title><rect x="172.1" y="723.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.1" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (5 samples, 0.07%)</title><rect x="172.6" y="707.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.6" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (26 samples, 0.34%)</title><rect x="173.4" y="739.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (26 samples, 0.34%)</title><rect x="173.4" y="723.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.04%)</title><rect x="176.1" y="707.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.04%)</title><rect x="176.1" y="691.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.1" y="702.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (5 samples, 0.07%)</title><rect x="176.6" y="707.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.6" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,782 samples, 23.28%)</title><rect x="177.4" y="771.0" width="274.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="180.4" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,782 samples, 23.28%)</title><rect x="177.4" y="755.0" width="274.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="180.4" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,781 samples, 23.26%)</title><rect x="177.5" y="739.0" width="274.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.5" y="750.0">one/nio/net/Session$ArrayQueueItem.wr..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,781 samples, 23.26%)</title><rect x="177.5" y="723.0" width="274.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.5" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (86 samples, 1.12%)</title><rect x="181.7" y="707.0" width="13.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="184.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (86 samples, 1.12%)</title><rect x="181.7" y="691.0" width="13.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="184.7" y="702.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (75 samples, 0.98%)</title><rect x="181.7" y="675.0" width="11.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="184.7" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="183.4" y="659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="186.4" y="670.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.07%)</title><rect x="183.7" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="186.7" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (8 samples, 0.10%)</title><rect x="184.5" y="659.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="187.5" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3 (15 samples, 0.20%)</title><rect x="185.7" y="659.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="188.7" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (34 samples, 0.44%)</title><rect x="188.0" y="659.0" width="5.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="191.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (9 samples, 0.12%)</title><rect x="188.9" y="643.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="191.9" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (7 samples, 0.09%)</title><rect x="190.3" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="193.3" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (9 samples, 0.12%)</title><rect x="191.4" y="643.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="194.4" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.04%)</title><rect x="192.8" y="643.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="195.8" y="654.0"></text>
</g>
<g>
<title>__send (6 samples, 0.08%)</title><rect x="193.6" y="675.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="196.6" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="194.6" y="675.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="197.6" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="195.0" y="707.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="198.0" y="718.0"></text>
</g>
<g>
<title>__send (1,666 samples, 21.76%)</title><rect x="195.3" y="707.0" width="256.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="198.3" y="718.0">__send</text>
</g>
<g>
<title>[unknown] (1,634 samples, 21.34%)</title><rect x="200.2" y="691.0" width="251.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="203.2" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,634 samples, 21.34%)</title><rect x="200.2" y="675.0" width="251.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="203.2" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,597 samples, 20.86%)</title><rect x="205.9" y="659.0" width="246.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="208.9" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,594 samples, 20.82%)</title><rect x="206.4" y="643.0" width="245.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="209.4" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,584 samples, 20.69%)</title><rect x="207.9" y="627.0" width="244.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="210.9" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,571 samples, 20.52%)</title><rect x="209.9" y="611.0" width="242.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="212.9" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,556 samples, 20.32%)</title><rect x="212.2" y="595.0" width="239.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="215.2" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,553 samples, 20.28%)</title><rect x="212.7" y="579.0" width="239.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="215.7" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,482 samples, 19.36%)</title><rect x="223.6" y="563.0" width="228.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="226.6" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,409 samples, 18.40%)</title><rect x="234.9" y="547.0" width="217.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="237.9" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,351 samples, 17.65%)</title><rect x="243.8" y="531.0" width="208.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="246.8" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,268 samples, 16.56%)</title><rect x="256.6" y="515.0" width="195.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="259.6" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,152 samples, 15.05%)</title><rect x="274.5" y="499.0" width="177.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="277.5" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,128 samples, 14.73%)</title><rect x="278.2" y="483.0" width="173.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="281.2" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,097 samples, 14.33%)</title><rect x="283.0" y="467.0" width="169.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="286.0" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,081 samples, 14.12%)</title><rect x="285.4" y="451.0" width="166.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="288.4" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,059 samples, 13.83%)</title><rect x="288.8" y="435.0" width="163.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="291.8" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,029 samples, 13.44%)</title><rect x="293.4" y="419.0" width="158.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="296.4" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (982 samples, 12.83%)</title><rect x="300.7" y="403.0" width="151.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="303.7" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (918 samples, 11.99%)</title><rect x="310.5" y="387.0" width="141.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="313.5" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (806 samples, 10.53%)</title><rect x="327.8" y="371.0" width="124.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="330.8" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (772 samples, 10.08%)</title><rect x="333.1" y="355.0" width="118.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="336.1" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (739 samples, 9.65%)</title><rect x="338.1" y="339.0" width="113.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="341.1" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (717 samples, 9.37%)</title><rect x="341.5" y="323.0" width="110.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="344.5" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (692 samples, 9.04%)</title><rect x="345.4" y="307.0" width="106.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="348.4" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (677 samples, 8.84%)</title><rect x="347.7" y="291.0" width="104.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="350.7" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (672 samples, 8.78%)</title><rect x="348.5" y="275.0" width="103.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="351.5" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (650 samples, 8.49%)</title><rect x="351.9" y="259.0" width="100.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="354.9" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (629 samples, 8.22%)</title><rect x="355.1" y="243.0" width="96.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="358.1" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (618 samples, 8.07%)</title><rect x="356.8" y="227.0" width="95.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="359.8" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (612 samples, 7.99%)</title><rect x="357.7" y="211.0" width="94.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="360.7" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (595 samples, 7.77%)</title><rect x="360.3" y="195.0" width="91.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="363.3" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (559 samples, 7.30%)</title><rect x="365.9" y="179.0" width="86.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="368.9" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (521 samples, 6.81%)</title><rect x="371.7" y="163.0" width="80.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="374.7" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (482 samples, 6.30%)</title><rect x="377.7" y="147.0" width="74.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="380.7" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (400 samples, 5.22%)</title><rect x="390.4" y="131.0" width="61.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="393.4" y="142.0">[unkno..</text>
</g>
<g>
<title>[unknown] (319 samples, 4.17%)</title><rect x="402.9" y="115.0" width="49.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="405.9" y="126.0">[unkn..</text>
</g>
<g>
<title>[unknown] (298 samples, 3.89%)</title><rect x="406.1" y="99.0" width="45.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="409.1" y="110.0">[unk..</text>
</g>
<g>
<title>[unknown] (285 samples, 3.72%)</title><rect x="408.1" y="83.0" width="43.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="411.1" y="94.0">[unk..</text>
</g>
<g>
<title>[unknown] (30 samples, 0.39%)</title><rect x="447.4" y="67.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="450.4" y="78.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.26%)</title><rect x="449.0" y="51.0" width="3.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="452.0" y="62.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.18%)</title><rect x="449.9" y="35.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="452.9" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (63 samples, 0.82%)</title><rect x="452.0" y="787.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="455.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (26 samples, 0.34%)</title><rect x="454.5" y="771.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="457.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (22 samples, 0.29%)</title><rect x="455.1" y="755.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="458.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (8 samples, 0.10%)</title><rect x="457.1" y="739.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="460.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (8 samples, 0.10%)</title><rect x="457.1" y="723.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="460.1" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (7 samples, 0.09%)</title><rect x="457.3" y="707.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.substring (21 samples, 0.27%)</title><rect x="458.5" y="771.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.5" y="782.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.07%)</title><rect x="458.7" y="755.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="461.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.08%)</title><rect x="459.4" y="755.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="462.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="459.4" y="739.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="462.4" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.05%)</title><rect x="459.7" y="739.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.7" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.10%)</title><rect x="460.5" y="755.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="463.5" y="766.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.08%)</title><rect x="460.8" y="739.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="463.8" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.05%)</title><rect x="461.1" y="723.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="464.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.04%)</title><rect x="461.7" y="787.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.7" y="798.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (3 samples, 0.04%)</title><rect x="462.2" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/1098854345.action (2,554 samples, 33.36%)</title><rect x="462.7" y="803.0" width="393.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.7" y="814.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/1..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0 (2,550 samples, 33.31%)</title><rect x="463.3" y="787.0" width="393.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="466.3" y="798.0">ru/mail/polis/service/igorlo/AsyncService.lambda$entit..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (2,550 samples, 33.31%)</title><rect x="463.3" y="771.0" width="393.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.3" y="782.0">ru/mail/polis/service/igorlo/AsyncService.get</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (12 samples, 0.16%)</title><rect x="463.9" y="755.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.9" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (9 samples, 0.12%)</title><rect x="464.4" y="739.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="467.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.10%)</title><rect x="464.5" y="723.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="467.5" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (4 samples, 0.05%)</title><rect x="464.5" y="707.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="467.5" y="718.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0 (2 samples, 0.03%)</title><rect x="464.5" y="691.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="467.5" y="702.0"></text>
</g>
<g>
<title>__memmove_ssse3 (2 samples, 0.03%)</title><rect x="464.8" y="691.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="467.8" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.05%)</title><rect x="465.1" y="707.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.04%)</title><rect x="465.1" y="691.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.03%)</title><rect x="465.3" y="675.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.03%)</title><rect x="465.3" y="659.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="468.3" y="670.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (2 samples, 0.03%)</title><rect x="465.3" y="643.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="468.3" y="654.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="465.3" y="627.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="468.3" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.08%)</title><rect x="465.8" y="755.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="468.8" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.08%)</title><rect x="465.8" y="739.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="468.8" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="465.9" y="723.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="468.9" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="466.2" y="707.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="469.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="466.4" y="691.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="466.4" y="675.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.4" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="466.7" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="469.7" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="466.8" y="739.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.8" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="466.8" y="723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="466.8" y="707.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="466.8" y="691.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="469.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (2,524 samples, 32.97%)</title><rect x="467.3" y="755.0" width="389.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.3" y="766.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (151 samples, 1.97%)</title><rect x="467.5" y="739.0" width="23.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.5" y="750.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (149 samples, 1.95%)</title><rect x="467.8" y="723.0" width="22.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="470.8" y="734.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (146 samples, 1.91%)</title><rect x="467.9" y="707.0" width="22.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="470.9" y="718.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (140 samples, 1.83%)</title><rect x="468.7" y="691.0" width="21.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="471.7" y="702.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.endOfData (5 samples, 0.07%)</title><rect x="469.3" y="675.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="472.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (2 samples, 0.03%)</title><rect x="469.8" y="659.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.8" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (130 samples, 1.70%)</title><rect x="470.1" y="675.0" width="20.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.1" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (5 samples, 0.07%)</title><rect x="471.8" y="659.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.8" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (82 samples, 1.07%)</title><rect x="472.5" y="659.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.5" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (7 samples, 0.09%)</title><rect x="472.8" y="643.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="475.8" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (7 samples, 0.09%)</title><rect x="472.8" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="475.8" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (7 samples, 0.09%)</title><rect x="472.8" y="611.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.8" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (7 samples, 0.09%)</title><rect x="472.8" y="595.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (7 samples, 0.09%)</title><rect x="472.8" y="579.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.8" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5 samples, 0.07%)</title><rect x="472.8" y="563.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.8" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.03%)</title><rect x="473.0" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="476.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.03%)</title><rect x="473.0" y="531.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (2 samples, 0.03%)</title><rect x="473.6" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="476.6" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.04%)</title><rect x="473.9" y="643.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="476.9" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (19 samples, 0.25%)</title><rect x="474.4" y="643.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.4" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (19 samples, 0.25%)</title><rect x="474.4" y="627.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="477.4" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (16 samples, 0.21%)</title><rect x="474.8" y="611.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.8" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 0.16%)</title><rect x="475.5" y="595.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="478.5" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.13%)</title><rect x="475.8" y="579.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="478.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (10 samples, 0.13%)</title><rect x="475.8" y="563.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="478.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (10 samples, 0.13%)</title><rect x="475.8" y="547.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.8" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (10 samples, 0.13%)</title><rect x="475.8" y="531.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="478.8" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.13%)</title><rect x="475.8" y="515.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="478.8" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (10 samples, 0.13%)</title><rect x="475.8" y="499.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="478.8" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.13%)</title><rect x="475.8" y="483.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.8" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (10 samples, 0.13%)</title><rect x="475.8" y="467.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.8" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (10 samples, 0.13%)</title><rect x="475.8" y="451.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.07%)</title><rect x="475.9" y="435.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.07%)</title><rect x="475.9" y="419.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="478.9" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.05%)</title><rect x="475.9" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (4 samples, 0.05%)</title><rect x="476.7" y="435.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (4 samples, 0.05%)</title><rect x="476.7" y="419.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.7" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="476.7" y="403.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.7" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="476.7" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="479.7" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="476.7" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.7" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="477.0" y="403.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.0" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (51 samples, 0.67%)</title><rect x="477.3" y="643.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.3" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (51 samples, 0.67%)</title><rect x="477.3" y="627.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.3" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (51 samples, 0.67%)</title><rect x="477.3" y="611.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.3" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (51 samples, 0.67%)</title><rect x="477.3" y="595.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="480.3" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (50 samples, 0.65%)</title><rect x="477.3" y="579.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="480.3" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (50 samples, 0.65%)</title><rect x="477.3" y="563.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (29 samples, 0.38%)</title><rect x="477.3" y="547.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (27 samples, 0.35%)</title><rect x="477.6" y="531.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.6" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (27 samples, 0.35%)</title><rect x="477.6" y="515.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (27 samples, 0.35%)</title><rect x="477.6" y="499.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (13 samples, 0.17%)</title><rect x="477.6" y="483.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.08%)</title><rect x="477.6" y="467.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.6" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.08%)</title><rect x="477.6" y="451.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.6" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="477.9" y="435.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.9" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="477.9" y="419.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.9" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="477.9" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="478.1" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="478.1" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.1" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="478.1" y="355.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="481.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="478.2" y="339.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="481.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.05%)</title><rect x="478.5" y="467.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="481.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="478.5" y="451.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="481.5" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="478.5" y="435.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="481.5" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="478.5" y="419.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="478.5" y="403.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="481.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="478.7" y="387.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="481.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="478.7" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="481.7" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.04%)</title><rect x="479.2" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="482.2" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.04%)</title><rect x="479.2" y="451.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.04%)</title><rect x="479.2" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="482.2" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.04%)</title><rect x="479.2" y="419.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (8 samples, 0.10%)</title><rect x="479.6" y="483.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="482.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="479.8" y="467.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.8" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="479.8" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="482.8" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="479.8" y="435.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.8" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="479.8" y="419.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.8" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="479.8" y="403.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="479.8" y="387.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="482.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="479.8" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.8" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="479.9" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.05%)</title><rect x="480.2" y="467.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="483.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="480.2" y="451.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="483.2" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="480.2" y="435.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="483.2" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="480.2" y="419.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.2" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="480.2" y="403.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="483.2" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="480.2" y="387.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.2" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="480.2" y="371.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="483.2" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.04%)</title><rect x="480.4" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.4" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.04%)</title><rect x="480.4" y="339.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="483.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.04%)</title><rect x="480.4" y="323.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (3 samples, 0.04%)</title><rect x="480.9" y="483.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.9" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="480.9" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="483.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (3 samples, 0.04%)</title><rect x="481.3" y="483.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="484.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="481.3" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.3" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="481.3" y="451.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="484.3" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="481.3" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="484.3" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="481.3" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="484.3" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="481.3" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="484.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="481.3" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="481.3" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="484.3" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="481.3" y="355.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="484.3" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="481.3" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (21 samples, 0.27%)</title><rect x="481.8" y="547.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="484.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (20 samples, 0.26%)</title><rect x="481.9" y="531.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.9" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (20 samples, 0.26%)</title><rect x="481.9" y="515.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="484.9" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (20 samples, 0.26%)</title><rect x="481.9" y="499.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.9" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (20 samples, 0.26%)</title><rect x="481.9" y="483.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.9" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (20 samples, 0.26%)</title><rect x="481.9" y="467.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.9" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (20 samples, 0.26%)</title><rect x="481.9" y="451.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.9" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (20 samples, 0.26%)</title><rect x="481.9" y="435.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.08%)</title><rect x="481.9" y="419.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.08%)</title><rect x="481.9" y="403.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.9" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="482.1" y="387.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.1" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="482.6" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="485.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="482.6" y="371.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (14 samples, 0.18%)</title><rect x="482.9" y="419.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (14 samples, 0.18%)</title><rect x="482.9" y="403.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="485.9" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10 samples, 0.13%)</title><rect x="482.9" y="387.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="485.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.13%)</title><rect x="482.9" y="371.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="485.9" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.04%)</title><rect x="483.3" y="355.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="486.3" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="483.8" y="355.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="486.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="483.8" y="339.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="486.8" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="483.8" y="323.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="486.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="484.1" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="487.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="484.1" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="487.1" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="484.1" y="275.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="487.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="484.4" y="387.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.4" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="484.4" y="371.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="487.4" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="484.4" y="355.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="484.4" y="339.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="487.4" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="484.7" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="487.7" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.03%)</title><rect x="485.2" y="659.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.2" y="670.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.04%)</title><rect x="485.5" y="659.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="488.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="485.9" y="659.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (11 samples, 0.14%)</title><rect x="486.3" y="659.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="489.3" y="670.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 0.13%)</title><rect x="486.4" y="643.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="489.4" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (2 samples, 0.03%)</title><rect x="487.3" y="627.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="490.3" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (5 samples, 0.07%)</title><rect x="487.9" y="659.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (7 samples, 0.09%)</title><rect x="488.9" y="659.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (5 samples, 0.07%)</title><rect x="489.2" y="643.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.2" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="489.3" y="627.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="492.3" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.05%)</title><rect x="489.3" y="611.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.3" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="489.5" y="595.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.5" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="489.5" y="579.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="492.5" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="489.5" y="563.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="492.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="489.5" y="547.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="489.5" y="531.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.5" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="489.5" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="492.5" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="489.5" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="492.5" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="489.5" y="483.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="489.5" y="467.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.5" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="489.5" y="451.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="492.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (37 samples, 0.48%)</title><rect x="490.7" y="739.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="493.7" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (13 samples, 0.17%)</title><rect x="491.0" y="723.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="494.0" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (5 samples, 0.07%)</title><rect x="492.3" y="707.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.3" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.04%)</title><rect x="492.6" y="691.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.6" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (22 samples, 0.29%)</title><rect x="493.0" y="723.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$74/530395260.apply (22 samples, 0.29%)</title><rect x="493.0" y="707.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="496.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (22 samples, 0.29%)</title><rect x="493.0" y="691.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="496.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (19 samples, 0.25%)</title><rect x="493.0" y="675.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="496.0" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.09%)</title><rect x="493.2" y="659.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="496.2" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.09%)</title><rect x="493.2" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.2" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.08%)</title><rect x="493.3" y="627.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.3" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.08%)</title><rect x="493.3" y="611.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.3" y="622.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="493.5" y="595.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="493.5" y="579.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="493.5" y="563.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="496.5" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="493.5" y="547.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="496.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (11 samples, 0.14%)</title><rect x="494.3" y="659.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.3" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (11 samples, 0.14%)</title><rect x="494.3" y="643.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="497.3" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.14%)</title><rect x="494.3" y="627.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="497.3" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.14%)</title><rect x="494.3" y="611.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="497.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (3 samples, 0.04%)</title><rect x="496.0" y="675.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="499.0" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="496.0" y="659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="499.0" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="496.0" y="643.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="499.0" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (12 samples, 0.16%)</title><rect x="496.4" y="739.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.4" y="750.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (12 samples, 0.16%)</title><rect x="496.4" y="723.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="499.4" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="497.5" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="497.5" y="691.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="500.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.04%)</title><rect x="497.8" y="707.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (12 samples, 0.16%)</title><rect x="498.3" y="739.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="501.3" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (11 samples, 0.14%)</title><rect x="498.3" y="723.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="501.3" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (11 samples, 0.14%)</title><rect x="498.3" y="707.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="501.3" y="718.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.10%)</title><rect x="498.7" y="691.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.7" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="498.7" y="675.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="501.7" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.09%)</title><rect x="498.9" y="659.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="501.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.09%)</title><rect x="498.9" y="643.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="501.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.08%)</title><rect x="499.0" y="627.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.0" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="499.5" y="611.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="502.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (17 samples, 0.22%)</title><rect x="500.1" y="739.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="503.1" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (16 samples, 0.21%)</title><rect x="500.1" y="723.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="503.1" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (16 samples, 0.21%)</title><rect x="500.1" y="707.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.1" y="718.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (16 samples, 0.21%)</title><rect x="500.1" y="691.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.1" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (16 samples, 0.21%)</title><rect x="500.1" y="675.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.1" y="686.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="500.6" y="659.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.6" y="670.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.14%)</title><rect x="500.9" y="659.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.09%)</title><rect x="500.9" y="643.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="503.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.08%)</title><rect x="501.1" y="627.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.1" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="501.7" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="504.7" y="622.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="501.7" y="595.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="504.7" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="502.0" y="643.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="505.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (2,294 samples, 29.96%)</title><rect x="502.7" y="739.0" width="353.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="505.7" y="750.0">ru/mail/polis/dao/igorlo/PersistentDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (3 samples, 0.04%)</title><rect x="502.7" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (2,291 samples, 29.92%)</title><rect x="503.2" y="723.0" width="353.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="506.2" y="734.0">ru/mail/polis/dao/igorlo/PersistentDAO.rowsItera..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (1,828 samples, 23.88%)</title><rect x="503.2" y="707.0" width="281.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.2" y="718.0">ru/mail/polis/dao/igorlo/Table.combine..</text>
</g>
<g>
<title>java/util/ArrayList.add (7 samples, 0.09%)</title><rect x="504.6" y="691.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.hasNext (6 samples, 0.08%)</title><rect x="505.7" y="691.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (30 samples, 0.39%)</title><rect x="506.6" y="691.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="509.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (27 samples, 0.35%)</title><rect x="507.1" y="675.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (23 samples, 0.30%)</title><rect x="507.7" y="659.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (19 samples, 0.25%)</title><rect x="508.3" y="643.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="511.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 0.09%)</title><rect x="509.8" y="627.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (2 samples, 0.03%)</title><rect x="510.9" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="513.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (6 samples, 0.08%)</title><rect x="511.2" y="691.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="514.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (6 samples, 0.08%)</title><rect x="511.2" y="675.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="514.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (6 samples, 0.08%)</title><rect x="511.2" y="659.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (5 samples, 0.07%)</title><rect x="511.4" y="643.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="514.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (5 samples, 0.07%)</title><rect x="511.4" y="627.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="514.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (28 samples, 0.37%)</title><rect x="512.1" y="691.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (22 samples, 0.29%)</title><rect x="512.1" y="675.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="515.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (19 samples, 0.25%)</title><rect x="512.6" y="659.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (19 samples, 0.25%)</title><rect x="512.6" y="643.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="515.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (2 samples, 0.03%)</title><rect x="514.9" y="627.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="517.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (2 samples, 0.03%)</title><rect x="514.9" y="611.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="517.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (2 samples, 0.03%)</title><rect x="515.2" y="627.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="518.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.08%)</title><rect x="515.5" y="675.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="518.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.08%)</title><rect x="515.5" y="659.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="518.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.08%)</title><rect x="515.5" y="643.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="518.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (6 samples, 0.08%)</title><rect x="515.5" y="627.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="518.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.iterator (444 samples, 5.80%)</title><rect x="516.5" y="691.0" width="68.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.5" y="702.0">ru/mail..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (20 samples, 0.26%)</title><rect x="516.6" y="675.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (20 samples, 0.26%)</title><rect x="516.6" y="659.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (19 samples, 0.25%)</title><rect x="516.8" y="643.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.03%)</title><rect x="517.4" y="627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.08%)</title><rect x="517.7" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.7" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.08%)</title><rect x="517.7" y="611.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.7" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (6 samples, 0.08%)</title><rect x="517.7" y="595.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (4 samples, 0.05%)</title><rect x="518.6" y="627.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="521.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (3 samples, 0.04%)</title><rect x="519.2" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (3 samples, 0.04%)</title><rect x="519.2" y="611.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (8 samples, 0.10%)</title><rect x="519.7" y="675.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="522.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (8 samples, 0.10%)</title><rect x="519.7" y="659.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (4 samples, 0.05%)</title><rect x="519.7" y="643.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="522.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.03%)</title><rect x="520.0" y="627.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="523.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="520.0" y="611.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="523.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (4 samples, 0.05%)</title><rect x="520.3" y="643.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="523.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (395 samples, 5.16%)</title><rect x="520.9" y="675.0" width="60.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="523.9" y="686.0">ru/mai..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (17 samples, 0.22%)</title><rect x="521.4" y="659.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.4" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (17 samples, 0.22%)</title><rect x="521.4" y="643.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="524.4" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (15 samples, 0.20%)</title><rect x="521.7" y="627.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="524.7" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (9 samples, 0.12%)</title><rect x="522.3" y="611.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="525.3" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (7 samples, 0.09%)</title><rect x="522.5" y="595.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="525.5" y="606.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (2 samples, 0.03%)</title><rect x="524.0" y="659.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.0" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.08%)</title><rect x="524.3" y="659.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="527.3" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (4 samples, 0.05%)</title><rect x="524.6" y="643.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.6" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (4 samples, 0.05%)</title><rect x="524.6" y="627.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="527.6" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (39 samples, 0.51%)</title><rect x="525.2" y="659.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="528.2" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (15 samples, 0.20%)</title><rect x="527.4" y="643.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="530.4" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.08%)</title><rect x="528.8" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.8" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.07%)</title><rect x="528.9" y="611.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="531.9" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 0.03%)</title><rect x="529.7" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="532.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (4 samples, 0.05%)</title><rect x="530.0" y="643.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="533.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (4 samples, 0.05%)</title><rect x="530.6" y="643.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (5 samples, 0.07%)</title><rect x="531.3" y="659.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="534.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (31 samples, 0.40%)</title><rect x="532.0" y="659.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="535.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (31 samples, 0.40%)</title><rect x="532.0" y="643.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="535.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (29 samples, 0.38%)</title><rect x="532.3" y="627.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.3" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.03%)</title><rect x="532.5" y="611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="535.5" y="622.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.04%)</title><rect x="532.8" y="611.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="535.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (5 samples, 0.07%)</title><rect x="533.3" y="611.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (5 samples, 0.07%)</title><rect x="533.3" y="595.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="536.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (17 samples, 0.22%)</title><rect x="534.0" y="611.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="537.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (15 samples, 0.20%)</title><rect x="534.3" y="595.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.3" y="606.0"></text>
</g>
<g>
<title>itable stub (12 samples, 0.16%)</title><rect x="534.3" y="579.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="537.3" y="590.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (3 samples, 0.04%)</title><rect x="536.2" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="539.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.descendingMap (3 samples, 0.04%)</title><rect x="536.8" y="659.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="539.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.descendingMap (3 samples, 0.04%)</title><rect x="536.8" y="643.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="539.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (289 samples, 3.77%)</title><rect x="537.3" y="659.0" width="44.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="540.3" y="670.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (19 samples, 0.25%)</title><rect x="537.9" y="643.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="540.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.&lt;init&gt; (2 samples, 0.03%)</title><rect x="539.6" y="627.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="542.6" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (2 samples, 0.03%)</title><rect x="539.6" y="611.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="542.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.03%)</title><rect x="539.6" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="542.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (6 samples, 0.08%)</title><rect x="539.9" y="627.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="542.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (265 samples, 3.46%)</title><rect x="540.8" y="643.0" width="40.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="543.8" y="654.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (264 samples, 3.45%)</title><rect x="541.0" y="627.0" width="40.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.0" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (259 samples, 3.38%)</title><rect x="541.7" y="611.0" width="40.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.7" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (17 samples, 0.22%)</title><rect x="543.3" y="595.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="546.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (12 samples, 0.16%)</title><rect x="544.1" y="579.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="547.1" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandle.acquireFence (2 samples, 0.03%)</title><rect x="545.3" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.03%)</title><rect x="545.6" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="548.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (22 samples, 0.29%)</title><rect x="545.9" y="595.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (12 samples, 0.16%)</title><rect x="547.4" y="579.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="550.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (11 samples, 0.14%)</title><rect x="547.6" y="563.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="550.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.13%)</title><rect x="547.8" y="547.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="550.8" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.13%)</title><rect x="547.8" y="531.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="550.8" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.04%)</title><rect x="547.9" y="515.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="550.9" y="526.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="548.1" y="499.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="551.1" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.08%)</title><rect x="548.4" y="515.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.4" y="526.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="549.0" y="499.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="552.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (210 samples, 2.74%)</title><rect x="549.3" y="595.0" width="32.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.3" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (210 samples, 2.74%)</title><rect x="549.3" y="579.0" width="32.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="552.3" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (41 samples, 0.54%)</title><rect x="551.4" y="563.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="554.4" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (3 samples, 0.04%)</title><rect x="551.9" y="547.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="554.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (35 samples, 0.46%)</title><rect x="552.4" y="547.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="555.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (33 samples, 0.43%)</title><rect x="552.7" y="531.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="555.7" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="553.0" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="556.0" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.03%)</title><rect x="553.3" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="556.3" y="526.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (23 samples, 0.30%)</title><rect x="553.6" y="515.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="556.6" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (11 samples, 0.14%)</title><rect x="555.1" y="499.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="558.1" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.07%)</title><rect x="555.9" y="483.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="558.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.03%)</title><rect x="556.8" y="499.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="559.8" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.05%)</title><rect x="557.2" y="515.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="560.2" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.04%)</title><rect x="557.3" y="499.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="560.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (155 samples, 2.02%)</title><rect x="557.8" y="563.0" width="23.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.8" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (111 samples, 1.45%)</title><rect x="564.6" y="547.0" width="17.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="567.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (17 samples, 0.22%)</title><rect x="566.1" y="531.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="569.1" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (84 samples, 1.10%)</title><rect x="568.7" y="531.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (77 samples, 1.01%)</title><rect x="569.8" y="515.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="572.8" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.05%)</title><rect x="570.4" y="499.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="573.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="570.7" y="483.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="573.7" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="570.7" y="467.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="573.7" y="478.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="570.7" y="451.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="573.7" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (7 samples, 0.09%)</title><rect x="571.0" y="499.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="574.0" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (55 samples, 0.72%)</title><rect x="572.1" y="499.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="575.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (2 samples, 0.03%)</title><rect x="576.0" y="483.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="579.0" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.12%)</title><rect x="576.3" y="483.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="579.3" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.05%)</title><rect x="577.0" y="467.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="580.0" y="478.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (19 samples, 0.25%)</title><rect x="577.7" y="483.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="580.7" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.09%)</title><rect x="580.6" y="499.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="583.6" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.07%)</title><rect x="580.7" y="483.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (20 samples, 0.26%)</title><rect x="581.8" y="675.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.8" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (4 samples, 0.05%)</title><rect x="581.8" y="659.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="584.8" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (4 samples, 0.05%)</title><rect x="581.8" y="643.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="584.8" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (2 samples, 0.03%)</title><rect x="581.8" y="627.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="584.8" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 0.03%)</title><rect x="582.1" y="627.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="585.1" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2 samples, 0.03%)</title><rect x="582.1" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="585.1" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2 samples, 0.03%)</title><rect x="582.1" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="585.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (16 samples, 0.21%)</title><rect x="582.4" y="659.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.4" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (16 samples, 0.21%)</title><rect x="582.4" y="643.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="585.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (16 samples, 0.21%)</title><rect x="582.4" y="627.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="585.4" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (4 samples, 0.05%)</title><rect x="582.7" y="611.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.hasNext (2 samples, 0.03%)</title><rect x="583.0" y="595.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.0" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.05%)</title><rect x="583.4" y="611.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="586.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.03%)</title><rect x="583.7" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.03%)</title><rect x="583.7" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="586.7" y="590.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (4 samples, 0.05%)</title><rect x="584.0" y="611.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="587.0" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (3 samples, 0.04%)</title><rect x="584.1" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="587.1" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 0.03%)</title><rect x="584.6" y="611.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="587.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.iterator (1,298 samples, 16.95%)</title><rect x="584.9" y="691.0" width="200.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="587.9" y="702.0">ru/mail/polis/dao/igorlo/S..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt; (1,296 samples, 16.93%)</title><rect x="585.2" y="675.0" width="199.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="588.2" y="686.0">ru/mail/polis/dao/igorlo/S..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.position (1,296 samples, 16.93%)</title><rect x="585.2" y="659.0" width="199.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="588.2" y="670.0">ru/mail/polis/dao/igorlo/S..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.8" y="643.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="594.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.8" y="627.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="594.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.8" y="611.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="594.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.8" y="595.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="594.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.8" y="579.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="594.8" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.8" y="563.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="594.8" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="591.8" y="547.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="594.8" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (221 samples, 2.89%)</title><rect x="592.1" y="643.0" width="34.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.1" y="654.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.05%)</title><rect x="594.3" y="627.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="597.3" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (3 samples, 0.04%)</title><rect x="594.9" y="627.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="597.9" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (185 samples, 2.42%)</title><rect x="595.4" y="627.0" width="28.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="598.4" y="638.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (5 samples, 0.07%)</title><rect x="604.3" y="611.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.3" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (18 samples, 0.24%)</title><rect x="605.1" y="611.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.1" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (10 samples, 0.13%)</title><rect x="605.4" y="595.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="608.4" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (2 samples, 0.03%)</title><rect x="606.9" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (4 samples, 0.05%)</title><rect x="607.2" y="595.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="610.2" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (32 samples, 0.42%)</title><rect x="607.9" y="611.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.9" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.07%)</title><rect x="611.3" y="595.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="614.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (5 samples, 0.07%)</title><rect x="612.0" y="595.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="615.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (72 samples, 0.94%)</title><rect x="612.8" y="611.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="615.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="621.4" y="595.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="624.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="621.4" y="579.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="624.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="621.4" y="563.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="624.4" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (14 samples, 0.18%)</title><rect x="621.7" y="595.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="624.7" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (11 samples, 0.14%)</title><rect x="623.9" y="627.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="626.9" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.08%)</title><rect x="623.9" y="611.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="626.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (5 samples, 0.07%)</title><rect x="624.8" y="611.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.8" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.05%)</title><rect x="625.6" y="627.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (506 samples, 6.61%)</title><rect x="626.2" y="643.0" width="78.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="629.2" y="654.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (91 samples, 1.19%)</title><rect x="626.5" y="627.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="629.5" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (90 samples, 1.18%)</title><rect x="626.7" y="611.0" width="13.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="629.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (89 samples, 1.16%)</title><rect x="626.8" y="595.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="629.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (80 samples, 1.04%)</title><rect x="628.2" y="579.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="640.2" y="563.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="643.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="640.2" y="547.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="643.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="640.2" y="531.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="643.2" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="640.2" y="515.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="643.2" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="640.2" y="499.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="643.2" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="640.2" y="483.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="643.2" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="640.2" y="467.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="643.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (198 samples, 2.59%)</title><rect x="640.5" y="627.0" width="30.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.5" y="638.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (198 samples, 2.59%)</title><rect x="640.5" y="611.0" width="30.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="643.5" y="622.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.markValue (4 samples, 0.05%)</title><rect x="641.9" y="595.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="644.9" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.05%)</title><rect x="642.5" y="595.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="645.5" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (181 samples, 2.36%)</title><rect x="643.2" y="595.0" width="27.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.2" y="606.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (179 samples, 2.34%)</title><rect x="643.5" y="579.0" width="27.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.5" y="590.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (175 samples, 2.29%)</title><rect x="644.1" y="563.0" width="27.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.1" y="574.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (175 samples, 2.29%)</title><rect x="644.1" y="547.0" width="27.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="647.1" y="558.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (175 samples, 2.29%)</title><rect x="644.1" y="531.0" width="27.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.1" y="542.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (100 samples, 1.31%)</title><rect x="651.6" y="515.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.6" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.21%)</title><rect x="654.4" y="499.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.4" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.17%)</title><rect x="654.9" y="483.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="657.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.13%)</title><rect x="655.3" y="467.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="658.3" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.12%)</title><rect x="655.5" y="451.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="658.5" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (66 samples, 0.86%)</title><rect x="656.9" y="499.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.9" y="510.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="665.0" y="483.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="668.0" y="494.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="665.0" y="467.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="668.0" y="478.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="665.0" y="451.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="668.0" y="462.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="665.0" y="435.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="668.0" y="446.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="665.0" y="419.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="668.0" y="430.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="665.2" y="403.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="668.2" y="414.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="665.2" y="387.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="668.2" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (10 samples, 0.13%)</title><rect x="665.5" y="483.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="668.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.13%)</title><rect x="665.5" y="467.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="668.5" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.13%)</title><rect x="665.5" y="451.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.5" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.16%)</title><rect x="667.0" y="515.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (14 samples, 0.18%)</title><rect x="668.9" y="515.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.9" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (188 samples, 2.46%)</title><rect x="671.1" y="627.0" width="28.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="674.1" y="638.0">ja..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="675.1" y="611.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="678.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="675.1" y="595.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="678.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="675.1" y="579.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="678.1" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (160 samples, 2.09%)</title><rect x="675.4" y="611.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="678.4" y="622.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (158 samples, 2.06%)</title><rect x="675.7" y="595.0" width="24.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="678.7" y="606.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (148 samples, 1.93%)</title><rect x="677.2" y="579.0" width="22.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="680.2" y="590.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (148 samples, 1.93%)</title><rect x="677.2" y="563.0" width="22.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="680.2" y="574.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (148 samples, 1.93%)</title><rect x="677.2" y="547.0" width="22.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="680.2" y="558.0">j..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="680.5" y="531.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="683.5" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="680.5" y="515.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="683.5" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="680.5" y="499.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="683.5" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (116 samples, 1.52%)</title><rect x="680.8" y="531.0" width="17.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.8" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (17 samples, 0.22%)</title><rect x="682.8" y="515.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="685.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (17 samples, 0.22%)</title><rect x="682.8" y="499.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="685.8" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.14%)</title><rect x="683.7" y="483.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.13%)</title><rect x="683.8" y="467.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="686.8" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (85 samples, 1.11%)</title><rect x="685.4" y="515.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="688.4" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (85 samples, 1.11%)</title><rect x="685.4" y="499.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="688.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="694.2" y="483.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="697.2" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="694.2" y="467.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="697.2" y="478.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="694.2" y="451.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="697.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (16 samples, 0.21%)</title><rect x="694.5" y="483.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="697.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.13%)</title><rect x="696.9" y="483.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.9" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.13%)</title><rect x="696.9" y="467.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="699.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.12%)</title><rect x="698.6" y="531.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="701.6" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (27 samples, 0.35%)</title><rect x="700.0" y="627.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="703.0" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (27 samples, 0.35%)</title><rect x="700.0" y="611.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="703.0" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (27 samples, 0.35%)</title><rect x="700.0" y="595.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="703.0" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (27 samples, 0.35%)</title><rect x="700.0" y="579.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (524 samples, 6.84%)</title><rect x="704.2" y="643.0" width="80.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.2" y="654.0">ru/mail/p..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="711.4" y="627.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="714.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="711.4" y="611.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="714.4" y="622.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="711.4" y="595.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="714.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="711.4" y="579.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="714.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="711.4" y="563.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="714.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="711.4" y="547.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="714.4" y="558.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="711.4" y="531.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="714.4" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (214 samples, 2.80%)</title><rect x="712.1" y="627.0" width="32.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="715.1" y="638.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (213 samples, 2.78%)</title><rect x="712.2" y="611.0" width="32.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="715.2" y="622.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.markValue (2 samples, 0.03%)</title><rect x="715.6" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="718.6" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (189 samples, 2.47%)</title><rect x="715.9" y="595.0" width="29.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="718.9" y="606.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (189 samples, 2.47%)</title><rect x="715.9" y="579.0" width="29.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="718.9" y="590.0">ja..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (181 samples, 2.36%)</title><rect x="717.1" y="563.0" width="27.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.1" y="574.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (181 samples, 2.36%)</title><rect x="717.1" y="547.0" width="27.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="720.1" y="558.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (181 samples, 2.36%)</title><rect x="717.1" y="531.0" width="27.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="720.1" y="542.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (108 samples, 1.41%)</title><rect x="726.8" y="515.0" width="16.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="729.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (30 samples, 0.39%)</title><rect x="727.9" y="499.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="730.9" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (30 samples, 0.39%)</title><rect x="727.9" y="483.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="730.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (20 samples, 0.26%)</title><rect x="729.5" y="467.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="732.5" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (20 samples, 0.26%)</title><rect x="729.5" y="451.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="732.5" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (71 samples, 0.93%)</title><rect x="732.5" y="499.0" width="11.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="735.5" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (71 samples, 0.93%)</title><rect x="732.5" y="483.0" width="11.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="735.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (20 samples, 0.26%)</title><rect x="738.7" y="467.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="741.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.14%)</title><rect x="741.8" y="467.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="744.8" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.13%)</title><rect x="742.0" y="451.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="745.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.13%)</title><rect x="743.5" y="515.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="746.5" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (153 samples, 2.00%)</title><rect x="745.0" y="627.0" width="23.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="748.0" y="638.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.05%)</title><rect x="749.2" y="611.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.2" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (122 samples, 1.59%)</title><rect x="749.8" y="611.0" width="18.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.8" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (120 samples, 1.57%)</title><rect x="750.1" y="595.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="753.1" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (116 samples, 1.52%)</title><rect x="750.7" y="579.0" width="17.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (116 samples, 1.52%)</title><rect x="750.7" y="563.0" width="17.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.7" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (116 samples, 1.52%)</title><rect x="750.7" y="547.0" width="17.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.7" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (89 samples, 1.16%)</title><rect x="753.4" y="531.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="756.4" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (20 samples, 0.26%)</title><rect x="753.5" y="515.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="756.5" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (20 samples, 0.26%)</title><rect x="753.5" y="499.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (20 samples, 0.26%)</title><rect x="753.5" y="483.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="756.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (18 samples, 0.24%)</title><rect x="753.8" y="467.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="756.8" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (68 samples, 0.89%)</title><rect x="756.6" y="515.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="759.6" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (68 samples, 0.89%)</title><rect x="756.6" y="499.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="759.6" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (68 samples, 0.89%)</title><rect x="756.6" y="483.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.6" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (19 samples, 0.25%)</title><rect x="762.8" y="467.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="765.8" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.12%)</title><rect x="765.7" y="467.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="768.7" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.13%)</title><rect x="767.1" y="531.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="770.1" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (94 samples, 1.23%)</title><rect x="768.6" y="627.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="771.6" y="638.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (75 samples, 0.98%)</title><rect x="768.6" y="611.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="771.6" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.12%)</title><rect x="780.2" y="611.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLong (10 samples, 0.13%)</title><rect x="781.6" y="611.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="784.6" y="622.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.05%)</title><rect x="783.1" y="627.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="786.1" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.05%)</title><rect x="783.1" y="611.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="786.1" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.05%)</title><rect x="783.1" y="595.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="786.1" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.05%)</title><rect x="783.1" y="579.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="786.1" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.10%)</title><rect x="783.7" y="627.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="786.7" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.10%)</title><rect x="783.7" y="611.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="786.7" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.10%)</title><rect x="783.7" y="595.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.7" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.10%)</title><rect x="783.7" y="579.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="786.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (463 samples, 6.05%)</title><rect x="785.0" y="707.0" width="71.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="788.0" y="718.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (9 samples, 0.12%)</title><rect x="785.3" y="691.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.3" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.&lt;init&gt; (5 samples, 0.07%)</title><rect x="785.9" y="675.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="788.9" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.&lt;init&gt; (5 samples, 0.07%)</title><rect x="785.9" y="659.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.9" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/UnmodifiableIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="786.2" y="643.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="789.2" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.04%)</title><rect x="786.2" y="627.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="789.2" y="638.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (3 samples, 0.04%)</title><rect x="786.2" y="611.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="789.2" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (320 samples, 4.18%)</title><rect x="786.6" y="691.0" width="49.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.6" y="702.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (320 samples, 4.18%)</title><rect x="786.6" y="675.0" width="49.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="789.6" y="686.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (61 samples, 0.80%)</title><rect x="788.3" y="659.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.3" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (51 samples, 0.67%)</title><rect x="789.9" y="643.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="792.9" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (46 samples, 0.60%)</title><rect x="790.7" y="627.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="793.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (44 samples, 0.57%)</title><rect x="791.0" y="611.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="794.0" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (10 samples, 0.13%)</title><rect x="791.3" y="595.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.3" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.04%)</title><rect x="791.6" y="579.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="794.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (3 samples, 0.04%)</title><rect x="791.6" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="794.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.04%)</title><rect x="791.6" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="794.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.03%)</title><rect x="791.7" y="531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.7" y="542.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.04%)</title><rect x="792.0" y="579.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="795.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (23 samples, 0.30%)</title><rect x="792.8" y="595.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="795.8" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (21 samples, 0.27%)</title><rect x="793.1" y="579.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.04%)</title><rect x="794.7" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.7" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="795.1" y="563.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="798.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.03%)</title><rect x="795.4" y="563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="798.4" y="574.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.05%)</title><rect x="795.7" y="563.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="798.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (9 samples, 0.12%)</title><rect x="796.4" y="595.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (3 samples, 0.04%)</title><rect x="797.3" y="579.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="800.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="797.4" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (3 samples, 0.04%)</title><rect x="797.7" y="659.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="800.7" y="670.0"></text>
</g>
<g>
<title>itable stub (9 samples, 0.12%)</title><rect x="798.2" y="659.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="801.2" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (3 samples, 0.04%)</title><rect x="799.7" y="659.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="802.7" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (15 samples, 0.20%)</title><rect x="800.2" y="659.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.2" y="670.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="802.1" y="643.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="805.1" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (216 samples, 2.82%)</title><rect x="802.5" y="659.0" width="33.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.5" y="670.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (216 samples, 2.82%)</title><rect x="802.5" y="643.0" width="33.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.5" y="654.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (5 samples, 0.07%)</title><rect x="802.5" y="627.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="805.5" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.03%)</title><rect x="803.0" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.0" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (207 samples, 2.70%)</title><rect x="803.3" y="627.0" width="31.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="806.3" y="638.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (205 samples, 2.68%)</title><rect x="803.6" y="611.0" width="31.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="806.6" y="622.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (192 samples, 2.51%)</title><rect x="804.5" y="595.0" width="29.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="807.5" y="606.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (192 samples, 2.51%)</title><rect x="804.5" y="579.0" width="29.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.5" y="590.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (106 samples, 1.38%)</title><rect x="804.7" y="563.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="807.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (10 samples, 0.13%)</title><rect x="805.6" y="547.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="808.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (90 samples, 1.18%)</title><rect x="807.1" y="547.0" width="13.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (86 samples, 1.12%)</title><rect x="807.8" y="531.0" width="13.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="810.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.hasNext (2 samples, 0.03%)</title><rect x="807.8" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="810.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (84 samples, 1.10%)</title><rect x="808.1" y="515.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="811.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (46 samples, 0.60%)</title><rect x="808.1" y="499.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="811.1" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (29 samples, 0.38%)</title><rect x="808.4" y="483.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (29 samples, 0.38%)</title><rect x="808.4" y="467.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="811.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (25 samples, 0.33%)</title><rect x="809.0" y="451.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="812.0" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (25 samples, 0.33%)</title><rect x="809.0" y="435.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="812.0" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (21 samples, 0.27%)</title><rect x="809.6" y="419.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="812.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (18 samples, 0.24%)</title><rect x="810.1" y="403.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (17 samples, 0.22%)</title><rect x="810.2" y="387.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="813.2" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (17 samples, 0.22%)</title><rect x="810.2" y="371.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="813.2" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.08%)</title><rect x="811.2" y="355.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="814.2" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="811.8" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="814.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="811.8" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="814.8" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.05%)</title><rect x="812.1" y="355.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="815.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (5 samples, 0.07%)</title><rect x="812.9" y="483.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="815.9" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.07%)</title><rect x="812.9" y="467.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="815.9" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="812.9" y="451.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.9" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="813.0" y="435.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="813.0" y="419.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="816.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="813.0" y="403.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="816.0" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="813.0" y="387.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="816.0" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.13%)</title><rect x="813.6" y="483.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.6" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.13%)</title><rect x="813.6" y="467.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.6" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.13%)</title><rect x="813.6" y="451.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="816.6" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.13%)</title><rect x="813.6" y="435.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="816.6" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="814.9" y="419.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (16 samples, 0.21%)</title><rect x="815.2" y="499.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="818.2" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.09%)</title><rect x="815.3" y="483.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="818.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.09%)</title><rect x="815.3" y="467.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="818.3" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.07%)</title><rect x="815.6" y="451.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="818.6" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="815.6" y="435.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.6" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="815.6" y="419.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="818.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="815.6" y="403.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="818.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="815.6" y="387.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="818.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="815.8" y="371.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="818.8" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.04%)</title><rect x="815.9" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="818.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.04%)</title><rect x="815.9" y="339.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="818.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (7 samples, 0.09%)</title><rect x="816.4" y="483.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="819.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.09%)</title><rect x="816.4" y="467.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="819.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.08%)</title><rect x="816.5" y="451.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="819.5" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.08%)</title><rect x="816.5" y="435.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="819.5" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.08%)</title><rect x="816.5" y="419.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="819.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.08%)</title><rect x="816.5" y="403.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="819.5" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="816.7" y="387.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="819.7" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.04%)</title><rect x="816.7" y="371.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="819.7" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.04%)</title><rect x="816.7" y="355.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="819.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="816.7" y="339.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="819.7" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="817.2" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="820.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (12 samples, 0.16%)</title><rect x="817.6" y="499.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="820.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12 samples, 0.16%)</title><rect x="817.6" y="483.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="820.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12 samples, 0.16%)</title><rect x="817.6" y="467.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="820.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (3 samples, 0.04%)</title><rect x="818.2" y="451.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="821.2" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.07%)</title><rect x="818.7" y="451.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="821.7" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="818.7" y="435.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="821.7" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="818.7" y="419.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="818.7" y="403.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="821.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="818.9" y="387.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="821.9" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="818.9" y="371.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.9" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.05%)</title><rect x="818.9" y="355.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (10 samples, 0.13%)</title><rect x="819.5" y="499.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="822.5" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.08%)</title><rect x="819.5" y="483.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="822.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.08%)</title><rect x="819.5" y="467.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="822.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.07%)</title><rect x="819.6" y="451.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.6" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="819.6" y="435.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.6" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="819.6" y="419.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="822.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="819.6" y="403.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="819.6" y="387.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="822.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="819.6" y="371.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="822.6" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="819.6" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="822.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="819.6" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="822.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="819.6" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="822.6" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.04%)</title><rect x="819.9" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.05%)</title><rect x="820.4" y="483.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="823.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="820.4" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="823.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="820.4" y="451.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="823.4" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="820.4" y="435.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="823.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="820.4" y="419.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="820.4" y="403.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="823.4" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="820.4" y="387.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="823.4" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="820.4" y="371.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="823.4" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="820.7" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="823.7" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="820.7" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="823.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (85 samples, 1.11%)</title><rect x="821.0" y="563.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="824.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (85 samples, 1.11%)</title><rect x="821.0" y="547.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="824.0" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (85 samples, 1.11%)</title><rect x="821.0" y="531.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="824.0" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (84 samples, 1.10%)</title><rect x="821.2" y="515.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.2" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (3 samples, 0.04%)</title><rect x="821.2" y="499.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="824.2" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.04%)</title><rect x="821.2" y="483.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="824.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (3 samples, 0.04%)</title><rect x="821.2" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (3 samples, 0.04%)</title><rect x="821.2" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="824.2" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="821.3" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.3" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (81 samples, 1.06%)</title><rect x="821.6" y="499.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="824.6" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (81 samples, 1.06%)</title><rect x="821.6" y="483.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="824.6" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (81 samples, 1.06%)</title><rect x="821.6" y="467.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="824.6" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (80 samples, 1.04%)</title><rect x="821.8" y="451.0" width="12.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="824.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (23 samples, 0.30%)</title><rect x="821.8" y="435.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="824.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (23 samples, 0.30%)</title><rect x="821.8" y="419.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.8" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.18%)</title><rect x="822.4" y="403.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="825.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (2 samples, 0.03%)</title><rect x="822.7" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="825.7" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.08%)</title><rect x="823.0" y="387.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="826.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (6 samples, 0.08%)</title><rect x="823.0" y="371.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="826.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.05%)</title><rect x="823.9" y="387.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="826.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.05%)</title><rect x="824.7" y="403.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="827.7" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.05%)</title><rect x="824.7" y="387.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (57 samples, 0.74%)</title><rect x="825.3" y="435.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="828.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (57 samples, 0.74%)</title><rect x="825.3" y="419.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="828.3" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (26 samples, 0.34%)</title><rect x="825.6" y="403.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="828.6" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (26 samples, 0.34%)</title><rect x="825.6" y="387.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="828.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.16%)</title><rect x="826.0" y="371.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="829.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.09%)</title><rect x="828.0" y="371.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="831.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.08%)</title><rect x="828.1" y="355.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="831.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="828.6" y="339.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="831.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="828.6" y="323.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="831.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="828.6" y="307.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="831.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="828.6" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="831.6" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="828.7" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="831.7" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="828.7" y="259.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="831.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="828.7" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.7" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="828.7" y="227.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="831.7" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (4 samples, 0.05%)</title><rect x="829.0" y="371.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="832.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (29 samples, 0.38%)</title><rect x="829.6" y="403.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.6" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="830.1" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="833.1" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (24 samples, 0.31%)</title><rect x="830.4" y="387.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.4" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (23 samples, 0.30%)</title><rect x="830.6" y="371.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="833.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (18 samples, 0.24%)</title><rect x="831.3" y="355.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="834.3" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="833.3" y="339.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="836.3" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.05%)</title><rect x="833.3" y="323.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="836.3" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.09%)</title><rect x="834.1" y="595.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="837.1" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (4 samples, 0.05%)</title><rect x="835.2" y="627.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="838.2" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.05%)</title><rect x="836.0" y="691.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (128 samples, 1.67%)</title><rect x="836.6" y="691.0" width="19.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (124 samples, 1.62%)</title><rect x="837.2" y="675.0" width="19.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="840.2" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (106 samples, 1.38%)</title><rect x="838.6" y="659.0" width="16.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (9 samples, 0.12%)</title><rect x="840.4" y="643.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="843.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (7 samples, 0.09%)</title><rect x="840.4" y="627.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="843.4" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (7 samples, 0.09%)</title><rect x="840.4" y="611.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.4" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (7 samples, 0.09%)</title><rect x="840.4" y="595.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="843.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (7 samples, 0.09%)</title><rect x="840.4" y="579.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="843.4" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.04%)</title><rect x="840.6" y="563.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="843.6" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.03%)</title><rect x="840.7" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="843.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.03%)</title><rect x="841.1" y="563.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="844.1" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="841.1" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="844.1" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.03%)</title><rect x="841.8" y="643.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="844.8" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (27 samples, 0.35%)</title><rect x="842.1" y="643.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.1" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (27 samples, 0.35%)</title><rect x="842.1" y="627.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="845.1" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (21 samples, 0.27%)</title><rect x="843.1" y="611.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="846.1" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16 samples, 0.21%)</title><rect x="843.7" y="595.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="846.7" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (15 samples, 0.20%)</title><rect x="843.8" y="579.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="846.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (14 samples, 0.18%)</title><rect x="844.0" y="563.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (14 samples, 0.18%)</title><rect x="844.0" y="547.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.0" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (14 samples, 0.18%)</title><rect x="844.0" y="531.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="847.0" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (14 samples, 0.18%)</title><rect x="844.0" y="515.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.0" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (13 samples, 0.17%)</title><rect x="844.1" y="499.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="847.1" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (13 samples, 0.17%)</title><rect x="844.1" y="483.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="847.1" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (13 samples, 0.17%)</title><rect x="844.1" y="467.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.1" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (13 samples, 0.17%)</title><rect x="844.1" y="451.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="847.1" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.13%)</title><rect x="844.3" y="435.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="847.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.13%)</title><rect x="844.3" y="419.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="847.3" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.09%)</title><rect x="844.4" y="403.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.4" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="844.6" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.6" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="844.9" y="387.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="847.9" y="398.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.03%)</title><rect x="845.2" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="848.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="845.5" y="403.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="848.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (2 samples, 0.03%)</title><rect x="845.8" y="435.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="848.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.03%)</title><rect x="845.8" y="419.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="848.8" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="845.8" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="848.8" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="845.8" y="387.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="848.8" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="845.8" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="845.8" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="848.8" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (56 samples, 0.73%)</title><rect x="846.3" y="643.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="849.3" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (56 samples, 0.73%)</title><rect x="846.3" y="627.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="849.3" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (4 samples, 0.05%)</title><rect x="846.3" y="611.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="849.3" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (52 samples, 0.68%)</title><rect x="846.9" y="611.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="849.9" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (52 samples, 0.68%)</title><rect x="846.9" y="595.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="849.9" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (50 samples, 0.65%)</title><rect x="847.2" y="579.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="850.2" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (49 samples, 0.64%)</title><rect x="847.4" y="563.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="850.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (28 samples, 0.37%)</title><rect x="847.5" y="547.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="850.5" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 0.03%)</title><rect x="847.5" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="850.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (26 samples, 0.34%)</title><rect x="847.8" y="531.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="850.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (26 samples, 0.34%)</title><rect x="847.8" y="515.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="850.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (26 samples, 0.34%)</title><rect x="847.8" y="499.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="850.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (12 samples, 0.16%)</title><rect x="847.8" y="483.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="850.8" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10 samples, 0.13%)</title><rect x="847.8" y="467.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="850.8" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.13%)</title><rect x="847.8" y="451.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="850.8" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.09%)</title><rect x="848.3" y="435.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="851.3" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.09%)</title><rect x="848.3" y="419.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="851.3" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.09%)</title><rect x="848.3" y="403.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="851.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="848.6" y="387.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="848.6" y="371.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="851.6" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="848.6" y="355.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="849.1" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.03%)</title><rect x="849.4" y="467.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="849.4" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.4" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="849.4" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.4" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="849.4" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="852.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (9 samples, 0.12%)</title><rect x="849.7" y="483.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="852.7" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.07%)</title><rect x="849.8" y="467.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.8" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.07%)</title><rect x="849.8" y="451.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.8" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.07%)</title><rect x="849.8" y="435.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.8" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="849.8" y="419.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.8" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="850.0" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="853.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="850.0" y="387.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="853.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="850.0" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="853.0" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="850.1" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.04%)</title><rect x="850.1" y="339.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="853.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.04%)</title><rect x="850.1" y="323.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="853.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.03%)</title><rect x="850.6" y="467.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="853.6" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="850.6" y="451.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="853.6" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="850.6" y="435.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="853.6" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="850.6" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="853.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="850.6" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="853.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="850.6" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="850.6" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="853.6" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="850.6" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="853.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="850.6" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="853.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="850.6" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="853.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (3 samples, 0.04%)</title><rect x="851.1" y="483.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="854.1" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="851.1" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.1" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="851.1" y="451.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.2" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.2" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.2" y="419.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.2" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.2" y="403.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="854.2" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.2" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="854.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.2" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="854.2" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.2" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="854.2" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="851.2" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="854.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (2 samples, 0.03%)</title><rect x="851.5" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.03%)</title><rect x="851.5" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="854.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.5" y="451.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.5" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.5" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="854.5" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.5" y="419.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.5" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.5" y="387.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="854.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="851.5" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.5" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="851.5" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.5" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="851.5" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="854.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="851.5" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="854.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (20 samples, 0.26%)</title><rect x="851.8" y="547.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="854.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (20 samples, 0.26%)</title><rect x="851.8" y="531.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="854.8" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (20 samples, 0.26%)</title><rect x="851.8" y="515.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.8" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (20 samples, 0.26%)</title><rect x="851.8" y="499.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="854.8" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (3 samples, 0.04%)</title><rect x="851.8" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="854.8" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.04%)</title><rect x="851.8" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="854.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (2 samples, 0.03%)</title><rect x="852.0" y="451.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="855.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (2 samples, 0.03%)</title><rect x="852.0" y="435.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.0" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="852.0" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="855.0" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="852.0" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.0" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (17 samples, 0.22%)</title><rect x="852.3" y="483.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.3" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (17 samples, 0.22%)</title><rect x="852.3" y="467.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.3" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (17 samples, 0.22%)</title><rect x="852.3" y="451.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="855.3" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (17 samples, 0.22%)</title><rect x="852.3" y="435.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="855.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.10%)</title><rect x="852.3" y="419.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.09%)</title><rect x="852.3" y="403.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.3" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.05%)</title><rect x="852.8" y="387.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (9 samples, 0.12%)</title><rect x="853.5" y="419.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="856.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (9 samples, 0.12%)</title><rect x="853.5" y="403.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="856.5" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="853.5" y="387.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.5" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.05%)</title><rect x="853.5" y="371.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="856.5" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="853.7" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="856.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="853.8" y="339.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="856.8" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="853.8" y="323.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="856.8" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.07%)</title><rect x="854.2" y="387.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="857.2" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="854.5" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="857.5" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="854.5" y="355.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="857.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="854.5" y="339.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="857.5" y="350.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="854.9" y="659.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="857.9" y="670.0"></text>
</g>
<g>
<title>unsafe_arraycopy (4 samples, 0.05%)</title><rect x="855.7" y="659.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="858.7" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,781 samples, 23.26%)</title><rect x="856.5" y="883.0" width="274.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="859.5" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (568 samples, 7.42%)</title><rect x="857.7" y="867.0" width="87.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="860.7" y="878.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (18 samples, 0.24%)</title><rect x="858.8" y="851.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="861.8" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (543 samples, 7.09%)</title><rect x="861.6" y="851.0" width="83.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="864.6" y="862.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (10 samples, 0.13%)</title><rect x="864.5" y="835.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="867.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (494 samples, 6.45%)</title><rect x="866.0" y="835.0" width="76.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="869.0" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="866.0" y="819.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="869.0" y="830.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (5 samples, 0.07%)</title><rect x="866.3" y="819.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="869.3" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (7 samples, 0.09%)</title><rect x="867.3" y="819.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="870.3" y="830.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.09%)</title><rect x="868.3" y="819.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="871.3" y="830.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.08%)</title><rect x="868.5" y="803.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="871.5" y="814.0"></text>
</g>
<g>
<title>epoll_wait (472 samples, 6.17%)</title><rect x="869.4" y="819.0" width="72.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="872.4" y="830.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (447 samples, 5.84%)</title><rect x="873.3" y="803.0" width="68.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="876.3" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (447 samples, 5.84%)</title><rect x="873.3" y="787.0" width="68.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="876.3" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (411 samples, 5.37%)</title><rect x="878.8" y="771.0" width="63.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="881.8" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (409 samples, 5.34%)</title><rect x="879.1" y="755.0" width="63.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="882.1" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (395 samples, 5.16%)</title><rect x="881.3" y="739.0" width="60.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="884.3" y="750.0">[unkno..</text>
</g>
<g>
<title>[unknown] (345 samples, 4.51%)</title><rect x="889.0" y="723.0" width="53.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="892.0" y="734.0">[unkn..</text>
</g>
<g>
<title>[unknown] (253 samples, 3.30%)</title><rect x="903.2" y="707.0" width="39.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="906.2" y="718.0">[un..</text>
</g>
<g>
<title>[unknown] (180 samples, 2.35%)</title><rect x="914.4" y="691.0" width="27.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="917.4" y="702.0">[..</text>
</g>
<g>
<title>[unknown] (148 samples, 1.93%)</title><rect x="919.4" y="675.0" width="22.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="922.4" y="686.0">[..</text>
</g>
<g>
<title>[unknown] (103 samples, 1.35%)</title><rect x="926.3" y="659.0" width="15.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="929.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.18%)</title><rect x="940.0" y="643.0" width="2.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="943.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.14%)</title><rect x="940.5" y="627.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="943.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.14%)</title><rect x="940.5" y="611.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="943.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.14%)</title><rect x="940.5" y="595.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="943.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.10%)</title><rect x="940.9" y="579.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="943.9" y="590.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.10%)</title><rect x="940.9" y="563.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="943.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.09%)</title><rect x="941.1" y="547.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="944.1" y="558.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.04%)</title><rect x="942.2" y="835.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="945.2" y="846.0"></text>
</g>
<g>
<title>epoll_wait (17 samples, 0.22%)</title><rect x="942.6" y="835.0" width="2.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="945.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,205 samples, 15.74%)</title><rect x="945.2" y="867.0" width="185.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="948.2" y="878.0">one/nio/net/Session.proc..</text>
</g>
<g>
<title>gettimeofday (8 samples, 0.10%)</title><rect x="948.0" y="851.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="951.0" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,172 samples, 15.31%)</title><rect x="949.3" y="851.0" width="180.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="952.3" y="862.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (765 samples, 9.99%)</title><rect x="950.3" y="835.0" width="117.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="953.3" y="846.0">one/nio/http/H..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="954.2" y="819.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="957.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="954.2" y="803.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="957.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="954.2" y="787.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="957.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="954.2" y="771.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="957.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="954.2" y="755.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="957.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="954.2" y="739.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="957.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="954.2" y="723.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="957.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (595 samples, 7.77%)</title><rect x="954.5" y="819.0" width="91.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="957.5" y="830.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (590 samples, 7.71%)</title><rect x="955.3" y="803.0" width="90.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.3" y="814.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (553 samples, 7.22%)</title><rect x="956.0" y="787.0" width="85.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.0" y="798.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (63 samples, 0.82%)</title><rect x="956.0" y="771.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (34 samples, 0.44%)</title><rect x="956.0" y="755.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="959.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (34 samples, 0.44%)</title><rect x="956.0" y="739.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.0" y="750.0"></text>
</g>
<g>
<title>jbyte_arraycopy (5 samples, 0.07%)</title><rect x="959.1" y="723.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="962.1" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.09%)</title><rect x="959.9" y="723.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="962.9" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="961.0" y="723.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="964.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (11 samples, 0.14%)</title><rect x="961.3" y="755.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="964.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="963.0" y="755.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="966.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="963.0" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="966.0" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="963.0" y="723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="966.0" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (16 samples, 0.21%)</title><rect x="963.3" y="755.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="966.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (15 samples, 0.20%)</title><rect x="963.4" y="739.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="966.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (15 samples, 0.20%)</title><rect x="963.4" y="723.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="966.4" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (11 samples, 0.14%)</title><rect x="964.0" y="707.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="967.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (490 samples, 6.40%)</title><rect x="965.7" y="771.0" width="75.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="968.7" y="782.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/String.getBytes (6 samples, 0.08%)</title><rect x="965.9" y="755.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="968.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (2 samples, 0.03%)</title><rect x="966.8" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="969.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.14%)</title><rect x="967.1" y="755.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="970.1" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.14%)</title><rect x="967.1" y="739.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="970.1" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.14%)</title><rect x="967.1" y="723.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="970.1" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.13%)</title><rect x="967.3" y="707.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="970.3" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.13%)</title><rect x="967.3" y="691.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="970.3" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="967.7" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="970.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.07%)</title><rect x="968.1" y="675.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="971.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.07%)</title><rect x="968.1" y="659.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="971.1" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (470 samples, 6.14%)</title><rect x="968.8" y="755.0" width="72.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="971.8" y="766.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (470 samples, 6.14%)</title><rect x="968.8" y="739.0" width="72.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="971.8" y="750.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (455 samples, 5.94%)</title><rect x="970.2" y="723.0" width="70.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="973.2" y="734.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (3 samples, 0.04%)</title><rect x="970.7" y="707.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="973.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (303 samples, 3.96%)</title><rect x="971.1" y="707.0" width="46.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="974.1" y="718.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.05%)</title><rect x="971.1" y="691.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="974.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.05%)</title><rect x="971.1" y="675.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="974.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.05%)</title><rect x="971.1" y="659.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="974.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.05%)</title><rect x="971.1" y="643.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="974.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.05%)</title><rect x="971.1" y="627.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="974.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.05%)</title><rect x="971.1" y="611.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="974.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="971.3" y="595.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="974.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (299 samples, 3.91%)</title><rect x="971.8" y="691.0" width="46.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="974.8" y="702.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (299 samples, 3.91%)</title><rect x="971.8" y="675.0" width="46.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="974.8" y="686.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (299 samples, 3.91%)</title><rect x="971.8" y="659.0" width="46.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.8" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (299 samples, 3.91%)</title><rect x="971.8" y="643.0" width="46.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="974.8" y="654.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (299 samples, 3.91%)</title><rect x="971.8" y="627.0" width="46.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="974.8" y="638.0">jdk/..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.03%)</title><rect x="972.8" y="611.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.8" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark (39 samples, 0.51%)</title><rect x="973.5" y="611.0" width="6.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="976.5" y="622.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.03%)</title><rect x="973.9" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="976.9" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.04%)</title><rect x="974.2" y="595.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="977.2" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.08%)</title><rect x="975.0" y="595.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="978.0" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.03%)</title><rect x="975.9" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.9" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (10 samples, 0.13%)</title><rect x="976.2" y="595.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="979.2" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.03%)</title><rect x="977.8" y="595.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.8" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (3 samples, 0.04%)</title><rect x="978.1" y="595.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.1" y="606.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (5 samples, 0.07%)</title><rect x="978.5" y="595.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="981.5" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (9 samples, 0.12%)</title><rect x="979.5" y="611.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="982.5" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (240 samples, 3.13%)</title><rect x="980.8" y="611.0" width="37.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="983.8" y="622.0">pth..</text>
</g>
<g>
<title>[unknown] (219 samples, 2.86%)</title><rect x="984.1" y="595.0" width="33.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="987.1" y="606.0">[u..</text>
</g>
<g>
<title>[unknown] (219 samples, 2.86%)</title><rect x="984.1" y="579.0" width="33.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="987.1" y="590.0">[u..</text>
</g>
<g>
<title>[unknown] (205 samples, 2.68%)</title><rect x="986.2" y="563.0" width="31.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="989.2" y="574.0">[u..</text>
</g>
<g>
<title>[unknown] (201 samples, 2.63%)</title><rect x="986.9" y="547.0" width="30.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="989.9" y="558.0">[u..</text>
</g>
<g>
<title>[unknown] (195 samples, 2.55%)</title><rect x="987.8" y="531.0" width="30.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="990.8" y="542.0">[u..</text>
</g>
<g>
<title>[unknown] (178 samples, 2.32%)</title><rect x="990.4" y="515.0" width="27.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="993.4" y="526.0">[..</text>
</g>
<g>
<title>[unknown] (159 samples, 2.08%)</title><rect x="993.3" y="499.0" width="24.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="996.3" y="510.0">[..</text>
</g>
<g>
<title>[unknown] (146 samples, 1.91%)</title><rect x="995.3" y="483.0" width="22.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="998.3" y="494.0">[..</text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="1016.9" y="467.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1019.9" y="478.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="1016.9" y="451.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1019.9" y="462.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="1016.9" y="435.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1019.9" y="446.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="1016.9" y="419.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1019.9" y="430.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.07%)</title><rect x="1017.1" y="403.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1020.1" y="414.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.07%)</title><rect x="1017.1" y="387.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1020.1" y="398.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.07%)</title><rect x="1017.1" y="371.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1020.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (24 samples, 0.31%)</title><rect x="1017.8" y="707.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1020.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (24 samples, 0.31%)</title><rect x="1017.8" y="691.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1020.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (9 samples, 0.12%)</title><rect x="1020.2" y="675.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1023.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (5 samples, 0.07%)</title><rect x="1020.8" y="659.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1023.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.03%)</title><rect x="1020.8" y="643.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1023.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.03%)</title><rect x="1020.8" y="627.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1023.8" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (2 samples, 0.03%)</title><rect x="1020.8" y="611.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1023.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (3 samples, 0.04%)</title><rect x="1021.1" y="643.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1024.1" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.04%)</title><rect x="1021.1" y="627.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1024.1" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (3 samples, 0.04%)</title><rect x="1021.1" y="611.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1024.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (119 samples, 1.55%)</title><rect x="1021.5" y="707.0" width="18.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1024.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (116 samples, 1.52%)</title><rect x="1022.0" y="691.0" width="17.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1025.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (68 samples, 0.89%)</title><rect x="1022.2" y="675.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1025.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (23 samples, 0.30%)</title><rect x="1022.8" y="659.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1025.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (21 samples, 0.27%)</title><rect x="1023.1" y="643.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1026.1" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (20 samples, 0.26%)</title><rect x="1023.2" y="627.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1026.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1026.0" y="611.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1029.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1026.0" y="595.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1029.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1026.0" y="579.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1029.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1026.0" y="563.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1029.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1026.0" y="547.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1029.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1026.0" y="531.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1029.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1026.0" y="515.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1029.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (24 samples, 0.31%)</title><rect x="1026.3" y="659.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1029.3" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (24 samples, 0.31%)</title><rect x="1026.3" y="643.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1029.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (23 samples, 0.30%)</title><rect x="1026.5" y="627.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1029.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (17 samples, 0.22%)</title><rect x="1030.0" y="659.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1033.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (17 samples, 0.22%)</title><rect x="1030.0" y="643.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1033.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (17 samples, 0.22%)</title><rect x="1030.0" y="627.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1033.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (47 samples, 0.61%)</title><rect x="1032.6" y="675.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1035.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (31 samples, 0.40%)</title><rect x="1035.1" y="659.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1038.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (17 samples, 0.22%)</title><rect x="1036.0" y="643.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1039.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.10%)</title><rect x="1038.6" y="643.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1041.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (8 samples, 0.10%)</title><rect x="1038.6" y="627.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1041.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.04%)</title><rect x="1039.9" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.04%)</title><rect x="1039.9" y="691.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1042.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.04%)</title><rect x="1039.9" y="675.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1042.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (6 samples, 0.08%)</title><rect x="1040.3" y="723.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1043.3" y="734.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (15 samples, 0.20%)</title><rect x="1041.4" y="787.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1044.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.14%)</title><rect x="1042.0" y="771.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1045.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.08%)</title><rect x="1042.2" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1045.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.08%)</title><rect x="1042.2" y="739.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1045.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.05%)</title><rect x="1043.1" y="755.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1046.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.05%)</title><rect x="1043.1" y="739.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1046.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (16 samples, 0.21%)</title><rect x="1043.7" y="787.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1046.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.21%)</title><rect x="1043.7" y="771.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1046.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14 samples, 0.18%)</title><rect x="1044.0" y="755.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1047.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1044.3" y="739.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1047.3" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (8 samples, 0.10%)</title><rect x="1045.0" y="739.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1048.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (62 samples, 0.81%)</title><rect x="1046.2" y="819.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1049.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (30 samples, 0.39%)</title><rect x="1047.3" y="803.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1050.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (18 samples, 0.24%)</title><rect x="1048.8" y="787.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1051.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (18 samples, 0.24%)</title><rect x="1048.8" y="771.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1051.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (17 samples, 0.22%)</title><rect x="1049.0" y="755.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1052.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.03%)</title><rect x="1051.6" y="787.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1054.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (25 samples, 0.33%)</title><rect x="1051.9" y="803.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1054.9" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (25 samples, 0.33%)</title><rect x="1051.9" y="787.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1054.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.12%)</title><rect x="1054.4" y="771.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1057.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.10%)</title><rect x="1054.5" y="755.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1057.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.10%)</title><rect x="1055.8" y="819.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1058.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.08%)</title><rect x="1056.1" y="803.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1059.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.05%)</title><rect x="1056.4" y="787.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1059.4" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.04%)</title><rect x="1056.5" y="771.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1059.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.04%)</title><rect x="1056.5" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1059.5" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (3 samples, 0.04%)</title><rect x="1056.5" y="739.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.5" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (20 samples, 0.26%)</title><rect x="1057.0" y="819.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1060.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.04%)</title><rect x="1059.5" y="803.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1062.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (45 samples, 0.59%)</title><rect x="1060.1" y="819.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1063.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (38 samples, 0.50%)</title><rect x="1060.2" y="803.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1063.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.04%)</title><rect x="1060.5" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="1060.7" y="771.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1063.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (30 samples, 0.39%)</title><rect x="1061.0" y="787.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1064.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.07%)</title><rect x="1063.3" y="771.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1066.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.07%)</title><rect x="1063.3" y="755.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1066.3" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.03%)</title><rect x="1063.8" y="739.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1066.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (10 samples, 0.13%)</title><rect x="1064.1" y="771.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1067.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (10 samples, 0.13%)</title><rect x="1064.1" y="755.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1067.1" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (3 samples, 0.04%)</title><rect x="1064.2" y="739.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1067.2" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.08%)</title><rect x="1064.7" y="739.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1067.7" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="1065.6" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1068.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.08%)</title><rect x="1066.1" y="803.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1069.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.08%)</title><rect x="1066.1" y="787.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1069.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1066.2" y="771.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1069.2" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="1066.7" y="771.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1069.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.10%)</title><rect x="1067.0" y="819.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.0" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.10%)</title><rect x="1067.0" y="803.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1070.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.07%)</title><rect x="1067.5" y="787.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1070.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (2 samples, 0.03%)</title><rect x="1067.9" y="771.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1070.9" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (400 samples, 5.22%)</title><rect x="1068.2" y="835.0" width="61.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1071.2" y="846.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (398 samples, 5.20%)</title><rect x="1068.5" y="819.0" width="61.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1071.5" y="830.0">one/ni..</text>
</g>
<g>
<title>[unknown] (86 samples, 1.12%)</title><rect x="1071.6" y="803.0" width="13.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1074.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (86 samples, 1.12%)</title><rect x="1071.6" y="787.0" width="13.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1074.6" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (68 samples, 0.89%)</title><rect x="1071.6" y="771.0" width="10.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1074.6" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="1072.7" y="755.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.7" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.04%)</title><rect x="1073.0" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.0" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3 (11 samples, 0.14%)</title><rect x="1073.6" y="755.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1076.6" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.03%)</title><rect x="1075.3" y="755.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1078.3" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (37 samples, 0.48%)</title><rect x="1075.6" y="755.0" width="5.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1078.6" y="766.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.07%)</title><rect x="1077.3" y="739.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.3" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (4 samples, 0.05%)</title><rect x="1078.1" y="739.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.1" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (9 samples, 0.12%)</title><rect x="1078.7" y="739.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.7" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.10%)</title><rect x="1080.1" y="739.0" width="1.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1083.1" y="750.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.05%)</title><rect x="1081.5" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.5" y="766.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (6 samples, 0.08%)</title><rect x="1082.1" y="771.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1085.1" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.08%)</title><rect x="1083.0" y="771.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1086.0" y="782.0"></text>
</g>
<g>
<title>recv (6 samples, 0.08%)</title><rect x="1084.0" y="771.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1087.0" y="782.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="1084.9" y="803.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1087.9" y="814.0"></text>
</g>
<g>
<title>recv (290 samples, 3.79%)</title><rect x="1085.2" y="803.0" width="44.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1088.2" y="814.0">recv</text>
</g>
<g>
<title>[unknown] (270 samples, 3.53%)</title><rect x="1088.3" y="787.0" width="41.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1091.3" y="798.0">[un..</text>
</g>
<g>
<title>[unknown] (270 samples, 3.53%)</title><rect x="1088.3" y="771.0" width="41.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1091.3" y="782.0">[un..</text>
</g>
<g>
<title>[unknown] (251 samples, 3.28%)</title><rect x="1091.2" y="755.0" width="38.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1094.2" y="766.0">[un..</text>
</g>
<g>
<title>[unknown] (251 samples, 3.28%)</title><rect x="1091.2" y="739.0" width="38.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1094.2" y="750.0">[un..</text>
</g>
<g>
<title>[unknown] (241 samples, 3.15%)</title><rect x="1092.7" y="723.0" width="37.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1095.7" y="734.0">[un..</text>
</g>
<g>
<title>[unknown] (229 samples, 2.99%)</title><rect x="1094.6" y="707.0" width="35.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1097.6" y="718.0">[un..</text>
</g>
<g>
<title>[unknown] (215 samples, 2.81%)</title><rect x="1096.8" y="691.0" width="33.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1099.8" y="702.0">[u..</text>
</g>
<g>
<title>[unknown] (181 samples, 2.36%)</title><rect x="1102.0" y="675.0" width="27.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1105.0" y="686.0">[..</text>
</g>
<g>
<title>[unknown] (144 samples, 1.88%)</title><rect x="1107.7" y="659.0" width="22.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1110.7" y="670.0">[..</text>
</g>
<g>
<title>[unknown] (99 samples, 1.29%)</title><rect x="1114.6" y="643.0" width="15.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1117.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 0.73%)</title><rect x="1121.3" y="627.0" width="8.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1124.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.25%)</title><rect x="1127.0" y="611.0" width="2.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1130.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.08%)</title><rect x="1129.0" y="595.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1132.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="1129.3" y="579.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1132.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="1129.4" y="563.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1132.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="1129.4" y="547.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1132.4" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.09%)</title><rect x="1129.9" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.9" y="862.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.08%)</title><rect x="1130.0" y="835.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1133.0" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.04%)</title><rect x="1130.5" y="819.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1133.5" y="830.0"></text>
</g>
<g>
<title>start_thread (382 samples, 4.99%)</title><rect x="1131.1" y="883.0" width="58.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1134.1" y="894.0">start_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (382 samples, 4.99%)</title><rect x="1131.1" y="867.0" width="58.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1134.1" y="878.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (382 samples, 4.99%)</title><rect x="1131.1" y="851.0" width="58.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.1" y="862.0">Thread..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (5 samples, 0.07%)</title><rect x="1131.1" y="835.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.1" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (5 samples, 0.07%)</title><rect x="1131.1" y="819.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.1" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (5 samples, 0.07%)</title><rect x="1131.1" y="803.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.1" y="814.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (5 samples, 0.07%)</title><rect x="1131.1" y="787.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.1" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.03%)</title><rect x="1131.1" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.1" y="782.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.03%)</title><rect x="1131.1" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.1" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="1131.4" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.4" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.03%)</title><rect x="1131.4" y="755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.4" y="766.0"></text>
</g>
<g>
<title>GangWorker::loop() (52 samples, 0.68%)</title><rect x="1131.9" y="835.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.9" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (47 samples, 0.61%)</title><rect x="1132.0" y="819.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.0" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (40 samples, 0.52%)</title><rect x="1132.0" y="803.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.0" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (27 samples, 0.35%)</title><rect x="1132.0" y="787.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.0" y="798.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (21 samples, 0.27%)</title><rect x="1133.0" y="771.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.0" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (20 samples, 0.26%)</title><rect x="1133.1" y="755.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.1" y="766.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.03%)</title><rect x="1135.6" y="739.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.6" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="1135.9" y="739.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.9" y="750.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.03%)</title><rect x="1136.2" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.2" y="798.0"></text>
</g>
<g>
<title>SpinPause (10 samples, 0.13%)</title><rect x="1136.5" y="787.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1139.5" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.03%)</title><rect x="1138.4" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.4" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.03%)</title><rect x="1138.4" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.4" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.05%)</title><rect x="1138.7" y="803.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.7" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.03%)</title><rect x="1138.7" y="787.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.7" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1138.7" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.7" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.03%)</title><rect x="1138.7" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.7" y="766.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1138.7" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.7" y="750.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 0.04%)</title><rect x="1139.4" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 0.04%)</title><rect x="1139.4" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.4" y="814.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (2 samples, 0.03%)</title><rect x="1139.6" y="787.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.6" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (310 samples, 4.05%)</title><rect x="1139.9" y="835.0" width="47.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.9" y="846.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (310 samples, 4.05%)</title><rect x="1139.9" y="819.0" width="47.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.9" y="830.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (307 samples, 4.01%)</title><rect x="1139.9" y="803.0" width="47.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.9" y="814.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (306 samples, 4.00%)</title><rect x="1139.9" y="787.0" width="47.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.9" y="798.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (302 samples, 3.94%)</title><rect x="1139.9" y="771.0" width="46.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.9" y="782.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (302 samples, 3.94%)</title><rect x="1139.9" y="755.0" width="46.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.9" y="766.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (194 samples, 2.53%)</title><rect x="1139.9" y="739.0" width="29.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.9" y="750.0">Co..</text>
</g>
<g>
<title>Compile::Output() (11 samples, 0.14%)</title><rect x="1139.9" y="723.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.9" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (5 samples, 0.07%)</title><rect x="1139.9" y="707.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.9" y="718.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (4 samples, 0.05%)</title><rect x="1140.7" y="707.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.7" y="718.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (4 samples, 0.05%)</title><rect x="1140.7" y="691.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.7" y="702.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (2 samples, 0.03%)</title><rect x="1141.3" y="707.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1144.3" y="718.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.08%)</title><rect x="1141.6" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.6" y="734.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.03%)</title><rect x="1141.6" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.6" y="718.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (3 samples, 0.04%)</title><rect x="1142.1" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.1" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.03%)</title><rect x="1142.2" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.2" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (17 samples, 0.22%)</title><rect x="1142.7" y="723.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.7" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (15 samples, 0.20%)</title><rect x="1143.0" y="707.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.0" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.05%)</title><rect x="1143.5" y="691.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.5" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (6 samples, 0.08%)</title><rect x="1144.4" y="691.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (5 samples, 0.07%)</title><rect x="1144.4" y="675.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.05%)</title><rect x="1144.5" y="659.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.5" y="670.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.04%)</title><rect x="1144.5" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.5" y="654.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.03%)</title><rect x="1144.7" y="627.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.7" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (19 samples, 0.25%)</title><rect x="1145.5" y="723.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.5" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (19 samples, 0.25%)</title><rect x="1145.5" y="707.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.5" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.05%)</title><rect x="1145.8" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.03%)</title><rect x="1146.1" y="675.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.1" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.04%)</title><rect x="1146.4" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.04%)</title><rect x="1146.8" y="691.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.8" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.03%)</title><rect x="1147.5" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.5" y="702.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.03%)</title><rect x="1147.5" y="675.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.5" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.03%)</title><rect x="1147.8" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.8" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.03%)</title><rect x="1147.8" y="675.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.8" y="686.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.03%)</title><rect x="1148.1" y="691.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1151.1" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.03%)</title><rect x="1148.4" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (137 samples, 1.79%)</title><rect x="1148.7" y="723.0" width="21.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.7" y="734.0">P..</text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.04%)</title><rect x="1148.8" y="707.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.8" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.03%)</title><rect x="1149.3" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.03%)</title><rect x="1149.6" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.6" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.03%)</title><rect x="1149.6" y="691.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.07%)</title><rect x="1149.9" y="707.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.9" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.05%)</title><rect x="1150.1" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.14%)</title><rect x="1150.7" y="707.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (27 samples, 0.35%)</title><rect x="1152.5" y="707.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (4 samples, 0.05%)</title><rect x="1153.3" y="691.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.14%)</title><rect x="1153.9" y="691.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.05%)</title><rect x="1154.9" y="675.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (5 samples, 0.07%)</title><rect x="1155.6" y="691.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.6" y="702.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.03%)</title><rect x="1156.4" y="691.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (5 samples, 0.07%)</title><rect x="1156.7" y="707.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.03%)</title><rect x="1157.2" y="691.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (4 samples, 0.05%)</title><rect x="1157.6" y="707.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (12 samples, 0.16%)</title><rect x="1158.2" y="707.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (4 samples, 0.05%)</title><rect x="1160.1" y="707.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (19 samples, 0.25%)</title><rect x="1160.7" y="707.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (7 samples, 0.09%)</title><rect x="1162.3" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.3" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.07%)</title><rect x="1163.6" y="707.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.6" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.03%)</title><rect x="1163.8" y="691.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.8" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.03%)</title><rect x="1164.1" y="691.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.1" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.07%)</title><rect x="1164.4" y="707.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.4" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1164.9" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.05%)</title><rect x="1165.2" y="707.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.2" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.04%)</title><rect x="1165.3" y="691.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.3" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.03%)</title><rect x="1165.8" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.8" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (17 samples, 0.22%)</title><rect x="1166.1" y="707.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="718.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.03%)</title><rect x="1167.2" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.2" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.09%)</title><rect x="1167.5" y="691.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="702.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (4 samples, 0.05%)</title><rect x="1168.9" y="707.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1171.9" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (77 samples, 1.01%)</title><rect x="1169.8" y="739.0" width="11.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.8" y="750.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.04%)</title><rect x="1170.0" y="723.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.04%)</title><rect x="1170.4" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.04%)</title><rect x="1170.4" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.03%)</title><rect x="1170.6" y="691.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.6" y="702.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.05%)</title><rect x="1170.9" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.9" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (4 samples, 0.05%)</title><rect x="1171.5" y="723.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (4 samples, 0.05%)</title><rect x="1171.5" y="707.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.5" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (4 samples, 0.05%)</title><rect x="1171.5" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.5" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (2 samples, 0.03%)</title><rect x="1171.8" y="675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (2 samples, 0.03%)</title><rect x="1171.8" y="659.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="670.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (2 samples, 0.03%)</title><rect x="1171.8" y="643.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (46 samples, 0.60%)</title><rect x="1172.1" y="723.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1172.1" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.03%)</title><rect x="1172.4" y="707.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.03%)</title><rect x="1172.4" y="691.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1172.4" y="675.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.03%)</title><rect x="1172.4" y="659.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (8 samples, 0.10%)</title><rect x="1172.9" y="707.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.9" y="718.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.04%)</title><rect x="1173.7" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1174.1" y="707.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 0.21%)</title><rect x="1174.4" y="707.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 0.10%)</title><rect x="1175.7" y="691.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 0.10%)</title><rect x="1175.7" y="675.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.04%)</title><rect x="1176.0" y="659.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.04%)</title><rect x="1176.4" y="659.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.03%)</title><rect x="1177.1" y="707.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (6 samples, 0.08%)</title><rect x="1177.4" y="707.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (5 samples, 0.07%)</title><rect x="1177.5" y="691.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.03%)</title><rect x="1177.8" y="675.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.04%)</title><rect x="1178.3" y="707.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.04%)</title><rect x="1178.3" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1178.4" y="675.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="686.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.03%)</title><rect x="1178.4" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1178.4" y="643.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1178.4" y="627.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1178.4" y="611.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1178.4" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.03%)</title><rect x="1178.4" y="579.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1178.4" y="563.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="574.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.03%)</title><rect x="1178.9" y="707.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.03%)</title><rect x="1179.2" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.13%)</title><rect x="1179.5" y="723.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.10%)</title><rect x="1179.8" y="707.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.03%)</title><rect x="1180.4" y="691.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.04%)</title><rect x="1181.1" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.03%)</title><rect x="1181.2" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.03%)</title><rect x="1181.2" y="691.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (26 samples, 0.34%)</title><rect x="1181.8" y="739.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (26 samples, 0.34%)</title><rect x="1181.8" y="723.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (25 samples, 0.33%)</title><rect x="1182.0" y="707.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (25 samples, 0.33%)</title><rect x="1182.0" y="691.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (25 samples, 0.33%)</title><rect x="1182.0" y="675.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (24 samples, 0.31%)</title><rect x="1182.0" y="659.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.18%)</title><rect x="1182.0" y="643.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.18%)</title><rect x="1182.0" y="627.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.18%)</title><rect x="1182.0" y="611.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.18%)</title><rect x="1182.0" y="595.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.18%)</title><rect x="1182.0" y="579.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.16%)</title><rect x="1182.0" y="563.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.09%)</title><rect x="1182.1" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.09%)</title><rect x="1182.1" y="531.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.09%)</title><rect x="1182.1" y="515.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.09%)</title><rect x="1182.1" y="499.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.09%)</title><rect x="1182.1" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.08%)</title><rect x="1182.1" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.07%)</title><rect x="1182.1" y="451.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.07%)</title><rect x="1182.1" y="435.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.07%)</title><rect x="1182.1" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.07%)</title><rect x="1182.1" y="403.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.07%)</title><rect x="1182.1" y="387.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1182.1" y="371.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1182.1" y="355.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1182.1" y="339.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1182.1" y="323.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1182.1" y="307.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1182.1" y="291.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1182.1" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1182.1" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1182.1" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1182.1" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1182.1" y="211.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1182.1" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1182.1" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1183.2" y="547.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1183.4" y="531.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1183.4" y="515.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1183.4" y="499.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1183.4" y="483.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1183.4" y="467.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1183.4" y="451.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1183.4" y="435.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1183.4" y="419.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1183.4" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1183.4" y="387.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1183.4" y="371.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1183.4" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1183.4" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1183.4" y="323.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1183.4" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1183.4" y="291.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1183.4" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.03%)</title><rect x="1183.4" y="259.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (10 samples, 0.13%)</title><rect x="1184.1" y="643.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.07%)</title><rect x="1184.1" y="627.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.07%)</title><rect x="1184.1" y="611.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.07%)</title><rect x="1184.1" y="595.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.07%)</title><rect x="1184.1" y="579.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.07%)</title><rect x="1184.1" y="563.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.07%)</title><rect x="1184.1" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1184.1" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1184.1" y="515.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1184.1" y="499.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1184.1" y="483.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1184.1" y="467.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1184.1" y="451.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.1" y="435.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.6" y="531.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.6" y="515.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1184.6" y="499.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1184.6" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1184.6" y="467.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1184.6" y="451.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1184.6" y="435.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.6" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.6" y="419.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.6" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1184.6" y="387.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1184.6" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1184.6" y="355.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1184.6" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1184.6" y="323.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.6" y="307.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1184.6" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1184.6" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1184.6" y="259.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1184.6" y="243.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1184.6" y="227.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1184.9" y="627.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1184.9" y="611.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1184.9" y="595.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1184.9" y="579.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1184.9" y="563.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1184.9" y="547.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1184.9" y="531.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1184.9" y="515.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1184.9" y="499.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1184.9" y="483.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1184.9" y="467.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1184.9" y="451.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1184.9" y="435.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.9" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1184.9" y="403.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1184.9" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1184.9" y="371.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1184.9" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1184.9" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.9" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1184.9" y="307.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1184.9" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1184.9" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1184.9" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1184.9" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.9" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1184.9" y="211.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1184.9" y="195.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1184.9" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1184.9" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1184.9" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1184.9" y="131.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.9" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1184.9" y="115.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1184.9" y="99.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1184.9" y="83.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1184.9" y="67.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.9" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1185.2" y="419.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="430.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.04%)</title><rect x="1185.8" y="739.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.05%)</title><rect x="1186.5" y="771.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.5" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 0.05%)</title><rect x="1186.5" y="755.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.05%)</title><rect x="1186.5" y="739.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.5" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.05%)</title><rect x="1186.5" y="723.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.5" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.03%)</title><rect x="1186.5" y="707.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.5" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.03%)</title><rect x="1186.5" y="691.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.5" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.03%)</title><rect x="1186.5" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.03%)</title><rect x="1186.5" y="659.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.5" y="670.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.04%)</title><rect x="1187.2" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.2" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.04%)</title><rect x="1187.2" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (3 samples, 0.04%)</title><rect x="1187.2" y="771.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.2" y="782.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.03%)</title><rect x="1187.4" y="755.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1190.4" y="766.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.03%)</title><rect x="1187.4" y="739.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.4" y="750.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.03%)</title><rect x="1187.4" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="734.0"></text>
</g>
<g>
<title>VMThread::run() (8 samples, 0.10%)</title><rect x="1187.7" y="835.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (8 samples, 0.10%)</title><rect x="1187.7" y="819.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (5 samples, 0.07%)</title><rect x="1188.0" y="803.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (5 samples, 0.07%)</title><rect x="1188.0" y="787.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.0" y="798.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (5 samples, 0.07%)</title><rect x="1188.0" y="771.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (5 samples, 0.07%)</title><rect x="1188.0" y="755.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (4 samples, 0.05%)</title><rect x="1188.2" y="739.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.2" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::redirty_logged_cards() (2 samples, 0.03%)</title><rect x="1188.2" y="723.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.2" y="734.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.03%)</title><rect x="1188.2" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.2" y="718.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.03%)</title><rect x="1188.2" y="691.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.2" y="702.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="1188.2" y="675.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1191.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.2" y="659.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1191.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.2" y="643.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1191.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.2" y="627.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1191.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.2" y="611.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1191.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.2" y="595.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1191.2" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.2" y="579.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1191.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.2" y="563.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1191.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.2" y="547.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1191.2" y="558.0"></text>
</g>
<g>
<title>G1RemSet::cleanup_after_oops_into_collection_set_do() (2 samples, 0.03%)</title><rect x="1188.5" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.5" y="734.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (2 samples, 0.03%)</title><rect x="1188.5" y="707.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.5" y="718.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.03%)</title><rect x="1188.5" y="691.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.5" y="702.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="1188.5" y="675.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1191.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.5" y="659.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1191.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.5" y="643.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1191.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.5" y="627.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1191.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.5" y="611.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1191.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1188.5" y="595.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1191.5" y="606.0"></text>
</g>
<g>
<title>WatcherThread::run() (7 samples, 0.09%)</title><rect x="1188.9" y="835.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.03%)</title><rect x="1188.9" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.05%)</title><rect x="1189.4" y="819.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.4" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.03%)</title><rect x="1189.7" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.7" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.03%)</title><rect x="1189.7" y="787.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.7" y="798.0"></text>
</g>
</g>
</svg>
