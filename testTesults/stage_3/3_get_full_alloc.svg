<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="613"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="613"> </text>
<g id="frames">
<g>
<title>all (234,627 samples, 100.00%)</title><rect x="10.0" y="579.0" width="1180.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="590.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (137,884 samples, 58.77%)</title><rect x="10.0" y="563.0" width="693.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="574.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (137,884 samples, 58.77%)</title><rect x="10.0" y="547.0" width="693.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="558.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (137,884 samples, 58.77%)</title><rect x="10.0" y="531.0" width="693.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (367 samples, 0.16%)</title><rect x="10.0" y="515.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (367 samples, 0.16%)</title><rect x="10.0" y="499.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (360 samples, 0.15%)</title><rect x="10.0" y="483.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (360 samples, 0.15%)</title><rect x="10.0" y="467.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (360 samples, 0.15%)</title><rect x="10.0" y="451.0" width="1.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run (137,517 samples, 58.61%)</title><rect x="11.8" y="515.0" width="691.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.8" y="526.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (137,517 samples, 58.61%)</title><rect x="11.8" y="499.0" width="691.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.8" y="510.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (444 samples, 0.19%)</title><rect x="11.8" y="483.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (444 samples, 0.19%)</title><rect x="11.8" y="467.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.8" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (317 samples, 0.14%)</title><rect x="11.8" y="451.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.8" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (317 samples, 0.14%)</title><rect x="11.8" y="435.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.8" y="446.0"></text>
</g>
<g>
<title>byte[] (317 samples, 0.14%)</title><rect x="11.8" y="419.0" width="1.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="14.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (127 samples, 0.05%)</title><rect x="13.4" y="451.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.4" y="462.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (127 samples, 0.05%)</title><rect x="13.4" y="435.0" width="0.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="16.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/1098854345.action (137,073 samples, 58.42%)</title><rect x="14.1" y="483.0" width="689.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.1" y="494.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/1098854345.action</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0 (137,073 samples, 58.42%)</title><rect x="14.1" y="467.0" width="689.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.1" y="478.0">ru/mail/polis/service/igorlo/AsyncService.lambda$entity$0</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.get (137,073 samples, 58.42%)</title><rect x="14.1" y="451.0" width="689.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.1" y="462.0">ru/mail/polis/service/igorlo/AsyncService.get</text>
</g>
<g>
<title>byte[] (89 samples, 0.04%)</title><rect x="14.1" y="435.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="17.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (156 samples, 0.07%)</title><rect x="14.5" y="435.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.5" y="446.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (156 samples, 0.07%)</title><rect x="14.5" y="419.0" width="0.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="17.5" y="430.0"></text>
</g>
<g>
<title>one.nio.http.Response (98 samples, 0.04%)</title><rect x="15.4" y="435.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="18.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (288 samples, 0.12%)</title><rect x="15.9" y="435.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.9" y="446.0"></text>
</g>
<g>
<title>byte[] (135 samples, 0.06%)</title><rect x="15.9" y="419.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="18.9" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (82 samples, 0.03%)</title><rect x="16.6" y="419.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="19.6" y="430.0"></text>
</g>
<g>
<title>java.lang.String (71 samples, 0.03%)</title><rect x="17.0" y="419.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="20.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (136,416 samples, 58.14%)</title><rect x="17.4" y="435.0" width="686.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.4" y="446.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (11,296 samples, 4.81%)</title><rect x="17.4" y="419.0" width="56.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.4" y="430.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (11,296 samples, 4.81%)</title><rect x="17.4" y="403.0" width="56.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.4" y="414.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (11,296 samples, 4.81%)</title><rect x="17.4" y="387.0" width="56.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.4" y="398.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (11,296 samples, 4.81%)</title><rect x="17.4" y="371.0" width="56.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.4" y="382.0">com/go..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (11,296 samples, 4.81%)</title><rect x="17.4" y="355.0" width="56.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.4" y="366.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (10,102 samples, 4.31%)</title><rect x="17.4" y="339.0" width="50.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.4" y="350.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (58 samples, 0.02%)</title><rect x="17.4" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.4" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (58 samples, 0.02%)</title><rect x="17.4" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.4" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (58 samples, 0.02%)</title><rect x="17.4" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (58 samples, 0.02%)</title><rect x="17.4" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (58 samples, 0.02%)</title><rect x="17.4" y="259.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (58 samples, 0.02%)</title><rect x="17.4" y="243.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (58 samples, 0.02%)</title><rect x="17.4" y="227.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.4" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (58 samples, 0.02%)</title><rect x="17.4" y="211.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.4" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (58 samples, 0.02%)</title><rect x="17.4" y="195.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="20.4" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (4,275 samples, 1.82%)</title><rect x="17.7" y="323.0" width="21.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.7" y="334.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (4,275 samples, 1.82%)</title><rect x="17.7" y="307.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.7" y="318.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (4,275 samples, 1.82%)</title><rect x="17.7" y="291.0" width="21.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.7" y="302.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4,275 samples, 1.82%)</title><rect x="17.7" y="275.0" width="21.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.7" y="286.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4,275 samples, 1.82%)</title><rect x="17.7" y="259.0" width="21.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.7" y="270.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (4,275 samples, 1.82%)</title><rect x="17.7" y="243.0" width="21.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.7" y="254.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (4,275 samples, 1.82%)</title><rect x="17.7" y="227.0" width="21.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.7" y="238.0">r..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (4,275 samples, 1.82%)</title><rect x="17.7" y="211.0" width="21.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.7" y="222.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4,275 samples, 1.82%)</title><rect x="17.7" y="195.0" width="21.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="206.0">j..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (4,275 samples, 1.82%)</title><rect x="17.7" y="179.0" width="21.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.7" y="190.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4,275 samples, 1.82%)</title><rect x="17.7" y="163.0" width="21.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="174.0">j..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (4,275 samples, 1.82%)</title><rect x="17.7" y="147.0" width="21.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.7" y="158.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4,275 samples, 1.82%)</title><rect x="17.7" y="131.0" width="21.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.7" y="142.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (4,275 samples, 1.82%)</title><rect x="17.7" y="115.0" width="21.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.7" y="126.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (4,275 samples, 1.82%)</title><rect x="17.7" y="99.0" width="21.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.7" y="110.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4,065 samples, 1.73%)</title><rect x="17.7" y="83.0" width="20.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.7" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4,065 samples, 1.73%)</title><rect x="17.7" y="67.0" width="20.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.7" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (4,065 samples, 1.73%)</title><rect x="17.7" y="51.0" width="20.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="20.7" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (210 samples, 0.09%)</title><rect x="38.1" y="83.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (210 samples, 0.09%)</title><rect x="38.1" y="67.0" width="1.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="41.1" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5,769 samples, 2.46%)</title><rect x="39.2" y="323.0" width="29.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.2" y="334.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (5,769 samples, 2.46%)</title><rect x="39.2" y="307.0" width="29.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.2" y="318.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (5,769 samples, 2.46%)</title><rect x="39.2" y="291.0" width="29.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.2" y="302.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (5,769 samples, 2.46%)</title><rect x="39.2" y="275.0" width="29.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.2" y="286.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,769 samples, 2.46%)</title><rect x="39.2" y="259.0" width="29.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.2" y="270.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,769 samples, 2.46%)</title><rect x="39.2" y="243.0" width="29.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.2" y="254.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4,104 samples, 1.75%)</title><rect x="39.2" y="227.0" width="20.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (4,104 samples, 1.75%)</title><rect x="39.2" y="211.0" width="20.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (4,104 samples, 1.75%)</title><rect x="39.2" y="195.0" width="20.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (4,104 samples, 1.75%)</title><rect x="39.2" y="179.0" width="20.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (1,105 samples, 0.47%)</title><rect x="39.2" y="163.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.2" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (552 samples, 0.24%)</title><rect x="39.2" y="147.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.2" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (552 samples, 0.24%)</title><rect x="39.2" y="131.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.2" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (552 samples, 0.24%)</title><rect x="39.2" y="115.0" width="2.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="42.2" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (553 samples, 0.24%)</title><rect x="42.0" y="147.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.0" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (553 samples, 0.24%)</title><rect x="42.0" y="131.0" width="2.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="45.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (1,151 samples, 0.49%)</title><rect x="44.7" y="163.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.7" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (550 samples, 0.23%)</title><rect x="44.7" y="147.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.7" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (550 samples, 0.23%)</title><rect x="44.7" y="131.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.7" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (550 samples, 0.23%)</title><rect x="44.7" y="115.0" width="2.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="47.7" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (601 samples, 0.26%)</title><rect x="47.5" y="147.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.5" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (601 samples, 0.26%)</title><rect x="47.5" y="131.0" width="3.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="50.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (584 samples, 0.25%)</title><rect x="50.5" y="163.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.5" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (584 samples, 0.25%)</title><rect x="50.5" y="147.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="53.5" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (584 samples, 0.25%)</title><rect x="50.5" y="131.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.5" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (584 samples, 0.25%)</title><rect x="50.5" y="115.0" width="3.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="53.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (746 samples, 0.32%)</title><rect x="53.5" y="163.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.5" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (384 samples, 0.16%)</title><rect x="53.5" y="147.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.5" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (384 samples, 0.16%)</title><rect x="53.5" y="131.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.5" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (384 samples, 0.16%)</title><rect x="53.5" y="115.0" width="1.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="56.5" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (362 samples, 0.15%)</title><rect x="55.4" y="147.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.4" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (362 samples, 0.15%)</title><rect x="55.4" y="131.0" width="1.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="58.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (260 samples, 0.11%)</title><rect x="57.2" y="163.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.2" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (260 samples, 0.11%)</title><rect x="57.2" y="147.0" width="1.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="60.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (168 samples, 0.07%)</title><rect x="58.5" y="163.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.5" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (168 samples, 0.07%)</title><rect x="58.5" y="147.0" width="0.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="61.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (90 samples, 0.04%)</title><rect x="59.4" y="163.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.4" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (90 samples, 0.04%)</title><rect x="59.4" y="147.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="62.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (1,665 samples, 0.71%)</title><rect x="59.8" y="227.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,665 samples, 0.71%)</title><rect x="59.8" y="211.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.8" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (1,665 samples, 0.71%)</title><rect x="59.8" y="195.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.8" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,665 samples, 0.71%)</title><rect x="59.8" y="179.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.8" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (1,665 samples, 0.71%)</title><rect x="59.8" y="163.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.8" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,665 samples, 0.71%)</title><rect x="59.8" y="147.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.8" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (1,665 samples, 0.71%)</title><rect x="59.8" y="131.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.8" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,665 samples, 0.71%)</title><rect x="59.8" y="115.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (1,665 samples, 0.71%)</title><rect x="59.8" y="99.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (1,665 samples, 0.71%)</title><rect x="59.8" y="83.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.8" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,617 samples, 0.69%)</title><rect x="59.8" y="67.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.8" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,617 samples, 0.69%)</title><rect x="59.8" y="51.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.8" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,617 samples, 0.69%)</title><rect x="59.8" y="35.0" width="8.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="62.8" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (1,194 samples, 0.51%)</title><rect x="68.2" y="339.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (1,194 samples, 0.51%)</title><rect x="68.2" y="323.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,079 samples, 0.46%)</title><rect x="68.2" y="307.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,079 samples, 0.46%)</title><rect x="68.2" y="291.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.2" y="302.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,079 samples, 0.46%)</title><rect x="68.2" y="275.0" width="5.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="71.2" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (115 samples, 0.05%)</title><rect x="73.6" y="307.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.6" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (115 samples, 0.05%)</title><rect x="73.6" y="291.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="76.6" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (443 samples, 0.19%)</title><rect x="74.2" y="419.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="77.2" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (443 samples, 0.19%)</title><rect x="74.2" y="403.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$74/530395260.apply (443 samples, 0.19%)</title><rect x="74.2" y="387.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (443 samples, 0.19%)</title><rect x="74.2" y="371.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (71 samples, 0.03%)</title><rect x="74.2" y="355.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="77.2" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (71 samples, 0.03%)</title><rect x="74.2" y="339.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="77.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (193 samples, 0.08%)</title><rect x="74.6" y="355.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (161 samples, 0.07%)</title><rect x="74.6" y="339.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (161 samples, 0.07%)</title><rect x="74.6" y="323.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.6" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (161 samples, 0.07%)</title><rect x="74.6" y="307.0" width="0.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="77.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (179 samples, 0.08%)</title><rect x="75.5" y="355.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (163 samples, 0.07%)</title><rect x="75.5" y="339.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.5" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (163 samples, 0.07%)</title><rect x="75.5" y="323.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.5" y="334.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (163 samples, 0.07%)</title><rect x="75.5" y="307.0" width="0.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="78.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (180 samples, 0.08%)</title><rect x="76.4" y="419.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.4" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (157 samples, 0.07%)</title><rect x="76.4" y="403.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.4" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (157 samples, 0.07%)</title><rect x="76.4" y="387.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.4" y="398.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (157 samples, 0.07%)</title><rect x="76.4" y="371.0" width="0.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="79.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (231 samples, 0.10%)</title><rect x="77.3" y="419.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.3" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (199 samples, 0.08%)</title><rect x="77.3" y="403.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.3" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (199 samples, 0.08%)</title><rect x="77.3" y="387.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.3" y="398.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (199 samples, 0.08%)</title><rect x="77.3" y="371.0" width="1.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="80.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (124,266 samples, 52.96%)</title><rect x="78.5" y="419.0" width="625.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.5" y="430.0">ru/mail/polis/dao/igorlo/PersistentDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (83 samples, 0.04%)</title><rect x="78.5" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.5" y="414.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (83 samples, 0.04%)</title><rect x="78.5" y="387.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="81.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (124,183 samples, 52.93%)</title><rect x="78.9" y="403.0" width="624.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="81.9" y="414.0">ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (105,352 samples, 44.90%)</title><rect x="78.9" y="387.0" width="529.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.9" y="398.0">ru/mail/polis/dao/igorlo/Table.combineTables</text>
</g>
<g>
<title>java.util.ArrayList (110 samples, 0.05%)</title><rect x="78.9" y="371.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="81.9" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (170 samples, 0.07%)</title><rect x="79.5" y="371.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.5" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (170 samples, 0.07%)</title><rect x="79.5" y="355.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.5" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (170 samples, 0.07%)</title><rect x="79.5" y="339.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.5" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (170 samples, 0.07%)</title><rect x="79.5" y="323.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.5" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (170 samples, 0.07%)</title><rect x="79.5" y="307.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.5" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (169 samples, 0.07%)</title><rect x="79.5" y="291.0" width="0.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="82.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (96 samples, 0.04%)</title><rect x="80.3" y="371.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.3" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (96 samples, 0.04%)</title><rect x="80.3" y="355.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="83.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.iterator (2,444 samples, 1.04%)</title><rect x="80.8" y="371.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (407 samples, 0.17%)</title><rect x="80.8" y="355.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (407 samples, 0.17%)</title><rect x="80.8" y="339.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="83.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (407 samples, 0.17%)</title><rect x="80.8" y="323.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="83.8" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (303 samples, 0.13%)</title><rect x="80.8" y="307.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.8" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (303 samples, 0.13%)</title><rect x="80.8" y="291.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (302 samples, 0.13%)</title><rect x="80.8" y="275.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (302 samples, 0.13%)</title><rect x="80.8" y="259.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.8" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (302 samples, 0.13%)</title><rect x="80.8" y="243.0" width="1.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="83.8" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (104 samples, 0.04%)</title><rect x="82.3" y="307.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.3" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (104 samples, 0.04%)</title><rect x="82.3" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="85.3" y="302.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (104 samples, 0.04%)</title><rect x="82.3" y="275.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="85.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (1,495 samples, 0.64%)</title><rect x="82.8" y="355.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.8" y="366.0"></text>
</g>
<g>
<title>java.util.ArrayList (93 samples, 0.04%)</title><rect x="82.8" y="339.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="85.8" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (224 samples, 0.10%)</title><rect x="83.3" y="339.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.3" y="350.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (80 samples, 0.03%)</title><rect x="83.3" y="323.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="86.3" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (144 samples, 0.06%)</title><rect x="83.7" y="323.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.7" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (144 samples, 0.06%)</title><rect x="83.7" y="307.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.7" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (144 samples, 0.06%)</title><rect x="83.7" y="291.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="86.7" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (179 samples, 0.08%)</title><rect x="84.4" y="339.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.4" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (179 samples, 0.08%)</title><rect x="84.4" y="323.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.4" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (179 samples, 0.08%)</title><rect x="84.4" y="307.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.4" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (179 samples, 0.08%)</title><rect x="84.4" y="291.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.4" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (179 samples, 0.08%)</title><rect x="84.4" y="275.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.4" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (179 samples, 0.08%)</title><rect x="84.4" y="259.0" width="0.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="87.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (999 samples, 0.43%)</title><rect x="85.3" y="339.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (59 samples, 0.03%)</title><rect x="85.3" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.3" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Values (59 samples, 0.03%)</title><rect x="85.3" y="307.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="88.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (99 samples, 0.04%)</title><rect x="85.6" y="323.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.6" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (99 samples, 0.04%)</title><rect x="85.6" y="307.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="88.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (841 samples, 0.36%)</title><rect x="86.1" y="323.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (841 samples, 0.36%)</title><rect x="86.1" y="307.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="89.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (841 samples, 0.36%)</title><rect x="86.1" y="291.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.1" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (841 samples, 0.36%)</title><rect x="86.1" y="275.0" width="4.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="89.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (542 samples, 0.23%)</title><rect x="90.4" y="355.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.4" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (108 samples, 0.05%)</title><rect x="90.4" y="339.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.4" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (108 samples, 0.05%)</title><rect x="90.4" y="323.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="93.4" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (344 samples, 0.15%)</title><rect x="90.9" y="339.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.9" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (54 samples, 0.02%)</title><rect x="90.9" y="323.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="93.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (290 samples, 0.12%)</title><rect x="91.2" y="323.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.2" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (83 samples, 0.04%)</title><rect x="91.2" y="307.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="94.2" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (61 samples, 0.03%)</title><rect x="91.6" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.6" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (61 samples, 0.03%)</title><rect x="91.6" y="291.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="94.6" y="302.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (80 samples, 0.03%)</title><rect x="91.9" y="307.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="94.9" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (66 samples, 0.03%)</title><rect x="92.3" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="95.3" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (66 samples, 0.03%)</title><rect x="92.3" y="291.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="95.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (90 samples, 0.04%)</title><rect x="92.6" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.6" y="350.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (90 samples, 0.04%)</title><rect x="92.6" y="323.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="95.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.iterator (102,532 samples, 43.70%)</title><rect x="93.1" y="371.0" width="515.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.1" y="382.0">ru/mail/polis/dao/igorlo/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.SSTable$SSTableIterator (761 samples, 0.32%)</title><rect x="93.1" y="355.0" width="3.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="96.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt; (101,771 samples, 43.38%)</title><rect x="96.9" y="355.0" width="511.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.9" y="366.0">ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.position (101,771 samples, 43.38%)</title><rect x="96.9" y="339.0" width="511.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.9" y="350.0">ru/mail/polis/dao/igorlo/SSTable.position</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (50,908 samples, 21.70%)</title><rect x="96.9" y="323.0" width="256.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.9" y="334.0">ru/mail/polis/dao/igorlo/SSTable.k..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (25,708 samples, 10.96%)</title><rect x="96.9" y="307.0" width="129.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.9" y="318.0">java/nio/DirectB..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (25,708 samples, 10.96%)</title><rect x="96.9" y="291.0" width="129.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.9" y="302.0">java/nio/DirectB..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (25,708 samples, 10.96%)</title><rect x="96.9" y="275.0" width="129.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="99.9" y="286.0">java.nio.DirectB..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (25,200 samples, 10.74%)</title><rect x="226.2" y="307.0" width="126.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.2" y="318.0">java/nio/DirectB..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (25,200 samples, 10.74%)</title><rect x="226.2" y="291.0" width="126.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="229.2" y="302.0">java.nio.DirectB..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (50,863 samples, 21.68%)</title><rect x="352.9" y="323.0" width="255.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.9" y="334.0">ru/mail/polis/dao/igorlo/SSTable.r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (25,355 samples, 10.81%)</title><rect x="352.9" y="307.0" width="127.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.9" y="318.0">java/nio/DirectB..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (25,355 samples, 10.81%)</title><rect x="352.9" y="291.0" width="127.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.9" y="302.0">java/nio/DirectB..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (25,355 samples, 10.81%)</title><rect x="352.9" y="275.0" width="127.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="355.9" y="286.0">java.nio.DirectB..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (25,508 samples, 10.87%)</title><rect x="480.5" y="307.0" width="128.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.5" y="318.0">java/nio/DirectB..</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (25,508 samples, 10.87%)</title><rect x="480.5" y="291.0" width="128.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="483.5" y="302.0">java.nio.DirectB..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (18,831 samples, 8.03%)</title><rect x="608.7" y="387.0" width="94.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="611.7" y="398.0">ru/mail/pol..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (102 samples, 0.04%)</title><rect x="608.7" y="371.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="611.7" y="382.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (102 samples, 0.04%)</title><rect x="608.7" y="355.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="611.7" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (14,966 samples, 6.38%)</title><rect x="609.3" y="371.0" width="75.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="612.3" y="382.0">com/goog..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (57 samples, 0.02%)</title><rect x="609.3" y="355.0" width="0.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="612.3" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (14,909 samples, 6.35%)</title><rect x="609.5" y="355.0" width="75.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="612.5" y="366.0">com/goog..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (61 samples, 0.03%)</title><rect x="609.5" y="339.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="612.5" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (165 samples, 0.07%)</title><rect x="609.9" y="339.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.9" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (165 samples, 0.07%)</title><rect x="609.9" y="323.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="612.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (165 samples, 0.07%)</title><rect x="609.9" y="307.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="612.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (165 samples, 0.07%)</title><rect x="609.9" y="291.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="612.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (165 samples, 0.07%)</title><rect x="609.9" y="275.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="612.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (165 samples, 0.07%)</title><rect x="609.9" y="259.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="612.9" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (165 samples, 0.07%)</title><rect x="609.9" y="243.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="612.9" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (165 samples, 0.07%)</title><rect x="609.9" y="227.0" width="0.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="612.9" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (603 samples, 0.26%)</title><rect x="610.7" y="339.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.7" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (603 samples, 0.26%)</title><rect x="610.7" y="323.0" width="3.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="613.7" y="334.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (113 samples, 0.05%)</title><rect x="613.7" y="339.0" width="0.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="616.7" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (69 samples, 0.03%)</title><rect x="614.3" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.3" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (69 samples, 0.03%)</title><rect x="614.3" y="323.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="617.3" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (13,898 samples, 5.92%)</title><rect x="614.6" y="339.0" width="69.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.6" y="350.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (13,898 samples, 5.92%)</title><rect x="614.6" y="323.0" width="69.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.6" y="334.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (277 samples, 0.12%)</title><rect x="614.6" y="307.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.6" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (277 samples, 0.12%)</title><rect x="614.6" y="291.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="617.6" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (277 samples, 0.12%)</title><rect x="614.6" y="275.0" width="1.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="617.6" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (13,621 samples, 5.81%)</title><rect x="616.0" y="307.0" width="68.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="619.0" y="318.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (13,621 samples, 5.81%)</title><rect x="616.0" y="291.0" width="68.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.0" y="302.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13,621 samples, 5.81%)</title><rect x="616.0" y="275.0" width="68.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="619.0" y="286.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13,621 samples, 5.81%)</title><rect x="616.0" y="259.0" width="68.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="619.0" y="270.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (9,957 samples, 4.24%)</title><rect x="616.0" y="243.0" width="50.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="619.0" y="254.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (9,957 samples, 4.24%)</title><rect x="616.0" y="227.0" width="50.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="619.0" y="238.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (9,957 samples, 4.24%)</title><rect x="616.0" y="211.0" width="50.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="619.0" y="222.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (9,957 samples, 4.24%)</title><rect x="616.0" y="195.0" width="50.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="619.0" y="206.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (2,615 samples, 1.11%)</title><rect x="616.0" y="179.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="619.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,308 samples, 0.56%)</title><rect x="616.0" y="163.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="619.0" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,308 samples, 0.56%)</title><rect x="616.0" y="147.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="619.0" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,308 samples, 0.56%)</title><rect x="616.0" y="131.0" width="6.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="619.0" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1,307 samples, 0.56%)</title><rect x="622.6" y="163.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="625.6" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,307 samples, 0.56%)</title><rect x="622.6" y="147.0" width="6.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="625.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (2,725 samples, 1.16%)</title><rect x="629.2" y="179.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="632.2" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,343 samples, 0.57%)</title><rect x="629.2" y="163.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="632.2" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,343 samples, 0.57%)</title><rect x="629.2" y="147.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.2" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,343 samples, 0.57%)</title><rect x="629.2" y="131.0" width="6.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="632.2" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1,382 samples, 0.59%)</title><rect x="635.9" y="163.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.9" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,382 samples, 0.59%)</title><rect x="635.9" y="147.0" width="7.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="638.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (1,386 samples, 0.59%)</title><rect x="642.9" y="179.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.9" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,386 samples, 0.59%)</title><rect x="642.9" y="163.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.9" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,386 samples, 0.59%)</title><rect x="642.9" y="147.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.9" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,386 samples, 0.59%)</title><rect x="642.9" y="131.0" width="7.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="645.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (2,054 samples, 0.88%)</title><rect x="649.9" y="179.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="652.9" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,004 samples, 0.43%)</title><rect x="649.9" y="163.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="652.9" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,004 samples, 0.43%)</title><rect x="649.9" y="147.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="652.9" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,004 samples, 0.43%)</title><rect x="649.9" y="131.0" width="5.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="652.9" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1,050 samples, 0.45%)</title><rect x="654.9" y="163.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="657.9" y="174.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,050 samples, 0.45%)</title><rect x="654.9" y="147.0" width="5.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="657.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (674 samples, 0.29%)</title><rect x="660.2" y="179.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.2" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (674 samples, 0.29%)</title><rect x="660.2" y="163.0" width="3.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="663.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (394 samples, 0.17%)</title><rect x="663.6" y="179.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.6" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (394 samples, 0.17%)</title><rect x="663.6" y="163.0" width="2.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="666.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.tombstone (109 samples, 0.05%)</title><rect x="665.6" y="179.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="668.6" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (109 samples, 0.05%)</title><rect x="665.6" y="163.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="668.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (3,664 samples, 1.56%)</title><rect x="666.1" y="243.0" width="18.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="669.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (3,664 samples, 1.56%)</title><rect x="666.1" y="227.0" width="18.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="669.1" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (3,664 samples, 1.56%)</title><rect x="666.1" y="211.0" width="18.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="669.1" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3,664 samples, 1.56%)</title><rect x="666.1" y="195.0" width="18.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="669.1" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (3,664 samples, 1.56%)</title><rect x="666.1" y="179.0" width="18.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="669.1" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3,664 samples, 1.56%)</title><rect x="666.1" y="163.0" width="18.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="669.1" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (3,664 samples, 1.56%)</title><rect x="666.1" y="147.0" width="18.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="669.1" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3,664 samples, 1.56%)</title><rect x="666.1" y="131.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="669.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (3,664 samples, 1.56%)</title><rect x="666.1" y="115.0" width="18.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (3,664 samples, 1.56%)</title><rect x="666.1" y="99.0" width="18.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="669.1" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3,317 samples, 1.41%)</title><rect x="666.1" y="83.0" width="16.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="669.1" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3,317 samples, 1.41%)</title><rect x="666.1" y="67.0" width="16.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.1" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (3,317 samples, 1.41%)</title><rect x="666.1" y="51.0" width="16.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="669.1" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (347 samples, 0.15%)</title><rect x="682.8" y="83.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (347 samples, 0.15%)</title><rect x="682.8" y="67.0" width="1.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="685.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (3,763 samples, 1.60%)</title><rect x="684.5" y="371.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="687.5" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (79 samples, 0.03%)</title><rect x="684.5" y="355.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="687.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (3,684 samples, 1.57%)</title><rect x="684.9" y="355.0" width="18.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="687.9" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,684 samples, 1.57%)</title><rect x="684.9" y="339.0" width="18.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="687.9" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (63 samples, 0.03%)</title><rect x="684.9" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="687.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (63 samples, 0.03%)</title><rect x="684.9" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (63 samples, 0.03%)</title><rect x="684.9" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="687.9" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (63 samples, 0.03%)</title><rect x="684.9" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="687.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (63 samples, 0.03%)</title><rect x="684.9" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (63 samples, 0.03%)</title><rect x="684.9" y="243.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="687.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (63 samples, 0.03%)</title><rect x="684.9" y="227.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="687.9" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (63 samples, 0.03%)</title><rect x="684.9" y="211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="687.9" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (63 samples, 0.03%)</title><rect x="684.9" y="195.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="687.9" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,474 samples, 0.63%)</title><rect x="685.2" y="323.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="688.2" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,474 samples, 0.63%)</title><rect x="685.2" y="307.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.2" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,474 samples, 0.63%)</title><rect x="685.2" y="291.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="688.2" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,474 samples, 0.63%)</title><rect x="685.2" y="275.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.2" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,474 samples, 0.63%)</title><rect x="685.2" y="259.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="688.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (1,474 samples, 0.63%)</title><rect x="685.2" y="243.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="688.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (1,474 samples, 0.63%)</title><rect x="685.2" y="227.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="688.2" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (1,474 samples, 0.63%)</title><rect x="685.2" y="211.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.2" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,474 samples, 0.63%)</title><rect x="685.2" y="195.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="688.2" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (1,474 samples, 0.63%)</title><rect x="685.2" y="179.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="688.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,474 samples, 0.63%)</title><rect x="685.2" y="163.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="688.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (1,474 samples, 0.63%)</title><rect x="685.2" y="147.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="688.2" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,474 samples, 0.63%)</title><rect x="685.2" y="131.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="688.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (1,474 samples, 0.63%)</title><rect x="685.2" y="115.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (1,474 samples, 0.63%)</title><rect x="685.2" y="99.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.2" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1,348 samples, 0.57%)</title><rect x="685.2" y="83.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.2" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1,348 samples, 0.57%)</title><rect x="685.2" y="67.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.2" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (1,348 samples, 0.57%)</title><rect x="685.2" y="51.0" width="6.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="688.2" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (126 samples, 0.05%)</title><rect x="692.0" y="83.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="695.0" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (126 samples, 0.05%)</title><rect x="692.0" y="67.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="695.0" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,147 samples, 0.92%)</title><rect x="692.7" y="323.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.7" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,147 samples, 0.92%)</title><rect x="692.7" y="307.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.7" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,147 samples, 0.92%)</title><rect x="692.7" y="291.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="695.7" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,147 samples, 0.92%)</title><rect x="692.7" y="275.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="695.7" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,147 samples, 0.92%)</title><rect x="692.7" y="259.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="695.7" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,147 samples, 0.92%)</title><rect x="692.7" y="243.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.7" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,347 samples, 0.57%)</title><rect x="692.7" y="227.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (1,347 samples, 0.57%)</title><rect x="692.7" y="211.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="695.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (1,347 samples, 0.57%)</title><rect x="692.7" y="195.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (1,347 samples, 0.57%)</title><rect x="692.7" y="179.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (361 samples, 0.15%)</title><rect x="692.7" y="163.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="695.7" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (174 samples, 0.07%)</title><rect x="692.7" y="147.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.7" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (174 samples, 0.07%)</title><rect x="692.7" y="131.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.7" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (174 samples, 0.07%)</title><rect x="692.7" y="115.0" width="0.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="695.7" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (187 samples, 0.08%)</title><rect x="693.5" y="147.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="696.5" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (187 samples, 0.08%)</title><rect x="693.5" y="131.0" width="1.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="696.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (330 samples, 0.14%)</title><rect x="694.5" y="163.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="697.5" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (158 samples, 0.07%)</title><rect x="694.5" y="147.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="697.5" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (158 samples, 0.07%)</title><rect x="694.5" y="131.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="697.5" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (158 samples, 0.07%)</title><rect x="694.5" y="115.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="697.5" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (172 samples, 0.07%)</title><rect x="695.3" y="147.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="698.3" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (172 samples, 0.07%)</title><rect x="695.3" y="131.0" width="0.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="698.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (172 samples, 0.07%)</title><rect x="696.1" y="163.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.1" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (172 samples, 0.07%)</title><rect x="696.1" y="147.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="699.1" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (172 samples, 0.07%)</title><rect x="696.1" y="131.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="699.1" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (172 samples, 0.07%)</title><rect x="696.1" y="115.0" width="0.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="699.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (313 samples, 0.13%)</title><rect x="697.0" y="163.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.0" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (144 samples, 0.06%)</title><rect x="697.0" y="147.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="700.0" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (144 samples, 0.06%)</title><rect x="697.0" y="131.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="700.0" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (144 samples, 0.06%)</title><rect x="697.0" y="115.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="700.0" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (169 samples, 0.07%)</title><rect x="697.7" y="147.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="700.7" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (169 samples, 0.07%)</title><rect x="697.7" y="131.0" width="0.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="700.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.of (120 samples, 0.05%)</title><rect x="698.6" y="163.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.6" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.TableRow (120 samples, 0.05%)</title><rect x="698.6" y="147.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="701.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.of (50 samples, 0.02%)</title><rect x="699.2" y="163.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="702.2" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.igorlo.Value (50 samples, 0.02%)</title><rect x="699.2" y="147.0" width="0.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="702.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (800 samples, 0.34%)</title><rect x="699.4" y="227.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="702.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (800 samples, 0.34%)</title><rect x="699.4" y="211.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="702.4" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (800 samples, 0.34%)</title><rect x="699.4" y="195.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="702.4" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (800 samples, 0.34%)</title><rect x="699.4" y="179.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.4" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (800 samples, 0.34%)</title><rect x="699.4" y="163.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (800 samples, 0.34%)</title><rect x="699.4" y="147.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="702.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (800 samples, 0.34%)</title><rect x="699.4" y="131.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="702.4" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (800 samples, 0.34%)</title><rect x="699.4" y="115.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="702.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (800 samples, 0.34%)</title><rect x="699.4" y="99.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="702.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (800 samples, 0.34%)</title><rect x="699.4" y="83.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="702.4" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (740 samples, 0.32%)</title><rect x="699.4" y="67.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="702.4" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (740 samples, 0.32%)</title><rect x="699.4" y="51.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="702.4" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (740 samples, 0.32%)</title><rect x="699.4" y="35.0" width="3.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="702.4" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (60 samples, 0.03%)</title><rect x="703.2" y="67.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="706.2" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (60 samples, 0.03%)</title><rect x="703.2" y="51.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="706.2" y="62.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (96,738 samples, 41.23%)</title><rect x="703.5" y="563.0" width="486.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.5" y="574.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (2,514 samples, 1.07%)</title><rect x="703.5" y="547.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="706.5" y="558.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (2,514 samples, 1.07%)</title><rect x="703.5" y="531.0" width="12.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="706.5" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (94,224 samples, 40.16%)</title><rect x="716.1" y="547.0" width="473.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="719.1" y="558.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (94,224 samples, 40.16%)</title><rect x="716.1" y="531.0" width="473.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="719.1" y="542.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (94,224 samples, 40.16%)</title><rect x="716.1" y="515.0" width="473.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="719.1" y="526.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (38,414 samples, 16.37%)</title><rect x="716.1" y="499.0" width="193.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.1" y="510.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (38,414 samples, 16.37%)</title><rect x="716.1" y="483.0" width="193.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.1" y="494.0">one/nio/http/HttpServer.h..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (28,197 samples, 12.02%)</title><rect x="716.1" y="467.0" width="141.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.1" y="478.0">RequestHandler0_en..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7,123 samples, 3.04%)</title><rect x="716.1" y="451.0" width="35.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="719.1" y="462.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (7,123 samples, 3.04%)</title><rect x="716.1" y="435.0" width="35.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.1" y="446.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7,123 samples, 3.04%)</title><rect x="716.1" y="419.0" width="35.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="719.1" y="430.0">jav..</text>
</g>
<g>
<title>java.lang.String (2,413 samples, 1.03%)</title><rect x="716.1" y="403.0" width="12.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="719.1" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4,710 samples, 2.01%)</title><rect x="728.3" y="403.0" width="23.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="731.3" y="414.0">j..</text>
</g>
<g>
<title>byte[] (4,710 samples, 2.01%)</title><rect x="728.3" y="387.0" width="23.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="731.3" y="398.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (21,074 samples, 8.98%)</title><rect x="751.9" y="451.0" width="106.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.9" y="462.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/String.getBytes (4,004 samples, 1.71%)</title><rect x="751.9" y="435.0" width="20.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="754.9" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4,004 samples, 1.71%)</title><rect x="751.9" y="419.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.9" y="430.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4,004 samples, 1.71%)</title><rect x="751.9" y="403.0" width="20.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="754.9" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4,004 samples, 1.71%)</title><rect x="751.9" y="387.0" width="20.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="754.9" y="398.0"></text>
</g>
<g>
<title>byte[] (4,004 samples, 1.71%)</title><rect x="751.9" y="371.0" width="20.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="754.9" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3,560 samples, 1.52%)</title><rect x="772.1" y="435.0" width="17.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="775.1" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3,560 samples, 1.52%)</title><rect x="772.1" y="419.0" width="17.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$61/1098854345.get$Lambda (3,560 samples, 1.52%)</title><rect x="772.1" y="403.0" width="17.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="775.1" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.service.igorlo.AsyncService$$Lambda$61 (3,560 samples, 1.52%)</title><rect x="772.1" y="387.0" width="17.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="775.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6,655 samples, 2.84%)</title><rect x="790.0" y="435.0" width="33.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="793.0" y="446.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6,655 samples, 2.84%)</title><rect x="790.0" y="419.0" width="33.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="793.0" y="430.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,655 samples, 2.84%)</title><rect x="790.0" y="403.0" width="33.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="793.0" y="414.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (6,855 samples, 2.92%)</title><rect x="823.5" y="435.0" width="34.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="826.5" y="446.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3,407 samples, 1.45%)</title><rect x="823.5" y="419.0" width="17.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="826.5" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3,407 samples, 1.45%)</title><rect x="823.5" y="403.0" width="17.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="826.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.get$Lambda (3,407 samples, 1.45%)</title><rect x="823.5" y="387.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="826.5" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.service.igorlo.AsyncService$$Lambda$66 (3,407 samples, 1.45%)</title><rect x="823.5" y="371.0" width="17.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="826.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3,448 samples, 1.47%)</title><rect x="840.6" y="419.0" width="17.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="843.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3,448 samples, 1.47%)</title><rect x="840.6" y="403.0" width="17.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="843.6" y="414.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (3,403 samples, 1.45%)</title><rect x="840.6" y="387.0" width="17.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="843.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (10,217 samples, 4.35%)</title><rect x="857.9" y="467.0" width="51.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="860.9" y="478.0">one/n..</text>
</g>
<g>
<title>java/lang/String.substring (10,217 samples, 4.35%)</title><rect x="857.9" y="451.0" width="51.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="860.9" y="462.0">java/..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10,217 samples, 4.35%)</title><rect x="857.9" y="435.0" width="51.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="860.9" y="446.0">java/..</text>
</g>
<g>
<title>java.lang.String (4,506 samples, 1.92%)</title><rect x="857.9" y="419.0" width="22.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="860.9" y="430.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5,711 samples, 2.43%)</title><rect x="880.6" y="419.0" width="28.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="883.6" y="430.0">ja..</text>
</g>
<g>
<title>byte[] (5,711 samples, 2.43%)</title><rect x="880.6" y="403.0" width="28.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="883.6" y="414.0">by..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (38,775 samples, 16.53%)</title><rect x="909.3" y="499.0" width="195.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="912.3" y="510.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one.nio.http.Request (5,736 samples, 2.44%)</title><rect x="909.3" y="483.0" width="28.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="912.3" y="494.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (13,302 samples, 5.67%)</title><rect x="938.2" y="483.0" width="66.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="941.2" y="494.0">one/nio..</text>
</g>
<g>
<title>java.lang.String[] (13,302 samples, 5.67%)</title><rect x="938.2" y="467.0" width="66.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="941.2" y="478.0">java.la..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (19,737 samples, 8.41%)</title><rect x="1005.1" y="483.0" width="99.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1008.1" y="494.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (19,737 samples, 8.41%)</title><rect x="1005.1" y="467.0" width="99.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1008.1" y="478.0">one/nio/util..</text>
</g>
<g>
<title>char[] (10,588 samples, 4.51%)</title><rect x="1005.1" y="451.0" width="53.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1008.1" y="462.0">char[]</text>
</g>
<g>
<title>java.lang.String (3,202 samples, 1.36%)</title><rect x="1058.3" y="451.0" width="16.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1061.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5,947 samples, 2.53%)</title><rect x="1074.4" y="451.0" width="29.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1077.4" y="462.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5,947 samples, 2.53%)</title><rect x="1074.4" y="435.0" width="29.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1077.4" y="446.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (5,947 samples, 2.53%)</title><rect x="1074.4" y="419.0" width="29.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1077.4" y="430.0">ja..</text>
</g>
<g>
<title>byte[] (5,947 samples, 2.53%)</title><rect x="1074.4" y="403.0" width="29.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1077.4" y="414.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (17,035 samples, 7.26%)</title><rect x="1104.3" y="499.0" width="85.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1107.3" y="510.0">one/nio/ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (17,035 samples, 7.26%)</title><rect x="1104.3" y="483.0" width="85.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1107.3" y="494.0">one/nio/ut..</text>
</g>
<g>
<title>char[] (7,613 samples, 3.24%)</title><rect x="1104.3" y="467.0" width="38.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1107.3" y="478.0">cha..</text>
</g>
<g>
<title>java.lang.String (3,261 samples, 1.39%)</title><rect x="1142.6" y="467.0" width="16.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1145.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6,161 samples, 2.63%)</title><rect x="1159.0" y="467.0" width="31.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1162.0" y="478.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6,161 samples, 2.63%)</title><rect x="1159.0" y="451.0" width="31.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1162.0" y="462.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (6,161 samples, 2.63%)</title><rect x="1159.0" y="435.0" width="31.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1162.0" y="446.0">ja..</text>
</g>
<g>
<title>byte[] (6,161 samples, 2.63%)</title><rect x="1159.0" y="419.0" width="31.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1162.0" y="430.0">by..</text>
</g>
</g>
</svg>
