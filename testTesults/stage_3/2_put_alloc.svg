<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (5,819 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="10.4" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.4" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.07%)</title><rect x="10.8" y="883.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.07%)</title><rect x="10.8" y="867.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.07%)</title><rect x="10.8" y="851.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="10.8" y="835.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.8" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="10.8" y="819.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="10.8" y="803.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.8" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.03%)</title><rect x="10.8" y="787.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (13 samples, 0.22%)</title><rect x="11.6" y="883.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.05%)</title><rect x="11.6" y="867.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (10 samples, 0.17%)</title><rect x="12.2" y="867.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (9 samples, 0.15%)</title><rect x="12.4" y="851.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.4" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.10%)</title><rect x="12.6" y="835.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (5 samples, 0.09%)</title><rect x="12.8" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.8" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.07%)</title><rect x="13.0" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.0" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.05%)</title><rect x="13.2" y="787.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.2" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.05%)</title><rect x="13.2" y="771.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.2" y="782.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.03%)</title><rect x="13.4" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.03%)</title><rect x="13.4" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.4" y="750.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (2 samples, 0.03%)</title><rect x="13.4" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.4" y="734.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.03%)</title><rect x="13.4" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.4" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (38 samples, 0.65%)</title><rect x="14.3" y="883.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.3" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (35 samples, 0.60%)</title><rect x="14.7" y="867.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="17.7" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (8 samples, 0.14%)</title><rect x="15.3" y="851.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.3" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.05%)</title><rect x="15.3" y="835.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.3" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.03%)</title><rect x="16.1" y="835.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="19.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="16.1" y="819.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="19.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="16.1" y="803.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="19.1" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="16.5" y="835.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="19.5" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (23 samples, 0.40%)</title><rect x="16.9" y="851.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="19.9" y="862.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.07%)</title><rect x="22.2" y="883.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="25.2" y="894.0"></text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.09%)</title><rect x="23.0" y="883.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="26.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.05%)</title><rect x="23.2" y="867.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="26.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.05%)</title><rect x="23.2" y="851.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="26.2" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.03%)</title><rect x="23.2" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="24.0" y="883.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="27.0" y="894.0"></text>
</g>
<g>
<title>WatcherThread::~WatcherThread() (2 samples, 0.03%)</title><rect x="24.0" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="27.0" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.0" y="851.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="27.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="24.0" y="835.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="27.0" y="846.0"></text>
</g>
<g>
<title>[unknown_Java] (85 samples, 1.46%)</title><rect x="24.6" y="883.0" width="17.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="27.6" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.14%)</title><rect x="39.0" y="867.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="42.0" y="878.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (6 samples, 0.10%)</title><rect x="40.6" y="867.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="43.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="40.6" y="851.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="43.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="40.6" y="835.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="43.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="40.6" y="819.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="43.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.09%)</title><rect x="40.8" y="803.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="43.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.09%)</title><rect x="40.8" y="787.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="43.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.09%)</title><rect x="40.8" y="771.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="43.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="41.0" y="755.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="44.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="41.0" y="739.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="44.0" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 0.26%)</title><rect x="42.0" y="883.0" width="3.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="45.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.22%)</title><rect x="42.4" y="867.0" width="2.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="45.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.22%)</title><rect x="42.4" y="851.0" width="2.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="45.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.22%)</title><rect x="42.4" y="835.0" width="2.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="45.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.21%)</title><rect x="42.6" y="819.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="45.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.21%)</title><rect x="42.6" y="803.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="45.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="43.3" y="787.0" width="1.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="46.3" y="798.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="43.7" y="771.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="46.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.09%)</title><rect x="44.1" y="755.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="47.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="44.5" y="739.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="47.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,555 samples, 61.09%)</title><rect x="45.3" y="883.0" width="720.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="48.3" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,555 samples, 61.09%)</title><rect x="45.3" y="867.0" width="720.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.3" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,555 samples, 61.09%)</title><rect x="45.3" y="851.0" width="720.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.3" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.05%)</title><rect x="45.9" y="835.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="45.9" y="819.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.05%)</title><rect x="45.9" y="803.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.05%)</title><rect x="45.9" y="787.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.9" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.05%)</title><rect x="45.9" y="771.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="48.9" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.05%)</title><rect x="45.9" y="755.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="48.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.10%)</title><rect x="46.5" y="835.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="49.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.10%)</title><rect x="46.5" y="819.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (5 samples, 0.09%)</title><rect x="46.7" y="803.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (5 samples, 0.09%)</title><rect x="46.7" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (790 samples, 13.58%)</title><rect x="47.7" y="835.0" width="160.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.7" y="846.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (769 samples, 13.22%)</title><rect x="51.4" y="819.0" width="155.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.4" y="830.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (577 samples, 9.92%)</title><rect x="53.0" y="803.0" width="117.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.0" y="814.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (25 samples, 0.43%)</title><rect x="54.8" y="787.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (20 samples, 0.34%)</title><rect x="55.8" y="771.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.8" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (10 samples, 0.17%)</title><rect x="57.9" y="755.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.9" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (5 samples, 0.09%)</title><rect x="57.9" y="739.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.9" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.set (5 samples, 0.09%)</title><rect x="58.9" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (36 samples, 0.62%)</title><rect x="59.9" y="787.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (29 samples, 0.50%)</title><rect x="61.3" y="771.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (29 samples, 0.50%)</title><rect x="61.3" y="755.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (4 samples, 0.07%)</title><rect x="65.0" y="739.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.12%)</title><rect x="65.8" y="739.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.8" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (7 samples, 0.12%)</title><rect x="65.8" y="723.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.8" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (7 samples, 0.12%)</title><rect x="65.8" y="707.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (33 samples, 0.57%)</title><rect x="67.2" y="787.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (33 samples, 0.57%)</title><rect x="67.2" y="771.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="70.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (31 samples, 0.53%)</title><rect x="67.2" y="755.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (31 samples, 0.53%)</title><rect x="67.2" y="739.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.2" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (31 samples, 0.53%)</title><rect x="67.2" y="723.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.2" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.12%)</title><rect x="67.6" y="707.0" width="1.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="70.6" y="718.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.03%)</title><rect x="68.6" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="71.6" y="702.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (22 samples, 0.38%)</title><rect x="69.0" y="707.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="72.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.36%)</title><rect x="69.2" y="691.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="72.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.36%)</title><rect x="69.2" y="675.0" width="4.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="72.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.34%)</title><rect x="69.4" y="659.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="72.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.34%)</title><rect x="69.4" y="643.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="72.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.34%)</title><rect x="69.4" y="627.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="72.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.31%)</title><rect x="69.8" y="611.0" width="3.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="72.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.27%)</title><rect x="70.2" y="595.0" width="3.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="73.2" y="606.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.26%)</title><rect x="70.4" y="579.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="73.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="73.5" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.03%)</title><rect x="73.9" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.03%)</title><rect x="73.9" y="771.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (472 samples, 8.11%)</title><rect x="74.3" y="787.0" width="95.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.3" y="798.0">java/util/c..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (472 samples, 8.11%)</title><rect x="74.3" y="771.0" width="95.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="77.3" y="782.0">jdk/interna..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.09%)</title><rect x="74.7" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="77.7" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.05%)</title><rect x="75.7" y="755.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="78.7" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (3 samples, 0.05%)</title><rect x="76.3" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="79.3" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.05%)</title><rect x="76.9" y="755.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="79.9" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (234 samples, 4.02%)</title><rect x="77.5" y="755.0" width="47.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="80.5" y="766.0">Unsa..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.07%)</title><rect x="81.6" y="739.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="84.6" y="750.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.03%)</title><rect x="82.4" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="85.4" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="82.8" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="85.8" y="750.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.03%)</title><rect x="83.4" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="86.4" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (57 samples, 0.98%)</title><rect x="83.8" y="739.0" width="11.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="86.8" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.03%)</title><rect x="91.5" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="94.5" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.07%)</title><rect x="91.9" y="723.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="94.9" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.07%)</title><rect x="91.9" y="707.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="94.9" y="718.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.03%)</title><rect x="92.7" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="95.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="93.1" y="723.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="96.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="93.1" y="707.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="96.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="93.1" y="691.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="96.1" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.12%)</title><rect x="93.5" y="723.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="96.5" y="734.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.03%)</title><rect x="95.0" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="98.0" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (4 samples, 0.07%)</title><rect x="95.4" y="739.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="98.4" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (6 samples, 0.10%)</title><rect x="96.2" y="739.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="99.2" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (4 samples, 0.07%)</title><rect x="97.4" y="739.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="100.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="98.2" y="739.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="101.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="98.2" y="723.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="101.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="98.2" y="707.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="101.2" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (95 samples, 1.63%)</title><rect x="98.6" y="739.0" width="19.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="101.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (77 samples, 1.32%)</title><rect x="102.3" y="723.0" width="15.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="105.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (77 samples, 1.32%)</title><rect x="102.3" y="707.0" width="15.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="105.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.53%)</title><rect x="111.6" y="691.0" width="6.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="114.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.50%)</title><rect x="112.0" y="675.0" width="5.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="115.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.46%)</title><rect x="112.4" y="659.0" width="5.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="115.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="115.9" y="643.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="118.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.09%)</title><rect x="116.9" y="627.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="119.9" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_wait (8 samples, 0.14%)</title><rect x="117.9" y="739.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="120.9" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.05%)</title><rect x="119.5" y="739.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="122.5" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.05%)</title><rect x="120.3" y="739.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="123.3" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (4 samples, 0.07%)</title><rect x="120.9" y="739.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="123.9" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (16 samples, 0.27%)</title><rect x="121.7" y="739.0" width="3.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="124.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (215 samples, 3.69%)</title><rect x="125.0" y="755.0" width="43.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="128.0" y="766.0">[unk..</text>
</g>
<g>
<title>__pthread_cleanup_pop (5 samples, 0.09%)</title><rect x="125.2" y="739.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="128.2" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (175 samples, 3.01%)</title><rect x="126.4" y="739.0" width="35.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="129.4" y="750.0">__p..</text>
</g>
<g>
<title>[unknown] (106 samples, 1.82%)</title><rect x="140.4" y="723.0" width="21.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="143.4" y="734.0">[..</text>
</g>
<g>
<title>[unknown] (106 samples, 1.82%)</title><rect x="140.4" y="707.0" width="21.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="143.4" y="718.0">[..</text>
</g>
<g>
<title>[unknown] (82 samples, 1.41%)</title><rect x="145.3" y="691.0" width="16.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="148.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (76 samples, 1.31%)</title><rect x="146.5" y="675.0" width="15.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="149.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (74 samples, 1.27%)</title><rect x="146.9" y="659.0" width="15.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="149.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (67 samples, 1.15%)</title><rect x="148.3" y="643.0" width="13.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="151.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 0.84%)</title><rect x="151.9" y="627.0" width="10.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="154.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 0.52%)</title><rect x="155.8" y="611.0" width="6.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="158.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.46%)</title><rect x="156.4" y="595.0" width="5.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="159.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="160.1" y="579.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="163.1" y="590.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="160.1" y="563.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="163.1" y="574.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="160.1" y="547.0" width="1.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="163.1" y="558.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="160.1" y="531.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="163.1" y="542.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="160.5" y="515.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="163.5" y="526.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="160.7" y="499.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="163.7" y="510.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="160.7" y="483.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="163.7" y="494.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.12%)</title><rect x="161.9" y="739.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="164.9" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.07%)</title><rect x="163.3" y="739.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="166.3" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (11 samples, 0.19%)</title><rect x="164.1" y="739.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="167.1" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (8 samples, 0.14%)</title><rect x="166.3" y="739.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="169.3" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.05%)</title><rect x="168.0" y="739.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="171.0" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="168.6" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="171.6" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.09%)</title><rect x="169.0" y="755.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="172.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (66 samples, 1.13%)</title><rect x="170.0" y="803.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (65 samples, 1.12%)</title><rect x="170.2" y="787.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.2" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.03%)</title><rect x="170.6" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (54 samples, 0.93%)</title><rect x="171.0" y="771.0" width="11.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (13 samples, 0.22%)</title><rect x="174.5" y="755.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.5" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.10%)</title><rect x="174.5" y="739.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.12%)</title><rect x="175.7" y="739.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.05%)</title><rect x="176.5" y="723.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="179.5" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.03%)</title><rect x="176.5" y="707.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="179.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (19 samples, 0.33%)</title><rect x="177.1" y="755.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 0.09%)</title><rect x="180.9" y="755.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="183.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.12%)</title><rect x="182.0" y="771.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.12%)</title><rect x="182.0" y="755.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.09%)</title><rect x="182.2" y="739.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (118 samples, 2.03%)</title><rect x="183.4" y="803.0" width="23.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.4" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (118 samples, 2.03%)</title><rect x="183.4" y="787.0" width="23.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.4" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (118 samples, 2.03%)</title><rect x="183.4" y="771.0" width="23.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.4" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (118 samples, 2.03%)</title><rect x="183.4" y="755.0" width="23.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.4" y="766.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (118 samples, 2.03%)</title><rect x="183.4" y="739.0" width="23.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="186.4" y="750.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (15 samples, 0.26%)</title><rect x="185.0" y="723.0" width="3.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="188.0" y="734.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.03%)</title><rect x="185.8" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="188.8" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="186.4" y="707.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="189.4" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (4 samples, 0.07%)</title><rect x="187.0" y="707.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="190.0" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (94 samples, 1.62%)</title><rect x="188.2" y="723.0" width="19.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="191.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (86 samples, 1.48%)</title><rect x="189.9" y="707.0" width="17.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="192.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (86 samples, 1.48%)</title><rect x="189.9" y="691.0" width="17.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="192.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 1.36%)</title><rect x="191.3" y="675.0" width="16.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="194.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 1.36%)</title><rect x="191.3" y="659.0" width="16.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="194.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 1.36%)</title><rect x="191.3" y="643.0" width="16.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="194.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (75 samples, 1.29%)</title><rect x="192.1" y="627.0" width="15.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="195.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (67 samples, 1.15%)</title><rect x="193.7" y="611.0" width="13.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="196.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 1.10%)</title><rect x="194.3" y="595.0" width="13.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="197.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.03%)</title><rect x="207.5" y="819.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.5" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$FlushingTask.run (182 samples, 3.13%)</title><rect x="208.1" y="835.0" width="36.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.1" y="846.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.flushAndLoad (182 samples, 3.13%)</title><rect x="208.1" y="819.0" width="36.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="211.1" y="830.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.flush (182 samples, 3.13%)</title><rect x="208.1" y="803.0" width="36.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.1" y="814.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (7 samples, 0.12%)</title><rect x="208.9" y="787.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="211.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (7 samples, 0.12%)</title><rect x="208.9" y="771.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (4 samples, 0.07%)</title><rect x="209.3" y="755.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.3" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (6 samples, 0.10%)</title><rect x="210.4" y="787.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.4" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.05%)</title><rect x="210.4" y="771.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.4" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.05%)</title><rect x="210.4" y="755.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="213.4" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="210.4" y="739.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.4" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="210.6" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.6" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.05%)</title><rect x="211.0" y="771.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="214.0" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="211.0" y="755.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="214.0" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="211.0" y="739.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.0" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="211.0" y="723.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="214.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (7 samples, 0.12%)</title><rect x="211.8" y="787.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.8" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.07%)</title><rect x="211.8" y="771.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.8" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.07%)</title><rect x="211.8" y="755.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.8" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="212.0" y="739.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.0" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="212.0" y="723.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.0" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.05%)</title><rect x="212.6" y="771.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.6" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="212.6" y="755.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.6" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="212.6" y="739.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="212.6" y="723.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (157 samples, 2.70%)</title><rect x="213.2" y="787.0" width="31.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.2" y="798.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (149 samples, 2.56%)</title><rect x="213.4" y="771.0" width="30.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.4" y="782.0">su..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.05%)</title><rect x="213.8" y="755.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.8" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.05%)</title><rect x="213.8" y="739.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.8" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title><rect x="214.0" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.0" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="214.0" y="707.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="217.0" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (136 samples, 2.34%)</title><rect x="214.4" y="755.0" width="27.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.4" y="766.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (136 samples, 2.34%)</title><rect x="214.4" y="739.0" width="27.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.4" y="750.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (136 samples, 2.34%)</title><rect x="214.4" y="723.0" width="27.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.4" y="734.0">s..</text>
</g>
<g>
<title>[unknown] (130 samples, 2.23%)</title><rect x="215.2" y="707.0" width="26.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="218.2" y="718.0">[..</text>
</g>
<g>
<title>__write (130 samples, 2.23%)</title><rect x="215.2" y="691.0" width="26.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="218.2" y="702.0">_..</text>
</g>
<g>
<title>[unknown] (124 samples, 2.13%)</title><rect x="216.4" y="675.0" width="25.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="219.4" y="686.0">[..</text>
</g>
<g>
<title>[unknown] (124 samples, 2.13%)</title><rect x="216.4" y="659.0" width="25.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="219.4" y="670.0">[..</text>
</g>
<g>
<title>[unknown] (116 samples, 1.99%)</title><rect x="218.1" y="643.0" width="23.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="221.1" y="654.0">[..</text>
</g>
<g>
<title>[unknown] (116 samples, 1.99%)</title><rect x="218.1" y="627.0" width="23.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="221.1" y="638.0">[..</text>
</g>
<g>
<title>[unknown] (116 samples, 1.99%)</title><rect x="218.1" y="611.0" width="23.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="221.1" y="622.0">[..</text>
</g>
<g>
<title>[unknown] (115 samples, 1.98%)</title><rect x="218.3" y="595.0" width="23.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="221.3" y="606.0">[..</text>
</g>
<g>
<title>[unknown] (108 samples, 1.86%)</title><rect x="219.7" y="579.0" width="21.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="222.7" y="590.0">[..</text>
</g>
<g>
<title>[unknown] (103 samples, 1.77%)</title><rect x="220.7" y="563.0" width="20.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="223.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (100 samples, 1.72%)</title><rect x="221.3" y="547.0" width="20.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="224.3" y="558.0"></text>
</g>
<g>
<title>[unknown] (97 samples, 1.67%)</title><rect x="221.9" y="531.0" width="19.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="224.9" y="542.0"></text>
</g>
<g>
<title>[unknown] (90 samples, 1.55%)</title><rect x="223.3" y="515.0" width="18.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="226.3" y="526.0"></text>
</g>
<g>
<title>[unknown] (78 samples, 1.34%)</title><rect x="225.8" y="499.0" width="15.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="228.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (72 samples, 1.24%)</title><rect x="227.0" y="483.0" width="14.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="230.0" y="494.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 1.12%)</title><rect x="228.4" y="467.0" width="13.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="231.4" y="478.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 0.89%)</title><rect x="231.0" y="451.0" width="10.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="234.0" y="462.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 0.86%)</title><rect x="231.4" y="435.0" width="10.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="234.4" y="446.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 0.84%)</title><rect x="231.6" y="419.0" width="10.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="234.6" y="430.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 0.82%)</title><rect x="231.8" y="403.0" width="9.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="234.8" y="414.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.55%)</title><rect x="235.1" y="387.0" width="6.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="238.1" y="398.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.48%)</title><rect x="235.9" y="371.0" width="5.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="238.9" y="382.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.31%)</title><rect x="237.9" y="355.0" width="3.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="240.9" y="366.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.19%)</title><rect x="239.3" y="339.0" width="2.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="242.3" y="350.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.15%)</title><rect x="239.8" y="323.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="242.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.07%)</title><rect x="242.0" y="755.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.07%)</title><rect x="242.0" y="739.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.0" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (4 samples, 0.07%)</title><rect x="242.8" y="755.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.07%)</title><rect x="242.8" y="739.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.05%)</title><rect x="242.8" y="723.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.8" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (7 samples, 0.12%)</title><rect x="243.6" y="771.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.03%)</title><rect x="244.6" y="755.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run (2,568 samples, 44.13%)</title><rect x="245.0" y="835.0" width="520.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.0" y="846.0">ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.run</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (2,568 samples, 44.13%)</title><rect x="245.0" y="819.0" width="520.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="248.0" y="830.0">ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3</text>
</g>
<g>
<title>itable stub (9 samples, 0.15%)</title><rect x="245.4" y="803.0" width="1.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="248.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,079 samples, 35.73%)</title><rect x="247.3" y="803.0" width="421.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.3" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (18 samples, 0.31%)</title><rect x="250.9" y="787.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (17 samples, 0.29%)</title><rect x="251.1" y="771.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.29%)</title><rect x="251.1" y="755.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.1" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (5 samples, 0.09%)</title><rect x="254.6" y="787.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="257.6" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,012 samples, 34.58%)</title><rect x="255.6" y="787.0" width="408.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.6" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (67 samples, 1.15%)</title><rect x="255.8" y="771.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (46 samples, 0.79%)</title><rect x="260.0" y="755.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (16 samples, 0.27%)</title><rect x="260.6" y="739.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.12%)</title><rect x="262.3" y="723.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (5 samples, 0.09%)</title><rect x="262.7" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.7" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (27 samples, 0.46%)</title><rect x="263.9" y="739.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (27 samples, 0.46%)</title><rect x="263.9" y="723.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.10%)</title><rect x="267.7" y="707.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (6 samples, 0.10%)</title><rect x="267.7" y="691.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.7" y="702.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (2 samples, 0.03%)</title><rect x="269.0" y="707.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="272.0" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,944 samples, 33.41%)</title><rect x="269.4" y="771.0" width="394.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.4" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,937 samples, 33.29%)</title><rect x="270.8" y="755.0" width="392.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.8" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (12 samples, 0.21%)</title><rect x="272.4" y="739.0" width="2.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="275.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,909 samples, 32.81%)</title><rect x="275.0" y="739.0" width="387.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.0" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,901 samples, 32.67%)</title><rect x="276.7" y="723.0" width="385.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.7" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.05%)</title><rect x="281.1" y="707.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="284.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (87 samples, 1.50%)</title><rect x="281.7" y="707.0" width="17.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="284.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (87 samples, 1.50%)</title><rect x="281.7" y="691.0" width="17.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="284.7" y="702.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (73 samples, 1.25%)</title><rect x="281.7" y="675.0" width="14.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="284.7" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="283.4" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="286.4" y="670.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (6 samples, 0.10%)</title><rect x="283.8" y="659.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="286.8" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (4 samples, 0.07%)</title><rect x="285.0" y="659.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="288.0" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3 (16 samples, 0.27%)</title><rect x="285.8" y="659.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="288.8" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (34 samples, 0.58%)</title><rect x="289.0" y="659.0" width="6.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="292.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (7 samples, 0.12%)</title><rect x="291.1" y="643.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="294.1" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (5 samples, 0.09%)</title><rect x="292.5" y="643.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="295.5" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (4 samples, 0.07%)</title><rect x="293.5" y="643.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="296.5" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.14%)</title><rect x="294.3" y="643.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="297.3" y="654.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.05%)</title><rect x="295.9" y="659.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="298.9" y="670.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.07%)</title><rect x="296.5" y="675.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="299.5" y="686.0"></text>
</g>
<g>
<title>__send (4 samples, 0.07%)</title><rect x="297.3" y="675.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="300.3" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.10%)</title><rect x="298.2" y="675.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="301.2" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="299.4" y="707.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="302.4" y="718.0"></text>
</g>
<g>
<title>__send (1,787 samples, 30.71%)</title><rect x="299.8" y="707.0" width="362.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="302.8" y="718.0">__send</text>
</g>
<g>
<title>[unknown] (1,766 samples, 30.35%)</title><rect x="304.0" y="691.0" width="358.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="307.0" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,766 samples, 30.35%)</title><rect x="304.0" y="675.0" width="358.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="307.0" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,742 samples, 29.94%)</title><rect x="308.9" y="659.0" width="353.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="311.9" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,739 samples, 29.88%)</title><rect x="309.5" y="643.0" width="352.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="312.5" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,730 samples, 29.73%)</title><rect x="311.3" y="627.0" width="350.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="314.3" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,714 samples, 29.46%)</title><rect x="314.6" y="611.0" width="347.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="317.6" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,695 samples, 29.13%)</title><rect x="318.4" y="595.0" width="343.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="321.4" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,686 samples, 28.97%)</title><rect x="320.3" y="579.0" width="341.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="323.3" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,595 samples, 27.41%)</title><rect x="338.7" y="563.0" width="323.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="341.7" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,524 samples, 26.19%)</title><rect x="353.1" y="547.0" width="309.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="356.1" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,433 samples, 24.63%)</title><rect x="371.6" y="531.0" width="290.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="374.6" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,334 samples, 22.92%)</title><rect x="391.6" y="515.0" width="270.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="394.6" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,211 samples, 20.81%)</title><rect x="416.6" y="499.0" width="245.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="419.6" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,174 samples, 20.18%)</title><rect x="424.1" y="483.0" width="238.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="427.1" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,141 samples, 19.61%)</title><rect x="430.8" y="467.0" width="231.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="433.8" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,121 samples, 19.26%)</title><rect x="434.8" y="451.0" width="227.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="437.8" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,105 samples, 18.99%)</title><rect x="438.1" y="435.0" width="224.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="441.1" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,065 samples, 18.30%)</title><rect x="446.2" y="419.0" width="216.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="449.2" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,021 samples, 17.55%)</title><rect x="455.1" y="403.0" width="207.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="458.1" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (946 samples, 16.26%)</title><rect x="470.3" y="387.0" width="191.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="473.3" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (854 samples, 14.68%)</title><rect x="489.0" y="371.0" width="173.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="492.0" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (809 samples, 13.90%)</title><rect x="498.1" y="355.0" width="164.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="501.1" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (782 samples, 13.44%)</title><rect x="503.6" y="339.0" width="158.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="506.6" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (768 samples, 13.20%)</title><rect x="506.4" y="323.0" width="155.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="509.4" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (753 samples, 12.94%)</title><rect x="509.5" y="307.0" width="152.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="512.5" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (740 samples, 12.72%)</title><rect x="512.1" y="291.0" width="150.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="515.1" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (733 samples, 12.60%)</title><rect x="513.5" y="275.0" width="148.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="516.5" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (709 samples, 12.18%)</title><rect x="518.4" y="259.0" width="143.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="521.4" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (671 samples, 11.53%)</title><rect x="526.1" y="243.0" width="136.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="529.1" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (661 samples, 11.36%)</title><rect x="528.1" y="227.0" width="134.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="531.1" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (648 samples, 11.14%)</title><rect x="530.7" y="211.0" width="131.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="533.7" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (633 samples, 10.88%)</title><rect x="533.8" y="195.0" width="128.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="536.8" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (589 samples, 10.12%)</title><rect x="542.7" y="179.0" width="119.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="545.7" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (530 samples, 9.11%)</title><rect x="554.7" y="163.0" width="107.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="557.7" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (496 samples, 8.52%)</title><rect x="561.6" y="147.0" width="100.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="564.6" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (427 samples, 7.34%)</title><rect x="575.6" y="131.0" width="86.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="578.6" y="142.0">[unknown]</text>
</g>
<g>
<title>[unknown] (319 samples, 5.48%)</title><rect x="597.5" y="115.0" width="64.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="600.5" y="126.0">[unknown]</text>
</g>
<g>
<title>[unknown] (298 samples, 5.12%)</title><rect x="601.7" y="99.0" width="60.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="604.7" y="110.0">[unkno..</text>
</g>
<g>
<title>[unknown] (283 samples, 4.86%)</title><rect x="604.8" y="83.0" width="57.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="607.8" y="94.0">[unkno..</text>
</g>
<g>
<title>[unknown] (19 samples, 0.33%)</title><rect x="658.3" y="67.0" width="3.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="661.3" y="78.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.17%)</title><rect x="660.1" y="51.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="663.1" y="62.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.12%)</title><rect x="660.7" y="35.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="663.7" y="46.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.12%)</title><rect x="662.2" y="739.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="665.2" y="750.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.12%)</title><rect x="662.2" y="723.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="665.2" y="734.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.07%)</title><rect x="662.8" y="707.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="665.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (24 samples, 0.41%)</title><rect x="663.6" y="787.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="663.6" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (22 samples, 0.38%)</title><rect x="664.0" y="771.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (12 samples, 0.21%)</title><rect x="664.0" y="755.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="667.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.05%)</title><rect x="665.8" y="739.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="668.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.17%)</title><rect x="666.4" y="755.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="669.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.10%)</title><rect x="667.0" y="739.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="670.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.05%)</title><rect x="667.6" y="723.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.6" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.05%)</title><rect x="667.6" y="707.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="670.6" y="718.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.03%)</title><rect x="668.4" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="671.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$75/1479440256.action (478 samples, 8.21%)</title><rect x="668.8" y="803.0" width="97.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.8" y="814.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$entity$1 (463 samples, 7.96%)</title><rect x="670.5" y="787.0" width="93.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="673.5" y="798.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (463 samples, 7.96%)</title><rect x="670.5" y="771.0" width="93.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.5" y="782.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.10%)</title><rect x="671.5" y="755.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="674.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.10%)</title><rect x="671.5" y="739.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="674.5" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="671.5" y="723.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="671.5" y="707.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="674.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="672.1" y="691.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="675.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.upsert (452 samples, 7.77%)</title><rect x="672.7" y="755.0" width="91.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="675.7" y="766.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.upsert (452 samples, 7.77%)</title><rect x="672.7" y="739.0" width="91.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="675.7" y="750.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.upsert (352 samples, 6.05%)</title><rect x="673.1" y="723.0" width="71.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="676.1" y="734.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (352 samples, 6.05%)</title><rect x="673.1" y="707.0" width="71.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="676.1" y="718.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (352 samples, 6.05%)</title><rect x="673.1" y="691.0" width="71.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="676.1" y="702.0">java/uti..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="690.3" y="675.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="693.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="690.3" y="659.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="693.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="690.3" y="643.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="693.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (25 samples, 0.43%)</title><rect x="690.7" y="675.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="693.7" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (4 samples, 0.07%)</title><rect x="692.4" y="659.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.4" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (13 samples, 0.22%)</title><rect x="693.2" y="659.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="696.2" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (11 samples, 0.19%)</title><rect x="695.8" y="675.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="698.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="697.6" y="659.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="700.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="697.6" y="643.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="700.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="697.6" y="627.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="700.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (46 samples, 0.79%)</title><rect x="698.0" y="675.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="701.0" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (9 samples, 0.15%)</title><rect x="705.5" y="659.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="708.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (6 samples, 0.10%)</title><rect x="707.4" y="675.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (21 samples, 0.36%)</title><rect x="708.6" y="675.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (13 samples, 0.22%)</title><rect x="712.8" y="675.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="715.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (3 samples, 0.05%)</title><rect x="713.3" y="659.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="716.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.03%)</title><rect x="713.3" y="643.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="716.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.14%)</title><rect x="713.9" y="659.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="716.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.12%)</title><rect x="714.1" y="643.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="717.1" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.12%)</title><rect x="714.1" y="627.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.1" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.09%)</title><rect x="714.1" y="611.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="717.1" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="715.1" y="611.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="718.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (142 samples, 2.44%)</title><rect x="715.5" y="675.0" width="28.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="718.5" y="686.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (126 samples, 2.17%)</title><rect x="718.5" y="659.0" width="25.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="721.5" y="670.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (108 samples, 1.86%)</title><rect x="722.2" y="643.0" width="21.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.2" y="654.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.03%)</title><rect x="722.6" y="627.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="725.6" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (60 samples, 1.03%)</title><rect x="723.0" y="627.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="726.0" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (30 samples, 0.52%)</title><rect x="726.0" y="611.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.0" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (14 samples, 0.24%)</title><rect x="729.3" y="595.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="732.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (15 samples, 0.26%)</title><rect x="732.1" y="611.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="735.1" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (44 samples, 0.76%)</title><rect x="735.2" y="627.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="738.2" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.07%)</title><rect x="743.1" y="611.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="746.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTablePool.setToFlush (98 samples, 1.68%)</title><rect x="744.5" y="723.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/MemoryTable.iterator (97 samples, 1.67%)</title><rect x="744.7" y="707.0" width="19.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="747.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (3 samples, 0.05%)</title><rect x="744.9" y="691.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (66 samples, 1.13%)</title><rect x="745.5" y="691.0" width="13.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="748.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (66 samples, 1.13%)</title><rect x="745.5" y="675.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="748.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (66 samples, 1.13%)</title><rect x="745.5" y="659.0" width="13.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (63 samples, 1.08%)</title><rect x="746.1" y="643.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (61 samples, 1.05%)</title><rect x="746.5" y="627.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="749.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (61 samples, 1.05%)</title><rect x="746.5" y="611.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="749.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="754.0" y="595.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="757.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="754.0" y="579.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="757.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="754.0" y="563.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="757.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="754.0" y="547.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="757.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="754.0" y="531.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="757.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="754.0" y="515.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="757.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="754.0" y="499.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="757.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (9 samples, 0.15%)</title><rect x="754.4" y="595.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.4" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (13 samples, 0.22%)</title><rect x="756.2" y="595.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="759.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (27 samples, 0.46%)</title><rect x="758.9" y="691.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="761.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (27 samples, 0.46%)</title><rect x="758.9" y="675.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="761.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (27 samples, 0.46%)</title><rect x="758.9" y="659.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="761.9" y="670.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="761.3" y="643.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="764.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (4 samples, 0.07%)</title><rect x="761.7" y="643.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="764.7" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.15%)</title><rect x="762.5" y="643.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="765.5" y="654.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.14%)</title><rect x="762.7" y="627.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="765.7" y="638.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.10%)</title><rect x="763.1" y="611.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="766.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.put (7 samples, 0.12%)</title><rect x="764.4" y="787.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.lambda$executeAsync$3 (2 samples, 0.03%)</title><rect x="765.8" y="835.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.8" y="846.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,865 samples, 32.05%)</title><rect x="766.4" y="883.0" width="378.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="769.4" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (2 samples, 0.03%)</title><rect x="767.8" y="867.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="770.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.09%)</title><rect x="768.2" y="867.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="771.2" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.09%)</title><rect x="768.2" y="851.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="771.2" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (498 samples, 8.56%)</title><rect x="769.2" y="867.0" width="101.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="772.2" y="878.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (12 samples, 0.21%)</title><rect x="772.5" y="851.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="775.5" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (7 samples, 0.12%)</title><rect x="773.5" y="835.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (470 samples, 8.08%)</title><rect x="774.9" y="851.0" width="95.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="777.9" y="862.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (15 samples, 0.26%)</title><rect x="778.1" y="835.0" width="3.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="781.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (417 samples, 7.17%)</title><rect x="781.2" y="835.0" width="84.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="784.2" y="846.0">[unknown]</text>
</g>
<g>
<title>Metadata::is_klass() const volatile (22 samples, 0.38%)</title><rect x="781.2" y="819.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="784.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.38%)</title><rect x="781.2" y="803.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="784.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.38%)</title><rect x="781.2" y="787.0" width="4.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="784.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.38%)</title><rect x="781.2" y="771.0" width="4.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="784.2" y="782.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.05%)</title><rect x="781.2" y="755.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="784.2" y="766.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (12 samples, 0.21%)</title><rect x="781.8" y="755.0" width="2.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="784.8" y="766.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.12%)</title><rect x="784.2" y="755.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="787.2" y="766.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.05%)</title><rect x="784.8" y="739.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="787.8" y="750.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (7 samples, 0.12%)</title><rect x="785.9" y="819.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="788.9" y="830.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (6 samples, 0.10%)</title><rect x="787.3" y="819.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="790.3" y="830.0"></text>
</g>
<g>
<title>epoll_wait (381 samples, 6.55%)</title><rect x="788.5" y="819.0" width="77.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="791.5" y="830.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (354 samples, 6.08%)</title><rect x="794.0" y="803.0" width="71.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="797.0" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (354 samples, 6.08%)</title><rect x="794.0" y="787.0" width="71.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="797.0" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (331 samples, 5.69%)</title><rect x="798.6" y="771.0" width="67.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="801.6" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (331 samples, 5.69%)</title><rect x="798.6" y="755.0" width="67.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="801.6" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (318 samples, 5.46%)</title><rect x="801.3" y="739.0" width="64.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="804.3" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (270 samples, 4.64%)</title><rect x="811.0" y="723.0" width="54.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="814.0" y="734.0">[unkn..</text>
</g>
<g>
<title>[unknown] (188 samples, 3.23%)</title><rect x="827.6" y="707.0" width="38.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="830.6" y="718.0">[un..</text>
</g>
<g>
<title>[unknown] (125 samples, 2.15%)</title><rect x="840.4" y="691.0" width="25.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="843.4" y="702.0">[..</text>
</g>
<g>
<title>[unknown] (98 samples, 1.68%)</title><rect x="845.9" y="675.0" width="19.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="848.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (63 samples, 1.08%)</title><rect x="853.0" y="659.0" width="12.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="856.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.10%)</title><rect x="864.5" y="643.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="867.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="864.9" y="627.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="867.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="864.9" y="611.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="867.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="864.9" y="595.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="867.9" y="606.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="864.9" y="579.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="867.9" y="590.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="864.9" y="563.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="867.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="864.9" y="547.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="867.9" y="558.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.14%)</title><rect x="865.7" y="835.0" width="1.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="868.7" y="846.0"></text>
</g>
<g>
<title>epoll_wait (14 samples, 0.24%)</title><rect x="867.4" y="835.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="870.4" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,353 samples, 23.25%)</title><rect x="870.2" y="867.0" width="274.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="873.2" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (5 samples, 0.09%)</title><rect x="872.2" y="851.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="875.2" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,328 samples, 22.82%)</title><rect x="873.3" y="851.0" width="269.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="876.3" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (901 samples, 15.48%)</title><rect x="874.1" y="835.0" width="182.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="877.1" y="846.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (674 samples, 11.58%)</title><rect x="878.7" y="819.0" width="136.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="881.7" y="830.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (673 samples, 11.57%)</title><rect x="878.9" y="803.0" width="136.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="881.9" y="814.0">one/nio/http/Http..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (615 samples, 10.57%)</title><rect x="878.9" y="787.0" width="124.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="881.9" y="798.0">RequestHandler0..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (54 samples, 0.93%)</title><rect x="878.9" y="771.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="881.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (21 samples, 0.36%)</title><rect x="879.9" y="755.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="882.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (20 samples, 0.34%)</title><rect x="880.1" y="739.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="883.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.09%)</title><rect x="883.2" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="886.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (9 samples, 0.15%)</title><rect x="884.2" y="755.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="887.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.05%)</title><rect x="885.4" y="739.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="888.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.05%)</title><rect x="885.4" y="723.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="888.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.14%)</title><rect x="886.0" y="755.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="889.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (3 samples, 0.05%)</title><rect x="886.0" y="739.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="889.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.09%)</title><rect x="886.6" y="739.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="889.6" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.09%)</title><rect x="886.6" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="889.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (11 samples, 0.19%)</title><rect x="887.6" y="755.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="890.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.14%)</title><rect x="888.3" y="739.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="891.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.14%)</title><rect x="888.3" y="723.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="891.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.10%)</title><rect x="888.7" y="707.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="891.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entity (561 samples, 9.64%)</title><rect x="889.9" y="771.0" width="113.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="892.9" y="782.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/String.getBytes (5 samples, 0.09%)</title><rect x="890.9" y="755.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="893.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.07%)</title><rect x="891.1" y="739.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="894.1" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.07%)</title><rect x="891.9" y="755.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="894.9" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.07%)</title><rect x="891.9" y="739.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="894.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$81/1293871524.get$Lambda (3 samples, 0.05%)</title><rect x="892.1" y="723.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="895.1" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.31%)</title><rect x="892.7" y="755.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="895.7" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.31%)</title><rect x="892.7" y="739.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="895.7" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.15%)</title><rect x="894.5" y="723.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="897.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.15%)</title><rect x="894.5" y="707.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="897.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.12%)</title><rect x="894.9" y="691.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="897.9" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.07%)</title><rect x="895.6" y="675.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="898.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.executeAsync (529 samples, 9.09%)</title><rect x="896.4" y="755.0" width="107.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="899.4" y="766.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.10%)</title><rect x="897.0" y="739.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="900.0" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (6 samples, 0.10%)</title><rect x="897.0" y="723.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="900.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.get$Lambda (5 samples, 0.09%)</title><rect x="897.2" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService$$Lambda$66/899689298.&lt;init&gt; (3 samples, 0.05%)</title><rect x="897.6" y="691.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="900.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (520 samples, 8.94%)</title><rect x="898.2" y="739.0" width="105.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.2" y="750.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (518 samples, 8.90%)</title><rect x="898.6" y="723.0" width="105.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="901.6" y="734.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (8 samples, 0.14%)</title><rect x="899.2" y="707.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (400 samples, 6.87%)</title><rect x="900.8" y="707.0" width="81.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="903.8" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="901.0" y="691.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="904.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="901.0" y="675.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="904.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="901.0" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="904.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="901.0" y="643.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="904.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="901.0" y="627.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="904.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="901.0" y="611.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (397 samples, 6.82%)</title><rect x="901.4" y="691.0" width="80.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="904.4" y="702.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (397 samples, 6.82%)</title><rect x="901.4" y="675.0" width="80.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="904.4" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (397 samples, 6.82%)</title><rect x="901.4" y="659.0" width="80.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.4" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (397 samples, 6.82%)</title><rect x="901.4" y="643.0" width="80.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.4" y="654.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (397 samples, 6.82%)</title><rect x="901.4" y="627.0" width="80.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="904.4" y="638.0">jdk/inter..</text>
</g>
<g>
<title>Unsafe_Unpark (75 samples, 1.29%)</title><rect x="904.1" y="611.0" width="15.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="907.1" y="622.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.05%)</title><rect x="905.7" y="595.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="908.7" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.318] (7 samples, 0.12%)</title><rect x="906.3" y="595.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="909.3" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.319] (3 samples, 0.05%)</title><rect x="907.7" y="595.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="910.7" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (13 samples, 0.22%)</title><rect x="908.3" y="595.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="911.3" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.09%)</title><rect x="911.0" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="914.0" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (3 samples, 0.05%)</title><rect x="912.0" y="595.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.0" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (22 samples, 0.38%)</title><rect x="912.6" y="595.0" width="4.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="915.6" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (4 samples, 0.07%)</title><rect x="917.3" y="595.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="920.3" y="606.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.07%)</title><rect x="918.1" y="595.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.1" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="918.9" y="595.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="921.9" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="919.3" y="611.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="922.3" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.03%)</title><rect x="919.9" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.9" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (304 samples, 5.22%)</title><rect x="920.3" y="611.0" width="61.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="923.3" y="622.0">pthrea..</text>
</g>
<g>
<title>[unknown] (273 samples, 4.69%)</title><rect x="926.6" y="595.0" width="55.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="929.6" y="606.0">[unkn..</text>
</g>
<g>
<title>[unknown] (273 samples, 4.69%)</title><rect x="926.6" y="579.0" width="55.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="929.6" y="590.0">[unkn..</text>
</g>
<g>
<title>[unknown] (250 samples, 4.30%)</title><rect x="931.2" y="563.0" width="50.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="934.2" y="574.0">[unkn..</text>
</g>
<g>
<title>[unknown] (246 samples, 4.23%)</title><rect x="932.1" y="547.0" width="49.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="935.1" y="558.0">[unkn..</text>
</g>
<g>
<title>[unknown] (244 samples, 4.19%)</title><rect x="932.5" y="531.0" width="49.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="935.5" y="542.0">[unkn..</text>
</g>
<g>
<title>[unknown] (216 samples, 3.71%)</title><rect x="938.1" y="515.0" width="43.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="941.1" y="526.0">[unk..</text>
</g>
<g>
<title>[unknown] (195 samples, 3.35%)</title><rect x="942.4" y="499.0" width="39.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="945.4" y="510.0">[un..</text>
</g>
<g>
<title>[unknown] (184 samples, 3.16%)</title><rect x="944.6" y="483.0" width="37.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="947.6" y="494.0">[un..</text>
</g>
<g>
<title>[unknown] (5 samples, 0.09%)</title><rect x="980.9" y="467.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="983.9" y="478.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.09%)</title><rect x="980.9" y="451.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="983.9" y="462.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.09%)</title><rect x="980.9" y="435.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="983.9" y="446.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.09%)</title><rect x="980.9" y="419.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="983.9" y="430.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="981.1" y="403.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="984.1" y="414.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="981.1" y="387.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="984.1" y="398.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="981.1" y="371.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="984.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 0.33%)</title><rect x="981.9" y="707.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 0.33%)</title><rect x="981.9" y="691.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="984.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (8 samples, 0.14%)</title><rect x="984.2" y="675.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="987.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (7 samples, 0.12%)</title><rect x="984.4" y="659.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.03%)</title><rect x="984.6" y="643.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="987.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.03%)</title><rect x="984.6" y="627.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="987.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (2 samples, 0.03%)</title><rect x="984.6" y="611.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (4 samples, 0.07%)</title><rect x="985.0" y="643.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="988.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (4 samples, 0.07%)</title><rect x="985.0" y="627.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="988.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (4 samples, 0.07%)</title><rect x="985.0" y="611.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="988.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (86 samples, 1.48%)</title><rect x="985.8" y="707.0" width="17.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="988.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (80 samples, 1.37%)</title><rect x="987.0" y="691.0" width="16.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="990.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (43 samples, 0.74%)</title><rect x="987.4" y="675.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="990.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (16 samples, 0.27%)</title><rect x="987.6" y="659.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.6" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (15 samples, 0.26%)</title><rect x="987.8" y="643.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="990.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (3 samples, 0.05%)</title><rect x="990.3" y="627.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="993.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (17 samples, 0.29%)</title><rect x="990.9" y="659.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="993.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (16 samples, 0.27%)</title><rect x="991.1" y="643.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="994.1" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (16 samples, 0.27%)</title><rect x="991.1" y="627.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="994.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (9 samples, 0.15%)</title><rect x="994.3" y="659.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="997.3" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (9 samples, 0.15%)</title><rect x="994.3" y="643.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="997.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (9 samples, 0.15%)</title><rect x="994.3" y="627.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="997.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (35 samples, 0.60%)</title><rect x="996.1" y="675.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="999.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (23 samples, 0.40%)</title><rect x="998.6" y="659.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1001.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (9 samples, 0.15%)</title><rect x="1001.4" y="643.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1004.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.03%)</title><rect x="1003.2" y="707.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1006.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="1003.2" y="691.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1006.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="1003.2" y="675.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1006.2" y="686.0"></text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (4 samples, 0.07%)</title><rect x="1003.6" y="787.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1006.6" y="798.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (25 samples, 0.43%)</title><rect x="1004.5" y="787.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1007.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (22 samples, 0.38%)</title><rect x="1005.1" y="771.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1008.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (14 samples, 0.24%)</title><rect x="1005.9" y="755.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1008.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.07%)</title><rect x="1008.7" y="755.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1011.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.05%)</title><rect x="1008.9" y="739.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1011.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.05%)</title><rect x="1008.9" y="723.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1011.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (29 samples, 0.50%)</title><rect x="1009.5" y="787.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1012.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (29 samples, 0.50%)</title><rect x="1009.5" y="771.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1012.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (20 samples, 0.34%)</title><rect x="1011.3" y="755.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1014.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (63 samples, 1.08%)</title><rect x="1015.4" y="819.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1018.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1017.2" y="803.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1020.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="1017.2" y="787.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1020.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="1017.2" y="771.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1020.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.05%)</title><rect x="1017.4" y="755.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (38 samples, 0.65%)</title><rect x="1018.0" y="803.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1021.0" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (38 samples, 0.65%)</title><rect x="1018.0" y="787.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1021.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1023.9" y="771.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1026.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1023.9" y="755.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1026.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.05%)</title><rect x="1024.1" y="739.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1027.1" y="750.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (5 samples, 0.09%)</title><rect x="1024.7" y="771.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (12 samples, 0.21%)</title><rect x="1025.7" y="803.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1028.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (26 samples, 0.45%)</title><rect x="1028.2" y="819.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1031.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (9 samples, 0.15%)</title><rect x="1028.8" y="803.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1031.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (9 samples, 0.15%)</title><rect x="1028.8" y="787.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1031.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.03%)</title><rect x="1029.6" y="771.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1032.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.03%)</title><rect x="1029.6" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1032.6" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.03%)</title><rect x="1029.6" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1032.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.05%)</title><rect x="1030.0" y="771.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1033.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="1030.0" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1033.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (14 samples, 0.24%)</title><rect x="1030.6" y="803.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1033.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (28 samples, 0.48%)</title><rect x="1033.5" y="819.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1036.5" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (36 samples, 0.62%)</title><rect x="1039.1" y="819.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1042.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (30 samples, 0.52%)</title><rect x="1039.5" y="803.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1042.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="1039.7" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1042.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (27 samples, 0.46%)</title><rect x="1040.1" y="787.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.05%)</title><rect x="1043.6" y="771.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1046.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="1043.8" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1046.8" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.03%)</title><rect x="1043.8" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1046.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (7 samples, 0.12%)</title><rect x="1044.2" y="771.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1047.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (7 samples, 0.12%)</title><rect x="1044.2" y="755.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1047.2" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (7 samples, 0.12%)</title><rect x="1044.2" y="739.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1047.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.07%)</title><rect x="1045.6" y="803.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1048.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.05%)</title><rect x="1045.8" y="787.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1048.8" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="1046.0" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1049.0" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (51 samples, 0.88%)</title><rect x="1046.4" y="819.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1049.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (49 samples, 0.84%)</title><rect x="1046.8" y="803.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (30 samples, 0.52%)</title><rect x="1050.7" y="787.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1053.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (29 samples, 0.50%)</title><rect x="1050.9" y="771.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1053.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (5 samples, 0.09%)</title><rect x="1055.8" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1058.8" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (423 samples, 7.27%)</title><rect x="1056.8" y="835.0" width="85.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1059.8" y="846.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (420 samples, 7.22%)</title><rect x="1057.0" y="819.0" width="85.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1060.0" y="830.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.03%)</title><rect x="1061.6" y="803.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1064.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (98 samples, 1.68%)</title><rect x="1062.0" y="803.0" width="19.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1065.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (98 samples, 1.68%)</title><rect x="1062.0" y="787.0" width="19.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1065.0" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (89 samples, 1.53%)</title><rect x="1062.0" y="771.0" width="18.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1065.0" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.05%)</title><rect x="1062.2" y="755.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.2" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.07%)</title><rect x="1062.9" y="755.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.9" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (5 samples, 0.09%)</title><rect x="1063.9" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.9" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3 (28 samples, 0.48%)</title><rect x="1064.9" y="755.0" width="5.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1067.9" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.05%)</title><rect x="1070.6" y="755.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1073.6" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (43 samples, 0.74%)</title><rect x="1071.2" y="755.0" width="8.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1074.2" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.05%)</title><rect x="1072.8" y="739.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.8" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.07%)</title><rect x="1073.4" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.4" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (8 samples, 0.14%)</title><rect x="1074.2" y="739.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1077.2" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (12 samples, 0.21%)</title><rect x="1075.8" y="739.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.8" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.14%)</title><rect x="1078.3" y="739.0" width="1.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1081.3" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.10%)</title><rect x="1080.3" y="771.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1083.3" y="782.0"></text>
</g>
<g>
<title>recv (2 samples, 0.03%)</title><rect x="1081.5" y="771.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1084.5" y="782.0"></text>
</g>
<g>
<title>recv (296 samples, 5.09%)</title><rect x="1082.1" y="803.0" width="60.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1085.1" y="814.0">recv</text>
</g>
<g>
<title>[unknown] (270 samples, 4.64%)</title><rect x="1087.4" y="787.0" width="54.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1090.4" y="798.0">[unkn..</text>
</g>
<g>
<title>[unknown] (270 samples, 4.64%)</title><rect x="1087.4" y="771.0" width="54.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1090.4" y="782.0">[unkn..</text>
</g>
<g>
<title>[unknown] (247 samples, 4.24%)</title><rect x="1092.1" y="755.0" width="50.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1095.1" y="766.0">[unkn..</text>
</g>
<g>
<title>[unknown] (246 samples, 4.23%)</title><rect x="1092.3" y="739.0" width="49.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1095.3" y="750.0">[unkn..</text>
</g>
<g>
<title>[unknown] (240 samples, 4.12%)</title><rect x="1093.5" y="723.0" width="48.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1096.5" y="734.0">[unk..</text>
</g>
<g>
<title>[unknown] (235 samples, 4.04%)</title><rect x="1094.5" y="707.0" width="47.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1097.5" y="718.0">[unk..</text>
</g>
<g>
<title>[unknown] (227 samples, 3.90%)</title><rect x="1096.1" y="691.0" width="46.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1099.1" y="702.0">[unk..</text>
</g>
<g>
<title>[unknown] (196 samples, 3.37%)</title><rect x="1102.4" y="675.0" width="39.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1105.4" y="686.0">[un..</text>
</g>
<g>
<title>[unknown] (156 samples, 2.68%)</title><rect x="1110.5" y="659.0" width="31.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1113.5" y="670.0">[u..</text>
</g>
<g>
<title>[unknown] (103 samples, 1.77%)</title><rect x="1121.3" y="643.0" width="20.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1124.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (73 samples, 1.25%)</title><rect x="1127.3" y="627.0" width="14.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1130.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 0.76%)</title><rect x="1133.2" y="611.0" width="8.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1136.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.07%)</title><rect x="1141.3" y="595.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1144.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.5" y="579.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1144.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.5" y="563.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1144.5" y="574.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1141.5" y="547.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1144.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1141.7" y="531.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1144.7" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.03%)</title><rect x="1142.1" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1145.1" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.17%)</title><rect x="1142.5" y="851.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="1143.0" y="835.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1146.0" y="846.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.10%)</title><rect x="1143.4" y="835.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1146.4" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.07%)</title><rect x="1143.8" y="819.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1146.8" y="830.0"></text>
</g>
<g>
<title>start_thread (224 samples, 3.85%)</title><rect x="1144.6" y="883.0" width="45.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1147.6" y="894.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (224 samples, 3.85%)</title><rect x="1144.6" y="867.0" width="45.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1147.6" y="878.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (224 samples, 3.85%)</title><rect x="1144.6" y="851.0" width="45.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.6" y="862.0">Thre..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.07%)</title><rect x="1144.6" y="835.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.6" y="846.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (2 samples, 0.03%)</title><rect x="1144.6" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.6" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (2 samples, 0.03%)</title><rect x="1144.6" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.6" y="814.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (2 samples, 0.03%)</title><rect x="1144.6" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.6" y="798.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.03%)</title><rect x="1145.0" y="819.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.0" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (2 samples, 0.03%)</title><rect x="1145.0" y="803.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="814.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.03%)</title><rect x="1145.0" y="787.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.0" y="798.0"></text>
</g>
<g>
<title>GangWorker::loop() (173 samples, 2.97%)</title><rect x="1145.4" y="835.0" width="35.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.4" y="846.0">Gan..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (32 samples, 0.55%)</title><rect x="1145.4" y="819.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.4" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (32 samples, 0.55%)</title><rect x="1145.4" y="803.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.4" y="814.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (17 samples, 0.29%)</title><rect x="1145.4" y="787.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.4" y="798.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.241] (8 samples, 0.14%)</title><rect x="1145.8" y="771.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.8" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (6 samples, 0.10%)</title><rect x="1146.0" y="755.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.0" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (7 samples, 0.12%)</title><rect x="1147.4" y="771.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.4" y="782.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.241] (14 samples, 0.24%)</title><rect x="1148.8" y="787.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (11 samples, 0.19%)</title><rect x="1149.4" y="771.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.4" y="782.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (114 samples, 1.96%)</title><rect x="1152.3" y="819.0" width="23.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.3" y="830.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (95 samples, 1.63%)</title><rect x="1152.3" y="803.0" width="19.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.3" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (86 samples, 1.48%)</title><rect x="1152.5" y="787.0" width="17.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.5" y="798.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (60 samples, 1.03%)</title><rect x="1157.8" y="771.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.8" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (47 samples, 0.81%)</title><rect x="1159.2" y="755.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.2" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (10 samples, 0.17%)</title><rect x="1166.7" y="739.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="750.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (2 samples, 0.03%)</title><rect x="1167.3" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.3" y="734.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (5 samples, 0.09%)</title><rect x="1167.7" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.7" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.09%)</title><rect x="1168.7" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.7" y="766.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.05%)</title><rect x="1169.9" y="787.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="798.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.07%)</title><rect x="1170.5" y="787.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1173.5" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (13 samples, 0.22%)</title><rect x="1171.5" y="803.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.5" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (13 samples, 0.22%)</title><rect x="1171.5" y="787.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.5" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (13 samples, 0.22%)</title><rect x="1171.5" y="771.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (13 samples, 0.22%)</title><rect x="1171.5" y="755.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.5" y="766.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (13 samples, 0.22%)</title><rect x="1171.5" y="739.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.5" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (6 samples, 0.10%)</title><rect x="1171.7" y="723.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.7" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.07%)</title><rect x="1172.2" y="707.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.2" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (5 samples, 0.09%)</title><rect x="1173.0" y="723.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (4 samples, 0.07%)</title><rect x="1173.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (4 samples, 0.07%)</title><rect x="1173.0" y="691.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (2 samples, 0.03%)</title><rect x="1173.4" y="675.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.4" y="686.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (5 samples, 0.09%)</title><rect x="1174.2" y="803.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="814.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (5 samples, 0.09%)</title><rect x="1174.2" y="787.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.2" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (5 samples, 0.09%)</title><rect x="1174.2" y="771.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (5 samples, 0.09%)</title><rect x="1174.2" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.2" y="766.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (5 samples, 0.09%)</title><rect x="1174.2" y="739.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.2" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.05%)</title><rect x="1174.2" y="723.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.2" y="734.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.03%)</title><rect x="1174.4" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.03%)</title><rect x="1174.8" y="723.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="734.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (4 samples, 0.07%)</title><rect x="1175.4" y="819.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="830.0"></text>
</g>
<g>
<title>G1StringAndSymbolCleaningTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1175.8" y="803.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.8" y="814.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (2 samples, 0.03%)</title><rect x="1175.8" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="798.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (20 samples, 0.34%)</title><rect x="1176.2" y="819.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.2" y="830.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (20 samples, 0.34%)</title><rect x="1176.2" y="803.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.2" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (20 samples, 0.34%)</title><rect x="1176.2" y="787.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.2" y="798.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.07%)</title><rect x="1178.0" y="771.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.0" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (6 samples, 0.10%)</title><rect x="1179.0" y="771.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (40 samples, 0.69%)</title><rect x="1180.5" y="835.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (40 samples, 0.69%)</title><rect x="1180.5" y="819.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.5" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (40 samples, 0.69%)</title><rect x="1180.5" y="803.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (40 samples, 0.69%)</title><rect x="1180.5" y="787.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="798.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (40 samples, 0.69%)</title><rect x="1180.5" y="771.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="782.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (40 samples, 0.69%)</title><rect x="1180.5" y="755.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="766.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (23 samples, 0.40%)</title><rect x="1180.5" y="739.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.05%)</title><rect x="1180.9" y="723.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.05%)</title><rect x="1180.9" y="707.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.03%)</title><rect x="1181.1" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (17 samples, 0.29%)</title><rect x="1181.7" y="723.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.03%)</title><rect x="1181.7" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.03%)</title><rect x="1182.3" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.05%)</title><rect x="1183.1" y="707.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.03%)</title><rect x="1183.7" y="707.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1183.7" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.07%)</title><rect x="1184.1" y="707.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.05%)</title><rect x="1184.3" y="691.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 0.21%)</title><rect x="1185.1" y="739.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (5 samples, 0.09%)</title><rect x="1185.5" y="723.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1185.7" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.03%)</title><rect x="1185.7" y="691.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.7" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.07%)</title><rect x="1186.6" y="723.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.05%)</title><rect x="1186.8" y="707.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1187.6" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1187.6" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1187.6" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1187.6" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.09%)</title><rect x="1187.6" y="675.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="1187.6" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1188.0" y="643.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1188.0" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1188.0" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1188.0" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1188.0" y="579.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1188.0" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.0" y="574.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.03%)</title><rect x="1188.6" y="835.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.6" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.03%)</title><rect x="1188.6" y="819.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.03%)</title><rect x="1188.6" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.6" y="814.0"></text>
</g>
<g>
<title>WatcherThread::run() (5 samples, 0.09%)</title><rect x="1189.0" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (3 samples, 0.05%)</title><rect x="1189.0" y="819.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (2 samples, 0.03%)</title><rect x="1189.6" y="819.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.6" y="830.0"></text>
</g>
</g>
</svg>
