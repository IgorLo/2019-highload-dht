<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (22,333 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (58 samples, 0.26%)</title><rect x="10.4" y="867.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.4" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (56 samples, 0.25%)</title><rect x="10.5" y="851.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (53 samples, 0.24%)</title><rect x="10.6" y="835.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (46 samples, 0.21%)</title><rect x="10.7" y="819.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="830.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (39 samples, 0.17%)</title><rect x="11.0" y="803.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.0" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (37 samples, 0.17%)</title><rect x="11.0" y="787.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (20 samples, 0.09%)</title><rect x="11.3" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (19 samples, 0.09%)</title><rect x="11.4" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.4" y="766.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (7 samples, 0.03%)</title><rect x="11.4" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.4" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (7 samples, 0.03%)</title><rect x="11.4" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.4" y="734.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (12 samples, 0.05%)</title><rect x="11.7" y="739.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.7" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (8 samples, 0.04%)</title><rect x="11.8" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.8" y="734.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (7 samples, 0.03%)</title><rect x="11.8" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.8" y="718.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (5 samples, 0.02%)</title><rect x="12.0" y="691.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.0" y="702.0"></text>
</g>
<g>
<title>[not_walkable_Java] (9 samples, 0.04%)</title><rect x="13.6" y="867.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.02%)</title><rect x="14.1" y="867.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="17.1" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (259 samples, 1.16%)</title><rect x="14.3" y="867.0" width="13.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="17.3" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (23 samples, 0.10%)</title><rect x="26.8" y="851.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="29.8" y="862.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (21,798 samples, 97.60%)</title><rect x="28.2" y="867.0" width="1151.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.2" y="878.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (21,798 samples, 97.60%)</title><rect x="28.2" y="851.0" width="1151.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.2" y="862.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (21,798 samples, 97.60%)</title><rect x="28.2" y="835.0" width="1151.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.2" y="846.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (21,797 samples, 97.60%)</title><rect x="28.2" y="819.0" width="1151.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.2" y="830.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (21,797 samples, 97.60%)</title><rect x="28.2" y="803.0" width="1151.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.2" y="814.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (21,797 samples, 97.60%)</title><rect x="28.2" y="787.0" width="1151.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.2" y="798.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler2_entities.handleRequest (21,797 samples, 97.60%)</title><rect x="28.2" y="771.0" width="1151.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.2" y="782.0">RequestHandler2_entities.handleRequest</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/AsyncService.entities (21,797 samples, 97.60%)</title><rect x="28.2" y="755.0" width="1151.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.2" y="766.0">ru/mail/polis/service/igorlo/AsyncService.entities</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.range (1,402 samples, 6.28%)</title><rect x="28.3" y="739.0" width="74.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.3" y="750.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.until (246 samples, 1.10%)</title><rect x="28.3" y="723.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.&lt;init&gt; (246 samples, 1.10%)</title><rect x="28.3" y="707.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.3" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (246 samples, 1.10%)</title><rect x="28.3" y="691.0" width="13.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.3" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (246 samples, 1.10%)</title><rect x="28.3" y="675.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.3" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (246 samples, 1.10%)</title><rect x="28.3" y="659.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.3" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (246 samples, 1.10%)</title><rect x="28.3" y="643.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (243 samples, 1.09%)</title><rect x="28.5" y="627.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.5" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (211 samples, 0.94%)</title><rect x="28.8" y="611.0" width="11.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.8" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (8 samples, 0.04%)</title><rect x="29.4" y="595.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.4" y="606.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (47 samples, 0.21%)</title><rect x="29.9" y="595.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.9" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (47 samples, 0.21%)</title><rect x="29.9" y="579.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.9" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (42 samples, 0.19%)</title><rect x="30.1" y="563.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (35 samples, 0.16%)</title><rect x="30.5" y="547.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.5" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (34 samples, 0.15%)</title><rect x="30.6" y="531.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.6" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (32 samples, 0.14%)</title><rect x="30.7" y="515.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (32 samples, 0.14%)</title><rect x="30.7" y="499.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.7" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (32 samples, 0.14%)</title><rect x="30.7" y="483.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.7" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (32 samples, 0.14%)</title><rect x="30.7" y="467.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="33.7" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (30 samples, 0.13%)</title><rect x="30.8" y="451.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.8" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (30 samples, 0.13%)</title><rect x="30.8" y="435.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.8" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (30 samples, 0.13%)</title><rect x="30.8" y="419.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.8" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (29 samples, 0.13%)</title><rect x="30.8" y="403.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.04%)</title><rect x="30.8" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.04%)</title><rect x="30.8" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.8" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.03%)</title><rect x="30.9" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (21 samples, 0.09%)</title><rect x="31.2" y="387.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (20 samples, 0.09%)</title><rect x="31.3" y="371.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.3" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.04%)</title><rect x="31.3" y="355.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="34.3" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.04%)</title><rect x="31.3" y="339.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.3" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (12 samples, 0.05%)</title><rect x="31.7" y="355.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.7" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (9 samples, 0.04%)</title><rect x="31.9" y="339.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.04%)</title><rect x="31.9" y="323.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.04%)</title><rect x="31.9" y="307.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="34.9" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (144 samples, 0.64%)</title><rect x="32.3" y="595.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.3" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (142 samples, 0.64%)</title><rect x="32.5" y="579.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.5" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (138 samples, 0.62%)</title><rect x="32.7" y="563.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (138 samples, 0.62%)</title><rect x="32.7" y="547.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.7" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (137 samples, 0.61%)</title><rect x="32.7" y="531.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (137 samples, 0.61%)</title><rect x="32.7" y="515.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.7" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (95 samples, 0.43%)</title><rect x="32.7" y="499.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (93 samples, 0.42%)</title><rect x="32.8" y="483.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (92 samples, 0.41%)</title><rect x="32.9" y="467.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (91 samples, 0.41%)</title><rect x="32.9" y="451.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (61 samples, 0.27%)</title><rect x="33.0" y="435.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.0" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (37 samples, 0.17%)</title><rect x="33.0" y="419.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.0" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (37 samples, 0.17%)</title><rect x="33.0" y="403.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.0" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (33 samples, 0.15%)</title><rect x="33.2" y="387.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.2" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (33 samples, 0.15%)</title><rect x="33.2" y="371.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.2" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (20 samples, 0.09%)</title><rect x="33.9" y="355.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.07%)</title><rect x="34.2" y="339.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="37.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.07%)</title><rect x="34.2" y="323.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.2" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.07%)</title><rect x="34.2" y="307.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.03%)</title><rect x="34.4" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="37.4" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.03%)</title><rect x="34.7" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (23 samples, 0.10%)</title><rect x="35.0" y="419.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.0" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (14 samples, 0.06%)</title><rect x="35.5" y="403.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.5" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (14 samples, 0.06%)</title><rect x="35.5" y="387.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.5" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.05%)</title><rect x="35.6" y="371.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.05%)</title><rect x="35.6" y="355.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="38.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.04%)</title><rect x="35.7" y="339.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="38.7" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.04%)</title><rect x="35.7" y="323.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.7" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.03%)</title><rect x="35.8" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="38.8" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.03%)</title><rect x="35.8" y="291.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="38.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (17 samples, 0.08%)</title><rect x="36.2" y="435.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.2" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (8 samples, 0.04%)</title><rect x="36.6" y="419.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.6" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.02%)</title><rect x="36.7" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.7" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.02%)</title><rect x="36.7" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.7" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.02%)</title><rect x="36.7" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.02%)</title><rect x="36.7" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.02%)</title><rect x="36.7" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (7 samples, 0.03%)</title><rect x="37.1" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.03%)</title><rect x="37.1" y="419.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.03%)</title><rect x="37.1" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.1" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.03%)</title><rect x="37.1" y="387.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.1" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.03%)</title><rect x="37.2" y="371.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.2" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.03%)</title><rect x="37.2" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.02%)</title><rect x="37.2" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (5 samples, 0.02%)</title><rect x="37.5" y="435.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (42 samples, 0.19%)</title><rect x="37.7" y="499.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (41 samples, 0.18%)</title><rect x="37.8" y="483.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.8" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (41 samples, 0.18%)</title><rect x="37.8" y="467.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.8" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (41 samples, 0.18%)</title><rect x="37.8" y="451.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.8" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (38 samples, 0.17%)</title><rect x="38.0" y="435.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.0" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (38 samples, 0.17%)</title><rect x="38.0" y="419.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.0" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (37 samples, 0.17%)</title><rect x="38.0" y="403.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.0" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (35 samples, 0.16%)</title><rect x="38.1" y="387.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.05%)</title><rect x="38.1" y="371.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.05%)</title><rect x="38.1" y="355.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.1" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.04%)</title><rect x="38.1" y="339.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (5 samples, 0.02%)</title><rect x="38.3" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="41.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (24 samples, 0.11%)</title><rect x="38.7" y="371.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (24 samples, 0.11%)</title><rect x="38.7" y="355.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (19 samples, 0.09%)</title><rect x="38.7" y="339.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (19 samples, 0.09%)</title><rect x="38.7" y="323.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.04%)</title><rect x="39.2" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.04%)</title><rect x="39.2" y="291.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.03%)</title><rect x="39.3" y="275.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.03%)</title><rect x="39.3" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.03%)</title><rect x="39.3" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.3" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.02%)</title><rect x="39.7" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (5 samples, 0.02%)</title><rect x="39.7" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.7" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.02%)</title><rect x="39.7" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.02%)</title><rect x="39.7" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (22 samples, 0.10%)</title><rect x="40.2" y="611.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (22 samples, 0.10%)</title><rect x="40.2" y="595.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.2" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (21 samples, 0.09%)</title><rect x="40.2" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.2" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (21 samples, 0.09%)</title><rect x="40.2" y="563.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.2" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (21 samples, 0.09%)</title><rect x="40.2" y="547.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.2" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (21 samples, 0.09%)</title><rect x="40.2" y="531.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.2" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (21 samples, 0.09%)</title><rect x="40.2" y="515.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.2" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 0.09%)</title><rect x="40.2" y="499.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.2" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (20 samples, 0.09%)</title><rect x="40.2" y="483.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.2" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.07%)</title><rect x="40.5" y="467.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.iterator (1,155 samples, 5.17%)</title><rect x="41.3" y="723.0" width="61.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.3" y="734.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.rowsIterator (1,155 samples, 5.17%)</title><rect x="41.3" y="707.0" width="61.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.3" y="718.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.combineTables (6 samples, 0.03%)</title><rect x="41.3" y="691.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table.transformRows (1,149 samples, 5.14%)</title><rect x="41.6" y="691.0" width="60.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.6" y="702.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (1,149 samples, 5.14%)</title><rect x="41.6" y="675.0" width="60.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.6" y="686.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1,149 samples, 5.14%)</title><rect x="41.6" y="659.0" width="60.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.6" y="670.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1,149 samples, 5.14%)</title><rect x="41.6" y="643.0" width="60.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.6" y="654.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1,149 samples, 5.14%)</title><rect x="41.6" y="627.0" width="60.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="44.6" y="638.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1,147 samples, 5.14%)</title><rect x="41.8" y="611.0" width="60.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.8" y="622.0">com/go..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,103 samples, 4.94%)</title><rect x="43.8" y="595.0" width="58.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.8" y="606.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (5 samples, 0.02%)</title><rect x="46.5" y="579.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="49.5" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (777 samples, 3.48%)</title><rect x="46.7" y="579.0" width="41.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.7" y="590.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (38 samples, 0.17%)</title><rect x="53.9" y="563.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.9" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (391 samples, 1.75%)</title><rect x="55.9" y="563.0" width="20.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (18 samples, 0.08%)</title><rect x="60.9" y="547.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.9" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (5 samples, 0.02%)</title><rect x="62.0" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (252 samples, 1.13%)</title><rect x="62.3" y="547.0" width="13.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (244 samples, 1.09%)</title><rect x="62.7" y="531.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (195 samples, 0.87%)</title><rect x="65.1" y="515.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooHigh (6 samples, 0.03%)</title><rect x="75.1" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.1" y="510.0"></text>
</g>
<g>
<title>vtable stub (18 samples, 0.08%)</title><rect x="75.6" y="547.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="78.6" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (33 samples, 0.15%)</title><rect x="76.5" y="563.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.5" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (27 samples, 0.12%)</title><rect x="76.8" y="547.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.8" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (5 samples, 0.02%)</title><rect x="78.0" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.0" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.02%)</title><rect x="78.0" y="515.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.0" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.02%)</title><rect x="78.0" y="499.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.0" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (5 samples, 0.02%)</title><rect x="78.0" y="483.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="81.0" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (180 samples, 0.81%)</title><rect x="78.3" y="563.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.3" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (180 samples, 0.81%)</title><rect x="78.3" y="547.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="81.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.05%)</title><rect x="80.7" y="531.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.7" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (59 samples, 0.26%)</title><rect x="81.3" y="531.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.3" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 0.06%)</title><rect x="83.7" y="515.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="86.7" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (59 samples, 0.26%)</title><rect x="84.4" y="531.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.4" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (18 samples, 0.08%)</title><rect x="86.6" y="515.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.6" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (15 samples, 0.07%)</title><rect x="86.8" y="499.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="89.8" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (15 samples, 0.07%)</title><rect x="86.8" y="483.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.8" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (15 samples, 0.07%)</title><rect x="86.8" y="467.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.8" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (15 samples, 0.07%)</title><rect x="86.8" y="451.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.8" y="462.0"></text>
</g>
<g>
<title>itable stub (29 samples, 0.13%)</title><rect x="87.8" y="579.0" width="1.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="90.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (109 samples, 0.49%)</title><rect x="89.3" y="579.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.3" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (109 samples, 0.49%)</title><rect x="89.3" y="563.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.3" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (5 samples, 0.02%)</title><rect x="91.6" y="547.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.6" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (50 samples, 0.22%)</title><rect x="91.9" y="547.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.9" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (10 samples, 0.04%)</title><rect x="94.0" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.0" y="542.0"></text>
</g>
<g>
<title>vtable stub (10 samples, 0.04%)</title><rect x="94.5" y="547.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="97.5" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (12 samples, 0.05%)</title><rect x="95.1" y="579.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.hasNext (13 samples, 0.06%)</title><rect x="95.7" y="579.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (108 samples, 0.48%)</title><rect x="96.4" y="579.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (103 samples, 0.46%)</title><rect x="96.7" y="563.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.7" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (75 samples, 0.34%)</title><rect x="97.3" y="547.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.3" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (73 samples, 0.33%)</title><rect x="97.4" y="531.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.4" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (9 samples, 0.04%)</title><rect x="97.7" y="515.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.7" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (59 samples, 0.26%)</title><rect x="98.1" y="515.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="101.1" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (59 samples, 0.26%)</title><rect x="98.1" y="499.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.1" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (56 samples, 0.25%)</title><rect x="98.3" y="483.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.3" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (53 samples, 0.24%)</title><rect x="98.4" y="467.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (52 samples, 0.23%)</title><rect x="98.5" y="451.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.5" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (19 samples, 0.09%)</title><rect x="99.9" y="435.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (7 samples, 0.03%)</title><rect x="100.9" y="435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.9" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (13 samples, 0.06%)</title><rect x="101.2" y="547.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (13 samples, 0.06%)</title><rect x="101.2" y="531.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="104.2" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.06%)</title><rect x="101.2" y="515.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="104.2" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.04%)</title><rect x="101.5" y="499.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$71/822101732.apply (5 samples, 0.02%)</title><rect x="102.1" y="595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.stream (20,394 samples, 91.32%)</title><rect x="102.4" y="739.0" width="1077.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.4" y="750.0">ru/mail/polis/service/igorlo/StorageSession.stream</text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.next (20,390 samples, 91.30%)</title><rect x="102.6" y="723.0" width="1077.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.6" y="734.0">ru/mail/polis/service/igorlo/StorageSession.next</text>
</g>
<g>
<title>one/nio/net/Session.write (15,310 samples, 68.55%)</title><rect x="104.0" y="707.0" width="809.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.0" y="718.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.&lt;init&gt; (10 samples, 0.04%)</title><rect x="106.5" y="691.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.5" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15,253 samples, 68.30%)</title><rect x="107.1" y="691.0" width="805.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.1" y="702.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (168 samples, 0.75%)</title><rect x="112.1" y="675.0" width="8.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="115.1" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14,855 samples, 66.52%)</title><rect x="121.1" y="675.0" width="784.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.1" y="686.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (14,761 samples, 66.10%)</title><rect x="126.0" y="659.0" width="780.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.0" y="670.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (23 samples, 0.10%)</title><rect x="139.2" y="643.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="142.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (656 samples, 2.94%)</title><rect x="140.5" y="643.0" width="34.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="143.5" y="654.0">[u..</text>
</g>
<g>
<title>[unknown] (656 samples, 2.94%)</title><rect x="140.5" y="627.0" width="34.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="143.5" y="638.0">[u..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (542 samples, 2.43%)</title><rect x="140.5" y="611.0" width="28.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="143.5" y="622.0">Ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (41 samples, 0.18%)</title><rect x="145.6" y="595.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="148.6" y="606.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (19 samples, 0.09%)</title><rect x="147.7" y="595.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="150.7" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (5 samples, 0.02%)</title><rect x="148.7" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="151.7" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (23 samples, 0.10%)</title><rect x="149.0" y="595.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="152.0" y="606.0"></text>
</g>
<g>
<title>__memmove_ssse3 (94 samples, 0.42%)</title><rect x="150.2" y="595.0" width="5.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="153.2" y="606.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (232 samples, 1.04%)</title><rect x="155.4" y="595.0" width="12.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="158.4" y="606.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (14 samples, 0.06%)</title><rect x="158.0" y="579.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="161.0" y="590.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (30 samples, 0.13%)</title><rect x="158.8" y="579.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="161.8" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (32 samples, 0.14%)</title><rect x="160.4" y="579.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="163.4" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (49 samples, 0.22%)</title><rect x="162.1" y="579.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="165.1" y="590.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (55 samples, 0.25%)</title><rect x="164.7" y="579.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="167.7" y="590.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (28 samples, 0.13%)</title><rect x="167.6" y="595.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="170.6" y="606.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (19 samples, 0.09%)</title><rect x="169.1" y="611.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="172.1" y="622.0"></text>
</g>
<g>
<title>__send (67 samples, 0.30%)</title><rect x="170.1" y="611.0" width="3.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="173.1" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (25 samples, 0.11%)</title><rect x="173.8" y="611.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="176.8" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (29 samples, 0.13%)</title><rect x="175.1" y="643.0" width="1.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="178.1" y="654.0"></text>
</g>
<g>
<title>__send (13,803 samples, 61.81%)</title><rect x="176.6" y="643.0" width="729.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="179.6" y="654.0">__send</text>
</g>
<g>
<title>[unknown] (13,576 samples, 60.79%)</title><rect x="188.6" y="627.0" width="717.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="191.6" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (13,576 samples, 60.79%)</title><rect x="188.6" y="611.0" width="717.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="191.6" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (13,290 samples, 59.51%)</title><rect x="203.8" y="595.0" width="702.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="206.8" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (13,262 samples, 59.38%)</title><rect x="205.2" y="579.0" width="700.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="208.2" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (13,149 samples, 58.88%)</title><rect x="211.2" y="563.0" width="694.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="214.2" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (13,030 samples, 58.34%)</title><rect x="217.5" y="547.0" width="688.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="220.5" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (12,898 samples, 57.75%)</title><rect x="224.5" y="531.0" width="681.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="227.5" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (12,785 samples, 57.25%)</title><rect x="230.4" y="515.0" width="675.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="233.4" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (12,111 samples, 54.23%)</title><rect x="266.0" y="499.0" width="640.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="269.0" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (11,566 samples, 51.79%)</title><rect x="294.8" y="483.0" width="611.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="297.8" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (10,802 samples, 48.37%)</title><rect x="335.2" y="467.0" width="570.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="338.2" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (10,075 samples, 45.11%)</title><rect x="373.6" y="451.0" width="532.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="376.6" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (9,283 samples, 41.57%)</title><rect x="415.5" y="435.0" width="490.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="418.5" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (8,817 samples, 39.48%)</title><rect x="440.1" y="419.0" width="465.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="443.1" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (8,406 samples, 37.64%)</title><rect x="461.8" y="403.0" width="444.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="464.8" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (8,035 samples, 35.98%)</title><rect x="481.4" y="387.0" width="424.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="484.4" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (7,662 samples, 34.31%)</title><rect x="501.1" y="371.0" width="404.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="504.1" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (7,191 samples, 32.20%)</title><rect x="526.0" y="355.0" width="380.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="529.0" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (6,783 samples, 30.37%)</title><rect x="547.6" y="339.0" width="358.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="550.6" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (6,222 samples, 27.86%)</title><rect x="577.2" y="323.0" width="328.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="580.2" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (5,191 samples, 23.24%)</title><rect x="631.7" y="307.0" width="274.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="634.7" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4,713 samples, 21.10%)</title><rect x="656.9" y="291.0" width="249.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="659.9" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4,436 samples, 19.86%)</title><rect x="671.6" y="275.0" width="234.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="674.6" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4,186 samples, 18.74%)</title><rect x="684.8" y="259.0" width="221.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="687.8" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,988 samples, 17.86%)</title><rect x="695.2" y="243.0" width="210.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="698.2" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,870 samples, 17.33%)</title><rect x="701.5" y="227.0" width="204.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="704.5" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,811 samples, 17.06%)</title><rect x="704.6" y="211.0" width="201.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="707.6" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,609 samples, 16.16%)</title><rect x="715.3" y="195.0" width="190.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="718.3" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,348 samples, 14.99%)</title><rect x="729.1" y="179.0" width="176.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="732.1" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,234 samples, 14.48%)</title><rect x="735.1" y="163.0" width="170.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="738.1" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,137 samples, 14.05%)</title><rect x="740.2" y="147.0" width="165.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="743.2" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,024 samples, 13.54%)</title><rect x="746.2" y="131.0" width="159.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="749.2" y="142.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,612 samples, 11.70%)</title><rect x="767.9" y="115.0" width="138.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="770.9" y="126.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,170 samples, 9.72%)</title><rect x="791.3" y="99.0" width="114.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="794.3" y="110.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,907 samples, 8.54%)</title><rect x="805.2" y="83.0" width="100.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="808.2" y="94.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,612 samples, 7.22%)</title><rect x="820.8" y="67.0" width="85.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="823.8" y="78.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,527 samples, 6.84%)</title><rect x="825.3" y="51.0" width="80.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="828.3" y="62.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,468 samples, 6.57%)</title><rect x="828.4" y="35.0" width="77.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="831.4" y="46.0">[unknown]</text>
</g>
<g>
<title>os::javaTimeMillis() (133 samples, 0.60%)</title><rect x="906.0" y="675.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="909.0" y="686.0"></text>
</g>
<g>
<title>[vdso] (27 samples, 0.12%)</title><rect x="906.2" y="659.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="909.2" y="670.0"></text>
</g>
<g>
<title>gettimeofday (101 samples, 0.45%)</title><rect x="907.6" y="659.0" width="5.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="910.6" y="670.0"></text>
</g>
<g>
<title>[vdso] (79 samples, 0.35%)</title><rect x="908.8" y="643.0" width="4.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="911.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession$Chunks.hasNext (216 samples, 0.97%)</title><rect x="913.0" y="707.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="916.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.hasNext (153 samples, 0.69%)</title><rect x="916.3" y="691.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="919.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.compareTo (121 samples, 0.54%)</title><rect x="918.0" y="675.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="921.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.compareTo (112 samples, 0.50%)</title><rect x="918.5" y="659.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (111 samples, 0.50%)</title><rect x="918.5" y="643.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.5" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (80 samples, 0.36%)</title><rect x="920.1" y="627.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="923.1" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (11 samples, 0.05%)</title><rect x="923.2" y="611.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="926.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (8 samples, 0.04%)</title><rect x="923.3" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="926.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.04%)</title><rect x="923.8" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="926.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession$Chunks.next (4,836 samples, 21.65%)</title><rect x="924.4" y="707.0" width="255.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="927.4" y="718.0">ru/mail/polis/service/igorlo/Stora..</text>
</g>
<g>
<title>java/lang/Integer.toHexString (7 samples, 0.03%)</title><rect x="924.7" y="691.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="927.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.toUnsignedString0 (7 samples, 0.03%)</title><rect x="924.7" y="675.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="927.7" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (308 samples, 1.38%)</title><rect x="925.5" y="691.0" width="16.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="928.5" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (34 samples, 0.15%)</title><rect x="926.0" y="675.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="929.0" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (34 samples, 0.15%)</title><rect x="926.0" y="659.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="929.0" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (17 samples, 0.08%)</title><rect x="926.9" y="643.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="929.9" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (17 samples, 0.08%)</title><rect x="926.9" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="929.9" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (15 samples, 0.07%)</title><rect x="927.0" y="611.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="930.0" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.06%)</title><rect x="927.1" y="595.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="930.1" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.06%)</title><rect x="927.1" y="579.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.1" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (14 samples, 0.06%)</title><rect x="927.1" y="563.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="930.1" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.06%)</title><rect x="927.1" y="547.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="930.1" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (264 samples, 1.18%)</title><rect x="927.8" y="675.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.8" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (264 samples, 1.18%)</title><rect x="927.8" y="659.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="930.8" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (261 samples, 1.17%)</title><rect x="928.0" y="643.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="931.0" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (261 samples, 1.17%)</title><rect x="928.0" y="627.0" width="13.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="931.0" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (260 samples, 1.16%)</title><rect x="928.0" y="611.0" width="13.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="931.0" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (244 samples, 1.09%)</title><rect x="928.9" y="595.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.9" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (39 samples, 0.17%)</title><rect x="938.8" y="579.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="941.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (28 samples, 0.13%)</title><rect x="939.3" y="563.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="942.3" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (25 samples, 0.11%)</title><rect x="939.5" y="547.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="942.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.05%)</title><rect x="940.8" y="579.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="943.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.02%)</title><rect x="941.1" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="944.1" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.02%)</title><rect x="941.1" y="547.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="944.1" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.03%)</title><rect x="941.4" y="579.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="944.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (249 samples, 1.11%)</title><rect x="941.8" y="691.0" width="13.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="944.8" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (62 samples, 0.28%)</title><rect x="941.8" y="675.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="944.8" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (62 samples, 0.28%)</title><rect x="941.8" y="659.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="944.8" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (56 samples, 0.25%)</title><rect x="942.1" y="643.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="945.1" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (54 samples, 0.24%)</title><rect x="942.2" y="627.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="945.2" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (54 samples, 0.24%)</title><rect x="942.2" y="611.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="945.2" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (54 samples, 0.24%)</title><rect x="942.2" y="595.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="945.2" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (28 samples, 0.13%)</title><rect x="943.6" y="579.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="946.6" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (28 samples, 0.13%)</title><rect x="943.6" y="563.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="946.6" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (11 samples, 0.05%)</title><rect x="944.5" y="547.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="947.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (186 samples, 0.83%)</title><rect x="945.1" y="675.0" width="9.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="948.1" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (186 samples, 0.83%)</title><rect x="945.1" y="659.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="948.1" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (17 samples, 0.08%)</title><rect x="945.3" y="643.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="948.3" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (13 samples, 0.06%)</title><rect x="945.5" y="627.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="948.5" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.04%)</title><rect x="946.2" y="643.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.2" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (146 samples, 0.65%)</title><rect x="946.7" y="643.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.7" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (145 samples, 0.65%)</title><rect x="946.7" y="627.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="949.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (118 samples, 0.53%)</title><rect x="946.8" y="611.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="949.8" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (96 samples, 0.43%)</title><rect x="948.0" y="595.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="951.0" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (25 samples, 0.11%)</title><rect x="948.4" y="579.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="951.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (25 samples, 0.11%)</title><rect x="948.4" y="563.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="951.4" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.05%)</title><rect x="949.1" y="547.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="952.1" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (21 samples, 0.09%)</title><rect x="949.7" y="579.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="952.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (15 samples, 0.07%)</title><rect x="950.0" y="563.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="953.0" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (43 samples, 0.19%)</title><rect x="950.8" y="579.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="953.8" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (25 samples, 0.11%)</title><rect x="953.1" y="611.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="956.1" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9 samples, 0.04%)</title><rect x="954.5" y="643.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="957.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (4,198 samples, 18.80%)</title><rect x="954.9" y="691.0" width="221.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="957.9" y="702.0">ru/mail/polis/dao/Iters$Until..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$UntilIterator.next (4,197 samples, 18.79%)</title><rect x="955.0" y="675.0" width="221.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="958.0" y="686.0">ru/mail/polis/dao/Iters$Until..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3,775 samples, 16.90%)</title><rect x="957.1" y="659.0" width="199.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="960.1" y="670.0">com/google/common/collect/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3,775 samples, 16.90%)</title><rect x="957.1" y="643.0" width="199.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="960.1" y="654.0">com/google/common/collect/..</text>
</g>
<g>
<title>com/google/common/base/Preconditions.checkState (11 samples, 0.05%)</title><rect x="957.2" y="627.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="960.2" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3,763 samples, 16.85%)</title><rect x="957.8" y="627.0" width="198.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="960.8" y="638.0">com/google/common/collect/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3,652 samples, 16.35%)</title><rect x="963.0" y="611.0" width="193.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="966.0" y="622.0">com/google/common/collect..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.endOfData (30 samples, 0.13%)</title><rect x="967.3" y="595.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="970.3" y="606.0"></text>
</g>
<g>
<title>jbyte_arraycopy (23 samples, 0.10%)</title><rect x="968.9" y="595.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="971.9" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (31 samples, 0.14%)</title><rect x="970.1" y="595.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="973.1" y="606.0"></text>
</g>
<g>
<title>jshort_arraycopy (6 samples, 0.03%)</title><rect x="972.2" y="595.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="975.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,433 samples, 15.37%)</title><rect x="972.6" y="595.0" width="181.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="975.6" y="606.0">ru/mail/polis/dao/Iters..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,894 samples, 12.96%)</title><rect x="975.7" y="579.0" width="152.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="978.7" y="590.0">com/google/common/c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (37 samples, 0.17%)</title><rect x="979.2" y="563.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="982.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.hasNext (31 samples, 0.14%)</title><rect x="979.6" y="547.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="982.6" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (131 samples, 0.59%)</title><rect x="981.2" y="563.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="984.2" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (40 samples, 0.18%)</title><rect x="983.3" y="547.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="986.3" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (27 samples, 0.12%)</title><rect x="985.4" y="547.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="988.4" y="558.0"></text>
</g>
<g>
<title>vtable stub (24 samples, 0.11%)</title><rect x="986.8" y="547.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="989.8" y="558.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (35 samples, 0.16%)</title><rect x="988.1" y="563.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="991.1" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,156 samples, 5.18%)</title><rect x="990.0" y="563.0" width="61.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="993.0" y="574.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,152 samples, 5.16%)</title><rect x="990.2" y="547.0" width="60.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="993.2" y="558.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,110 samples, 4.97%)</title><rect x="992.4" y="531.0" width="58.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="995.4" y="542.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,041 samples, 4.66%)</title><rect x="995.2" y="515.0" width="55.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="998.2" y="526.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,009 samples, 4.52%)</title><rect x="996.9" y="499.0" width="53.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="999.9" y="510.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (70 samples, 0.31%)</title><rect x="997.5" y="483.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1000.5" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (14 samples, 0.06%)</title><rect x="1000.5" y="467.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1003.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (927 samples, 4.15%)</title><rect x="1001.2" y="483.0" width="49.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1004.2" y="494.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (906 samples, 4.06%)</title><rect x="1002.3" y="467.0" width="47.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1005.3" y="478.0">ru/m..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (906 samples, 4.06%)</title><rect x="1002.3" y="451.0" width="47.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1005.3" y="462.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (899 samples, 4.03%)</title><rect x="1002.7" y="435.0" width="47.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1005.7" y="446.0">java..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (35 samples, 0.16%)</title><rect x="1002.7" y="419.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1005.7" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (35 samples, 0.16%)</title><rect x="1002.7" y="403.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1005.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (31 samples, 0.14%)</title><rect x="1002.9" y="387.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1005.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (31 samples, 0.14%)</title><rect x="1002.9" y="371.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1005.9" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (24 samples, 0.11%)</title><rect x="1003.2" y="355.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1006.2" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (24 samples, 0.11%)</title><rect x="1003.2" y="339.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1006.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.04%)</title><rect x="1004.0" y="323.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1007.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.04%)</title><rect x="1004.0" y="307.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1007.0" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.03%)</title><rect x="1004.1" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1007.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (864 samples, 3.87%)</title><rect x="1004.5" y="419.0" width="45.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1007.5" y="430.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (864 samples, 3.87%)</title><rect x="1004.5" y="403.0" width="45.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1007.5" y="414.0">java..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (860 samples, 3.85%)</title><rect x="1004.8" y="387.0" width="45.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1007.8" y="398.0">java..</text>
</g>
<g>
<title>itable stub (56 samples, 0.25%)</title><rect x="1006.7" y="371.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1009.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (767 samples, 3.43%)</title><rect x="1009.7" y="371.0" width="40.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1012.7" y="382.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (323 samples, 1.45%)</title><rect x="1011.7" y="355.0" width="17.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1014.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (323 samples, 1.45%)</title><rect x="1011.7" y="339.0" width="17.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1014.7" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (203 samples, 0.91%)</title><rect x="1013.9" y="323.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1016.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (59 samples, 0.26%)</title><rect x="1017.4" y="307.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1020.4" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (24 samples, 0.11%)</title><rect x="1017.4" y="291.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1020.4" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (35 samples, 0.16%)</title><rect x="1018.7" y="291.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1021.7" y="302.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (76 samples, 0.34%)</title><rect x="1020.6" y="307.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1023.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (9 samples, 0.04%)</title><rect x="1024.6" y="323.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1027.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (24 samples, 0.11%)</title><rect x="1025.1" y="323.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1028.1" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (22 samples, 0.10%)</title><rect x="1025.1" y="307.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1028.1" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (45 samples, 0.20%)</title><rect x="1026.4" y="323.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (401 samples, 1.80%)</title><rect x="1028.7" y="355.0" width="21.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1031.7" y="366.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (393 samples, 1.76%)</title><rect x="1029.2" y="339.0" width="20.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (256 samples, 1.15%)</title><rect x="1030.0" y="323.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1033.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (255 samples, 1.14%)</title><rect x="1030.1" y="307.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1033.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (99 samples, 0.44%)</title><rect x="1031.4" y="291.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1034.4" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (112 samples, 0.50%)</title><rect x="1036.7" y="291.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (88 samples, 0.39%)</title><rect x="1037.9" y="275.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1040.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (55 samples, 0.25%)</title><rect x="1039.7" y="259.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (38 samples, 0.17%)</title><rect x="1040.6" y="243.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1043.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (38 samples, 0.17%)</title><rect x="1040.6" y="227.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (19 samples, 0.09%)</title><rect x="1041.6" y="211.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1044.6" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.02%)</title><rect x="1041.9" y="195.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1044.9" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.02%)</title><rect x="1041.9" y="179.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1044.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.02%)</title><rect x="1041.9" y="163.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1044.9" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.02%)</title><rect x="1041.9" y="147.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1044.9" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.04%)</title><rect x="1042.2" y="195.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1045.2" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.04%)</title><rect x="1042.2" y="179.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1045.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.04%)</title><rect x="1042.2" y="163.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1045.2" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.04%)</title><rect x="1042.2" y="147.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1045.2" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (18 samples, 0.08%)</title><rect x="1042.6" y="291.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1045.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (121 samples, 0.54%)</title><rect x="1043.5" y="323.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1046.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (86 samples, 0.39%)</title><rect x="1045.4" y="307.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1048.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (86 samples, 0.39%)</title><rect x="1045.4" y="291.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1048.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (74 samples, 0.33%)</title><rect x="1046.0" y="275.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1049.0" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (16 samples, 0.07%)</title><rect x="1050.2" y="515.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1053.2" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,468 samples, 6.57%)</title><rect x="1051.0" y="563.0" width="77.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1054.0" y="574.0">java/util..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,460 samples, 6.54%)</title><rect x="1051.5" y="547.0" width="77.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1054.5" y="558.0">java/util..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (48 samples, 0.21%)</title><rect x="1053.2" y="531.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1056.2" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 0.08%)</title><rect x="1054.7" y="515.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.7" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,379 samples, 6.17%)</title><rect x="1055.7" y="531.0" width="72.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.7" y="542.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,348 samples, 6.04%)</title><rect x="1057.3" y="515.0" width="71.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1060.3" y="526.0">java/uti..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,333 samples, 5.97%)</title><rect x="1057.9" y="499.0" width="70.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1060.9" y="510.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,316 samples, 5.89%)</title><rect x="1058.8" y="483.0" width="69.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1061.8" y="494.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (950 samples, 4.25%)</title><rect x="1059.2" y="467.0" width="50.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1062.2" y="478.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (58 samples, 0.26%)</title><rect x="1060.8" y="451.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1063.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (863 samples, 3.86%)</title><rect x="1063.8" y="451.0" width="45.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1066.8" y="462.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.next (861 samples, 3.86%)</title><rect x="1063.9" y="435.0" width="45.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1066.9" y="446.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable$SSTableIterator.hasNext (9 samples, 0.04%)</title><rect x="1063.9" y="419.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1066.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.transform (852 samples, 3.81%)</title><rect x="1064.4" y="419.0" width="45.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1067.4" y="430.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.keyAt (339 samples, 1.52%)</title><rect x="1064.6" y="403.0" width="17.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1067.6" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (245 samples, 1.10%)</title><rect x="1065.0" y="387.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1068.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (245 samples, 1.10%)</title><rect x="1065.0" y="371.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (200 samples, 0.90%)</title><rect x="1067.4" y="355.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.4" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (198 samples, 0.89%)</title><rect x="1067.5" y="339.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1070.5" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (142 samples, 0.64%)</title><rect x="1070.5" y="323.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1073.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (112 samples, 0.50%)</title><rect x="1072.1" y="307.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1075.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (112 samples, 0.50%)</title><rect x="1072.1" y="291.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1075.1" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (107 samples, 0.48%)</title><rect x="1072.3" y="275.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1075.3" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (31 samples, 0.14%)</title><rect x="1075.5" y="259.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1078.5" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.04%)</title><rect x="1076.7" y="243.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1079.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.04%)</title><rect x="1076.7" y="227.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1079.7" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.04%)</title><rect x="1076.7" y="211.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1079.7" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (17 samples, 0.08%)</title><rect x="1077.1" y="259.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1080.1" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.03%)</title><rect x="1077.6" y="243.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1080.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.03%)</title><rect x="1077.6" y="227.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1080.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.03%)</title><rect x="1077.6" y="211.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1080.6" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (85 samples, 0.38%)</title><rect x="1078.0" y="387.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1081.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (35 samples, 0.16%)</title><rect x="1080.6" y="371.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1083.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (35 samples, 0.16%)</title><rect x="1080.6" y="355.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1083.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (19 samples, 0.09%)</title><rect x="1081.5" y="339.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1084.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (19 samples, 0.09%)</title><rect x="1081.5" y="323.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1084.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.05%)</title><rect x="1081.7" y="307.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1084.7" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.05%)</title><rect x="1081.7" y="291.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1084.7" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.04%)</title><rect x="1081.9" y="275.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1084.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.04%)</title><rect x="1081.9" y="259.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1084.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.rowAt (363 samples, 1.63%)</title><rect x="1082.5" y="403.0" width="19.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1085.5" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (164 samples, 0.73%)</title><rect x="1084.9" y="387.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1087.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (164 samples, 0.73%)</title><rect x="1084.9" y="371.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1087.9" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (152 samples, 0.68%)</title><rect x="1085.5" y="355.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1088.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (144 samples, 0.64%)</title><rect x="1086.0" y="339.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1089.0" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (136 samples, 0.61%)</title><rect x="1086.4" y="323.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1089.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (136 samples, 0.61%)</title><rect x="1086.4" y="307.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1089.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (136 samples, 0.61%)</title><rect x="1086.4" y="291.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1089.4" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (60 samples, 0.27%)</title><rect x="1089.3" y="275.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1092.3" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.03%)</title><rect x="1089.3" y="259.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1092.3" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.03%)</title><rect x="1089.3" y="243.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1092.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.03%)</title><rect x="1089.4" y="227.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1092.4" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.03%)</title><rect x="1089.4" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1092.4" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (52 samples, 0.23%)</title><rect x="1089.7" y="259.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1092.7" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (52 samples, 0.23%)</title><rect x="1089.7" y="243.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1092.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (27 samples, 0.12%)</title><rect x="1090.8" y="227.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1093.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (21 samples, 0.09%)</title><rect x="1092.5" y="275.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1095.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (105 samples, 0.47%)</title><rect x="1093.6" y="387.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1096.6" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (94 samples, 0.42%)</title><rect x="1094.2" y="371.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1097.2" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (94 samples, 0.42%)</title><rect x="1094.2" y="355.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1097.2" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (92 samples, 0.41%)</title><rect x="1094.3" y="339.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1097.3" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (92 samples, 0.41%)</title><rect x="1094.3" y="323.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1097.3" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (92 samples, 0.41%)</title><rect x="1094.3" y="307.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1097.3" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (61 samples, 0.27%)</title><rect x="1094.5" y="291.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1097.5" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (19 samples, 0.09%)</title><rect x="1094.6" y="275.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.6" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (19 samples, 0.09%)</title><rect x="1094.6" y="259.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1097.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (19 samples, 0.09%)</title><rect x="1094.6" y="243.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1097.6" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.06%)</title><rect x="1094.9" y="227.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1097.9" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (40 samples, 0.18%)</title><rect x="1095.6" y="275.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1098.6" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (40 samples, 0.18%)</title><rect x="1095.6" y="259.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1098.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (40 samples, 0.18%)</title><rect x="1095.6" y="243.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1098.6" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (27 samples, 0.12%)</title><rect x="1096.0" y="227.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1099.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.03%)</title><rect x="1097.4" y="227.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1100.4" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (26 samples, 0.12%)</title><rect x="1097.7" y="291.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1100.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (34 samples, 0.15%)</title><rect x="1099.1" y="387.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1102.1" y="398.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (23 samples, 0.10%)</title><rect x="1099.1" y="371.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1102.1" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.04%)</title><rect x="1100.3" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1103.3" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.02%)</title><rect x="1100.9" y="387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1103.9" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.02%)</title><rect x="1100.9" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1103.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.02%)</title><rect x="1100.9" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1103.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.02%)</title><rect x="1100.9" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1103.9" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.04%)</title><rect x="1101.2" y="387.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1104.2" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.04%)</title><rect x="1101.2" y="371.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1104.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.04%)</title><rect x="1101.2" y="355.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1104.2" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.04%)</title><rect x="1101.2" y="339.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1104.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.timestampAt (95 samples, 0.43%)</title><rect x="1101.7" y="403.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1104.7" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (92 samples, 0.41%)</title><rect x="1101.8" y="387.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1104.8" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (92 samples, 0.41%)</title><rect x="1101.8" y="371.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1104.8" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (72 samples, 0.32%)</title><rect x="1102.9" y="355.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1105.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (69 samples, 0.31%)</title><rect x="1103.0" y="339.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1106.0" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (66 samples, 0.30%)</title><rect x="1103.2" y="323.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1106.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (60 samples, 0.27%)</title><rect x="1103.5" y="307.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1106.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (57 samples, 0.26%)</title><rect x="1103.7" y="291.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1106.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (46 samples, 0.21%)</title><rect x="1104.2" y="275.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1107.2" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.06%)</title><rect x="1104.9" y="259.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1107.9" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.03%)</title><rect x="1105.3" y="243.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1108.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.03%)</title><rect x="1105.3" y="227.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1108.3" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.03%)</title><rect x="1105.3" y="211.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1108.3" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (20 samples, 0.09%)</title><rect x="1105.6" y="259.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1108.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/SSTable.valueAt (51 samples, 0.23%)</title><rect x="1106.7" y="403.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1109.7" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (26 samples, 0.12%)</title><rect x="1106.8" y="387.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1109.8" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (26 samples, 0.12%)</title><rect x="1106.8" y="371.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1109.8" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (26 samples, 0.12%)</title><rect x="1106.8" y="355.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1109.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (26 samples, 0.12%)</title><rect x="1106.8" y="339.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1109.8" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (26 samples, 0.12%)</title><rect x="1106.8" y="323.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1109.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (26 samples, 0.12%)</title><rect x="1106.8" y="307.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1109.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (26 samples, 0.12%)</title><rect x="1106.8" y="291.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1109.8" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (26 samples, 0.12%)</title><rect x="1106.8" y="275.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1109.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (23 samples, 0.10%)</title><rect x="1106.9" y="259.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1109.9" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.02%)</title><rect x="1107.9" y="243.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1110.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.02%)</title><rect x="1107.9" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1110.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.02%)</title><rect x="1107.9" y="211.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1110.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (23 samples, 0.10%)</title><rect x="1108.2" y="387.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1111.2" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (23 samples, 0.10%)</title><rect x="1108.2" y="371.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1111.2" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (23 samples, 0.10%)</title><rect x="1108.2" y="355.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1111.2" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (23 samples, 0.10%)</title><rect x="1108.2" y="339.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1111.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (23 samples, 0.10%)</title><rect x="1108.2" y="323.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1111.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (23 samples, 0.10%)</title><rect x="1108.2" y="307.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1111.2" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (23 samples, 0.10%)</title><rect x="1108.2" y="291.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1111.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.04%)</title><rect x="1108.2" y="275.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1111.2" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.04%)</title><rect x="1108.2" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1111.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.04%)</title><rect x="1108.2" y="243.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1111.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.03%)</title><rect x="1108.3" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1111.3" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (15 samples, 0.07%)</title><rect x="1108.6" y="275.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1111.6" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (15 samples, 0.07%)</title><rect x="1108.6" y="259.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1111.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$67/498267487.compare (358 samples, 1.60%)</title><rect x="1109.4" y="467.0" width="18.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.compareTo (350 samples, 1.57%)</title><rect x="1109.8" y="451.0" width="18.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1112.8" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (350 samples, 1.57%)</title><rect x="1109.8" y="435.0" width="18.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1112.8" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (346 samples, 1.55%)</title><rect x="1110.1" y="419.0" width="18.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1113.1" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (6 samples, 0.03%)</title><rect x="1110.1" y="403.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1113.1" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (6 samples, 0.03%)</title><rect x="1110.1" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1113.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (6 samples, 0.03%)</title><rect x="1110.1" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1113.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (5 samples, 0.02%)</title><rect x="1110.1" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1113.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.02%)</title><rect x="1110.1" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1113.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.02%)</title><rect x="1110.1" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1113.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.02%)</title><rect x="1110.1" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1113.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.02%)</title><rect x="1110.1" y="291.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1113.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$79/2068067262.compare (340 samples, 1.52%)</title><rect x="1110.4" y="403.0" width="17.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1113.4" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (340 samples, 1.52%)</title><rect x="1110.4" y="387.0" width="17.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1113.4" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$77/1404537422.compare (337 samples, 1.51%)</title><rect x="1110.5" y="371.0" width="17.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1113.5" y="382.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.03%)</title><rect x="1111.0" y="355.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1114.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (322 samples, 1.44%)</title><rect x="1111.3" y="355.0" width="17.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1114.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (115 samples, 0.51%)</title><rect x="1111.9" y="339.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1114.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (115 samples, 0.51%)</title><rect x="1111.9" y="323.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1114.9" y="334.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (68 samples, 0.30%)</title><rect x="1112.8" y="307.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1115.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (25 samples, 0.11%)</title><rect x="1113.7" y="291.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1116.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.04%)</title><rect x="1113.7" y="275.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1116.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (17 samples, 0.08%)</title><rect x="1114.1" y="275.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1117.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (24 samples, 0.11%)</title><rect x="1115.1" y="291.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1118.1" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (13 samples, 0.06%)</title><rect x="1116.5" y="307.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1119.5" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (11 samples, 0.05%)</title><rect x="1116.6" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1119.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (14 samples, 0.06%)</title><rect x="1117.2" y="307.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1120.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow$$Lambda$76/1614006218.apply (195 samples, 0.87%)</title><rect x="1117.9" y="339.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1120.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (191 samples, 0.86%)</title><rect x="1118.1" y="323.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1121.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (129 samples, 0.58%)</title><rect x="1118.5" y="307.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1121.5" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (128 samples, 0.57%)</title><rect x="1118.5" y="291.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1121.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (30 samples, 0.13%)</title><rect x="1119.4" y="275.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1122.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (78 samples, 0.35%)</title><rect x="1121.0" y="275.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1124.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (59 samples, 0.26%)</title><rect x="1122.0" y="259.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1125.0" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (43 samples, 0.19%)</title><rect x="1122.8" y="243.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1125.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (31 samples, 0.14%)</title><rect x="1123.5" y="227.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1126.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (31 samples, 0.14%)</title><rect x="1123.5" y="211.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.5" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.07%)</title><rect x="1124.3" y="195.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1127.3" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.03%)</title><rect x="1124.8" y="179.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1127.8" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.03%)</title><rect x="1124.8" y="163.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1127.8" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.03%)</title><rect x="1124.8" y="147.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.8" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.03%)</title><rect x="1124.8" y="131.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1127.8" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (56 samples, 0.25%)</title><rect x="1125.3" y="307.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1128.3" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (43 samples, 0.19%)</title><rect x="1126.0" y="291.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1129.0" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (39 samples, 0.17%)</title><rect x="1126.2" y="275.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1129.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (33 samples, 0.15%)</title><rect x="1126.5" y="259.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1129.5" y="270.0"></text>
</g>
<g>
<title>itable stub (90 samples, 0.40%)</title><rect x="1128.6" y="579.0" width="4.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1131.6" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (66 samples, 0.30%)</title><rect x="1133.4" y="579.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1136.4" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (66 samples, 0.30%)</title><rect x="1133.4" y="563.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1136.4" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.03%)</title><rect x="1135.5" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1138.5" y="558.0"></text>
</g>
<g>
<title>vtable stub (18 samples, 0.08%)</title><rect x="1135.9" y="547.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1138.9" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (31 samples, 0.14%)</title><rect x="1136.8" y="579.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1139.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$70/394456195.apply (293 samples, 1.31%)</title><rect x="1138.5" y="579.0" width="15.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1141.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (291 samples, 1.30%)</title><rect x="1138.6" y="563.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1141.6" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (258 samples, 1.16%)</title><rect x="1138.9" y="547.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1141.9" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (255 samples, 1.14%)</title><rect x="1139.1" y="531.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1142.1" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (253 samples, 1.13%)</title><rect x="1139.2" y="515.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1142.2" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (250 samples, 1.12%)</title><rect x="1139.3" y="499.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1142.3" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (217 samples, 0.97%)</title><rect x="1141.1" y="483.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1144.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (211 samples, 0.94%)</title><rect x="1141.4" y="467.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1144.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (210 samples, 0.94%)</title><rect x="1141.4" y="451.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1144.4" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (180 samples, 0.81%)</title><rect x="1143.0" y="435.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1146.0" y="446.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (51 samples, 0.23%)</title><rect x="1147.7" y="419.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1150.7" y="430.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (46 samples, 0.21%)</title><rect x="1147.9" y="403.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1150.9" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.04%)</title><rect x="1150.4" y="419.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1153.4" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.04%)</title><rect x="1150.4" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1153.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.04%)</title><rect x="1150.4" y="387.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.4" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.04%)</title><rect x="1150.4" y="371.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1153.4" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (32 samples, 0.14%)</title><rect x="1150.8" y="419.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1153.8" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (10 samples, 0.04%)</title><rect x="1152.0" y="403.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1155.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.04%)</title><rect x="1152.0" y="387.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1155.0" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.04%)</title><rect x="1152.0" y="371.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1155.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (26 samples, 0.12%)</title><rect x="1152.5" y="547.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1155.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (26 samples, 0.12%)</title><rect x="1152.5" y="531.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1155.5" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (26 samples, 0.12%)</title><rect x="1152.5" y="515.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1155.5" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (26 samples, 0.12%)</title><rect x="1152.5" y="499.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1155.5" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.03%)</title><rect x="1153.6" y="483.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1156.6" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Table$$Lambda$71/822101732.apply (6 samples, 0.03%)</title><rect x="1154.0" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1157.0" y="606.0"></text>
</g>
<g>
<title>unsafe_arraycopy (32 samples, 0.14%)</title><rect x="1154.3" y="595.0" width="1.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1157.3" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (8 samples, 0.04%)</title><rect x="1156.0" y="611.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1159.0" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (339 samples, 1.52%)</title><rect x="1156.6" y="659.0" width="17.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1159.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (105 samples, 0.47%)</title><rect x="1156.9" y="643.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1159.9" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (51 samples, 0.23%)</title><rect x="1159.7" y="627.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1162.7" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (18 samples, 0.08%)</title><rect x="1161.4" y="611.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1164.4" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (229 samples, 1.03%)</title><rect x="1162.4" y="643.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1165.4" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO$$Lambda$74/530395260.apply (224 samples, 1.00%)</title><rect x="1162.7" y="627.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1165.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/PersistentDAO.lambda$iterator$0 (223 samples, 1.00%)</title><rect x="1162.7" y="611.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1165.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (9 samples, 0.04%)</title><rect x="1162.7" y="595.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1165.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/TableRow.getKey (157 samples, 0.70%)</title><rect x="1163.2" y="595.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1166.2" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (58 samples, 0.26%)</title><rect x="1163.5" y="579.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1166.5" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (58 samples, 0.26%)</title><rect x="1163.5" y="563.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1166.5" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (45 samples, 0.20%)</title><rect x="1164.2" y="547.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1167.2" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (42 samples, 0.19%)</title><rect x="1164.3" y="531.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1167.3" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (41 samples, 0.18%)</title><rect x="1164.4" y="515.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1167.4" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (41 samples, 0.18%)</title><rect x="1164.4" y="499.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1167.4" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (41 samples, 0.18%)</title><rect x="1164.4" y="483.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1167.4" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (40 samples, 0.18%)</title><rect x="1164.4" y="467.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1167.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (7 samples, 0.03%)</title><rect x="1165.5" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1168.5" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.03%)</title><rect x="1165.9" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1168.9" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.03%)</title><rect x="1166.0" y="435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1169.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.03%)</title><rect x="1166.0" y="419.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1169.0" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.03%)</title><rect x="1166.0" y="403.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1169.0" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.02%)</title><rect x="1166.3" y="451.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1169.3" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.02%)</title><rect x="1166.3" y="435.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1169.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.02%)</title><rect x="1166.3" y="419.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1169.3" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.02%)</title><rect x="1166.3" y="403.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1169.3" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (94 samples, 0.42%)</title><rect x="1166.5" y="579.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1169.5" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (94 samples, 0.42%)</title><rect x="1166.5" y="563.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1169.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (94 samples, 0.42%)</title><rect x="1166.5" y="547.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1169.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (94 samples, 0.42%)</title><rect x="1166.5" y="531.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1169.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igorlo/Value.getData (57 samples, 0.26%)</title><rect x="1171.5" y="595.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1174.5" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (54 samples, 0.24%)</title><rect x="1171.7" y="579.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1174.7" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (54 samples, 0.24%)</title><rect x="1171.7" y="563.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1174.7" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.03%)</title><rect x="1172.2" y="547.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1175.2" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (38 samples, 0.17%)</title><rect x="1172.5" y="547.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1175.5" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (38 samples, 0.17%)</title><rect x="1172.5" y="531.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1175.5" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (35 samples, 0.16%)</title><rect x="1172.7" y="515.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1175.7" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.16%)</title><rect x="1172.7" y="499.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1175.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.16%)</title><rect x="1172.7" y="483.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1175.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (35 samples, 0.16%)</title><rect x="1172.7" y="467.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1175.7" y="478.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (7 samples, 0.03%)</title><rect x="1173.7" y="451.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1176.7" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.02%)</title><rect x="1174.0" y="451.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1177.0" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.02%)</title><rect x="1174.0" y="435.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1177.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.02%)</title><rect x="1174.0" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1177.0" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.02%)</title><rect x="1174.0" y="403.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1177.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (42 samples, 0.19%)</title><rect x="1174.5" y="659.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1177.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igorlo/StorageSession.bufferToArray (60 samples, 0.27%)</title><rect x="1176.7" y="691.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1179.7" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (13 samples, 0.06%)</title><rect x="1176.9" y="675.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (11 samples, 0.05%)</title><rect x="1177.0" y="659.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1180.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.04%)</title><rect x="1177.2" y="643.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1180.2" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (8 samples, 0.04%)</title><rect x="1177.2" y="627.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1180.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (7 samples, 0.03%)</title><rect x="1177.2" y="611.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1180.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (7 samples, 0.03%)</title><rect x="1177.2" y="595.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1180.2" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (44 samples, 0.20%)</title><rect x="1177.6" y="675.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1180.6" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (43 samples, 0.19%)</title><rect x="1177.6" y="659.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1180.6" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (43 samples, 0.19%)</title><rect x="1177.6" y="643.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1180.6" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (43 samples, 0.19%)</title><rect x="1177.6" y="627.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1180.6" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (43 samples, 0.19%)</title><rect x="1177.6" y="611.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1180.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (43 samples, 0.19%)</title><rect x="1177.6" y="595.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1180.6" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (43 samples, 0.19%)</title><rect x="1177.6" y="579.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.07%)</title><rect x="1177.7" y="563.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.07%)</title><rect x="1177.7" y="547.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.05%)</title><rect x="1177.9" y="531.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.04%)</title><rect x="1178.0" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1181.0" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (26 samples, 0.12%)</title><rect x="1178.5" y="563.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (26 samples, 0.12%)</title><rect x="1178.5" y="547.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1181.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (17 samples, 0.08%)</title><rect x="1178.7" y="531.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1181.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.02%)</title><rect x="1179.6" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.02%)</title><rect x="1179.6" y="515.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1182.6" y="526.0"></text>
</g>
<g>
<title>start_thread (188 samples, 0.84%)</title><rect x="1180.1" y="867.0" width="9.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1183.1" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (188 samples, 0.84%)</title><rect x="1180.1" y="851.0" width="9.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1183.1" y="862.0"></text>
</g>
<g>
<title>Thread::call_run() (188 samples, 0.84%)</title><rect x="1180.1" y="835.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.1" y="846.0"></text>
</g>
<g>
<title>GangWorker::loop() (99 samples, 0.44%)</title><rect x="1180.1" y="819.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="830.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (82 samples, 0.37%)</title><rect x="1180.3" y="803.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (37 samples, 0.17%)</title><rect x="1180.3" y="787.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (23 samples, 0.10%)</title><rect x="1180.3" y="771.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="782.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (18 samples, 0.08%)</title><rect x="1180.5" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (14 samples, 0.06%)</title><rect x="1180.8" y="739.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>SpinPause (12 samples, 0.05%)</title><rect x="1181.6" y="771.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1184.6" y="782.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (8 samples, 0.04%)</title><rect x="1182.6" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (7 samples, 0.03%)</title><rect x="1182.6" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (5 samples, 0.02%)</title><rect x="1182.7" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (30 samples, 0.13%)</title><rect x="1183.0" y="787.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (17 samples, 0.08%)</title><rect x="1183.3" y="771.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (16 samples, 0.07%)</title><rect x="1183.3" y="755.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="766.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (15 samples, 0.07%)</title><rect x="1183.4" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="750.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (14 samples, 0.06%)</title><rect x="1183.4" y="723.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="734.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (8 samples, 0.04%)</title><rect x="1184.2" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="782.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (10 samples, 0.04%)</title><rect x="1184.8" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="814.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (9 samples, 0.04%)</title><rect x="1184.8" y="787.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (61 samples, 0.27%)</title><rect x="1185.4" y="819.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="830.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (61 samples, 0.27%)</title><rect x="1185.4" y="803.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.4" y="814.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 0.27%)</title><rect x="1185.4" y="787.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="798.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 0.27%)</title><rect x="1185.4" y="771.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.4" y="782.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (59 samples, 0.26%)</title><rect x="1185.4" y="755.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.4" y="766.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (59 samples, 0.26%)</title><rect x="1185.4" y="739.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="750.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (31 samples, 0.14%)</title><rect x="1185.4" y="723.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 0.09%)</title><rect x="1185.9" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.02%)</title><rect x="1186.1" y="691.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.02%)</title><rect x="1186.7" y="691.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 0.09%)</title><rect x="1187.0" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (12 samples, 0.05%)</title><rect x="1187.2" y="707.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.03%)</title><rect x="1187.5" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.03%)</title><rect x="1187.5" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.02%)</title><rect x="1187.6" y="659.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.04%)</title><rect x="1188.0" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.04%)</title><rect x="1188.0" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.04%)</title><rect x="1188.0" y="691.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.04%)</title><rect x="1188.0" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.04%)</title><rect x="1188.0" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.04%)</title><rect x="1188.0" y="643.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.02%)</title><rect x="1188.0" y="627.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.02%)</title><rect x="1188.0" y="611.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.02%)</title><rect x="1188.0" y="595.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.02%)</title><rect x="1188.0" y="579.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.02%)</title><rect x="1188.0" y="563.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.02%)</title><rect x="1188.0" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.02%)</title><rect x="1188.0" y="531.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.02%)</title><rect x="1188.0" y="515.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.02%)</title><rect x="1188.0" y="499.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.02%)</title><rect x="1188.0" y="483.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="494.0"></text>
</g>
<g>
<title>VMThread::run() (27 samples, 0.12%)</title><rect x="1188.6" y="819.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.6" y="830.0"></text>
</g>
<g>
<title>VMThread::loop() (26 samples, 0.12%)</title><rect x="1188.6" y="803.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.6" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (5 samples, 0.02%)</title><rect x="1188.7" y="787.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.7" y="798.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (17 samples, 0.08%)</title><rect x="1188.9" y="787.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="798.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (17 samples, 0.08%)</title><rect x="1188.9" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.9" y="782.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (17 samples, 0.08%)</title><rect x="1188.9" y="755.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (11 samples, 0.05%)</title><rect x="1189.0" y="739.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
</g>
</svg>
